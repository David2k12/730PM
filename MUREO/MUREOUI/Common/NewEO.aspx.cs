using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Data;
using MUREOBAL;
using MUREOPROP;
using System.Configuration;
using System.Data.SqlClient;
using System.Collections;
using System.Web.Mail;
using System.Text;

namespace MUREOUI.Common
{
    public partial class NewEO : System.Web.UI.Page
    {
        clsSecurity objSecurity = new clsSecurity();
        string script = string.Empty;
        string Script = string.Empty;
        string strDateTime = string.Empty;
        string strDateTime1 = string.Empty;
        private static ArrayList hif = new ArrayList();
        private static ArrayList arCostSheet = new ArrayList();
        private static ArrayList arFormulaCardInfo = new ArrayList();
        private static ArrayList arTestPlans = new ArrayList();
        private static ArrayList arLabSamples = new ArrayList();
        private static ArrayList arProdTestFlowMatrix = new ArrayList();
        private static ArrayList arOtherSupp = new ArrayList();
        private static ArrayList arActualCostSheet = new ArrayList();
        private static ArrayList arTestPlaneedused = new ArrayList();
        private static ArrayList arQAFinal = new ArrayList();
        private static ArrayList arIntialLearningCloseOut = new ArrayList();
        private static ArrayList arCloseOutReportCloseOut = new ArrayList();
        SqlParameter[] paramOut = null;
        int intAttachResult;
        int intStripthePath;
        int fSize;
        DataTable dtPSRA = null;
        DataTable dtGCAS = null;
        byte[] bytContent = null;
        string sContentType = string.Empty;
        EOBA objEOBA = new EOBA();

        protected void Page_Load(object sender, EventArgs e)
        {
            if (ViewState["lstdis"] != null)
            {
                foreach (ListItem li in lbEOBrandsDB.Items)
                {
                    li.Attributes.Add("disabled", "disabled");
                }
                foreach (ListItem li in lbEOEventsDB.Items)
                {
                    li.Attributes.Add("disabled", "disabled");
                }
            }
            buttonAttributes();

            //Code Added by David
            GetHiddenFieldValues();
         
            if (Request.QueryString["EOID"] != null)
            {
                if ((rblProductConsumers.Items[0].Selected == true) && (rblProductApproved.Items[1].Selected == true))
                {
                    divPSRAAddedRawMaterials.Style.Add("display", "block");
                }
                else
                {
                    rblRawMaterialsQ1.ClearSelection();
                    rblRawMaterialsQ2.ClearSelection();
                    rblRawMaterialsQ3.ClearSelection();
                    rblRawMaterialsQ4.ClearSelection();
                    divPSRAAddedRawMaterials.Style.Add("display", "none");
                }

                if ((rblFinalProductConsumerOption.Items[0].Selected == true) && (rblFinalProductApprovedOption.Items[1].Selected == true))
                {
                    tblPSRAFinal2.Style.Add("display", "block");
                }
                else
                {

                    rblFinalRawMaterialsQ1.ClearSelection();
                    rblFinalRawMaterialsQ2.ClearSelection();
                    rblFinalRawMaterialsQ3.ClearSelection();
                    rblFinalRawMaterialsQ4.ClearSelection();
                    tblPSRAFinal2.Style.Add("display", "none");
                }
            }

            if (!Page.IsPostBack)
            {
                if (Request.QueryString["EOID"] == null)
                {
                    lblSmartClearanceDBText.Visible = true;
                    lblSmartClearanceDB.Visible = true;
                    lblSmartClearanceText.Visible = true;
                    lblSmartClearance.Visible = true;
                    trMaterialsBrandsNewRow1.Visible = true;
                    divMaterialsBrandsNewRow2.Style.Add("display", "block");
                    divPSRAAdded.Style.Add("display", "block");
                    PreliminaryMsg2.Visible = false;
                    imgPreRoute.Attributes.Add("OnClick", "javascript: PreRouteMandatoryPCR();");//'for Preliminary Routing Mandatory Fields - PCR.
                    lnkbeforeFinTabRouApp.Attributes.Add("OnClick", "javascript:TwotabRouteMandatoryPCR();");
                    if ((rblProductConsumers.Items[0].Selected == true) && (rblProductApproved.Items[1].Selected == true))
                    {
                        divPSRAAddedRawMaterials.Style.Add("display", "block");
                    }
                    else
                    {
                        rblRawMaterialsQ1.ClearSelection();
                        rblRawMaterialsQ2.ClearSelection();
                        rblRawMaterialsQ3.ClearSelection();
                        rblRawMaterialsQ4.ClearSelection();
                        divPSRAAddedRawMaterials.Style.Add("display", "none");
                    }

                    //'Final Radio Buttons

                    if (Request.QueryString["EOID"] == null)
                    {
                        if ((rblFinalProductConsumerOption.Items[0].Selected == true) && (rblFinalProductApprovedOption.Items[1].Selected = true))
                        {
                            tblPSRAFinal2.Style.Add("display", "block");
                        }
                        else
                        {
                            rblFinalRawMaterialsQ1.ClearSelection();
                            rblFinalRawMaterialsQ2.ClearSelection();
                            rblFinalRawMaterialsQ3.ClearSelection();
                            rblFinalRawMaterialsQ4.ClearSelection();
                            tblPSRAFinal2.Style.Add("display", "none");
                        }
                    }
                }
                else
                {
                    imgPreRoute.Attributes.Add("OnClick", "javascript: PreRouteMandatory();"); //for Preliminary Routing Mandatory Fields.
                    lnkbeforeFinTabRouApp.Attributes.Add("OnClick", "javascript:TwotabRouteMandatory();");
                    lblSmartClearanceDBText.Visible = false;
                    lblSmartClearanceDB.Visible = false;
                    lblSmartClearanceText.Visible = false;
                    lblSmartClearance.Visible = false;
                    trMaterialsBrandsNewRow1.Visible = false;
                    divMaterialsBrandsNewRow2.Style.Add("display", "none");
                    PreliminaryMsg2.Visible = true;
                }
            }

            //'To check Active /In Active EO's.If  EO is In Active then it should be navigate to home page.
            try
            {

                if (Request.QueryString["EOID"] != null)
                {

                    DataSet dsmandatory = new DataSet();

                    if (objEOBA.GETEOMandatory(Convert.ToInt32(Request.QueryString["EOID"]), ref dsmandatory))
                    {
                        if (dsmandatory.Tables[0].Rows.Count != 0)
                        {
                            if ((dsmandatory.Tables[0].Rows[0]["Status"]).ToString().Trim().ToUpper() == "I")
                            {
                                //string script1 = null;
                                //script1 = "<script>alert('EO/Site Test has been cancelled.');window.navigate('Home.aspx');</script> ";
                                //Page.RegisterStartupScript("clientscript", script1);
                                ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "alert('EO/Site Test has been cancelled.');window.location='Home.aspx';", true);
                                return;
                            }

                            ViewState["EOIDFlag"] = dsmandatory.Tables[0].Rows[0]["IsNewEO"];
                            if ((ViewState["EOIDFlag"] != null) && (ViewState["EOIDFlag"].ToString() == "1"))
                            {
                                imgPreRoute.Attributes.Add("OnClick", "javascript: PreRouteMandatoryPCR();");
                                lnkbeforeFinTabRouApp.Attributes.Add("OnClick", "javascript:TwotabRouteMandatoryPCR();");
                                lblSmartClearanceDBText.Visible = true;
                                lblSmartClearanceDB.Visible = true;
                                lblSmartClearanceText.Visible = true;
                                lblSmartClearance.Visible = true;
                                trMaterialsBrandsNewRow1.Visible = true;
                                divMaterialsBrandsNewRow2.Style.Add("display", "block");
                                PreliminaryMsg2.Visible = false;
                                TRPSRAChanged.Visible = true;
                                divPSRAAdded.Style.Add("display", "block");
                                divPSRARemoved.Style.Add("display", "none");
                                trMaterialsBrandsNewRow1.Visible = true;
                                divMaterialsBrandsNewRow2.Style.Add("display", "block");

                                if ((rblProductConsumers.Items[0].Selected == true) && (rblProductApproved.Items[1].Selected == true))
                                {
                                    divPSRAAddedRawMaterials.Style.Add("display", "block");
                                }
                                else
                                {
                                    rblRawMaterialsQ1.ClearSelection();
                                    rblRawMaterialsQ2.ClearSelection();
                                    rblRawMaterialsQ3.ClearSelection();
                                    rblRawMaterialsQ4.ClearSelection();
                                    divPSRAAddedRawMaterials.Style.Add("display", "none");
                                }


                                if (lblReadonlyPSR1.Text == "Yes" && lblReadonlyPSR2.Text == "No")
                                { }
                                else
                                    TRPSRAChanged1.Visible = false;

                                // Final Radio Buttons
                                if ((rblFinalProductConsumerOption.Items[0].Selected == true) && (rblFinalProductApprovedOption.Items[1].Selected == true))
                                {
                                    tblPSRAFinal2.Style.Add("display", "block");
                                }
                                else
                                {
                                    rblFinalRawMaterialsQ1.ClearSelection();
                                    rblFinalRawMaterialsQ2.ClearSelection();
                                    rblFinalRawMaterialsQ3.ClearSelection();
                                    rblFinalRawMaterialsQ4.ClearSelection();
                                    tblPSRAFinal2.Style.Add("display", "none");
                                }

                            }
                            else
                            {
                                lblSmartClearanceDBText.Visible = false;
                                lblSmartClearanceDB.Visible = false;
                                lblSmartClearanceText.Visible = false;
                                lblSmartClearance.Visible = false;
                                trMaterialsBrandsNewRow1.Visible = false;
                                divMaterialsBrandsNewRow2.Style.Add("display", "none");
                                PreliminaryMsg2.Visible = true;
                                TRPSRAChanged.Visible = false;
                                divPSRAAddedRawMaterials.Style.Add("display", "none");
                                divPSRARemoved.Style.Add("display", "block");

                                imgPreRoute.Attributes.Add("OnClick", "javascript: PreRouteMandatory();");// 'for Preliminary Routing Mandatory Fields.
                                lnkbeforeFinTabRouApp.Attributes.Add("OnClick", "javascript:TwotabRouteMandatory();");
                            }
                            // ViewState["EOIDFlag"] = intEOIDFlag;
                        }
                    }

                }
            }
            catch (Exception)
            {


            }
            //      'carryselectedBudgetCenter()
            //'To get server Name from web.config file

            ViewState["servername"] = ConfigurationSettings.AppSettings["ServerName"].ToString();

            trTowtabRoutePrelimData.Visible = false;
            clsSecurity objclsSecurity = new clsSecurity();
            string strUserRole = objclsSecurity.UserRole();
            ViewState["UserRole"] = strUserRole;
            imghome.Visible = false;
            if (strUserRole == "MUREO_Admin")
            {
                lnkAdmin.Visible = true;
                lblSysOwner.Visible = true;
                imgSysOwner.Visible = true;
                imgadmin.Visible = true;
                lblSysOwnerUsers.Visible = false;
            }
            else
            {
                imgSysOwner.Visible = true;
                imgadmin.Visible = false;
                lnkAdmin.Visible = false;
                lblSysOwnerUsers.Visible = true;
                lblSysOwner.Visible = false;

            }

            if (Request.QueryString["From"] != "ForEOLock")
            {
                if (strUserRole == "MUREO_Readers" || strUserRole == "Readers")
                {
                    Response.Redirect("../Common/Home.aspx");
                }

            }

            PreliminaryRevision.Visible = true;
            txtEOID.Text = Request.QueryString["EOID"];

            textBoxEOID.Text = Request.QueryString["EOID"];

            //'Plant ID for concurrence group
            if (ViewState["PlantID"] != null)
                txtPlantID.Text = ViewState["PlantID"].ToString();
            else
                txtPlantID.Text = String.Empty;


            buttonAttributes();
            txttest.Width = new Unit(0);
            txtPSRAtest.Width = new Unit(0);
            //Page.SmartNavigation = true;

            if (!Page.IsPostBack)
            {
                //string script = "<script>IsPopupBlocker();</script> ";
                //Page.RegisterStartupScript("clientscript", script);

                ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "IsPopupBlocker();", true);

                //'For EO lock for other users

                //'for 2 tab route
                ViewState["twoTabRoute"] = "N";
                ViewState["IsTwoTabRouting"] = String.Empty;

                //'jagan 16-12-07
                TxtAppYes.Text = "";
                txtGCASYESNOOptionValue.Text = "";
                txtPSRAYESNOOptionValue.Text = "";
                lblCoOrdinator.Text = objclsSecurity.UserName;

                try
                {
                    dgdGCASInfo.DataSource = null;
                    dgdGCASInfo.DataBind();
                }
                catch (Exception)
                {
                }

                lblStageLevel.Visible = true;
                dgdPSRAInfo.DataSource = null;
                dgdPSRAInfo.DataBind();

                imgPreRoute.Visible = true;
                imgPreFinalRoute.Visible = false;
                imgCloseOutRoute.Visible = false;

                imgbtnCopyToAnalyse.Visible = false;
                imgbtnCopyNew.Visible = false;

                lbCurrentStageDB.Text = "Preliminary";
                lbStatusDB.Text = "Draft";
                ViewState["printstage"] = "Preliminary";

                lblStatusType.Text = "Draft";
                btnFYI.Visible = false;
                //'jagan 16-12-07
                setUserCountrolDefaultVisibulityPriliminary();
                //'jagan 16-12-07
                fillDropdownValuesPriliminary();

                //'Mail EDit Approval Show Hide Begin

                if (Request.QueryString["EOID"] != null)
                {
                    if ((Request.QueryString["From"].ToString() == "MailEdit") || (Request.QueryString["From"].ToString() == "ForEOEdit"))
                    {
                        if ((ViewState["EOIDFlag"] != null) && (ViewState["EOIDFlag"].ToString() == "1"))
                        {
                            trProdRegulatedProductRAQ1.Visible = true;
                            trProdRegulatedProductRAQ2.Visible = true;
                            PSR1.Visible = false;
                            PSR2.Visible = false;
                            PSR3.Visible = false;
                            PSR4.Visible = false;
                            PSR5.Visible = false;
                            TRPSRAChanged.Visible = false;
                            TRPSRAChanged1.Visible = false;
                            divPSRARemoved.Style.Add("display", "none");
                            Label49.Visible = false;
                            if ((rblProductConsumers.Items[0].Selected == true) && (rblProductApproved.Items[1].Selected == true))
                            {
                                divPSRAAddedRawMaterials.Style.Add("display", "block");
                            }
                            else
                            {
                                rblRawMaterialsQ1.ClearSelection();
                                rblRawMaterialsQ2.ClearSelection();
                                rblRawMaterialsQ3.ClearSelection();
                                rblRawMaterialsQ4.ClearSelection();
                                divPSRAAddedRawMaterials.Style.Add("display", "none");
                            }
                            //'Final Radio Buttons
                            if ((rblFinalProductConsumerOption.Items[0].Selected == true) && (rblFinalProductApprovedOption.Items[1].Selected == true))
                            {
                                tblPSRAFinal2.Style.Add("display", "block");
                            }
                            else
                            {
                                rblFinalRawMaterialsQ1.ClearSelection();
                                rblFinalRawMaterialsQ2.ClearSelection();
                                rblFinalRawMaterialsQ3.ClearSelection();
                                rblFinalRawMaterialsQ4.ClearSelection();
                                tblPSRAFinal2.Style.Add("display", "none");
                            }

                        }
                        else
                        {
                            trProdRegulatedProductRAQ1.Visible = false;
                            trProdRegulatedProductRAQ2.Visible = false;
                            PSR1.Visible = true;
                            PSR2.Visible = true;
                            PSR3.Visible = true;
                            PSR4.Visible = true;
                            PSR5.Visible = true;
                            TRPSRAChanged.Visible = true;
                            TRPSRAChanged1.Visible = true;
                            if (lblReadonlyPSR1.Text == "Yes" && lblReadonlyPSR2.Text == "No")
                            { }
                            else
                            {
                                TRPSRAChanged1.Visible = false;
                            }
                            Label49.Visible = true;

                        }

                        string s;
                        string strLockState;
                        s = objclsSecurity.UserName;
                        ViewState["EOID"] = Request.QueryString["EOID"];
                        //'For EO lock for Other users

                        SqlParameter[] paramOut = null;
                        //strLockState = objEOBA.SET_EO_Check_And_Lock(Request.QueryString["EOID"], s);
                        //if (strLockState == "0")
                        //{
                        //    Response.Redirect("EOLocked.aspx?EOID=" & Request.QueryString["EOID"]);
                        //}

                        if (objEOBA.SET_EO_Check_And_Lock(Convert.ToInt32(Request.QueryString["EOID"]), s, ref paramOut))
                        {
                            if (Convert.ToInt32(paramOut[0].Value) == 0)
                            {
                                Response.Redirect("EOLocked.aspx?EOID=" + Request.QueryString["EOID"]);
                            }

                        }
                        if (!Page.IsPostBack)
                        {
                            if ((Request.QueryString["From"].ToString() == "ForEOEdit") || (Request.QueryString["From"].ToString() == "MailEdit"))
                            {

                                lockManData();
                                try
                                {
                                    if (Request.QueryString["Mig"].ToString() == "YES")
                                    {
                                        //string script2;
                                        //script2 = "<script>alert('Event(s) information is migrated successfully to EO.');</script>";
                                        //Page.RegisterStartupScript("clientscript2", script2);
                                        ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "alert('Event(s) information is migrated successfully to EO.');", true);
                                    }
                                }
                                catch (Exception)
                                {
                                }
                            }

                        }

                        //'imgbtnCopyToAnalyse.Visible = true
                        imgbtnCopyNew.Visible = false;
                        string strCurrentStage = string.Empty;
                        string strStatus = string.Empty;
                        string strEvents = string.Empty;
                        int intPlantID;
                        string strEOnum = string.Empty;
                        string strSAPIO = string.Empty;
                        //'Added on 01/20/2010 
                        //'For MUREO PCRs
                        //'By: David
                        string strSmartClearance;
                        DataSet ds = new DataSet();

                        if (objEOBA.GETEOMandatory(Convert.ToInt32(ViewState["EOID"]), ref ds))
                        {
                            if (ds.Tables.Count > 0)
                            {
                                if (ds.Tables[0].Rows.Count != 0)
                                {
                                    ViewState["IsTwoTabRouting"] = ds.Tables[0].Rows[0]["Two_Tab_Routing"]; //''Added by Murthy on 11 Nov 2008. This value used only in code added on 11 Nov 2008

                                    if (ds.Tables[0].Rows[0]["EO_Number"] != System.DBNull.Value)
                                    {
                                        strEOnum = ds.Tables[0].Rows[0]["EO_Number"].ToString();
                                        ViewState["EONum"] = ds.Tables[0].Rows[0]["EO_Number"];
                                    }
                                    else
                                    {
                                        strEOnum = "New EO";
                                        ViewState["EONum"] = "New EO";
                                    }

                                    if (ds.Tables[0].Rows[0]["SAP_IO_Number"] != DBNull.Value)
                                    {
                                        strSAPIO = ds.Tables[0].Rows[0]["SAP_IO_Number"].ToString();
                                        ViewState["SAPIONum"] = ds.Tables[0].Rows[0]["SAP_IO_Number"];
                                    }
                                    else
                                    {
                                        strSAPIO = "Not Assigned";
                                        ViewState["SAPIONum"] = "Not Assigned";
                                    }


                                    //'Added on 01/20/2010 
                                    //'For MUREO PCRs
                                    //'By: David
                                    if (ds.Tables[0].Rows[0]["SMART_Clearance_Number"] != DBNull.Value)
                                    {
                                        strSmartClearance = ds.Tables[0].Rows[0]["SMART_Clearance_Number"].ToString();
                                        ViewState["SmartClearanceNum"] = ds.Tables[0].Rows[0]["SMART_Clearance_Number"];
                                    }
                                    else
                                    {
                                        strSmartClearance = "0";
                                        ViewState["SmartClearanceNum"] = String.Empty;
                                    }


                                    if (ds.Tables[0].Rows[0]["Current_Stage"] != DBNull.Value)
                                    {
                                        strCurrentStage = ds.Tables[0].Rows[0]["Current_Stage"].ToString();
                                        ViewState["stage"] = ds.Tables[0].Rows[0]["Current_Stage"];
                                        ViewState["2tabEOstage"] = ds.Tables[0].Rows[0]["Current_Stage"].ToString();
                                    }
                                    else
                                    {
                                        strCurrentStage = String.Empty;
                                        ViewState["stage"] = String.Empty;
                                        ViewState["2tabEOstage"] = String.Empty;
                                    }

                                    if (ds.Tables[0].Rows[0]["Plant_ID"] != DBNull.Value)
                                    {
                                        intPlantID = Convert.ToInt32(ds.Tables[0].Rows[0]["Plant_ID"]);
                                        ViewState["PlantID"] = ds.Tables[0].Rows[0]["Plant_ID"];
                                    }
                                    else
                                    {

                                        intPlantID = 0;
                                        ViewState["PlantID"] = String.Empty;
                                    }


                                    if (ds.Tables[0].Rows[0]["EO_Title"] != DBNull.Value)
                                        ViewState["EOTitle"] = ds.Tables[0].Rows[0]["EO_Title"];
                                    else
                                        ViewState["EOTitle"] = String.Empty;


                                    if (ds.Tables[0].Rows[0]["Stage_Status"] != DBNull.Value)
                                    {
                                        if (Session["Status"] == null)
                                        {
                                            strStatus = ds.Tables[0].Rows[0]["Stage_Status"].ToString();
                                            ViewState["Status"] = ds.Tables[0].Rows[0]["Stage_Status"];
                                            ViewState["2tabEOstatus"] = ds.Tables[0].Rows[0]["Stage_Status"];
                                        }
                                        else
                                        {
                                            strStatus = Session["Status"].ToString();
                                            ViewState["Status"] = Session["Status"];
                                            ViewState["2tabEOstatus"] = ds.Tables[0].Rows[0]["Stage_Status"];
                                        }
                                    }
                                    else
                                    {
                                        strStatus = String.Empty;
                                        ViewState["Status"] = String.Empty;
                                    }
                                }

                                if (ds.Tables[1].Rows.Count != 0)
                                {
                                    for (int intRowCount = 0; intRowCount < ds.Tables[1].Rows.Count; intRowCount++)
                                    {
                                        if (strEvents == "")
                                        { strEvents = ds.Tables[1].Rows[intRowCount]["Event_ID"].ToString(); }
                                        else
                                        { strEvents = strEvents + "," + ds.Tables[1].Rows[intRowCount]["Event_ID"]; }
                                        ViewState["Events"] = strEvents;
                                    }

                                }
                                SetEditLockNewFields();
                            }

                        }

                        if (strEvents != "")
                        {
                            dgdMigratedEventInfo.Visible = true;
                            DataSet dsSeedDataByEventID = new DataSet();
                            int i;
                            FillMigrateEventInfo(strEvents);
                            if (objEOBA.GETEOSeedDataByEventIDs(strEvents, ref dsSeedDataByEventID))
                            {
                                if (dsSeedDataByEventID.Tables[0].Rows.Count != 0)
                                {
                                    if (dsSeedDataByEventID.Tables[0].Rows[0]["Paper_Making_Days"] != DBNull.Value)
                                        txtPaperMaking.Text = dsSeedDataByEventID.Tables[0].Rows[0]["Paper_Making_Days"].ToString();

                                    if (dsSeedDataByEventID.Tables[0].Rows[0]["Converting_Time_Days"] != DBNull.Value)
                                        txtConvertingTime.Text = dsSeedDataByEventID.Tables[0].Rows[0]["Converting_Time_Days"].ToString();
                                }

                            }
                        }

                        if ((ViewState["stage"].ToString().ToUpper() == "Preliminary".ToUpper()) && (ViewState["Status"].ToString().ToUpper() == "Draft".ToUpper()))
                        { }
                        else
                        { lnkbeforeFinTabRouApp.Visible = false; }

                        if (strCurrentStage.ToUpper() == "Preliminary".ToUpper() && strStatus.ToUpper() == "Draft".ToUpper())
                        { }
                        else
                        {
                            lnkConGrp.Visible = true;
                            dgrConcurenceGrp.Visible = true;
                            btnFYI.Visible = true;
                            if (btnTabFinal.ImageUrl == "../Images/final-over.gif")
                            {
                                lnkPreScreener.Visible = true;
                                dgrPrescrenners.Visible = true;
                            }
                        }

                        if (strCurrentStage.ToUpper() == "Preliminary".ToUpper() && strStatus.ToUpper() == "Draft".ToUpper())
                        {
                            ViewState["printstage"] = "Preliminary";
                            ViewState["LockMode"] = "NOTHING";
                            string strFUNAPPName = string.Empty;
                            DataSet dsTemp = new DataSet();

                            if (objEOBA.GET_EO_Preliminary(Convert.ToInt32(ViewState["EOID"]), ref dsTemp))
                            {
                                if (dsTemp.Tables[2].Rows.Count != 0)
                                {
                                    if (dsTemp.Tables[2].Rows[0]["Is_Understood_Policy_37"] != DBNull.Value)
                                    {
                                        if (Convert.ToBoolean(dsTemp.Tables[2].Rows[0]["Is_Understood_Policy_37"]) == true)
                                        {
                                            chkMaterialsBrands.Items[0].Selected = true;
                                            chkMaterialsBrands.Items[1].Selected = false;
                                            chkMaterialsBrands.Items[2].Selected = false;
                                            chkMaterialsBrandsReadOnly.Items[0].Selected = true;
                                            chkMaterialsBrandsReadOnly.Items[1].Selected = false;
                                            chkMaterialsBrandsReadOnly.Items[2].Selected = false;
                                            lblYesNoMat1.Text = "Yes";
                                            lblYesNoMat2.Text = "No";
                                            lblYesNoMat3.Text = "No";
                                        }
                                    }
                                    else
                                    {
                                        chkMaterialsBrands.Items[0].Selected = false;
                                        chkMaterialsBrands.Items[1].Selected = false;
                                        chkMaterialsBrands.Items[2].Selected = false;
                                        chkMaterialsBrandsReadOnly.Items[0].Selected = false;
                                        chkMaterialsBrandsReadOnly.Items[1].Selected = false;
                                        chkMaterialsBrandsReadOnly.Items[2].Selected = false;
                                    }


                                    if (dsTemp.Tables[2].Rows[0]["Is_Exception_Policy_37"] != DBNull.Value)
                                    {
                                        if (Convert.ToBoolean(dsTemp.Tables[2].Rows[0]["Is_Exception_Policy_37"]) == true)
                                        {
                                            chkMaterialsBrands.Items[1].Selected = true;
                                            chkMaterialsBrands.Items[0].Selected = false;
                                            chkMaterialsBrands.Items[2].Selected = false;
                                            chkMaterialsBrandsReadOnly.Items[1].Selected = true;
                                            lblYesNoMat2.Text = "Yes";
                                            lblYesNoMat1.Text = "No";
                                            lblYesNoMat3.Text = "No";
                                            chkMaterialsBrandsReadOnly.Items[0].Selected = false;
                                            chkMaterialsBrandsReadOnly.Items[2].Selected = false;
                                        }
                                    }

                                    if (dsTemp.Tables[2].Rows[0]["Is_EO_Covered_Policy_37"] != DBNull.Value)
                                    {
                                        if (Convert.ToBoolean(dsTemp.Tables[2].Rows[0]["Is_EO_Covered_Policy_37"]) == true)
                                        {
                                            chkMaterialsBrands.Items[2].Selected = true;
                                            lblYesNoMat3.Text = "Yes";
                                            lblYesNoMat1.Text = "No";
                                            lblYesNoMat2.Text = "No";
                                            chkMaterialsBrands.Items[0].Selected = false;
                                            chkMaterialsBrands.Items[1].Selected = false;

                                            chkMaterialsBrandsReadOnly.Items[2].Selected = true;
                                            chkMaterialsBrandsReadOnly.Items[0].Selected = false;
                                            chkMaterialsBrandsReadOnly.Items[1].Selected = false;

                                        }
                                    }


                                }
                                else
                                {
                                    chkMaterialsBrands.Items[0].Selected = false;
                                    chkMaterialsBrands.Items[1].Selected = false;
                                    chkMaterialsBrands.Items[2].Selected = false;
                                    chkMaterialsBrandsReadOnly.Items[0].Selected = false;
                                    chkMaterialsBrandsReadOnly.Items[1].Selected = false;
                                    chkMaterialsBrandsReadOnly.Items[2].Selected = false;
                                }


                                if (dsTemp.Tables[20].Rows.Count != 0)
                                {
                                    if (dsTemp.Tables[20].Rows[0]["Is_Product_Go_To_Customers"] != DBNull.Value)
                                    {
                                        if (Convert.ToBoolean(dsTemp.Tables[20].Rows[0]["Is_Product_Go_To_Customers"]) == true)
                                        {
                                            rblProductConsumers.Items[0].Selected = true;
                                            rblProductConsumers.Items[1].Selected = false;
                                            lblReadonlyPSR1.Text = "Yes";
                                        }
                                        else if (Convert.ToBoolean(dsTemp.Tables[20].Rows[0]["Is_Product_Go_To_Customers"]) == false)
                                        {
                                            rblProductConsumers.Items[0].Selected = false;
                                            rblProductConsumers.Items[1].Selected = true;
                                            lblReadonlyPSR1.Text = "No";
                                        }
                                    }
                                    else
                                    {
                                        rblProductConsumers.Items[0].Selected = false;
                                        rblProductConsumers.Items[1].Selected = false;
                                        lblReadonlyPSR1.Text = "";
                                    }



                                    if (dsTemp.Tables[20].Rows[0]["Is_Using_Approved_FC_R_ATS"] != DBNull.Value)
                                    {
                                        if (Convert.ToBoolean(dsTemp.Tables[20].Rows[0]["Is_Using_Approved_FC_R_ATS"]) == true)
                                        {
                                            rblProductApproved.Items[0].Selected = true;
                                            rblProductApproved.Items[1].Selected = false;
                                            lblReadonlyPSR2.Text = "Yes";
                                        }
                                        else if (Convert.ToBoolean(dsTemp.Tables[20].Rows[0]["Is_Using_Approved_FC_R_ATS"]) == false)
                                        {
                                            rblProductApproved.Items[0].Selected = false;
                                            rblProductApproved.Items[1].Selected = true;
                                            lblReadonlyPSR2.Text = "No";
                                        }
                                    }
                                    else
                                    {
                                        rblProductApproved.Items[0].Selected = false;
                                        rblProductApproved.Items[1].Selected = false;
                                        lblReadonlyPSR2.Text = "";
                                    }


                                }



                                if ((rblProductConsumers.Items[0].Selected == true) && (rblProductApproved.Items[1].Selected == true))
                                    divPSRAAddedRawMaterials.Style.Add("display", "block");
                                else
                                    divPSRAAddedRawMaterials.Style.Add("display", "none");

                                //'Final Radio Buttons

                                if ((rblFinalProductConsumerOption.Items[0].Selected == true) && (rblFinalProductApprovedOption.Items[1].Selected == true))

                                    tblPSRAFinal2.Style.Add("display", "block");
                                else

                                    tblPSRAFinal2.Style.Add("display", "none");



                                if (dsTemp.Tables[20].Rows.Count != 0)
                                {
                                    if (dsTemp.Tables[20].Rows[0]["Is_Approved_At_Level"] != DBNull.Value)
                                    {
                                        if (Convert.ToBoolean(dsTemp.Tables[20].Rows[0]["Is_Approved_At_Level"]) == true)
                                        {
                                            rblRawMaterialsQ1.Items[0].Selected = true;
                                            rblRawMaterialsQ1.Items[1].Selected = false;
                                            lblReadonlyPSR3.Text = "Yes";
                                        }
                                        else if (Convert.ToBoolean(dsTemp.Tables[20].Rows[0]["Is_Approved_At_Level"]) == false)
                                        {
                                            rblRawMaterialsQ1.Items[0].Selected = false;
                                            rblRawMaterialsQ1.Items[1].Selected = true;
                                            lblReadonlyPSR3.Text = "No";
                                        }
                                    }
                                    else
                                    {
                                        rblRawMaterialsQ1.Items[0].Selected = false;
                                        rblRawMaterialsQ1.Items[1].Selected = false;
                                        lblReadonlyPSR3.Text = "";
                                    }


                                    if (dsTemp.Tables[20].Rows[0]["Is_Approved_For_Region"] != DBNull.Value)
                                    {
                                        if (Convert.ToBoolean(dsTemp.Tables[20].Rows[0]["Is_Approved_For_Region"]) == true)
                                        {
                                            rblRawMaterialsQ2.Items[0].Selected = true;
                                            rblRawMaterialsQ2.Items[1].Selected = false;
                                            lblReadonlyPSR4.Text = "Yes";
                                        }
                                        else if (Convert.ToBoolean(dsTemp.Tables[20].Rows[0]["Is_Approved_For_Region"]) == false)
                                        {
                                            rblRawMaterialsQ2.Items[0].Selected = false;
                                            rblRawMaterialsQ2.Items[1].Selected = true;
                                            lblReadonlyPSR4.Text = "No";
                                        }
                                    }
                                    else
                                    {
                                        rblRawMaterialsQ2.Items[0].Selected = false;
                                        rblRawMaterialsQ2.Items[1].Selected = false;
                                        lblReadonlyPSR4.Text = "";
                                    }


                                    if (dsTemp.Tables[20].Rows[0]["Is_Approved_For_Application"] != DBNull.Value)
                                    {
                                        if (Convert.ToBoolean(dsTemp.Tables[20].Rows[0]["Is_Approved_For_Application"]) == true)
                                        {
                                            rblRawMaterialsQ3.Items[0].Selected = true;
                                            rblRawMaterialsQ3.Items[1].Selected = false;
                                            lblReadonlyPSR5.Text = "Yes";
                                        }
                                        else if (Convert.ToBoolean(dsTemp.Tables[20].Rows[0]["Is_Approved_For_Application"]) == false)
                                        {
                                            rblRawMaterialsQ3.Items[0].Selected = false;
                                            rblRawMaterialsQ3.Items[1].Selected = true;
                                            lblReadonlyPSR5.Text = "No";
                                        }
                                    }
                                    else
                                    {
                                        rblRawMaterialsQ3.Items[0].Selected = false;
                                        rblRawMaterialsQ3.Items[1].Selected = false;
                                        lblReadonlyPSR5.Text = "";
                                    }

                                    if (dsTemp.Tables[20].Rows[0]["Is_Approved_At_Prev_Application_Rate"] != DBNull.Value)
                                    {
                                        if (Convert.ToBoolean(dsTemp.Tables[20].Rows[0]["Is_Approved_At_Prev_Application_Rate"]) == true)
                                        {
                                            rblRawMaterialsQ4.Items[0].Selected = true;
                                            rblRawMaterialsQ4.Items[1].Selected = false;
                                            lblReadonlyPSR6.Text = "Yes";
                                        }
                                        else if (Convert.ToBoolean(dsTemp.Tables[20].Rows[0]["Is_Approved_At_Prev_Application_Rate"]) == false)
                                        {
                                            rblRawMaterialsQ4.Items[0].Selected = false;
                                            rblRawMaterialsQ4.Items[1].Selected = true;
                                            lblReadonlyPSR6.Text = "No";
                                        }
                                    }
                                    else
                                    {
                                        rblRawMaterialsQ4.Items[0].Selected = false;
                                        rblRawMaterialsQ4.Items[1].Selected = false;
                                        lblReadonlyPSR6.Text = "";
                                    }
                                }

                                if (rblProductConsumers.Items[0].Selected == true && rblProductApproved.Items[1].Selected == true)
                                    divPSRAAddedRawMaterials.Style.Add("display", "block");
                                else
                                {
                                    rblRawMaterialsQ1.ClearSelection();
                                    rblRawMaterialsQ2.ClearSelection();
                                    rblRawMaterialsQ3.ClearSelection();
                                    rblRawMaterialsQ4.ClearSelection();
                                    divPSRAAddedRawMaterials.Style.Add("display", "none");

                                }

                                // 'Final Radio Buttons
                                if ((rblFinalProductConsumerOption.Items[0].Selected == true) && (rblFinalProductApprovedOption.Items[1].Selected == true))

                                    tblPSRAFinal2.Style.Add("display", "block");
                                else
                                {
                                    rblFinalRawMaterialsQ1.ClearSelection();
                                    rblFinalRawMaterialsQ2.ClearSelection();
                                    rblFinalRawMaterialsQ3.ClearSelection();
                                    rblFinalRawMaterialsQ4.ClearSelection();
                                    tblPSRAFinal2.Style.Add("display", "none");

                                }


                                if (dsTemp.Tables[12].Rows.Count != 0)
                                {
                                    for (int intRowCount = 0; intRowCount <= dsTemp.Tables[12].Rows.Count - 1; intRowCount++)
                                    {
                                        if (dsTemp.Tables[12].Rows[intRowCount]["Function_Name"] != System.DBNull.Value)
                                        {
                                            if (dsTemp.Tables[12].Rows[intRowCount]["Function_Name"].ToString() == "Budget Center")
                                            {
                                                if (dsTemp.Tables[12].Rows[intRowCount]["Approver_Name"] != System.DBNull.Value)
                                                    strFUNAPPName = dsTemp.Tables[12].Rows[intRowCount]["Approver_Name"].ToString();
                                                else
                                                    strFUNAPPName = String.Empty;

                                                if (strFUNAPPName.Trim().ToUpper() == objclsSecurity.UserName.Trim().ToUpper())
                                                {
                                                    //'Chech for the current status
                                                    string strAppStrStatus = string.Empty;
                                                    strAppStrStatus = "N";

                                                    if (strAppStrStatus != "Y")
                                                    {
                                                        lnkBudgetApproved.Visible = true;
                                                        lnkBudgetDeclined.Visible = true;
                                                        lnkPreBOPreComments.Visible = true;
                                                        lnkPreBOBackUp.Visible = true;
                                                    }
                                                    else
                                                    {
                                                        lnkPreBOBackUp.Visible = false;
                                                        lnkPreBOPreComments.Visible = false;
                                                        lnkBudgetApproved.Visible = false;
                                                        lnkBudgetDeclined.Visible = false;
                                                    }
                                                    break;
                                                }

                                            }

                                            if (dsTemp.Tables[12].Rows[intRowCount]["Function_Name"].ToString() == "GBU HS&E Resource")
                                            {
                                                if (dsTemp.Tables[12].Rows[intRowCount]["Approver_Name"] != System.DBNull.Value)
                                                    strFUNAPPName = dsTemp.Tables[12].Rows[intRowCount]["Approver_Name"].ToString();
                                                else
                                                    strFUNAPPName = String.Empty;

                                                if (strFUNAPPName.Trim().ToUpper() == objclsSecurity.UserName.Trim().ToUpper())
                                                {
                                                    //'Chech for the current status
                                                    string strAppStrStatus = string.Empty;
                                                    strAppStrStatus = "N";

                                                    if (strAppStrStatus != "Y")
                                                    {
                                                        lnkGBUHSEApproved.Visible = true;
                                                        lnkGBUHSEDeclined.Visible = true;
                                                        lnkPreGBUHSEPreComments.Visible = true;
                                                        lnkPreGBUHSEBackUp.Visible = true;
                                                    }
                                                    else
                                                    {
                                                        lnkPreGBUHSEBackUp.Visible = false;
                                                        lnkPreGBUHSEPreComments.Visible = false;
                                                        lnkGBUHSEApproved.Visible = false;
                                                        lnkGBUHSEDeclined.Visible = false;
                                                    }
                                                    break;
                                                }

                                            }



                                            if (dsTemp.Tables[12].Rows[intRowCount]["Function_Name"].ToString() == "Site HS&E Resource")
                                            {
                                                if (dsTemp.Tables[12].Rows[intRowCount]["Approver_Name"] != System.DBNull.Value)
                                                    strFUNAPPName = dsTemp.Tables[12].Rows[intRowCount]["Approver_Name"].ToString();
                                                else
                                                    strFUNAPPName = String.Empty;

                                                if (strFUNAPPName.Trim().ToUpper() == objclsSecurity.UserName.Trim().ToUpper())
                                                {
                                                    //'Chech for the current status
                                                    string strAppStrStatus = string.Empty;
                                                    strAppStrStatus = "N";

                                                    if (strAppStrStatus != "Y")
                                                    {
                                                        lnkSiteHSEApproved.Visible = true;
                                                        lnkSiteHSEDeclined.Visible = true;
                                                        lnkPreSiteHSEComments.Visible = true;
                                                        lnkPresiteHSEBackUp.Visible = true;
                                                    }
                                                    else
                                                    {
                                                        lnkPresiteHSEBackUp.Visible = false;
                                                        lnkPreSiteHSEComments.Visible = false;
                                                        lnkSiteHSEApproved.Visible = false;
                                                        lnkSiteHSEDeclined.Visible = false;
                                                    }
                                                    break;
                                                }

                                            }



                                            if (dsTemp.Tables[12].Rows[intRowCount]["Function_Name"].ToString() == "Site Contact")
                                            {
                                                if (dsTemp.Tables[12].Rows[intRowCount]["Approver_Name"] != System.DBNull.Value)
                                                    strFUNAPPName = dsTemp.Tables[12].Rows[intRowCount]["Approver_Name"].ToString();
                                                else
                                                    strFUNAPPName = String.Empty;

                                                if (strFUNAPPName.Trim().ToUpper() == objclsSecurity.UserName.Trim().ToUpper())
                                                {
                                                    //'Chech for the current status
                                                    string strAppStrStatus = string.Empty;
                                                    strAppStrStatus = "N";

                                                    if (strAppStrStatus != "Y")
                                                    {
                                                        lnkSiteContactApproved.Visible = true;
                                                        lnkSiteContactApproved.Visible = true;
                                                        lnkPreSiteCotactComments.Visible = true;
                                                        lnkPresiteContactBackUp.Visible = true;
                                                    }
                                                    else
                                                    {
                                                        lnkPresiteContactBackUp.Visible = false;
                                                        lnkPreSiteCotactComments.Visible = false;
                                                        lnkSiteContactApproved.Visible = false;
                                                        lnkSiteContactApproved.Visible = false;
                                                    }
                                                    break;
                                                }

                                            }


                                            if (dsTemp.Tables[12].Rows[intRowCount]["Function_Name"].ToString() == "Site Planning")
                                            {
                                                if (dsTemp.Tables[12].Rows[intRowCount]["Approver_Name"] != System.DBNull.Value)
                                                    strFUNAPPName = dsTemp.Tables[12].Rows[intRowCount]["Approver_Name"].ToString();
                                                else
                                                    strFUNAPPName = String.Empty;

                                                if (strFUNAPPName.Trim().ToUpper() == objclsSecurity.UserName.Trim().ToUpper())
                                                {
                                                    //'Chech for the current status
                                                    string strAppStrStatus = string.Empty;
                                                    strAppStrStatus = "N";

                                                    if (strAppStrStatus != "Y")
                                                    {
                                                        lnkSitePlanningApproved.Visible = true;
                                                        lnkSitePlanningDeclined.Visible = true;
                                                        lnkPreSitePlanComments.Visible = true;
                                                        lnkPreSitePlanBackUp.Visible = true;
                                                    }
                                                    else
                                                    {
                                                        lnkPreSitePlanBackUp.Visible = false;
                                                        lnkPreSitePlanComments.Visible = false;
                                                        lnkSitePlanningApproved.Visible = false;
                                                        lnkSitePlanningDeclined.Visible = false;
                                                    }
                                                    break;
                                                }

                                            }

                                            if (dsTemp.Tables[12].Rows[intRowCount]["Function_Name"].ToString() == "Central Planning")
                                            {
                                                if (dsTemp.Tables[12].Rows[intRowCount]["Approver_Name"] != System.DBNull.Value)
                                                    strFUNAPPName = dsTemp.Tables[12].Rows[intRowCount]["Approver_Name"].ToString();
                                                else
                                                    strFUNAPPName = String.Empty;

                                                if (strFUNAPPName.Trim().ToUpper() == objclsSecurity.UserName.Trim().ToUpper())
                                                {
                                                    //'Chech for the current status
                                                    string strAppStrStatus = string.Empty;
                                                    strAppStrStatus = "N";

                                                    if (strAppStrStatus != "Y")
                                                    {
                                                        lnkCentralPlanningApproved.Visible = true;
                                                        lnkCentralPlanningDeclined.Visible = true;
                                                        lnkPreCentralPlanComments.Visible = true;
                                                        lnkPreCentralPlanBackU.Visible = true;
                                                    }
                                                    else
                                                    {
                                                        lnkPreCentralPlanBackU.Visible = false;
                                                        lnkPreCentralPlanComments.Visible = false;
                                                        lnkCentralPlanningApproved.Visible = false;
                                                        lnkCentralPlanningDeclined.Visible = false;
                                                    }
                                                    break;
                                                }

                                            }

                                            if (dsTemp.Tables[12].Rows[intRowCount]["Function_Name"].ToString() == "SAP Cost Center Coordinator")
                                            {
                                                if (dsTemp.Tables[12].Rows[intRowCount]["Approver_Name"] != System.DBNull.Value)
                                                    strFUNAPPName = dsTemp.Tables[12].Rows[intRowCount]["Approver_Name"].ToString();
                                                else
                                                    strFUNAPPName = String.Empty;

                                                if (strFUNAPPName.Trim().ToUpper() == objclsSecurity.UserName.Trim().ToUpper())
                                                {
                                                    //'Chech for the current status
                                                    string strAppStrStatus = string.Empty;
                                                    strAppStrStatus = "N";

                                                    if (strAppStrStatus != "Y")
                                                    {
                                                        lnkSAPCostCenterApproved.Visible = true;
                                                        lnkSAPCostCenterDeclined.Visible = true;
                                                        lnkPreSAPComments.Visible = true;
                                                        lnkPreSAPBackU.Visible = true;
                                                    }
                                                    else
                                                    {
                                                        lnkPreSAPBackU.Visible = false;
                                                        lnkPreSAPComments.Visible = false;
                                                        lnkSAPCostCenterApproved.Visible = false;
                                                        lnkSAPCostCenterDeclined.Visible = false;
                                                    }
                                                    break;
                                                }

                                            }

                                            //                 'Added on 01/20/2010 
                                            //'For MUREO PCRs
                                            //'By: David

                                            if (dsTemp.Tables[12].Rows[intRowCount]["Function_Name"].ToString() == "SMART Clearance")
                                            {
                                                if (dsTemp.Tables[12].Rows[intRowCount]["Approver_Name"] != System.DBNull.Value)
                                                    strFUNAPPName = dsTemp.Tables[12].Rows[intRowCount]["Approver_Name"].ToString();
                                                else
                                                    strFUNAPPName = String.Empty;

                                                if (strFUNAPPName.Trim().ToUpper() == objclsSecurity.UserName.Trim().ToUpper())
                                                {
                                                    //'Chech for the current status
                                                    string strAppStrStatus = string.Empty;
                                                    strAppStrStatus = "N";

                                                    if (strAppStrStatus != "Y")
                                                    {
                                                        lnkPreSmartClearanceBackU.Visible = true;
                                                    }
                                                    else
                                                    {//doubt
                                                        //lnkSmartClearanceDeclined.Visible = false;
                                                    }
                                                    break;
                                                }

                                            }


                                            if (dsTemp.Tables[12].Rows[intRowCount]["Function_Name"].ToString() == "Timing Gate Exception")
                                            {
                                                if (dsTemp.Tables[12].Rows[intRowCount]["Approver_Name"] != System.DBNull.Value)
                                                    strFUNAPPName = dsTemp.Tables[12].Rows[intRowCount]["Approver_Name"].ToString();
                                                else
                                                    strFUNAPPName = String.Empty;

                                                if (strFUNAPPName.Trim().ToUpper() == objclsSecurity.UserName.Trim().ToUpper())
                                                {
                                                    //'Chech for the current status
                                                    string strAppStrStatus = string.Empty;
                                                    strAppStrStatus = "N";

                                                    if (strAppStrStatus != "Y")
                                                    {
                                                        lnkTimingGateApproved.Visible = true;
                                                        lnkTimingGateDeclined.Visible = true;
                                                        lnkPreTimeGateComments.Visible = true;
                                                        lnkPreTimingGateUp.Visible = true;
                                                    }
                                                    else
                                                    {
                                                        lnkPreTimingGateUp.Visible = false;
                                                        lnkPreTimeGateComments.Visible = false;
                                                        lnkTimingGateApproved.Visible = false;
                                                        lnkTimingGateDeclined.Visible = false;
                                                    }
                                                    break;
                                                }

                                            }

                                            if (dsTemp.Tables[12].Rows[intRowCount]["Function_Name"].ToString() == "Standards Office")
                                            {
                                                if (dsTemp.Tables[12].Rows[intRowCount]["Approver_Name"] != System.DBNull.Value)
                                                    strFUNAPPName = dsTemp.Tables[12].Rows[intRowCount]["Approver_Name"].ToString();
                                                else
                                                    strFUNAPPName = String.Empty;

                                                if (strFUNAPPName.Trim().ToUpper() == objclsSecurity.UserName.Trim().ToUpper())
                                                {
                                                    //'Chech for the current status
                                                    string strAppStrStatus = string.Empty;
                                                    strAppStrStatus = "N";

                                                    if (strAppStrStatus != "Y")
                                                    {
                                                        lnkStandardOfficeApproved.Visible = true;
                                                        lnkStandardOfficeDeclined.Visible = true;
                                                        lnkPreStandsOfficeComments.Visible = true;
                                                        lnkPreStandsOfficeUp.Visible = true;
                                                    }
                                                    else
                                                    {
                                                        lnkPreStandsOfficeUp.Visible = false;
                                                        lnkPreStandsOfficeComments.Visible = false;
                                                        lnkStandardOfficeApproved.Visible = false;
                                                        lnkStandardOfficeDeclined.Visible = false;
                                                    }
                                                    break;
                                                }

                                            }

                                            //  'Added by David - MUREO PCR : 4 Additional Approvers - Date: 01/03/2012
                                            if (dsTemp.Tables[12].Rows[intRowCount]["Function_Name"].ToString() == "Additional approver #1")
                                            {
                                                if (dsTemp.Tables[12].Rows[intRowCount]["Approver_Name"] != System.DBNull.Value)
                                                    strFUNAPPName = dsTemp.Tables[12].Rows[intRowCount]["Approver_Name"].ToString();
                                                else
                                                    strFUNAPPName = String.Empty;

                                                if (strFUNAPPName.Trim().ToUpper() == objclsSecurity.UserName.Trim().ToUpper())
                                                {
                                                    //'Chech for the current status
                                                    string strAppStrStatus = string.Empty;
                                                    strAppStrStatus = "N";

                                                    if (strAppStrStatus != "Y")
                                                    {
                                                        //lnkStandardOfficeApproved.Visible = true;
                                                        //lnkStandardOfficeDeclined.Visible = true;
                                                        //lnkPreStandsOfficeComments.Visible = true;
                                                        //lnkPreStandsOfficeUp.Visible = true;
                                                    }
                                                    else
                                                    {
                                                        lnkAdditionalApprover1Approved.Visible = false;
                                                        lnkAdditionalApprover1Declined.Visible = false;
                                                        lnkAdditionalApprover1Comments.Visible = false;
                                                        lnkAdditionalApprover1Up.Visible = false;
                                                    }
                                                    break;
                                                }

                                            }


                                            if (dsTemp.Tables[12].Rows[intRowCount]["Function_Name"].ToString() == "Additional approver #2")
                                            {
                                                if (dsTemp.Tables[12].Rows[intRowCount]["Approver_Name"] != System.DBNull.Value)
                                                    strFUNAPPName = dsTemp.Tables[12].Rows[intRowCount]["Approver_Name"].ToString();
                                                else
                                                    strFUNAPPName = String.Empty;

                                                if (strFUNAPPName.Trim().ToUpper() == objclsSecurity.UserName.Trim().ToUpper())
                                                {
                                                    //'Chech for the current status
                                                    string strAppStrStatus = string.Empty;
                                                    strAppStrStatus = "N";

                                                    if (strAppStrStatus != "Y")
                                                    {
                                                        //lnkStandardOfficeApproved.Visible = true;
                                                        //lnkStandardOfficeDeclined.Visible = true;
                                                        //lnkPreStandsOfficeComments.Visible = true;
                                                        //lnkPreStandsOfficeUp.Visible = true;
                                                    }
                                                    else
                                                    {
                                                        lnkAdditionalApprover2Approved.Visible = false;
                                                        lnkAdditionalApprover2Declined.Visible = false;
                                                        lnkAdditionalApprover2Comments.Visible = false;
                                                        lnkAdditionalApprover2Up.Visible = false;
                                                    }
                                                    break;
                                                }

                                            }

                                            if (dsTemp.Tables[12].Rows[intRowCount]["Function_Name"].ToString() == "Additional approver #3")
                                            {
                                                if (dsTemp.Tables[12].Rows[intRowCount]["Approver_Name"] != System.DBNull.Value)
                                                    strFUNAPPName = dsTemp.Tables[12].Rows[intRowCount]["Approver_Name"].ToString();
                                                else
                                                    strFUNAPPName = String.Empty;

                                                if (strFUNAPPName.Trim().ToUpper() == objclsSecurity.UserName.Trim().ToUpper())
                                                {
                                                    //'Chech for the current status
                                                    string strAppStrStatus = string.Empty;
                                                    strAppStrStatus = "N";

                                                    if (strAppStrStatus != "Y")
                                                    {
                                                        //lnkStandardOfficeApproved.Visible = true;
                                                        //lnkStandardOfficeDeclined.Visible = true;
                                                        //lnkPreStandsOfficeComments.Visible = true;
                                                        //lnkPreStandsOfficeUp.Visible = true;
                                                    }
                                                    else
                                                    {
                                                        lnkAdditionalApprover3Approved.Visible = false;
                                                        lnkAdditionalApprover3Declined.Visible = false;
                                                        lnkAdditionalApprover3Comments.Visible = false;
                                                        lnkAdditionalApprover3Up.Visible = false;
                                                    }
                                                    break;
                                                }

                                            }

                                            if (dsTemp.Tables[12].Rows[intRowCount]["Function_Name"].ToString() == "Additional approver #4")
                                            {
                                                if (dsTemp.Tables[12].Rows[intRowCount]["Approver_Name"] != System.DBNull.Value)
                                                    strFUNAPPName = dsTemp.Tables[12].Rows[intRowCount]["Approver_Name"].ToString();
                                                else
                                                    strFUNAPPName = String.Empty;

                                                if (strFUNAPPName.Trim().ToUpper() == objclsSecurity.UserName.Trim().ToUpper())
                                                {
                                                    //'Chech for the current status
                                                    string strAppStrStatus = string.Empty;
                                                    strAppStrStatus = "N";

                                                    if (strAppStrStatus != "Y")
                                                    {
                                                        //lnkStandardOfficeApproved.Visible = true;
                                                        //lnkStandardOfficeDeclined.Visible = true;
                                                        //lnkPreStandsOfficeComments.Visible = true;
                                                        //lnkPreStandsOfficeUp.Visible = true;
                                                    }
                                                    else
                                                    {
                                                        lnkAdditionalApprover4Approved.Visible = false;
                                                        lnkAdditionalApprover4Declined.Visible = false;
                                                        lnkAdditionalApprover4Comments.Visible = false;
                                                        lnkAdditionalApprover4Up.Visible = false;
                                                    }
                                                    break;
                                                }

                                            }


                                        }
                                    }
                                }

                                Get_EO_Mandatory_Edit();
                                GET_EO_Preliminary_Edit();
                                GET_EO_Final_Edit();
                                GET_EO_CloseOut_Edit();
                                lblStageLevel.Text = "Preliminary";
                                lblStatusType.Text = "Draft";


                            }
                        }
                        else if ((strCurrentStage.ToUpper() == "Preliminary".ToUpper()) && (strStatus.ToUpper() == "Routed".ToUpper()))
                        {
                            ViewState["printstage"] = "Preliminary";
                            imgPreRoute.Visible = false;
                            btnSave.Visible = false;
                            imgSaveResume.Visible = false;
                            imgSaveResume.Visible = false;
                            btnExportPilotLine.Visible = false;
                            ViewState["LockMode"] = "PRELIMINARY";
                            preliminaryApprCheck();
                            Get_EO_Mandatory_Lock();
                            GET_EO_Preliminary_Lock();
                            GET_EO_Final_Edit();
                            GET_EO_CloseOut_Edit();
                            Mandatory_Pre_lock();
                            CarryPrelToFinal();
                            CarryApprovalDetais();
                            lblStageLevel.Text = "Preliminary";
                            lblStatusType.Text = "Routed";

                        }
                        else if ((strCurrentStage.ToUpper() == "Final".ToUpper()) && (strStatus.ToUpper() == "Draft".ToUpper()))
                        {
                            ViewState["printstage"] = "Final";
                            ViewState["LockMode"] = "PRELIMINARY";
                            string strFUNAPPName = string.Empty;
                            if (objEOBA.GET_EO_Final(Convert.ToInt32(ViewState["EOID"]), ref ds))
                            {
                                if (ds.Tables[13].Rows.Count != 0)
                                {
                                    for (int intRowCount = 0; intRowCount <= ds.Tables[13].Rows.Count - 1; intRowCount++)
                                    {
                                        if (ds.Tables[13].Rows[intRowCount]["Function_Name"].ToString() == "PS Initiative Manager")
                                        {
                                            if (ds.Tables[13].Rows[intRowCount]["Approver_Name"] != System.DBNull.Value)
                                                strFUNAPPName = ds.Tables[13].Rows[intRowCount]["Approver_Name"].ToString();
                                            else
                                                strFUNAPPName = String.Empty;

                                            if (strFUNAPPName.Trim().ToUpper() == objclsSecurity.UserName.Trim().ToUpper())
                                            {
                                                //'Chech for the current status
                                                string strAppStrStatus = string.Empty;
                                                strAppStrStatus = "N";

                                                if (strAppStrStatus != "Y")
                                                {
                                                    lnkPSIniApproved.Visible = true;
                                                    lnkPSIniDeclined.Visible = true;
                                                    lnkFinBOPSIniComments.Visible = true;
                                                    lnkFinalPSIntiaBackUp.Visible = true;
                                                }
                                                else
                                                {
                                                    lnkFinalPSIntiaBackUp.Visible = false;
                                                    lnkFinBOPSIniComments.Visible = false;
                                                    lnkPSIniApproved.Visible = false;
                                                    lnkPSIniDeclined.Visible = false;
                                                }
                                                break;
                                            }
                                        }


                                        if (ds.Tables[13].Rows[intRowCount]["Function_Name"].ToString() == "Products Research")
                                        {
                                            if (ds.Tables[13].Rows[intRowCount]["Approver_Name"] != System.DBNull.Value)
                                                strFUNAPPName = ds.Tables[13].Rows[intRowCount]["Approver_Name"].ToString();
                                            else
                                                strFUNAPPName = String.Empty;

                                            if (strFUNAPPName.Trim().ToUpper() == objclsSecurity.UserName.Trim().ToUpper())
                                            {
                                                //'Chech for the current status
                                                string strAppStrStatus = string.Empty;
                                                strAppStrStatus = "N";

                                                if (strAppStrStatus != "Y")
                                                {
                                                    lnkProdResearchApproved.Visible = true;
                                                    lnkProdResearchDeclined.Visible = true;
                                                    lnkFinProdReseComments.Visible = true;
                                                    lnkFinalProdReasBackUp.Visible = true;
                                                }
                                                else
                                                {
                                                    lnkFinalProdReasBackUp.Visible = false;
                                                    lnkFinProdReseComments.Visible = false;
                                                    lnkProdResearchApproved.Visible = false;
                                                    lnkProdResearchDeclined.Visible = false;
                                                }
                                                break;
                                            }
                                        }

                                        if (ds.Tables[13].Rows[intRowCount]["Function_Name"].ToString() == "Budget Center")
                                        {
                                            if (ds.Tables[13].Rows[intRowCount]["Approver_Name"] != System.DBNull.Value)
                                                strFUNAPPName = ds.Tables[13].Rows[intRowCount]["Approver_Name"].ToString();
                                            else
                                                strFUNAPPName = String.Empty;

                                            if (strFUNAPPName.Trim().ToUpper() == objclsSecurity.UserName.Trim().ToUpper())
                                            {
                                                //'Chech for the current status
                                                string strAppStrStatus = string.Empty;
                                                strAppStrStatus = "N";

                                                if (strAppStrStatus != "Y")
                                                {
                                                    lnkFinBudgetApproved.Visible = true;
                                                    lnkFinBudgetDeclined.Visible = true;
                                                    lnkFinBOComments.Visible = true;
                                                    lnkFinalBOBackUp.Visible = true;
                                                }
                                                else
                                                {
                                                    lnkFinalBOBackUp.Visible = false;
                                                    lnkFinBOComments.Visible = false;
                                                    lnkFinBudgetApproved.Visible = false;
                                                    lnkFinBudgetDeclined.Visible = false;
                                                }
                                                break;
                                            }
                                        }


                                        if (ds.Tables[13].Rows[intRowCount]["Function_Name"].ToString() == "GBU HS&E Resource")
                                        {
                                            if (ds.Tables[13].Rows[intRowCount]["Approver_Name"] != System.DBNull.Value)
                                                strFUNAPPName = ds.Tables[13].Rows[intRowCount]["Approver_Name"].ToString();
                                            else
                                                strFUNAPPName = String.Empty;

                                            if (strFUNAPPName.Trim().ToUpper() == objclsSecurity.UserName.Trim().ToUpper())
                                            {
                                                //'Chech for the current status
                                                string strAppStrStatus = string.Empty;
                                                strAppStrStatus = "N";

                                                if (strAppStrStatus != "Y")
                                                {
                                                    lnkFinGBUHSEApproved.Visible = true;
                                                    lnkFinGBUHSEDeclined.Visible = true;
                                                    lnkFinGBUComments.Visible = true;
                                                    lnkFinalGBUBackUp.Visible = true;
                                                }
                                                else
                                                {
                                                    lnkFinalGBUBackUp.Visible = false;
                                                    lnkFinGBUHSEApproved.Visible = false;
                                                    lnkFinGBUHSEApproved.Visible = false;
                                                    lnkFinGBUComments.Visible = false;
                                                }
                                                break;
                                            }
                                        }


                                        if (ds.Tables[13].Rows[intRowCount]["Function_Name"].ToString() == "Site HS&E Resource")
                                        {
                                            if (ds.Tables[13].Rows[intRowCount]["Approver_Name"] != System.DBNull.Value)
                                                strFUNAPPName = ds.Tables[13].Rows[intRowCount]["Approver_Name"].ToString();
                                            else
                                                strFUNAPPName = String.Empty;

                                            if (strFUNAPPName.Trim().ToUpper() == objclsSecurity.UserName.Trim().ToUpper())
                                            {
                                                //'Chech for the current status
                                                string strAppStrStatus = string.Empty;
                                                strAppStrStatus = "N";

                                                if (strAppStrStatus != "Y")
                                                {
                                                    lnkFinSiteHSEApproved.Visible = true;
                                                    lnkFinSiteHSEDeclined.Visible = true;
                                                    lnkFinSiteHSEComments.Visible = true;
                                                    lnkFinalSiteHSEBackUp.Visible = true;
                                                }
                                                else
                                                {
                                                    lnkFinSiteHSEDeclined.Visible = false;
                                                    lnkFinSiteHSEApproved.Visible = false;
                                                    lnkFinSiteHSEComments.Visible = false;
                                                    lnkFinalSiteHSEBackUp.Visible = false;
                                                }
                                                break;
                                            }
                                        }




                                        if (ds.Tables[13].Rows[intRowCount]["Function_Name"].ToString() == "SAP Cost Center Coordinator")
                                        {
                                            if (ds.Tables[13].Rows[intRowCount]["Approver_Name"] != System.DBNull.Value)
                                                strFUNAPPName = ds.Tables[13].Rows[intRowCount]["Approver_Name"].ToString();
                                            else
                                                strFUNAPPName = String.Empty;

                                            if (strFUNAPPName.Trim().ToUpper() == objclsSecurity.UserName.Trim().ToUpper())
                                            {
                                                //'Chech for the current status
                                                string strAppStrStatus = string.Empty;
                                                strAppStrStatus = "N";

                                                if (strAppStrStatus != "Y")
                                                {
                                                    lnkFinSAPApproved.Visible = true;
                                                    lnkFinSAPDeclined.Visible = true;
                                                    lnkFinSAPComments.Visible = true;
                                                    lnkFinalSAPBackUp.Visible = true;
                                                }
                                                else
                                                {
                                                    lnkFinalSAPBackUp.Visible = false;
                                                    lnkFinSAPApproved.Visible = false;
                                                    lnkFinSAPDeclined.Visible = false;
                                                    lnkFinSAPComments.Visible = false;
                                                }
                                                break;
                                            }
                                        }

                                        if (ds.Tables[13].Rows[intRowCount]["Function_Name"].ToString() == "SMART Clearance")
                                        {
                                            if (ds.Tables[13].Rows[intRowCount]["Approver_Name"] != System.DBNull.Value)
                                                strFUNAPPName = ds.Tables[13].Rows[intRowCount]["Approver_Name"].ToString();
                                            else
                                                strFUNAPPName = String.Empty;

                                            if (strFUNAPPName.Trim().ToUpper() == objclsSecurity.UserName.Trim().ToUpper())
                                            {
                                                //'Chech for the current status
                                                string strAppStrStatus = string.Empty;
                                                strAppStrStatus = "N";

                                                if (strAppStrStatus != "Y")
                                                {
                                                    lnkFinSMARTClearanceApproved.Visible = true;
                                                    lnkFinSMARTClearanceDeclined.Visible = true;
                                                    lnkFinSMARTClearanceComments.Visible = true;
                                                    lnkFinalSMARTClearanceBackUp.Visible = true;
                                                }
                                                else
                                                {
                                                    lnkFinalSMARTClearanceBackUp.Visible = false;
                                                    lnkFinSMARTClearanceApproved.Visible = false;
                                                    lnkFinSMARTClearanceDeclined.Visible = false;
                                                    lnkFinSMARTClearanceComments.Visible = false;
                                                }
                                                break;
                                            }
                                        }


                                        if (ds.Tables[13].Rows[intRowCount]["Function_Name"].ToString() == "Site Planning")
                                        {
                                            if (ds.Tables[13].Rows[intRowCount]["Approver_Name"] != System.DBNull.Value)
                                                strFUNAPPName = ds.Tables[13].Rows[intRowCount]["Approver_Name"].ToString();
                                            else
                                                strFUNAPPName = String.Empty;

                                            if (strFUNAPPName.Trim().ToUpper() == objclsSecurity.UserName.Trim().ToUpper())
                                            {
                                                //'Chech for the current status
                                                string strAppStrStatus = string.Empty;
                                                strAppStrStatus = "N";

                                                if (strAppStrStatus != "Y")
                                                {
                                                    lnkFinSitePlanningApproved.Visible = true;
                                                    lnkFinSitePlanningDeclined.Visible = true;
                                                    lnkFinSitePlanComments.Visible = true;
                                                    lnkFinalSitePlnaBackUp.Visible = true;
                                                }
                                                else
                                                {
                                                    lnkFinalSitePlnaBackUp.Visible = false;
                                                    lnkFinSitePlanningDeclined.Visible = false;
                                                    lnkFinSitePlanningApproved.Visible = false;
                                                    lnkFinSitePlanComments.Visible = false;
                                                }
                                                break;
                                            }
                                        }


                                        if (ds.Tables[13].Rows[intRowCount]["Function_Name"].ToString() == "Site Contact")
                                        {
                                            if (ds.Tables[13].Rows[intRowCount]["Approver_Name"] != System.DBNull.Value)
                                                strFUNAPPName = ds.Tables[13].Rows[intRowCount]["Approver_Name"].ToString();
                                            else
                                                strFUNAPPName = String.Empty;

                                            if (strFUNAPPName.Trim().ToUpper() == objclsSecurity.UserName.Trim().ToUpper())
                                            {
                                                //'Chech for the current status
                                                string strAppStrStatus = string.Empty;
                                                strAppStrStatus = "N";

                                                if (strAppStrStatus != "Y")
                                                {
                                                    lnkFinSiteContactApproved.Visible = true;
                                                    lnkFinSiteContactDeclined.Visible = true;
                                                    lnkFinSiteConComments.Visible = true;
                                                    lnkFinalSiteBackUp.Visible = true;
                                                }
                                                else
                                                {
                                                    lnkFinalSiteBackUp.Visible = false;
                                                    lnkFinSiteContactDeclined.Visible = false;
                                                    lnkFinSiteContactApproved.Visible = false;
                                                    lnkFinSiteConComments.Visible = false;
                                                }
                                                break;
                                            }
                                        }



                                        if (ds.Tables[13].Rows[intRowCount]["Function_Name"].ToString() == "Site Finance")
                                        {
                                            if (ds.Tables[13].Rows[intRowCount]["Approver_Name"] != System.DBNull.Value)
                                                strFUNAPPName = ds.Tables[13].Rows[intRowCount]["Approver_Name"].ToString();
                                            else
                                                strFUNAPPName = String.Empty;

                                            if (strFUNAPPName.Trim().ToUpper() == objclsSecurity.UserName.Trim().ToUpper())
                                            {
                                                //'Chech for the current status
                                                string strAppStrStatus = string.Empty;
                                                strAppStrStatus = "N";

                                                if (strAppStrStatus != "Y")
                                                {
                                                    lnkFinSiteFinanceApproved.Visible = true;
                                                    lnkFinSiteFinananceDeclined.Visible = true;
                                                    lnkFinSiteFinaComments.Visible = true;
                                                    lnkFinalSiteSiteFanBackUp.Visible = true;
                                                }
                                                else
                                                {
                                                    lnkFinalSiteSiteFanBackUp.Visible = false;
                                                    lnkFinSiteFinaComments.Visible = false;
                                                    lnkFinSiteFinanceApproved.Visible = false;
                                                    lnkFinSiteFinananceDeclined.Visible = false;
                                                }
                                                break;
                                            }
                                        }


                                        if (ds.Tables[13].Rows[intRowCount]["Function_Name"].ToString() == "Site Leadership")
                                        {
                                            if (ds.Tables[13].Rows[intRowCount]["Approver_Name"] != System.DBNull.Value)
                                                strFUNAPPName = ds.Tables[13].Rows[intRowCount]["Approver_Name"].ToString();
                                            else
                                                strFUNAPPName = String.Empty;

                                            if (strFUNAPPName.Trim().ToUpper() == objclsSecurity.UserName.Trim().ToUpper())
                                            {
                                                //'Chech for the current status
                                                string strAppStrStatus = string.Empty;
                                                strAppStrStatus = "N";

                                                if (strAppStrStatus != "Y")
                                                {
                                                    lnkFinSiteLeadershipApproved.Visible = true;
                                                    lnkFinSiteLeadershipDeclined.Visible = true;
                                                    lnkFinSiteLeadComments.Visible = true;
                                                    lnkFinalSiteSiteLeadBackUp.Visible = true;
                                                }
                                                else
                                                {
                                                    lnkFinalSiteSiteLeadBackUp.Visible = false;
                                                    lnkFinSiteLeadComments.Visible = false;
                                                    lnkFinSiteLeadershipApproved.Visible = false;
                                                    lnkFinSiteLeadershipDeclined.Visible = false;
                                                }
                                                break;
                                            }
                                        }

                                        if (ds.Tables[13].Rows[intRowCount]["Function_Name"].ToString() == "PS&RA")
                                        {
                                            if (ds.Tables[13].Rows[intRowCount]["Approver_Name"] != System.DBNull.Value)
                                                strFUNAPPName = ds.Tables[13].Rows[intRowCount]["Approver_Name"].ToString();
                                            else
                                                strFUNAPPName = String.Empty;

                                            if (strFUNAPPName.Trim().ToUpper() == objclsSecurity.UserName.Trim().ToUpper())
                                            {
                                                //'Chech for the current status
                                                string strAppStrStatus = string.Empty;
                                                strAppStrStatus = "N";

                                                if (strAppStrStatus != "Y")
                                                {
                                                    lnkFinPSRAApproved.Visible = true;
                                                    lnkFinPSRADeclined.Visible = true;
                                                    lnkFinPSRAComments.Visible = true;
                                                    lnkFinalPSRABackUp.Visible = true;
                                                }
                                                else
                                                {
                                                    lnkFinalPSRABackUp.Visible = false;
                                                    lnkFinPSRAComments.Visible = false;
                                                    lnkFinPSRAApproved.Visible = false;
                                                    lnkFinPSRADeclined.Visible = false;
                                                }
                                                break;
                                            }
                                        }

                                        if (ds.Tables[13].Rows[intRowCount]["Function_Name"].ToString() == "Timing Gate Exception")
                                        {
                                            if (ds.Tables[13].Rows[intRowCount]["Approver_Name"] != System.DBNull.Value)
                                                strFUNAPPName = ds.Tables[13].Rows[intRowCount]["Approver_Name"].ToString();
                                            else
                                                strFUNAPPName = String.Empty;

                                            if (strFUNAPPName.Trim().ToUpper() == objclsSecurity.UserName.Trim().ToUpper())
                                            {
                                                //'Chech for the current status
                                                string strAppStrStatus = string.Empty;
                                                strAppStrStatus = "N";

                                                if (strAppStrStatus != "Y")
                                                {
                                                    lnkFinTimingGateApproved.Visible = true;
                                                    lnkFinTimingGateDeclined.Visible = true;
                                                    lnkFinTimingGateComments.Visible = true;
                                                    lnkFinalTimingGateBackUp.Visible = true;
                                                }
                                                else
                                                {
                                                    lnkFinalTimingGateBackUp.Visible = false;
                                                    lnkFinTimingGateComments.Visible = false;
                                                    lnkFinTimingGateApproved.Visible = false;
                                                    lnkFinTimingGateDeclined.Visible = false;
                                                }
                                                break;
                                            }
                                        }

                                        if (ds.Tables[13].Rows[intRowCount]["Function_Name"].ToString() == "QA")
                                        {
                                            if (ds.Tables[13].Rows[intRowCount]["Approver_Name"] != System.DBNull.Value)
                                                strFUNAPPName = ds.Tables[13].Rows[intRowCount]["Approver_Name"].ToString();
                                            else
                                                strFUNAPPName = String.Empty;

                                            if (strFUNAPPName.Trim().ToUpper() == objclsSecurity.UserName.Trim().ToUpper())
                                            {
                                                //'Chech for the current status
                                                string strAppStrStatus = string.Empty;
                                                strAppStrStatus = "N";

                                                if (strAppStrStatus != "Y")
                                                {
                                                    lnkFinQAApproved.Visible = true;
                                                    lnkFinQADeclined.Visible = true;
                                                    lnkFinQAComments.Visible = true;
                                                    lnkFinalQABackUp.Visible = true;
                                                }
                                                else
                                                {
                                                    lnkFinalQABackUp.Visible = false;
                                                    lnkFinQAComments.Visible = false;
                                                    lnkFinQAApproved.Visible = false;
                                                    lnkFinQADeclined.Visible = false;
                                                }
                                                break;
                                            }
                                        }


                                        if (ds.Tables[13].Rows[intRowCount]["Function_Name"].ToString() == "Central QA")
                                        {
                                            if (ds.Tables[13].Rows[intRowCount]["Approver_Name"] != System.DBNull.Value)
                                                strFUNAPPName = ds.Tables[13].Rows[intRowCount]["Approver_Name"].ToString();
                                            else
                                                strFUNAPPName = String.Empty;

                                            if (strFUNAPPName.Trim().ToUpper() == objclsSecurity.UserName.Trim().ToUpper())
                                            {
                                                //'Chech for the current status
                                                string strAppStrStatus = string.Empty;
                                                strAppStrStatus = "N";

                                                if (strAppStrStatus != "Y")
                                                {
                                                    lnkFinCentralQAApproved.Visible = true;
                                                    lnkFinCentralQADeclined.Visible = true;
                                                    lnkFinCentralQAComments.Visible = true;
                                                    lnkFinalCentralQABackUp.Visible = true;
                                                }
                                                else
                                                {
                                                    lnkFinCentralQAApproved.Visible = false;
                                                    lnkFinCentralQADeclined.Visible = false;
                                                    lnkFinCentralQAComments.Visible = false;
                                                    lnkFinalCentralQABackUp.Visible = false;
                                                }
                                                break;
                                            }
                                        }



                                        if (ds.Tables[13].Rows[intRowCount]["Function_Name"].ToString() == "Standards Office")
                                        {
                                            if (ds.Tables[13].Rows[intRowCount]["Approver_Name"] != System.DBNull.Value)
                                                strFUNAPPName = ds.Tables[13].Rows[intRowCount]["Approver_Name"].ToString();
                                            else
                                                strFUNAPPName = String.Empty;

                                            if (strFUNAPPName.Trim().ToUpper() == objclsSecurity.UserName.Trim().ToUpper())
                                            {
                                                //'Chech for the current status
                                                string strAppStrStatus = string.Empty;
                                                strAppStrStatus = "N";

                                                if (strAppStrStatus != "Y")
                                                {
                                                    lnkFinStandardOfficeApproved.Visible = true;
                                                    lnkFinStandardOfficeDeclined.Visible = true;
                                                    lnkFinStandsOffComments.Visible = true;
                                                    lnkStndsOffiBackUp.Visible = true;
                                                }
                                                else
                                                {
                                                    lnkStndsOffiBackUp.Visible = false;
                                                    lnkFinStandsOffComments.Visible = false;
                                                    lnkFinStandardOfficeApproved.Visible = false;
                                                    lnkFinStandardOfficeDeclined.Visible = false;
                                                }
                                                break;
                                            }
                                        }

                                        // 'Added by David - MUREO PCR : 4 Additional Approvers - Date: 01/03/2012


                                        if (ds.Tables[13].Rows[intRowCount]["Function_Name"].ToString() == "Additional approver #1")
                                        {
                                            if (ds.Tables[13].Rows[intRowCount]["Approver_Name"] != System.DBNull.Value)
                                                strFUNAPPName = ds.Tables[13].Rows[intRowCount]["Approver_Name"].ToString();
                                            else
                                                strFUNAPPName = String.Empty;

                                            if (strFUNAPPName.Trim().ToUpper() == objclsSecurity.UserName.Trim().ToUpper())
                                            {
                                                //'Chech for the current status
                                                string strAppStrStatus = string.Empty;
                                                strAppStrStatus = "N";

                                                if (strAppStrStatus != "Y")
                                                {
                                                    lnkFinAdditionalApprover1Approved.Visible = true;
                                                    lnkFinAdditionalApprover1Declined.Visible = true;
                                                    lnkFinAdditionalApprover1Comments.Visible = true;
                                                    lnkFinAdditionalApprover1BackUp.Visible = true;
                                                }
                                                else
                                                {
                                                    lnkFinAdditionalApprover1BackUp.Visible = false;
                                                    lnkFinAdditionalApprover1Comments.Visible = false;
                                                    lnkFinAdditionalApprover1Approved.Visible = false;
                                                    lnkFinAdditionalApprover1Declined.Visible = false;
                                                }
                                                break;
                                            }
                                        }


                                        if (ds.Tables[13].Rows[intRowCount]["Function_Name"].ToString() == "Additional approver #2")
                                        {
                                            if (ds.Tables[13].Rows[intRowCount]["Approver_Name"] != System.DBNull.Value)
                                                strFUNAPPName = ds.Tables[13].Rows[intRowCount]["Approver_Name"].ToString();
                                            else
                                                strFUNAPPName = String.Empty;

                                            if (strFUNAPPName.Trim().ToUpper() == objclsSecurity.UserName.Trim().ToUpper())
                                            {
                                                //'Chech for the current status
                                                string strAppStrStatus = string.Empty;
                                                strAppStrStatus = "N";

                                                if (strAppStrStatus != "Y")
                                                {
                                                    lnkFinAdditionalApprover2Approved.Visible = true;
                                                    lnkFinAdditionalApprover2Declined.Visible = true;
                                                    lnkFinAdditionalApprover2Comments.Visible = true;
                                                    lnkFinAdditionalApprover2BackUp.Visible = true;
                                                }
                                                else
                                                {
                                                    lnkFinAdditionalApprover2BackUp.Visible = false;
                                                    lnkFinAdditionalApprover2Comments.Visible = false;
                                                    lnkFinAdditionalApprover2Approved.Visible = false;
                                                    lnkFinAdditionalApprover2Declined.Visible = false;
                                                }
                                                break;
                                            }
                                        }


                                        if (ds.Tables[13].Rows[intRowCount]["Function_Name"].ToString() == "Additional approver #3")
                                        {
                                            if (ds.Tables[13].Rows[intRowCount]["Approver_Name"] != System.DBNull.Value)
                                                strFUNAPPName = ds.Tables[13].Rows[intRowCount]["Approver_Name"].ToString();
                                            else
                                                strFUNAPPName = String.Empty;

                                            if (strFUNAPPName.Trim().ToUpper() == objclsSecurity.UserName.Trim().ToUpper())
                                            {
                                                //'Chech for the current status
                                                string strAppStrStatus = string.Empty;
                                                strAppStrStatus = "N";

                                                if (strAppStrStatus != "Y")
                                                {
                                                    lnkFinAdditionalApprover3Approved.Visible = true;
                                                    lnkFinAdditionalApprover3Declined.Visible = true;
                                                    lnkFinAdditionalApprover3Comments.Visible = true;
                                                    lnkFinAdditionalApprover3BackUp.Visible = true;
                                                }
                                                else
                                                {
                                                    lnkFinAdditionalApprover3BackUp.Visible = false;
                                                    lnkFinAdditionalApprover3Comments.Visible = false;
                                                    lnkFinAdditionalApprover3Approved.Visible = false;
                                                    lnkFinAdditionalApprover3Declined.Visible = false;
                                                }
                                                break;
                                            }
                                        }


                                        if (ds.Tables[13].Rows[intRowCount]["Function_Name"].ToString() == "Additional approver #4")
                                        {
                                            if (ds.Tables[13].Rows[intRowCount]["Approver_Name"] != System.DBNull.Value)
                                                strFUNAPPName = ds.Tables[13].Rows[intRowCount]["Approver_Name"].ToString();
                                            else
                                                strFUNAPPName = String.Empty;

                                            if (strFUNAPPName.Trim().ToUpper() == objclsSecurity.UserName.Trim().ToUpper())
                                            {
                                                //'Chech for the current status
                                                string strAppStrStatus = string.Empty;
                                                strAppStrStatus = "N";

                                                if (strAppStrStatus != "Y")
                                                {
                                                    lnkFinAdditionalApprover4Approved.Visible = true;
                                                    lnkFinAdditionalApprover4Declined.Visible = true;
                                                    lnkFinAdditionalApprover4Comments.Visible = true;
                                                    lnkFinAdditionalApprover4BackUp.Visible = true;
                                                }
                                                else
                                                {
                                                    lnkFinAdditionalApprover4BackUp.Visible = false;
                                                    lnkFinAdditionalApprover4Comments.Visible = false;
                                                    lnkFinAdditionalApprover4Approved.Visible = false;
                                                    lnkFinAdditionalApprover4Declined.Visible = false;
                                                }
                                                break;
                                            }
                                        }



                                    }
                                }
                            }
                            Get_EO_Mandatory_Lock();
                            GET_EO_Preliminary_Lock();
                            GET_EO_Final_Edit();
                            GET_EO_CloseOut_Edit();
                            Mandatory_final_lock();
                            CarryApprovalDetais();
                            lblStageLevel.Text = "Final";
                            lblStatusType.Text = "Draft";
                            CarryPrelToFinal();
                            CarryApprovalDetais();
                        }
                        else if ((strCurrentStage.ToUpper() == "Final".ToUpper()) && (strStatus.ToUpper() == "Routed".ToUpper()))
                        {
                            ViewState["printstage"] = "Final";
                            btnSave.Visible = false;
                            imgSaveResume.Visible = false;
                            btnExportPilotLine.Visible = false;
                            ViewState["LockMode"] = "FINAL";
                            //'Final Approval Check
                            Get_EO_Mandatory_Lock();
                            finalApprovalCheck();
                            GET_EO_Preliminary_Lock();
                            GET_EO_Final_Lock();
                            GET_EO_CloseOut_Edit();
                            CarryApprovalDetaisfinalco();

                            if (ViewState["Two_Tab_Routing"].ToString() == "Y")
                            {
                                lblStageLevel.Text = "Final" + "<br>" + "Preliminary";
                                lblStatusType.Text = "&nbsp;" + "Routed" + "<br>&nbsp;" + " Routed";
                            }
                            else
                            {
                                lblStageLevel.Text = "Final";
                                lblStatusType.Text = "Routed";
                            }

                            Mandatory_final_lock();

                        }
                        else if ((strCurrentStage.ToUpper() == "CloseOut".ToUpper()) && (strStatus.ToUpper() == "Draft".ToUpper()))
                        {
                            ViewState["printstage"] = "CloseOut";
                            string strOriginator = string.Empty;

                            if (objEOBA.GETEOMandatory(Convert.ToInt32(ViewState["EOID"]), ref ds))
                            {
                                if (ds.Tables.Count > 0)
                                {
                                    if (ds.Tables[0].Rows.Count != 0)
                                    {
                                        if (ds.Tables[0].Rows[0]["Originator"] != System.DBNull.Value)
                                            strOriginator = ds.Tables[0].Rows[0]["Originator"].ToString();
                                        else
                                            strOriginator = String.Empty;
                                    }
                                    if (strOriginator.ToString() == objclsSecurity.UserName.Trim())
                                        lnkApproveCloseoutEO.Visible = true;

                                }
                            }
                            ViewState["LockMode"] = "FINAL";
                            string strFUNAPPName = string.Empty;
                            if (objEOBA.GET_EO_Closeout(Convert.ToInt32(ViewState["EOID"]), ref ds))
                            {
                                if (ds.Tables.Count > 0)
                                {
                                    if (ds.Tables[5].Rows.Count != 0)
                                    {
                                        for (int intRowCount = 0; intRowCount <= ds.Tables[5].Rows.Count - 1; intRowCount++)
                                        {

                                            if (ds.Tables[5].Rows[intRowCount]["Function_Name"].ToString() == "Site Finance")
                                            {
                                                if (ds.Tables[5].Rows[intRowCount]["Approver_Name"] != System.DBNull.Value)
                                                    strFUNAPPName = ds.Tables[5].Rows[intRowCount]["Approver_Name"].ToString();
                                                else
                                                    strFUNAPPName = String.Empty;

                                                if (strFUNAPPName.Trim().ToUpper() == objclsSecurity.UserName.Trim().ToUpper())
                                                {
                                                    //'Chech for the current status
                                                    string strAppStrStatus = string.Empty;
                                                    strAppStrStatus = "N";

                                                    if (strAppStrStatus != "Y")
                                                    {
                                                        lnkCloseSiteFinanceApproved.Visible = true;
                                                        lnkCloseSiteFinanceDeclined.Visible = true;
                                                        lnkCOSiteFinanceComments.Visible = true;
                                                        lnkCOSiteFinaBackUp.Visible = true;
                                                    }
                                                    else
                                                    {
                                                        lnkCOSiteFinaBackUp.Visible = false;
                                                        lnkCOSiteFinanceComments.Visible = false;
                                                        lnkCloseSiteFinanceApproved.Visible = false;
                                                        lnkCloseSiteFinanceDeclined.Visible = false;
                                                    }
                                                    break;
                                                }
                                            }


                                            if (ds.Tables[5].Rows[intRowCount]["Function_Name"].ToString() == "Budget Center")
                                            {
                                                if (ds.Tables[5].Rows[intRowCount]["Approver_Name"] != System.DBNull.Value)
                                                    strFUNAPPName = ds.Tables[5].Rows[intRowCount]["Approver_Name"].ToString();
                                                else
                                                    strFUNAPPName = String.Empty;

                                                if (strFUNAPPName.Trim().ToUpper() == objclsSecurity.UserName.Trim().ToUpper())
                                                {
                                                    //'Chech for the current status
                                                    string strAppStrStatus = string.Empty;
                                                    strAppStrStatus = "N";

                                                    if (strAppStrStatus != "Y")
                                                    {
                                                        lnkCloseBudgetApproved.Visible = true;
                                                        lnkCloseBudgetDeclined.Visible = true;
                                                        lnkCOBOComments.Visible = true;
                                                        lnkCOBOBackUp.Visible = true;
                                                    }
                                                    else
                                                    {
                                                        lnkCOBOBackUp.Visible = false;
                                                        lnkCOBOComments.Visible = false;
                                                        lnkCloseBudgetApproved.Visible = false;
                                                        lnkCloseBudgetDeclined.Visible = false;
                                                    }
                                                    break;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            Get_EO_Mandatory_Lock();
                            GET_EO_Preliminary_Lock();
                            GET_EO_Final_Lock();
                            GET_EO_CloseOut_Edit();
                            lblStageLevel.Text = "CloseOut";
                            lblStatusType.Text = "Draft";
                            Mandatory_final_lock();
                            CarryApprovalDetaisfinalco();


                        }
                        else if ((strCurrentStage.ToUpper() == "CloseOut".ToUpper()) && (strStatus.ToUpper() == "Routed".ToUpper()))
                        {
                            ViewState["printstage"] = "CloseOut";
                            btnSave.Visible = false;
                            imgSaveResume.Visible = false;
                            btnExportPilotLine.Visible = false;
                            closeOutApprovalCheck();
                            Get_EO_Mandatory_Lock();
                            GET_EO_Preliminary_Lock();
                            GET_EO_Final_Lock();
                            GET_EO_CloseOut_Lock();
                            lblStageLevel.Text = "CloseOut";
                            lblStatusType.Text = "Routed";
                            Mandatory_final_lock();

                        }
                        else if ((strCurrentStage.ToUpper() == "CloseOut".ToUpper()) && (strStatus.ToUpper() == "Closed".ToUpper() || strStatus.ToUpper() == "Approved".ToUpper()))
                        {
                            ViewState["printstage"] = "CloseOut";
                            Get_EO_Mandatory_Lock();
                            GET_EO_Preliminary_Lock();
                            GET_EO_Final_Lock();
                            GET_EO_CloseOut_Lock();
                            lblStageLevel.Text = "CloseOut";
                            lblStatusType.Text = "Completed";
                            Mandatory_final_lock();
                            btnSave.Visible = false;
                            imgSaveResume.Visible = false;
                            btnExportPilotLine.Visible = false;
                        }

                    }
                    else if (Request.QueryString["From"].ToString() == "CopyNew")
                    {
                        ViewState["EOID"] = Request.QueryString["EOID"];
                        Get_EO_Mandatory_Edit();
                        GET_EO_Preliminary_Edit();
                        GET_EO_Final_Edit();
                        GET_EO_CloseOut_Edit();
                    }
                    else if (Request.QueryString["From"].ToString() == "ForEOEdit" || Request.QueryString["From"].ToString() == "MailEdit")
                    {
                        ViewState["EOID"] = Request.QueryString["EOID"];
                        imgbtnCopyNew.Visible = false;
                        trProdRegulatedProductRAQ1.Visible = true;
                        trProdRegulatedProductRAQ2.Visible = true;
                        PSR1.Visible = false;
                        PSR2.Visible = false;
                        PSR3.Visible = false;
                        PSR4.Visible = false;
                        PSR5.Visible = false;
                        TRPSRAChanged.Visible = false;
                        TRPSRAChanged1.Visible = false;
                        Label49.Visible = false;
                        string strCurrentStage = string.Empty;
                        string strStatus = string.Empty;
                        int intPlantID;

                        DataSet ds = new DataSet();
                        if (objEOBA.GETEOMandatory(Convert.ToInt32(ViewState["EOID"]), ref ds))
                        {
                            if (ds.Tables.Count > 0)
                            {
                                if (ds.Tables[0].Rows.Count != 0)
                                {
                                    if (ds.Tables[0].Rows[0]["Current_Stage"] != System.DBNull.Value)
                                    {
                                        strCurrentStage = ds.Tables[0].Rows[0]["Current_Stage"].ToString();
                                        ViewState["stage"] = ds.Tables[0].Rows[0]["Current_Stage"];
                                    }
                                    else
                                    {
                                        strCurrentStage = String.Empty;
                                        ViewState["stage"] = String.Empty;
                                    }

                                    if (ds.Tables[0].Rows[0]["Plant_ID"] != System.DBNull.Value)
                                    {
                                        intPlantID = Convert.ToInt32(ds.Tables[0].Rows[0]["Plant_ID"]);
                                        ViewState["PlantID"] = ds.Tables[0].Rows[0]["Plant_ID"];
                                    }
                                    else
                                    {
                                        intPlantID = 0; ;
                                        ViewState["PlantID"] = String.Empty;
                                    }

                                    if (ds.Tables[0].Rows[0]["Stage_Status"] != System.DBNull.Value)
                                    {
                                        strStatus = ds.Tables[0].Rows[0]["Stage_Status"].ToString();
                                        ViewState["Status"] = ds.Tables[0].Rows[0]["Stage_Status"];
                                    }
                                    else
                                    {
                                        strStatus = String.Empty;
                                        ViewState["Status"] = String.Empty;
                                    }

                                    if (ds.Tables[0].Rows[0]["Plant_ID"] != System.DBNull.Value)
                                        ViewState["PlantID"] = ds.Tables[0].Rows[0]["Plant_ID"];
                                    else
                                        ViewState["PlantID"] = 0;

                                    if (ds.Tables[0].Rows[0]["EO_Mode"] != System.DBNull.Value)
                                        ViewState["EOMode"] = ds.Tables[0].Rows[0]["EO_Mode"];
                                    else
                                        ViewState["EOMode"] = "E";

                                }

                                if (ds.Tables[2].Rows.Count != 0)
                                {
                                    string strBrand = string.Empty;

                                    for (int intBrandSegList = 0; intBrandSegList < ds.Tables[2].Rows.Count; intBrandSegList++)
                                    {

                                        if (strBrand == "")
                                            strBrand = ds.Tables[2].Rows[intBrandSegList]["Brand_Segment_ID"].ToString();
                                        else
                                            strBrand = strBrand + "," + ds.Tables[2].Rows[intBrandSegList]["Brand_Segment_ID"];
                                    }
                                    ViewState["BrandList"] = strBrand;
                                }
                                else
                                    ViewState["BrandList"] = "";
                            }
                        }
                        if ((strCurrentStage.ToUpper() == "Preliminary".ToUpper()) && (strStatus.ToUpper() == "Draft".ToUpper()))
                        {
                            ViewState["printstage"] = "Preliminary";
                            if (btnTabPreliminary.ImageUrl == "../Images/preliminary-over.gif")

                                lblStatusType.Text = "Draft";
                            else if (btnTabFinal.ImageUrl == "../Images/final-over.gif")

                                lblStatusType.Text = "Draft";
                            else if (btnTabCloseOut.ImageUrl == "../Images/close-out-over.gif")

                                lblStatusType.Text = "Draft";
                            imgPreFinalRoute.Visible = false;
                            imgCloseOutRoute.Visible = false;
                            ViewState["LockMode"] = "NOTHING";
                            Get_EO_Mandatory_Edit();
                            GET_EO_Preliminary_Edit();
                            GET_EO_Final_Edit();
                            GET_EO_CloseOut_Edit();

                        }
                        else if ((strCurrentStage.ToUpper() == "Preliminary".ToUpper()) && (strStatus.ToUpper() == "Routed".ToUpper()))
                        {
                            ViewState["printstage"] = "Preliminary";
                            btnSave.Visible = false;
                            imgSaveResume.Visible = false;
                            btnExportPilotLine.Visible = false;
                            if (btnTabPreliminary.ImageUrl == "../Images/preliminary-over.gif")
                                lblStatusType.Text = "Routed";
                            else if (btnTabFinal.ImageUrl == "../Images/final-over.gif")
                                lblStatusType.Text = "Draft";
                            else if (btnTabCloseOut.ImageUrl == "../Images/close-out-over.gif")
                                lblStatusType.Text = "Draft";
                            imgPreRoute.Visible = false;
                            imgPreFinalRoute.Visible = true;
                            imgCloseOutRoute.Visible = false;
                            ViewState["LockMode"] = "PRELIMINARY";
                            Get_EO_Mandatory_Lock();
                            GET_EO_Preliminary_Lock();
                            GET_EO_Final_Edit();
                            GET_EO_CloseOut_Edit();
                            Mandatory_Pre_lock();
                        }
                        else if ((strCurrentStage.ToUpper() == "Final".ToUpper()) && (strStatus.ToUpper() == "Draft".ToUpper()))
                        {
                            ViewState["printstage"] = "Final";
                            if (btnTabPreliminary.ImageUrl == "../Images/preliminary-over.gif")
                                lblStatusType.Text = "Routed";
                            else if (btnTabFinal.ImageUrl == "../Images/final-over.gif")
                                lblStatusType.Text = "Draft";
                            else if (btnTabCloseOut.ImageUrl == "../Images/close-out-over.gif")
                                lblStatusType.Text = "Draft";

                            imgPreRoute.Visible = false;
                            imgPreFinalRoute.Visible = true;
                            imgCloseOutRoute.Visible = false;
                            ViewState["LockMode"] = "PRELIMINARY";
                            Get_EO_Mandatory_Lock();
                            GET_EO_Preliminary_Lock();
                            GET_EO_Final_Edit();
                            GET_EO_CloseOut_Edit();
                        }
                        else if ((strCurrentStage.ToUpper() == "Final".ToUpper()) && (strStatus.ToUpper() == "Routed".ToUpper()))
                        {
                            ViewState["printstage"] = "Final";
                            btnSave.Visible = false;
                            imgSaveResume.Visible = false;
                            btnExportPilotLine.Visible = false;
                            if (btnTabPreliminary.ImageUrl == "../Images/preliminary-over.gif")

                                lblStatusType.Text = "Routed";
                            else if (btnTabFinal.ImageUrl == "../Images/final-over.gif")
                                lblStatusType.Text = "Routed";
                            else if (btnTabCloseOut.ImageUrl == "../Images/close-out-over.gif")

                                lblStatusType.Text = "Draft";

                            imgPreRoute.Visible = false;
                            imgPreFinalRoute.Visible = false;
                            imgCloseOutRoute.Visible = true;
                            ViewState["LockMode"] = "FINAL";
                            Get_EO_Mandatory_Lock();
                            GET_EO_Preliminary_Lock();
                            GET_EO_Final_Lock();
                            GET_EO_CloseOut_Edit();
                        }
                        else if ((strCurrentStage.ToUpper() == "CloseOut".ToUpper()) && (strStatus.ToUpper() == "Draft".ToUpper()))
                        {
                            ViewState["printstage"] = "CloseOut";
                            if (btnTabPreliminary.ImageUrl == "../Images/preliminary-over.gif")
                                lblStatusType.Text = "Routed";
                            else if (btnTabFinal.ImageUrl == "../Images/final-over.gif")
                                lblStatusType.Text = "Routed";
                            else if (btnTabCloseOut.ImageUrl == "../Images/close-out-over.gif")
                                lblStatusType.Text = "Draft";
                            imgPreRoute.Visible = false;
                            imgPreFinalRoute.Visible = false;
                            imgCloseOutRoute.Visible = true;
                            ViewState["LockMode"] = "FINAL";
                            Get_EO_Mandatory_Lock();
                            GET_EO_Preliminary_Lock();
                            GET_EO_Final_Lock();
                            GET_EO_CloseOut_Edit();
                        }
                        else if ((strCurrentStage.ToUpper() == "CloseOut".ToUpper()) && (strStatus.ToUpper() == "Routed".ToUpper()))
                        {
                            ViewState["printstage"] = "CloseOut";
                            btnSave.Visible = false;
                            TxtAppYes.Text = Request.QueryString["EOID"];
                            imgSaveResume.Visible = false;
                            btnExportPilotLine.Visible = false;
                            if (btnTabPreliminary.ImageUrl == "../Images/preliminary-over.gif")
                                lblStatusType.Text = "Routed";
                            else if (btnTabFinal.ImageUrl == "../Images/final-over.gif")
                                lblStatusType.Text = "Draft";
                            else if (btnTabCloseOut.ImageUrl == "../Images/close-out-over.gif")
                                lblStatusType.Text = "Routed";
                            imgPreRoute.Visible = false;
                            imgPreFinalRoute.Visible = false;
                            imgCloseOutRoute.Visible = false;
                            ViewState["LockMode"] = "CLOSEOUT";
                            Get_EO_Mandatory_Lock();
                            GET_EO_Preliminary_Lock();
                            GET_EO_Final_Lock();
                            GET_EO_CloseOut_Lock();
                        }
                    }
                    else if (Request.QueryString["From"].ToString() == "ForEOLock")
                    {
                        if (Request.QueryString["For"] != "FYI")
                        {
                            strUserRole = objclsSecurity.UserRole();
                            if ((strUserRole == "MUREO_Readers") || (strUserRole == "Readers"))
                            { }
                            else
                            {
                                imgEditEo.Visible = true;
                            }
                        }

                        imgSaveResume.Visible = false;
                        btnSave.Visible = false;
                        btnExportPilotLine.Visible = false;
                        imgPreRoute.Visible = false;
                        imgPreFinalRoute.Visible = false;
                        imgCloseOutRoute.Visible = false;
                        lnkbeforeFinTabRouApp.Visible = false;

                        ViewState["EOID"] = Request.QueryString["EOID"];
                        btnExportPilotLine.Visible = false;
                        Get_EO_Mandatory_Lock();
                        GET_EO_Preliminary_Lock();
                        GET_EO_Final_Lock();
                        GET_EO_CloseOut_Lock();
                        Mandatory_final_lock();
                        Mandatory_Pre_lock();


                        //'98989898
                        string strCurrentStage = string.Empty;
                        string strStatus = string.Empty;
                        DataSet ds = new DataSet();

                        if (objEOBA.GETEOMandatory(Convert.ToInt32(ViewState["EOID"]), ref ds))
                        {
                            if (ds.Tables.Count > 0)
                            {
                                if (ds.Tables[0].Rows.Count != 0)
                                {
                                    if (ds.Tables[0].Rows[0]["Current_Stage"] != System.DBNull.Value)
                                    {
                                        strCurrentStage = ds.Tables[0].Rows[0]["Current_Stage"].ToString();
                                        ViewState["stage"] = ds.Tables[0].Rows[0]["Current_Stage"].ToString();
                                    }
                                    else
                                        strCurrentStage = String.Empty;


                                    if (ds.Tables[0].Rows[0]["Stage_Status"] != System.DBNull.Value)
                                    {
                                        strStatus = ds.Tables[0].Rows[0]["Stage_Status"].ToString();
                                        ViewState["Status"] = ds.Tables[0].Rows[0]["Stage_Status"].ToString();
                                    }
                                    else
                                        strStatus = String.Empty;



                                }
                            }
                        }
                        if (strCurrentStage.ToUpper() == "Preliminary".ToUpper() && strStatus == "Draft".ToUpper())
                        {
                            ViewState["stage"] = "Preliminary";
                            ViewState["Status"] = "Draft";
                            ViewState["printstage"] = "Preliminary";
                            ViewState["LockMode"] = "PRELIMINARY";
                            lblStageLevel.Text = "Preliminary";
                            lblStatusType.Text = "Draft";
                        }
                        else if ((strCurrentStage.ToUpper() == "Preliminary".ToUpper()) && (strStatus == "Routed".ToUpper()))
                        {
                            ViewState["stage"] = "Preliminary";
                            ViewState["Status"] = "Routed";
                            ViewState["printstage"] = "Preliminary";
                            ViewState["LockMode"] = "PRELIMINARY";
                            Mandatory_Pre_lock();
                            lblStageLevel.Text = "Preliminary";
                            lblStatusType.Text = "Routed";
                        }
                        else if ((strCurrentStage.ToUpper() == "Final".ToUpper() && strStatus.ToUpper() == "Draft".ToUpper()))
                        {
                            ViewState["stage"] = "Final";
                            ViewState["Status"] = "Draft";
                            ViewState["printstage"] = "Final";
                            ViewState["LockMode"] = "PRELIMINARY";
                            Mandatory_final_lock();
                            lblStageLevel.Text = "Final";
                            lblStatusType.Text = "Draft";
                        }
                        else if ((strCurrentStage.ToUpper() == "Final".ToUpper() && strStatus.ToUpper() == "Routed".ToUpper()))
                        {
                            ViewState["stage"] = "Final";
                            ViewState["Status"] = "Routed";
                            ViewState["printstage"] = "Final";
                            ViewState["LockMode"] = "FINAL";
                            Mandatory_final_lock();
                            lblStageLevel.Text = "Final";
                            lblStatusType.Text = "Routed";
                        }
                        else if (strCurrentStage.ToUpper() == "CloseOut".ToUpper() && strStatus.ToUpper() == "Draft".ToUpper())
                        {
                            ViewState["stage"] = "CloseOut";
                            ViewState["Status"] = "Draft";
                            ViewState["printstage"] = "CloseOut";
                            ViewState["LockMode"] = "FINAL";
                            Mandatory_AllTabs_lock();
                            lblStageLevel.Text = "CloseOut";
                            lblStatusType.Text = "Draft"; ;
                        }
                        else if (strCurrentStage.ToUpper() == "CloseOut".ToUpper() && strStatus.ToUpper() == "Routed".ToUpper())
                        {
                            ViewState["stage"] = "CloseOut";
                            ViewState["Status"] = "Routed";
                            ViewState["printstage"] = "CloseOut";
                            Mandatory_AllTabs_lock();
                            lblStageLevel.Text = "CloseOut";
                            lblStatusType.Text = "Routed";
                        }
                        else if (strCurrentStage.ToUpper() == "CloseOut".ToUpper() && (strStatus.ToUpper() == "Closed".ToUpper() || strStatus.ToUpper() == "Approved".ToUpper()))
                        {
                            trTowtabRoutePrelimData.Visible = false;
                            ViewState["printstage"] = "CloseOut";
                            Mandatory_AllTabs_lock();
                            if (strStatus.ToUpper() == "Closed".ToUpper())
                            {
                                ViewState["stage"] = "CloseOut";
                                ViewState["Status"] = "Closed";
                                lblStageLevel.Text = "CloseOut";
                                lblStatusType.Text = "Routed";
                            }
                            else if (strStatus.ToUpper() == "Approved".ToUpper())
                            {
                                ViewState["stage"] = "CloseOut";
                                ViewState["Status"] = "Approved";
                                lblStageLevel.Text = "CloseOut";
                                lblStatusType.Text = "Completed";
                            }
                        }
                    }
                }

                if (Request.QueryString["From"] != null && Request.QueryString["From"].ToString() == "EOReports")
                {
                    ViewState["Events"] = Request.QueryString["EventIDs"];
                    dgdMigratedEventInfo.Visible = true;
                    DataSet dsSeedDataByEventID = new DataSet();
                    int i;

                    //doubt moved a line up;
                    FillMigrateEventInfo(Request.QueryString["EventIDs"]);
                    if (objEOBA.GETEOSeedDataByEventIDs(Request.QueryString["EventIDs"], ref dsSeedDataByEventID))
                    {
                        if (dsSeedDataByEventID.Tables[0].Rows.Count != 0)
                        {
                            for (i = 0; i < dsSeedDataByEventID.Tables[0].Rows.Count; i++)
                            {
                                int intPrjList;
                                string strProjStatus = string.Empty;

                                for (intPrjList = 0; intPrjList < drpCategoryDB.Items.Count; intPrjList++)
                                {
                                    if (dsSeedDataByEventID.Tables[0].Rows[i][8].ToString() == drpCategoryDB.Items[intPrjList].Value)
                                        strProjStatus = "Yes";

                                }
                                try
                                {
                                    if (strProjStatus == "Yes")
                                    {
                                        drpCategoryDB.SelectedIndex = -1;
                                        drpCategoryDB.Items[drpCategoryDB.Items.IndexOf(drpCategoryDB.Items.FindByValue(dsSeedDataByEventID.Tables[0].Rows[i][8].ToString()))].Selected = true;
                                    }
                                }
                                catch (Exception)
                                {

                                }

                            }

                            drpCategoryDB.Enabled = false;
                            DataSet dsBrand = new DataSet();
                            if (objEOBA.FillListBoxWithBrands(drpCategoryDB.SelectedValue, ref dsBrand))
                            {
                                lbEOBrandsDB.DataSource = dsBrand.Tables[0];
                                lbEOBrandsDB.DataTextField = "Brand_Segment_Name";
                                lbEOBrandsDB.DataValueField = "Brand_Segment_ID";
                                lbEOBrandsDB.DataBind();
                            }
                            else
                            { return; }

                            for (i = 0; i < dsSeedDataByEventID.Tables[0].Rows.Count - 1; i++)
                            {
                                int intPrjList;
                                string strProjStatus = string.Empty;
                                for (intPrjList = 0; intPrjList < lbEOBrandsDB.Items.Count; intPrjList++)
                                {
                                    if (dsSeedDataByEventID.Tables[0].Rows[i][6].ToString() == lbEOBrandsDB.Items[intPrjList].Value.ToString())
                                        strProjStatus = "Yes";

                                }
                                if (strProjStatus == "Yes")
                                {
                                    ViewState["lstdis"] = "Yes";
                                    lbEOBrandsDB.Items[lbEOBrandsDB.Items.IndexOf(lbEOBrandsDB.Items.FindByValue(dsSeedDataByEventID.Tables[0].Rows[i][6].ToString()))].Attributes.Add("style", "font-weight:bold");
                                    lbEOBrandsDB.Items[lbEOBrandsDB.Items.IndexOf(lbEOBrandsDB.Items.FindByValue(dsSeedDataByEventID.Tables[0].Rows[i][6].ToString()))].Selected = true;
                                    foreach (ListItem li in lbEOBrandsDB.Items)
                                    {
                                        li.Attributes.Add("disabled", "disabled");
                                    }
                                    lbEOBrandsDB.AutoPostBack = false;

                                }
                            }
                            lbEOBrandsDB.Enabled = false;
                            lblEOSelectedBrandDB.Text = "";
                            lblBrandIDList.Text = "";
                            int intBrand;
                            for (intBrand = 0; intBrand < lbEOBrandsDB.Items.Count; intBrand++)
                            {
                                if (lbEOBrandsDB.Items[intBrand].Selected)
                                {
                                    if (lblEOSelectedBrandDB.Text == "")
                                        lblEOSelectedBrandDB.Text = lbEOBrandsDB.Items[intBrand].Text;
                                    else
                                        lblEOSelectedBrandDB.Text = lblEOSelectedBrandDB.Text + "," + lbEOBrandsDB.Items[intBrand].Text;

                                }

                            }

                            for (intBrand = 0; intBrand <= lbEOBrandsDB.Items.Count - 1; intBrand++)
                            {
                                if (lbEOBrandsDB.Items[intBrand].Selected == true)
                                {
                                    if (lblBrandIDList.Text == "")
                                        lblBrandIDList.Text = lbEOBrandsDB.Items[intBrand].Value;
                                    else
                                        lblBrandIDList.Text = lblBrandIDList.Text + "," + lbEOBrandsDB.Items[intBrand].Value;

                                }
                            }
                            lblBrandIDList.Enabled = false;

                            DataSet dsProj = new DataSet();
                            int intCatID;
                            if (drpCategoryDB.SelectedItem.Text == "--Select a Category--")
                                intCatID = 0;
                            else
                                intCatID = Convert.ToInt32(drpCategoryDB.SelectedItem.Value);

                            if (objEOBA.GET_MUR_Projects_By_Category_Brand_Segment(intCatID, lblBrandIDList.Text, ref dsProj))
                            {
                                drpEOProjectsDB.DataSource = dsProj;
                                drpEOProjectsDB.DataTextField = "Project_Name";
                                drpEOProjectsDB.DataValueField = "Project_ID";
                                drpEOProjectsDB.DataBind();
                                drpEOProjectsDB.Items.Insert(0, "--Select a Project--");
                                drpEOProjectsDB.Enabled = false;
                            }

                            for (i = 0; i < dsSeedDataByEventID.Tables[0].Rows.Count - 1; i++)
                            {
                                string strProjStatus = string.Empty;
                                for (int intPrjList = 1; intPrjList < drpEOProjectsDB.Items.Count - 1; intPrjList++)
                                {
                                    if (dsSeedDataByEventID.Tables[0].Rows[i][2].ToString() == drpEOProjectsDB.Items[intPrjList].Value)
                                        strProjStatus = "Yes";
                                }
                                try
                                {
                                    if (strProjStatus == "Yes")
                                        drpEOProjectsDB.SelectedIndex = -1;
                                    drpEOProjectsDB.Items[drpEOProjectsDB.Items.IndexOf(drpEOProjectsDB.Items.FindByValue(dsSeedDataByEventID.Tables[0].Rows[i][2].ToString()))].Selected = true;
                                }
                                catch (Exception)
                                {
                                }
                            }

                            FillListEvents();

                            for (i = 0; i < dsSeedDataByEventID.Tables[0].Rows.Count - 1; i++)
                            {
                                string strProjStatus = string.Empty;
                                for (int intPrjList = 0; intPrjList < lbEOEventsDB.Items.Count - 1; intPrjList++)
                                {
                                    if (dsSeedDataByEventID.Tables[0].Rows[i][0].ToString() == lbEOEventsDB.Items[intPrjList].Value)
                                        strProjStatus = "Yes";
                                }
                                try
                                {
                                    if (strProjStatus == "Yes")
                                    {
                                        ViewState["lstdis"] = "Yes";
                                        lbEOEventsDB.Items[lbEOEventsDB.Items.IndexOf(lbEOEventsDB.Items.FindByValue(dsSeedDataByEventID.Tables[0].Rows[i][0].ToString()))].Selected = true;
                                        lbEOEventsDB.Items[lbEOEventsDB.Items.IndexOf(lbEOEventsDB.Items.FindByValue(dsSeedDataByEventID.Tables[0].Rows[i][0].ToString()))].Attributes.Add("style", "font-weight:bold");
                                        foreach (ListItem li in lbEOEventsDB.Items)
                                        {
                                            li.Attributes.Add("disabled", "disabled");
                                        }
                                    }

                                }
                                catch (Exception)
                                {

                                }
                            }

                            lbEOEventsDB.Enabled = false;
                            drpPlant.Items.Clear();
                            DataSet dsSeedData = new DataSet();

                            if (objEOBA.FillDropDownSeedData(ref dsSeedData))
                            {
                                if (dsSeedData.Tables.Count > 0)
                                {
                                    drpPlant.DataSource = dsSeedData.Tables[2];
                                    drpPlant.DataTextField = "Plant_Name";
                                    drpPlant.DataValueField = "Plant_ID";
                                    drpPlant.DataBind();
                                    drpPlant.Items.Insert(0, "--Select a Plant--");
                                }
                            }

                            for (i = 0; i < dsSeedDataByEventID.Tables[0].Rows.Count - 1; i++)
                            {
                                string strProjStatus = string.Empty;

                                for (int intPrjList = 1; intPrjList < drpPlant.Items.Count - 1; intPrjList++)
                                {
                                    if (dsSeedDataByEventID.Tables[0].Rows[i][4].ToString() == drpPlant.Items[intPrjList].Value)
                                    {
                                        strProjStatus = "Yes";
                                    }

                                }

                                if (strProjStatus == "Yes")
                                {
                                    drpPlant.SelectedIndex = -1;
                                    drpPlant.Items[drpPlant.Items.IndexOf(drpPlant.Items.FindByValue(dsSeedDataByEventID.Tables[0].Rows[0][4].ToString()))].Selected = true;
                                    try
                                    {
                                        fillSelectedPlantDetails();
                                    }
                                    catch (Exception)
                                    {

                                    }
                                    break;
                                }

                            }

                            drpPlant.Enabled = false;
                            if (dsSeedDataByEventID != null)
                            {
                                if (dsSeedDataByEventID.Tables.Count != 0)
                                {
                                    if (dsSeedDataByEventID.Tables[0].Rows.Count != 0)
                                    {
                                        if (dsSeedDataByEventID.Tables[0].Rows[0]["Paper_Making_Days"] != System.DBNull.Value)
                                            txtPaperMaking.Text = dsSeedDataByEventID.Tables[0].Rows[0]["Paper_Making_Days"].ToString();

                                        if (dsSeedDataByEventID.Tables[0].Rows[0]["Converting_Time_Days"] != System.DBNull.Value)
                                            txtConvertingTime.Text = dsSeedDataByEventID.Tables[0].Rows[0]["Converting_Time_Days"].ToString();

                                    }
                                }

                            }


                            //'To Save the EO after migate the EO form Evnets 08/01/07 1PM
                            txtTitle.Text = "NewEO" + DateTime.Now;
                            //'9-1-08  for EO title
                            try
                            {
                                if (dgdMigratedEventInfo.Items.Count == 0)
                                {
                                    string s1 = string.Empty;
                                    LinkButton l1 = new LinkButton();
                                    l1 = (LinkButton)(dgdMigratedEventInfo.Items[0].FindControl("hypEventName"));
                                    s1 = l1.Text;
                                    if (s1.Length > 15)
                                        s1 = s1.Substring(0, 15);
                                    txtTitle.Text = s1;
                                }
                            }
                            catch (Exception)
                            {

                            }

                            string strCurrentStage = "Preliminary";
                            string strStageStatus = "Draft";
                            try
                            {
                                if (ViewState["EOmigrated"].ToString() != "migrated")
                                {
                                    string strresumeExit = "Resume";
                                    AllTabSave(strCurrentStage, strStageStatus, strresumeExit);
                                    ViewState["EOmigrated"] = "migrated";
                                    //string strJavaScript = string.Empty;
                                    //strJavaScript = "<script>alert('Event(s) information is migrated successfully to EO.')</script>";
                                    //Page.RegisterStartupScript("error_message", strJavaScript);

                                    ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "alert('Event(s) information is migrated successfully to EO.');", true);
                                }
                            }
                            catch (Exception)
                            {

                            }
                        }
                    }
                }
            }


            //'TO updated Edit Event page modifications in EO page calling this function
            try
            {
                DataSet dsSeedDataByEventID = new DataSet();
                EOBA objEOBA1 = new EOBA();
                //FillMigrateEventInfo(ViewState["Events"].ToString());
                if (objEOBA1.GETEOSeedDataByEventIDs(ViewState["Events"].ToString(), ref dsSeedDataByEventID))
                {
                    if (dsSeedDataByEventID.Tables[0].Rows.Count != 0)
                    {
                        if (dsSeedDataByEventID.Tables[0].Rows[0]["Paper_Making_Days"] != DBNull.Value)
                        {
                            txtPaperMaking.Text = dsSeedDataByEventID.Tables[0].Rows[0]["Paper_Making_Days"].ToString();
                            lblTotPaperMakingTime.Text = dsSeedDataByEventID.Tables[0].Rows[0]["Paper_Making_Days"].ToString();
                        }

                        if (dsSeedDataByEventID.Tables[0].Rows[0]["Converting_Time_Days"] != DBNull.Value)
                        {
                            txtConvertingTime.Text = dsSeedDataByEventID.Tables[0].Rows[0]["Converting_Time_Days"].ToString();
                            lblTotPaperConvertingTime.Text = dsSeedDataByEventID.Tables[0].Rows[0]["Converting_Time_Days"].ToString();
                        }
                    }
                }

            }
            catch (Exception)
            {


            }

            //'jagan 16-12-07
            if (ViewState["EOID"] != null)
            {
                DataSet dsGCAS = new DataSet();
                EOBA objEOBA2 = new EOBA();
                if (objEOBA2.GETGSRAData(Convert.ToInt32(ViewState["EOID"]), ref dsGCAS))
                {
                    if (dsGCAS.Tables[0].Rows.Count != 0)
                    {
                        dgdGCASInfo.Visible = true;
                        dgdGCASInfo.DataSource = dsGCAS.Tables[0];// 'dsGCAS.Tables[0).DefaultView '
                        dgdGCASInfo.DataBind();
                        //'dgdGCASInfo.Columns(8).Visible = False
                        dtGCAS = dsGCAS.Tables[0];
                    }
                }
                else
                { dgdGCASInfo.Visible = false; }

                DataSet dsPSRA = new DataSet();

                if (objEOBA2.GETPSRAData(Convert.ToInt32(ViewState["EOID"]), ref dsPSRA))
                {
                    if (dsPSRA.Tables[0].Rows.Count != 0)
                    {
                        dgdPSRAInfo.Visible = true;
                        dgdPSRAInfo.DataSource = dsPSRA.Tables[0];// 'dsGCAS.Tables[0).DefaultView '
                        dgdPSRAInfo.DataBind();
                    }
                }
                else
                { dgdPSRAInfo.Visible = false; }

            }
            else
            {
                dgdGCASInfo.Visible = false;
                dgdPSRAInfo.Visible = false;
            }

            if (!Page.IsPostBack)
            {
                if (Request.QueryString["Mig"] != null && Request.QueryString["Mig"].ToString() == "YES")
                {
                    fillDefaultAppDetailsFromMege();
                }
                //Page.RegisterStartupScript("clientscript11", "<script>display(3600,0);</script>");

                ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "display(3600,0);", true);

                if (ViewState["stage"] != null)
                {
                    if ((ViewState["stage"].ToString().ToUpper() == "Preliminary".ToUpper()) && (ViewState["Status"].ToString().ToUpper() == "Draft".ToUpper()))
                    { }
                    else
                    {
                        lnkConGrp.Visible = true;
                        dgrConcurenceGrp.Visible = true;
                        btnFYI.Visible = true;
                        if (btnTabFinal.ImageUrl == "../Images/final-over.gif")
                        {
                            lnkPreScreener.Visible = true;
                            dgrPrescrenners.Visible = true;
                        }
                        else
                        {
                            lnkPreScreener.Visible = false;
                            dgrPrescrenners.Visible = false;
                        }
                    }

                }
                else
                {
                    lnkConGrp.Visible = false;
                    dgrConcurenceGrp.Visible = false;
                    try
                    {
                        if (Request.QueryString["From"].ToString() == "ForEOLock")
                        {
                            lnkConGrp.Visible = true;
                            dgrConcurenceGrp.Visible = true;
                        }
                    }
                    catch (Exception ex)
                    {


                    }


                    lnkPreScreener.Visible = false;
                    dgrPrescrenners.Visible = false;
                }
            }

            if (Session["EventsEditied"] != null)
            {
                if (Session["EventsEditied"].ToString() == "Yes")
                {
                    FillMigrateEventInfo(ViewState["Events"].ToString());
                }
            }
            lockforapprovers();
            btnExportPilotLine.Visible = false;//'As per the new PCR on 27-Feb-2009 this export pilot line data functionlity is not required so set the visibility false by Murthy

            //David

            //if (PreliminaryApprovals.Visible == true)
            //{
            //    if (ViewState["SmartClearVal"] == null)
            //    {
            //    }
            //    else if (ViewState["SmartClearVal"].ToString().Trim() == "")
            //    {
            //    }
            //    else
            //    {
            //        txtSmartClearance.Text = ViewState["SmartClearVal"].ToString().Trim();
            //        ViewState["SmartClearVal"] = txtSmartClearance.Text.ToString().Trim();
            //    }
            //}

            if (hdnSmartValue.Value == null)
            {
            }
            else if (hdnSmartValue.Value == "")
            {
            }
            else
            {
                txtSmartClearance.Text = hdnSmartValue.Value.ToString();
            }

            if (hdnTotalCostValue.Value == null)
            {
            }
            else if (hdnTotalCostValue.Value == "")
            {
            }
            else
            {
                lbTotalCost.Text = hdnTotalCostValue.Value.ToString();
            }

            if (hdnPreSpendingValue.Value == null)
            {
            }
            else if (hdnPreSpendingValue.Value == "")
            {
            }
            else
            {
                lbPreSpending.Text = hdnPreSpendingValue.Value.ToString();
            }
        }

        private void FillMigrateEventInfo(string parEventID)
        {
            DataSet dsMigratedEventInfo = new DataSet();

            if (objEOBA.FetchMigratedEventInfo(parEventID, ref dsMigratedEventInfo))
            {
                if (dsMigratedEventInfo.Tables[0].Rows.Count != 0)
                {
                    dgdMigratedEventInfo.DataSource = dsMigratedEventInfo.Tables[0];
                    dgdMigratedEventInfo.DataBind();
                }

                if (dgdMigratedEventInfo.Items.Count != 0)
                {
                    int i1; string s = string.Empty;
                    //doubt
                    DateTime d = Convert.ToDateTime(dgdMigratedEventInfo.Items[0].Cells[4].Text);
                    for (i1 = 0; i1 < dgdMigratedEventInfo.Items.Count; i1++)
                    {
                        if (s == "")
                            s = dgdMigratedEventInfo.Items[i1].Cells[2].Text;
                        else
                            s = s + "," + dgdMigratedEventInfo.Items[i1].Cells[2].Text;

                    }
                    txtMachine.Text = s;
                    lblLinesMachineRO.Text = s;//''Line added by Murthy on 07 Nov 2008

                    for (i1 = 0; i1 < dgdMigratedEventInfo.Items.Count; i1++)
                    {
                        if (d > Convert.ToDateTime(dgdMigratedEventInfo.Items[i1].Cells[4].Text))
                            d = Convert.ToDateTime(dgdMigratedEventInfo.Items[i1].Cells[4].Text);
                    }

                    txtStartDate.Text = d.ToShortDateString();
                    lblPlannesStDateRO.Text = d.ToShortDateString();
                }
            }
        }

        private void SetEditLockNewFields()
        {
            if ((ViewState["EOIDFlag"] != null) && (ViewState["EOIDFlag"].ToString() == "1"))
            {
                trProdRegulatedProductRAQ1.Visible = true;
                trProdRegulatedProductRAQ2.Visible = true;
                Label49.Visible = false;
                Label34.Visible = false;
                PSR1.Visible = false;
                PSR2.Visible = false;
                PSR3.Visible = false;
                PSR4.Visible = false;
                PSR5.Visible = false;
                TRPSRAChanged.Visible = true;
                TRPSRAChanged1.Visible = true;

                if (lblReadonlyPSR1.Text == "Yes" && lblReadonlyPSR2.Text == "No")
                { }
                else
                {
                    TRPSRAChanged1.Visible = false;
                }

                DataSet dsEdit = new DataSet();

                if (objEOBA.GET_EO_Preliminary(Convert.ToInt32(ViewState["EOID"]), ref dsEdit))
                {
                    if (dsEdit.Tables[2].Rows.Count != 0)
                    {
                        if (dsEdit.Tables[2].Rows[0]["Is_Understood_Policy_37"] != DBNull.Value)
                        {
                            if (Convert.ToBoolean(dsEdit.Tables[2].Rows[0]["Is_Understood_Policy_37"]) == false)
                            {
                                chkMaterialsBrandsReadOnly.Items[0].Selected = true;
                                chkMaterialsBrandsReadOnly.Items[1].Selected = false;
                                chkMaterialsBrandsReadOnly.Items[2].Selected = false;
                                lblYesNoMat1.Text = "Yes";
                                lblYesNoMat2.Text = "No";
                                lblYesNoMat3.Text = "No";
                            }
                        }

                        if (dsEdit.Tables[2].Rows[0]["Is_Exception_Policy_37"] != DBNull.Value)
                        {
                            if (Convert.ToBoolean(dsEdit.Tables[2].Rows[0]["Is_Exception_Policy_37"]) == false)
                            {
                                chkMaterialsBrandsReadOnly.Items[1].Selected = true;
                                chkMaterialsBrandsReadOnly.Items[0].Selected = false;
                                chkMaterialsBrandsReadOnly.Items[2].Selected = false;
                                lblYesNoMat2.Text = "Yes";
                                lblYesNoMat1.Text = "No";
                                lblYesNoMat3.Text = "No";
                            }
                        }
                        if (dsEdit.Tables[2].Rows[0]["Is_EO_Covered_Policy_37"] != DBNull.Value)
                        {
                            if (Convert.ToBoolean(dsEdit.Tables[2].Rows[0]["Is_EO_Covered_Policy_37"]) == false)
                            {
                                chkMaterialsBrandsReadOnly.Items[2].Selected = true;
                                chkMaterialsBrandsReadOnly.Items[0].Selected = false;
                                chkMaterialsBrandsReadOnly.Items[1].Selected = false;
                                lblYesNoMat3.Text = "Yes";
                                lblYesNoMat2.Text = "No";
                                lblYesNoMat1.Text = "No";
                            }
                        }
                    }
                    else
                    {
                        chkMaterialsBrandsReadOnly.Items[0].Selected = false;
                        chkMaterialsBrandsReadOnly.Items[1].Selected = false;
                        chkMaterialsBrandsReadOnly.Items[2].Selected = false;
                    }

                    if (dsEdit.Tables[20].Rows.Count != 0)
                    {
                        if (dsEdit.Tables[20].Rows[0]["Is_Product_Go_To_Customers"] != DBNull.Value)
                        {
                            if (Convert.ToBoolean(dsEdit.Tables[20].Rows[0]["Is_Product_Go_To_Customers"]) == true)
                            { lblReadonlyPSR1.Text = "Yes"; }
                            else if (Convert.ToBoolean(dsEdit.Tables[20].Rows[0]["Is_Product_Go_To_Customers"]) == false)
                            { lblReadonlyPSR1.Text = "No"; }
                        }
                        else
                        { lblReadonlyPSR1.Text = ""; }


                        if (dsEdit.Tables[20].Rows[0]["Is_Using_Approved_FC_R_ATS"] != DBNull.Value)
                        {
                            if (Convert.ToBoolean(dsEdit.Tables[20].Rows[0]["Is_Using_Approved_FC_R_ATS"]) == true)
                            { lblReadonlyPSR2.Text = "Yes"; }
                            else if (Convert.ToBoolean(dsEdit.Tables[20].Rows[0]["Is_Using_Approved_FC_R_ATS"]) == false)
                            { lblReadonlyPSR2.Text = "No"; }
                        }
                        else
                        { lblReadonlyPSR2.Text = ""; }

                        if (dsEdit.Tables[20].Rows[0]["Is_Approved_At_Level"] != DBNull.Value)
                        {
                            if (Convert.ToBoolean(dsEdit.Tables[20].Rows[0]["Is_Approved_At_Level"]) == true)
                            { lblReadonlyPSR3.Text = "Yes"; }
                            else if (Convert.ToBoolean(dsEdit.Tables[20].Rows[0]["Is_Approved_At_Level"]) == false)
                            { lblReadonlyPSR3.Text = "No"; }
                        }
                        else
                        { lblReadonlyPSR3.Text = ""; }


                        if (dsEdit.Tables[20].Rows[0]["Is_Approved_For_Region"] != DBNull.Value)
                        {
                            if (Convert.ToBoolean(dsEdit.Tables[20].Rows[0]["Is_Approved_For_Region"]) == true)
                            { lblReadonlyPSR4.Text = "Yes"; }
                            else if (Convert.ToBoolean(dsEdit.Tables[20].Rows[0]["Is_Approved_For_Region"]) == false)
                            { lblReadonlyPSR4.Text = "No"; }
                        }
                        else
                        { lblReadonlyPSR4.Text = ""; }

                        if (dsEdit.Tables[20].Rows[0]["Is_Approved_For_Application"] != DBNull.Value)
                        {
                            if (Convert.ToBoolean(dsEdit.Tables[20].Rows[0]["Is_Approved_For_Application"]) == true)
                            { lblReadonlyPSR5.Text = "Yes"; }
                            else if (Convert.ToBoolean(dsEdit.Tables[20].Rows[0]["Is_Approved_For_Application"]) == false)
                            { lblReadonlyPSR5.Text = "No"; }
                        }
                        else
                        { lblReadonlyPSR5.Text = ""; }


                        if (dsEdit.Tables[20].Rows[0]["Is_Approved_At_Prev_Application_Rate"] != DBNull.Value)
                        {
                            if (Convert.ToBoolean(dsEdit.Tables[20].Rows[0]["Is_Approved_At_Prev_Application_Rate"]) == true)
                            { lblReadonlyPSR6.Text = "Yes"; }
                            else if (Convert.ToBoolean(dsEdit.Tables[20].Rows[0]["Is_Approved_At_Prev_Application_Rate"]) == false)
                            { lblReadonlyPSR6.Text = "No"; }
                        }
                        else
                        { lblReadonlyPSR6.Text = ""; }

                    }

                }

            }

        }

        private void buttonAttributes()
        {
            lbGlobal.Attributes.Add("OnClick", "javascript: GlobalTeamSpaceWindow();");
            lbHelp.Attributes.Add("OnClick", "javascript: OpenHelpWindow();");
            //imgPreFinalRoute.Attributes.Add("OnClick", "javascript: display3434();");
            txtEOTypeOther.Attributes.Add("Onblur", "javascript: EOTypeOther();");
            txtEOScopeOther.Attributes.Add("Onblur", "javascript: EOScopeOther();");
            txtPSRAOther.Attributes.Add("Onblur", "javascript: PSRAOther();");
            lnkHSE.Attributes.Add("OnClick", "javascript: openFamilyCareHSE();");
            lnkInterMaterials.Attributes.Add("onClick", "javascript:ShowIntermediate();");
            lnkNewChemical.Attributes.Add("onClick", "javascript:ShowChemical();");
            lnkNewRawMaterial.Attributes.Add("OnClick", "javascript:ShowRawMaterial();");
            lnkNewEquipment.Attributes.Add("OnClick", "javascript:ShowEquipment();");
            lnkNewJob.Attributes.Add("OnClick", "javascript:ShowJobTask();");
            lnkHere.Attributes.Add("OnClick", "javascript:NavigateHere();");
            lnkNoteBookTraining.Attributes.Add("OnClick", "javascript:NavigateNotebookTraining();");
            lnkLabNoteBook.Attributes.Add("OnClick", "javascript:NavigateNotebookTraining();");
            lnkFormulaClick.Attributes.Add("OnClick", "javascript:NavigateFormulaCard();");
            txtStartDate.Attributes.Add("onblur", "javascript: isDate1(this.value,'txtStartDate');");
            txtCloseCompletionDate.Attributes.Add("onblur", "javascript: isDate2(this.value,'txtCloseCompletionDate');");
            //lnkConGrp.Attributes.Add("OnClick", "javascript: Concgrp();");
            lnkConGrp.Attributes.Add("OnClick", "javascript:Concgrp();");
            lnkPreScreener.Attributes.Add("onClick", "javascript:AddPreScreners();");
            hylComments.Attributes.Add("onClick", "javascript:return viewComments(" + Request.QueryString["EOID"] + ")");
            lnkPreBOPreComments.Attributes.Add("onClick", "javascript:return viewComments(" + Request.QueryString["EOID"] + ")");
            lnkPreSAPComments.Attributes.Add("onClick", "javascript:return viewComments(" + Request.QueryString["EOID"] + ")");
            lnkPreGBUHSEPreComments.Attributes.Add("onClick", "javascript:return viewComments(" + Request.QueryString["EOID"] + ")");
            lnkPreSiteHSEComments.Attributes.Add("onClick", "javascript:return viewComments(" + Request.QueryString["EOID"] + ")");
            lnkPreSiteCotactComments.Attributes.Add("onClick", "javascript:return viewComments(" + Request.QueryString["EOID"] + ")");
            lnkPreSitePlanComments.Attributes.Add("onClick", "javascript:return viewComments(" + Request.QueryString["EOID"] + ")");
            lnkPreCentralPlanComments.Attributes.Add("onClick", "javascript:return viewComments(" + Request.QueryString["EOID"] + ")");
            lnkPreTimeGateComments.Attributes.Add("onClick", "javascript:return viewComments(" + Request.QueryString["EOID"] + ")");
            lnkPreStandsOfficeComments.Attributes.Add("onClick", "javascript:return viewComments(" + Request.QueryString["EOID"] + ")");
            lnkFinBOPSIniComments.Attributes.Add("onClick", "javascript:return viewComments(" + Request.QueryString["EOID"] + ")");
            lnkFinProdReseComments.Attributes.Add("onClick", "javascript:return viewComments(" + Request.QueryString["EOID"] + ")");
            lnkFinBOComments.Attributes.Add("onClick", "javascript:return viewComments(" + Request.QueryString["EOID"] + ")");
            lnkFinGBUComments.Attributes.Add("onClick", "javascript:return viewComments(" + Request.QueryString["EOID"] + ")");
            lnkFinSiteHSEComments.Attributes.Add("onClick", "javascript:return viewComments(" + Request.QueryString["EOID"] + ")");
            lnkFinSAPComments.Attributes.Add("onClick", "javascript:return viewComments(" + Request.QueryString["EOID"] + ")");
            lnkFinSMARTClearanceComments.Attributes.Add("onClick", "javascript:return viewComments(" + Request.QueryString["EOID"] + ")");
            lnkFinSitePlanComments.Attributes.Add("onClick", "javascript:return viewComments(" + Request.QueryString["EOID"] + ")");
            lnkFinSiteConComments.Attributes.Add("onClick", "javascript:return viewComments(" + Request.QueryString["EOID"] + ")");
            lnkFinSiteFinaComments.Attributes.Add("onClick", "javascript:return viewComments(" + Request.QueryString["EOID"] + ")");
            lnkFinSiteLeadComments.Attributes.Add("onClick", "javascript:return viewComments(" + Request.QueryString["EOID"] + ")");
            lnkFinPSRAComments.Attributes.Add("onClick", "javascript:return viewComments(" + Request.QueryString["EOID"] + ")");
            lnkFinTimingGateComments.Attributes.Add("onClick", "javascript:return viewComments(" + Request.QueryString["EOID"] + ")");
            lnkFinQAComments.Attributes.Add("onClick", "javascript:return viewComments(" + Request.QueryString["EOID"] + ")");
            lnkFinCentralQAComments.Attributes.Add("onClick", "javascript:return viewComments(" + Request.QueryString["EOID"] + ")");
            lnkFinStandsOffComments.Attributes.Add("onClick", "javascript:return viewComments(" + Request.QueryString["EOID"] + ")");
            lnkCOSiteFinanceComments.Attributes.Add("onClick", "javascript:return viewComments(" + Request.QueryString["EOID"] + ")");
            lnkCOBOComments.Attributes.Add("onClick", "javascript:return viewComments(" + Request.QueryString["EOID"] + ")");
            //imgPreFinalRoute.Attributes.Add("OnClick", "javascript: PreFinalRouteMandatory();");
            imgPOCAddressBook.Attributes.Add("onclick", "javascript: AddBooksingUser();");
            txtPaperMaking.Attributes.Add("onblur", "javascript: CountDecimals(this.value,'txtPaperMaking');");
            txtConvertingTime.Attributes.Add("onblur", "javascript: CountDecimals(this.value,'txtConvertingTime');");
            txtTotalCostSheetAttach.Attributes.Add("onblur", "javascript: CountDecimals1(this.value,'txtTotalCostSheetAttach');");
            txtCostNewMaterials.Attributes.Add("onblur", "javascript: CountDecimals2(this.value,'txtCostNewMaterials');");
            txtEOEquipment.Attributes.Add("onblur", "javascript: CountDecimals2(this.value,'txtEOEquipment');");
            txtExecutionCost.Attributes.Add("onblur", "javascript: CountDecimals2(this.value,'txtExecutionCost');");
            txtEstimatedAmount.Attributes.Add("onblur", "javascript: CountDecimals1(this.value,'txtEstimatedAmount');");
            txtCostSheetDiff.Attributes.Add("onblur", "javascript: CountDecimals1(this.value,'txtCostSheetDiff');");
            chkMaterialsBrands.Attributes.Add("onclick", "return HandleOnCheck1()");
            chkFinalMaterialsBrands.Attributes.Add("onclick", "return FinalHandleOnCheck1()");
        }

        private void GetHiddenFieldValues()
        {
            try
            {
                //txtBudgetOwner.Text = hdnBudgetOwner.Value.ToString().Trim();
                //txtBudgetOwnerFinal.Text = hdnBudgetOwnerFinal.Value.ToString().Trim();

            }
            catch (Exception ex)
            {

            }

        }

        private void setUserCountrolDefaultVisibulityPriliminary()
        {
            imgPreFinalRoute.Visible = false;
            imgCloseOutRoute.Visible = false;
            FirstSectionPreliminary.Visible = true;
            NewMaterialandBrands.Visible = true;
            HSandSE.Visible = true;
            PSandRA.Visible = true;
            PlanningandBudgetInfo.Visible = true;
            ProductionandPackaging.Visible = true;
            PackagingandDispositionPreliminary.Visible = true;
            PreliminaryApprovals.Visible = true;
            PreliminaryRevision.Visible = true;
            //for Readonly/Lock mode
            //Pre tab
            tblTopReadonly.Visible = false;
            TrGeneralPreliminaryRO.Visible = false;
            NewMaterialandBrandsReadOnly.Visible = false;
            PackagingandDispositionPreliminaryReadOnly.Visible = false;
            ProductionandPackagingReadOnly.Visible = false;
            PlanningandBudgetInfoReadOnly.Visible = false;
            PSandRAReadOnly.Visible = false;
            HSandSEReadOnly.Visible = false;
            //FinalRevisionReadonly.Visible = false;
            PreliminaryApprovalsReadOnly.Visible = false;
            //Final Tab
            FinalBudgetCenterReadOnly.Visible = false;
            FinalPackagingandDispositionReadOnly.Visible = false;
            FinalCostSheetReadOnly.Visible = false;
            FinalFormulaCardInformationReadOnly.Visible = false;
            FinalTestPlansReadOnly.Visible = false;
            LabSamplingPlansReadOnly.Visible = false;
            FinalProductTestFlowMatrixReadonly.Visible = false;
            FinalOtherSupportingDocReadonly.Visible = false;
            FinalApprovalsReadOnly.Visible = false;
            CloseFirstSectionReadonly.Visible = false;

            //For PCRs
            NewMaterialandBrandsReadOnlyFinal.Visible = false;
            PSandRAReadOnlyFinal.Visible = false;
            trProdRegulatedProductRAQ2Final.Visible = false;

            //co tab
            CloseActualCostSheetReadonly.Visible = false;
            CloseInitialLearningReportReadOnly.Visible = false;
            CloseTestPlansUsedReadonly.Visible = false;
            CloseoutReportRO.Visible = false;
            CloseApprovalsReadonly.Visible = false;
            btnTabPreliminary.ImageUrl = "../Images/preliminary-over.gif";
            //Hiding other Section of EO i.e. Final and Closeout
            //Final
            FinalBudgetCenter.Visible = false;
            FinalPackagingandDisposition.Visible = false;
            FinalCostSheet.Visible = false;
            FinalFormulaCardInformation.Visible = false;
            FinalTestPlans.Visible = false;
            TrFinalQA.Visible = false;
            TrFinalQARO.Visible = false;
            LabSamplingPlans.Visible = false;
            FinalProductTestFlowMatrix.Visible = false;
            FinalOtherSupportingDoc.Visible = false;
            FinalApprovals.Visible = false;
            //FinalRevision.Visible = false;
            //For PCRs   
            trFinalMaterialsBrandsRadioBefore.Visible = false;
            trFinalMaterialsBrands.Visible = false;
            trFinalMaterialsBrandsRadioAfter.Visible = false;
            trFinalPSRA.Visible = false;
            trFinalMaterialsBrandshead.Visible = false;
            trFinalPSRAhead.Visible = false;
            //Close out
            CloseFirstSection.Visible = false;
            CloseActualCostSheet.Visible = false;
            CloseInitialLearningReport.Visible = false;
            CloseTestPlansUsed.Visible = false;
            CloseOutReport.Visible = false;
            CloseApprovals.Visible = false;
            CloseRevision.Visible = false;
            //Hiding of preliminary section approval and decline links
            lnkBudgetApproved.Visible = false;
            lnkBudgetDeclined.Visible = false;
            lnkGBUHSEApproved.Visible = false;
            lnkGBUHSEDeclined.Visible = false;
            lnkSiteHSEApproved.Visible = false;
            lnkSiteHSEDeclined.Visible = false;
            lnkSiteContactApproved.Visible = false;
            lnkSiteContactApproved.Visible = false;
            lnkSiteContactDeclined.Visible = false;
            lnkSitePlanningApproved.Visible = false;
            lnkSitePlanningDeclined.Visible = false;
            lnkCentralPlanningApproved.Visible = false;
            lnkCentralPlanningDeclined.Visible = false;
            lnkSAPCostCenterApproved.Visible = false;
            lnkSAPCostCenterDeclined.Visible = false;
            lnkTimingGateApproved.Visible = false;
            //New Change 
            lnkAdditionalApprover1Approved.Visible = false;
            lnkAdditionalApprover1Declined.Visible = false;
            lnkAdditionalApprover2Approved.Visible = false;
            lnkAdditionalApprover2Declined.Visible = false;
            lnkAdditionalApprover3Approved.Visible = false;
            lnkAdditionalApprover3Declined.Visible = false;
            lnkAdditionalApprover4Approved.Visible = false;
            lnkAdditionalApprover4Declined.Visible = false;

            //Added for PCR
            //lnkSmartClearanceApproved.Visible = false;
            //lnkSmartClearanceDeclined.Visible = false;
            lnkTimingGateDeclined.Visible = false;
            lnkStandardOfficeApproved.Visible = false;
            lnkStandardOfficeDeclined.Visible = false;

            //Added by David - MUREO PCR : 4 Additional Approvers - Date: 01/03/2012
            lnkAdditionalApprover1Approved.Visible = false;
            lnkAdditionalApprover1Declined.Visible = false;
            lnkAdditionalApprover2Approved.Visible = false;
            lnkAdditionalApprover2Declined.Visible = false;
            lnkAdditionalApprover3Approved.Visible = false;
            lnkAdditionalApprover3Declined.Visible = false;
            lnkAdditionalApprover4Approved.Visible = false;
            lnkAdditionalApprover4Declined.Visible = false;

            //Hiding of Final section approval and decline links
            lnkPSIniApproved.Visible = false;
            lnkPSIniDeclined.Visible = false;
            lnkProdResearchApproved.Visible = false;
            lnkProdResearchDeclined.Visible = false;
            lnkFinBudgetApproved.Visible = false;
            lnkFinBudgetDeclined.Visible = false;
            lnkFinGBUHSEApproved.Visible = false;
            lnkFinGBUHSEDeclined.Visible = false;

            //Central QA
            lnkFinCentralQAApproved.Visible = false;
            lnkFinCentralQADeclined.Visible = false;

            lnkFinSiteHSEApproved.Visible = false;
            lnkFinSiteHSEDeclined.Visible = false;
            lnkFinSAPApproved.Visible = false;
            lnkFinSAPDeclined.Visible = false;

            //Added by David
            //Date: 07/16/2010
            lnkFinSMARTClearanceApproved.Visible = false;
            lnkFinSMARTClearanceDeclined.Visible = false;

            lnkFinSiteContactApproved.Visible = false;
            lnkFinSiteContactDeclined.Visible = false;
            lnkFinSitePlanningApproved.Visible = false;
            lnkFinSitePlanningDeclined.Visible = false;
            lnkFinSiteFinanceApproved.Visible = false;
            lnkFinSiteFinananceDeclined.Visible = false;
            lnkFinSiteLeadershipApproved.Visible = false;
            lnkFinSiteLeadershipDeclined.Visible = false;
            lnkFinPSRAApproved.Visible = false;
            lnkFinPSRADeclined.Visible = false;
            lnkFinTimingGateApproved.Visible = false;
            lnkFinTimingGateDeclined.Visible = false;
            lnkFinQAApproved.Visible = false;
            lnkFinQADeclined.Visible = false;
            lnkFinStandardOfficeApproved.Visible = false;
            lnkFinStandardOfficeDeclined.Visible = false;

            //Added by David - MUREO PCR : 4 Additional Approvers - Date: 01/03/2012
            lnkFinAdditionalApprover1Approved.Visible = false;
            lnkFinAdditionalApprover1Declined.Visible = false;
            lnkFinAdditionalApprover2Approved.Visible = false;
            lnkFinAdditionalApprover2Declined.Visible = false;
            lnkFinAdditionalApprover3Approved.Visible = false;
            lnkFinAdditionalApprover3Declined.Visible = false;
            lnkFinAdditionalApprover4Approved.Visible = false;
            lnkFinAdditionalApprover4Declined.Visible = false;

            //Hiding of Close out approval and decline links
            lnkCloseSiteFinanceApproved.Visible = false;
            lnkCloseSiteFinanceDeclined.Visible = false;
            lnkCloseBudgetApproved.Visible = false;
            lnkCloseBudgetDeclined.Visible = false;
        }

        private void fillDropdownValuesPriliminary()
        {
            FillListBoxData(3, "EO_Type_Name", "EO_Type_ID", "--Select EO Type--", lbEOTypeDB);
            FillListBoxData(6, "PSRA_Name", "PSRA_ID", "--Select PS&RA Type--", lbPSRADB);
            FillListBoxData(7, "Prod_Pack_Name", "Prod_Pack_ID", "--Select Product Pack--", lbProductPackedDB);
            FillListBoxData(7, "Prod_Pack_Name", "Prod_Pack_ID", "--Select Product Pack--", lbFinalPackagingInfoDB);
            FillDropDownData(0, "Category_Name", "Category_ID", "--Select a Category--", drpCategoryDB);
            FillDropDownData(1, "Project_Name", "Project_ID", "--Select a Project--", drpEOProjectsDB);
            FillDropDownData(4, "Scope_Project_Phase_Name", "Scope_Project_Phase_ID", "--Select EO Scope--", drpEOScopeDB);
            FillDropDownData(2, "Plant_Name", "Plant_ID", "--Select a Plant--", drpPlant);
            FillDropDownData(5, "Budget_Center_Name", "Budget_Center_ID", "--Select a Budget Center--", drpBudgetCenterDB);
            FillDropDownData(8, "Prod_Disposition_Name", "Prod_Disp_ID", "--Select a Product Disposition--", drpProductDispositionDB);
            FillDropDownData(9, "Material_Disposition_Name", "Material_Disposition_ID", "--Select a Material Disposition--", drpMaterialDispositionDB);
            FillDropDownData(8, "Prod_Disposition_Name", "Prod_Disp_ID", "--Select a Product Disposition--", drpFinalProductDispositionDB);
            FillDropDownData(9, "Material_Disposition_Name", "Material_Disposition_ID", "--Select a Material Disposition--", drpFinalMaterialDispositionDBFinal);
            FillDropDownData(10, "Formula_Card_Info", "Formula_Card_ID", "--Select a Formula Card--", drpFinalFormulaCardDB);
            //FillApprovalDropDown("Approval_Group_Name", "Approval_Group_ID", "--Select an Approval Group--", drpPrelimApproval);
            FillListEvents();
        }

        private void carryselectedBudgetCenter()
        {
            try
            {
                if (!(drpBudgetCenterDB.SelectedItem.Text == "--Select a Budget Center--"))
                {
                    lblPreSelectedBudgetCenter.Text = drpBudgetCenterDB.SelectedItem.Text;
                    lblPreCOSelectedBudgetCenter.Text = drpBudgetCenterDB.SelectedItem.Text;
                    lblPreSelBudgetCenterLock.Text = drpBudgetCenterDB.SelectedItem.Text;
                    lblPreCOSelBudgetCenterLock.Text = drpBudgetCenterDB.SelectedItem.Text;
                }
                else
                {
                    lblPreSelectedBudgetCenter.Text = string.Empty;
                    lblPreCOSelectedBudgetCenter.Text = string.Empty;
                    lblPreSelBudgetCenterLock.Text = string.Empty;
                    lblPreCOSelBudgetCenterLock.Text = string.Empty;
                }

                if (!(lblSuggestedBudCenter.Text == string.Empty))
                {
                    lblPreSelectedBudgetCenter.Text = lblSuggestedBudCenter.Text;
                    lblPreCOSelectedBudgetCenter.Text = lblSuggestedBudCenter.Text;
                    lblPreSelBudgetCenterLock.Text = lblSuggestedBudCenter.Text;
                    lblPreCOSelBudgetCenterLock.Text = lblSuggestedBudCenter.Text;
                }

            }
            catch (Exception ex)
            {
            }
        }

        public void FillListEvents()
        {
            if ((Request.QueryString["From"] != null) && (Request.QueryString["From"].ToString() == "ForEOEdit" || Request.QueryString["From"].ToString() == "MailEdit"))
            {
                trProdRegulatedProductRAQ1.Visible = true;
                trProdRegulatedProductRAQ2.Visible = true;
                PSR1.Visible = false;
                PSR2.Visible = false;
                PSR3.Visible = false;
                PSR4.Visible = false;
                PSR5.Visible = false;
                TRPSRAChanged.Visible = true;
                TRPSRAChanged1.Visible = true;
                Label49.Visible = false;

                if ((lblReadonlyPSR1.Text == "Yes" & lblReadonlyPSR2.Text == "No"))
                {
                }
                else
                {
                    TRPSRAChanged1.Visible = false;
                }
                if (ViewState["EOIDFlag"] != null)
                {
                    if (ViewState["EOIDFlag"].ToString() == "1")
                    {
                        TRPSRAChanged.Visible = true;
                        divPSRAAdded.Style.Add("display", "block");
                        divPSRARemoved.Style.Add("display", "none");
                        trMaterialsBrandsNewRow1.Visible = true;
                        divMaterialsBrandsNewRow2.Style.Add("display", "block");
                        if (((rblProductConsumers.Items[0].Selected == true) & (rblProductApproved.Items[1].Selected == true)))
                        {
                        }
                        else
                        {
                            rblRawMaterialsQ1.ClearSelection();
                            rblRawMaterialsQ2.ClearSelection();
                            rblRawMaterialsQ3.ClearSelection();
                            rblRawMaterialsQ4.ClearSelection();
                            divPSRAAddedRawMaterials.Style.Add("display", "none");
                        }

                        //Final Radio Buttons

                        if (((rblFinalProductConsumerOption.Items[0].Selected == true) & (rblFinalProductApprovedOption.Items[1].Selected == true)))
                        {
                            tblPSRAFinal2.Style.Add("display", "block");
                        }
                        else
                        {
                            rblFinalRawMaterialsQ1.ClearSelection();
                            rblFinalRawMaterialsQ2.ClearSelection();
                            rblFinalRawMaterialsQ3.ClearSelection();
                            rblFinalRawMaterialsQ4.ClearSelection();
                            tblPSRAFinal2.Style.Add("display", "none");
                        }
                    }
                    else
                    {
                        TRPSRAChanged.Visible = false;
                        divPSRAAdded.Style.Add("display", "none");
                        divPSRARemoved.Style.Add("display", "block");
                        PSandRAReadOnly.Visible = false;
                        TRPSRAChanged1.Visible = false;
                        trMaterialsBrandsNewRow1.Visible = false;
                        divMaterialsBrandsNewRow2.Style.Add("display", "none");
                    }
                }
                DataSet dsEvent = new DataSet();

                int intProjectID = 0;
                if (drpEOProjectsDB.SelectedItem.Text == "--Select a Project--")
                {
                    intProjectID = -1;
                }
                else
                {
                    intProjectID = Convert.ToInt32(drpEOProjectsDB.SelectedValue);
                }

                if (objEOBA.FillListBoxWithEventsByEoID(intProjectID, Convert.ToInt32(Request.QueryString["EOID"]), ref dsEvent))
                {
                    if (dsEvent.Tables.Count == 0)
                    {
                        DataNotFound();
                        return;
                    }
                    else
                    {
                        lbEOEventsDB.DataSource = dsEvent.Tables[0].DefaultView;
                        lbEOEventsDB.DataTextField = "Event_Name";
                        lbEOEventsDB.DataValueField = "Event_ID";
                        lbEOEventsDB.DataBind();
                    }
                }

            }
            else
            {

                DataSet dsEvent = new DataSet();

                int intProjectID = 0;
                if (drpEOProjectsDB.SelectedItem.Text == "--Select a Project--")
                {
                    intProjectID = -1;
                }
                else
                {
                    intProjectID = Convert.ToInt32(drpEOProjectsDB.SelectedValue);
                }

                if (objEOBA.FillListBoxWithEventsByEoID(intProjectID, 0, ref dsEvent))
                {
                    if (dsEvent.Tables.Count == 0)
                    {
                        DataNotFound();
                        return;
                    }
                    else
                    {
                        lbEOEventsDB.DataSource = dsEvent.Tables[0].DefaultView;
                        lbEOEventsDB.DataTextField = "Event_Name";
                        lbEOEventsDB.DataValueField = "Event_ID";
                        lbEOEventsDB.DataBind();
                    }
                }


            }
        }

        //public void DataNotFound()
        //{
        //    string strJavaScript = "<script>alert('Events are required for creating an EO.')</script>";
        //    Page.RegisterStartupScript("error_message", strJavaScript);
        //}

        public void lockManData()
        {
            drpCategoryDB.Enabled = false;
            lbEOBrandsDB.Enabled = false;
            foreach (ListItem li in lbEOBrandsDB.Items)
            {
                li.Attributes.Add("disabled", "disabled");
            }
            drpEOProjectsDB.Enabled = false;
            drpPlant.Enabled = false;
            lbEOEventsDB.Enabled = false;
            foreach (ListItem li in lbEOEventsDB.Items)
            {
                li.Attributes.Add("disabled", "disabled");
            }
            drpEOProjectsDB.Enabled = false;
        }

        public void Get_EO_Mandatory_Edit()
        {
            object functionReturnValue = null;
            DataSet ds = null;

            if (objEOBA.GETEOMandatory(Convert.ToInt32(ViewState["EOID"]), ref ds))
            {

                if ((ds != null))
                {
                    if (!(ds.Tables.Count == 0))
                    {

                        if (!(ds.Tables[0].Rows.Count == 0))
                        {
                            if ((!object.ReferenceEquals(ds.Tables[0].Rows[0]["Two_Tab_Routing"], System.DBNull.Value)))
                            {
                                ViewState["Two_Tab_Routing"] = ds.Tables[0].Rows[0]["Two_Tab_Routing"];
                            }
                            else
                            {
                                ViewState["Two_Tab_Routing"] = "N";
                            }

                            if ((!object.ReferenceEquals(ds.Tables[0].Rows[0]["Current_Stage"], System.DBNull.Value)))
                            {
                                lbCurrentStageDB.Text = ds.Tables[0].Rows[0]["Current_Stage"].ToString();
                            }
                            else
                            {
                                lbCurrentStageDB.Text = string.Empty;
                            }

                            if ((!object.ReferenceEquals(ds.Tables[0].Rows[0]["Stage_Status"], System.DBNull.Value)))
                            {
                                lbStatusDB.Text = ds.Tables[0].Rows[0]["Stage_Status"].ToString();
                            }
                            else
                            {
                                lbStatusDB.Text = string.Empty;
                            }


                            //Changed by chary Approved to complete 16/09/08
                            if (lbCurrentStageDB.Text.ToUpper() == "CloseOut".ToUpper())
                            {
                                if (lbStatusDB.Text.ToUpper() == "Approved".ToUpper())
                                {
                                    lbStatusDB.Text = "Completed";
                                }
                            }


                            if ((!object.ReferenceEquals(ds.Tables[0].Rows[0]["EO_Title"], System.DBNull.Value)))
                            {
                                txtTitle.Text = ds.Tables[0].Rows[0]["EO_Title"].ToString();
                            }
                            else
                            {
                                txtTitle.Text = string.Empty;
                            }

                            if ((!object.ReferenceEquals(ds.Tables[0].Rows[0]["EO_Number"], System.DBNull.Value)))
                            {
                                lbEONumberDB.Text = ds.Tables[0].Rows[0]["EO_Number"].ToString();
                            }
                            else
                            {
                                lbEONumberDB.Text = "New EO";
                            }

                            if ((!object.ReferenceEquals(ds.Tables[0].Rows[0]["SAP_IO_Number"], System.DBNull.Value)))
                            {
                                lbSAPIODB.Text = ds.Tables[0].Rows[0]["SAP_IO_Number"].ToString();
                            }
                            else
                            {
                                lbSAPIODB.Text = "Not Assigned";
                            }


                            //Added on 01/20/2010 
                            //For MUREO PCRs
                            //By: David
                            if ((!object.ReferenceEquals(ds.Tables[0].Rows[0]["SMART_Clearance_Number"], DBNull.Value)))
                            {
                                lblSmartClearanceDB.Text = ds.Tables[0].Rows[0]["SMART_Clearance_Number"].ToString();
                                lblSmartClearance.Text = ds.Tables[0].Rows[0]["SMART_Clearance_Number"].ToString();
                                hdnSmart.Value = ds.Tables[0].Rows[0]["SMART_Clearance_Number"].ToString();
                                if ((ViewState["EOIDFlag"] != null) && (ViewState["EOIDFlag"].ToString() == "1"))
                                {
                                    lblSmartClearance.Visible = true;
                                }
                                if (ds.Tables[0].Rows[0]["SMART_Clearance_Number"].ToString() == "In Process")
                                {
                                    lblSmartClearanceDB.Text = " ";
                                    lblSmartClearance.Text = " ";
                                    hdnSmart.Value = "In Process";
                                }

                            }
                            else
                            {
                                //lblSmartClearanceDB.Text = "Not Assigned"
                                lblSmartClearanceDB.Text = "Not Needed";
                                lblSmartClearance.Text = "Not Needed";
                                //lblSmartClearanceDB.Text = ""
                                //lblSmartClearance.Text = ""
                            }


                            if ((!object.ReferenceEquals(ds.Tables[0].Rows[0]["Category_ID"], System.DBNull.Value)))
                            {
                                int intPrjList = 0;
                                string strProjStatus = null;
                                for (intPrjList = 1; intPrjList <= drpCategoryDB.Items.Count - 1; intPrjList++)
                                {
                                    if (ds.Tables[0].Rows[0]["Category_ID"].ToString() == drpCategoryDB.Items[intPrjList].Value)
                                    {
                                        strProjStatus = "Yes";
                                    }
                                }

                                try
                                {
                                    if (strProjStatus == "Yes")
                                    {
                                        drpCategoryDB.SelectedIndex = -1;
                                        drpCategoryDB.Items[drpCategoryDB.Items.IndexOf(drpCategoryDB.Items.FindByValue(ds.Tables[0].Rows[0]["Category_ID"].ToString()))].Selected = true;

                                    }
                                    else
                                    {
                                    }
                                }
                                catch (Exception ex)
                                {
                                }
                            }
                            else
                            {
                                //drpCategoryDB.SelectedIndex = 0
                            }


                            //TO fill Brands with respective to above category selection

                            int intDrpValue;
                            intDrpValue = drpCategoryDB.SelectedIndex;
                            if (intDrpValue == 0)
                            {
                                lbEOBrandsDB.Items.Clear();
                            }
                            else
                            {
                                DataSet dsBrand = new DataSet();
                                if (objEOBA.FillListBoxWithBrands(drpCategoryDB.SelectedValue, ref dsBrand))
                                {
                                    if (dsBrand.Tables.Count == 0)
                                    {
                                        return;
                                    }
                                    lbEOBrandsDB.DataSource = dsBrand.Tables[0].DefaultView;
                                    lbEOBrandsDB.DataTextField = "Brand_Segment_Name";
                                    lbEOBrandsDB.DataValueField = "Brand_Segment_ID";
                                    lbEOBrandsDB.DataBind();
                                }
                            }
                            lblEOSelectedBrandDB.Text = string.Empty;

                            //Filling/Selecting Brand List box
                            if ((ds != null))
                            {
                                if (!(ds.Tables.Count == 0))
                                {
                                    if (!(ds.Tables[2].Rows.Count == 0))
                                    {
                                        int intRowCount = 0;
                                        for (intRowCount = 0; intRowCount <= ds.Tables[2].Rows.Count - 1; intRowCount++)
                                        {
                                            if ((!object.ReferenceEquals(ds.Tables[2].Rows[intRowCount][0], System.DBNull.Value)))
                                            {
                                                int intPrjList = 0;
                                                string strProjStatus = null;
                                                for (intPrjList = 0; intPrjList <= lbEOBrandsDB.Items.Count - 1; intPrjList++)
                                                {
                                                    if (ds.Tables[2].Rows[intRowCount][0].ToString() == lbEOBrandsDB.Items[intPrjList].Value.ToString())
                                                    {
                                                        strProjStatus = "Yes";
                                                    }
                                                }
                                                try
                                                {
                                                    if (strProjStatus == "Yes")
                                                    {
                                                        ViewState["lstdis"] = "Yes";
                                                        lbEOBrandsDB.Items[lbEOBrandsDB.Items.IndexOf(lbEOBrandsDB.Items.FindByValue(ds.Tables[2].Rows[intRowCount][0].ToString()))].Attributes.Add("style", "font-weight:bold");
                                                        lbEOBrandsDB.Items[lbEOBrandsDB.Items.IndexOf(lbEOBrandsDB.Items.FindByValue(ds.Tables[2].Rows[intRowCount][0].ToString()))].Selected = true;
                                                        foreach (ListItem li in lbEOBrandsDB.Items)
                                                        {
                                                            li.Attributes.Add("disabled", "disabled");
                                                        }
                                                        lbEOBrandsDB.AutoPostBack = false;
                                                    }
                                                }
                                                catch (Exception ex)
                                                {
                                                }
                                            }
                                        }
                                    }
                                }
                            }

                            if ((!object.ReferenceEquals(ds.Tables[0].Rows[0]["Plant_Name"], System.DBNull.Value)))
                            {
                                int intPrjList = 0;
                                string strProjStatus = null;
                                for (intPrjList = 1; intPrjList <= drpPlant.Items.Count - 1; intPrjList++)
                                {
                                    if (ds.Tables[0].Rows[0]["Plant_Name"].ToString() == drpPlant.Items[intPrjList].Text)
                                    {
                                        strProjStatus = "Yes";
                                    }
                                }
                                try
                                {
                                    if (strProjStatus == "Yes")
                                    {
                                        drpPlant.SelectedIndex = -1;
                                        drpPlant.Items[drpPlant.Items.IndexOf(drpPlant.Items.FindByText(ds.Tables[0].Rows[0]["Plant_Name"].ToString()))].Selected = true;
                                    }
                                    else
                                    {
                                        //drpPlant.SelectedIndex = 0
                                    }

                                }
                                catch (Exception ex)
                                {
                                }

                            }
                            else
                            {
                                // drpPlant.SelectedIndex = 0
                            }

                            BrandSegmentSelect();

                            //'If Not ds.Tables[0].Rows(0).Item("Project_ID") Is System.DBNull.Value Or Not ds.Tables[0].Rows(0).Item("Project_ID") = "" Then
                            if ((!object.ReferenceEquals(ds.Tables[0].Rows[0]["Project_ID"], System.DBNull.Value)))
                            {
                                int intPrjList = 0;
                                string strProjStatus = null;
                                for (intPrjList = 1; intPrjList <= drpEOProjectsDB.Items.Count - 1; intPrjList++)
                                {
                                    if (ds.Tables[0].Rows[0]["Project_ID"].ToString() == drpEOProjectsDB.Items[intPrjList].Value)
                                    {
                                        strProjStatus = "Yes";
                                    }
                                }
                                try
                                {
                                    if (strProjStatus == "Yes")
                                    {
                                        drpEOProjectsDB.SelectedIndex = -1;
                                        drpEOProjectsDB.Items[drpEOProjectsDB.Items.IndexOf(drpEOProjectsDB.Items.FindByValue(ds.Tables[0].Rows[0]["Project_ID"].ToString()))].Selected = true;
                                    }
                                    else
                                    {
                                        //drpEOProjectsDB.SelectedIndex = 0
                                    }

                                }
                                catch (Exception ex)
                                {
                                }

                            }
                            else
                            {
                                //drpEOProjectsDB.SelectedIndex = 0
                            }

                            lbEOEventsDB.Items.Clear();
                            FillListEvents();
                            if (!(Request.QueryString["From"].ToString() == "CopyNew"))
                            {
                                if ((ds != null))
                                {
                                    if (!(ds.Tables.Count == 0))
                                    {
                                        if (!(ds.Tables[1].Rows.Count == 0))
                                        {
                                            int intRowCount = 0;
                                            for (intRowCount = 0; intRowCount <= ds.Tables[1].Rows.Count - 1; intRowCount++)
                                            {
                                                if ((!object.ReferenceEquals(ds.Tables[1].Rows[intRowCount][0], System.DBNull.Value)))
                                                {
                                                    try
                                                    {
                                                        ViewState["lstdis"] = "Yes";
                                                        lbEOEventsDB.Items[lbEOEventsDB.Items.IndexOf(lbEOEventsDB.Items.FindByValue(ds.Tables[1].Rows[intRowCount][0].ToString()))].Selected = true;
                                                        lbEOEventsDB.Items[lbEOEventsDB.Items.IndexOf(lbEOEventsDB.Items.FindByValue(ds.Tables[1].Rows[intRowCount][0].ToString()))].Attributes.Add("style", "font-weight:bold");

                                                        foreach (ListItem li in lbEOEventsDB.Items)
                                                        {
                                                            li.Attributes.Add("disabled", "disabled");
                                                        }
                                                    }
                                                    catch (Exception ex)
                                                    {
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }

                            if ((!object.ReferenceEquals(ds.Tables[0].Rows[0]["Originator"], System.DBNull.Value)))
                            {
                                lblCoOrdinator.Text = ds.Tables[0].Rows[0]["Originator"].ToString();
                            }
                            else
                            {
                                lblCoOrdinator.Text = string.Empty;
                            }

                            try
                            {
                                if ((!object.ReferenceEquals(ds.Tables[0].Rows[0]["Originator"], System.DBNull.Value)))
                                {
                                    lblCloseOriginatorDB.Text = ds.Tables[0].Rows[0]["Originator"].ToString();
                                }
                                else
                                {
                                    lblCloseOriginatorDB.Text = string.Empty;
                                }

                            }
                            catch (Exception ex)
                            {
                            }


                            if ((!object.ReferenceEquals(ds.Tables[0].Rows[0]["Office_Num"], System.DBNull.Value)))
                            {
                                txtOfficeNumber.Text = ds.Tables[0].Rows[0]["Office_Num"].ToString();
                            }
                            else
                            {
                                txtOfficeNumber.Text = string.Empty;
                            }

                            if ((!object.ReferenceEquals(ds.Tables[0].Rows[0]["Phone_Num"], System.DBNull.Value)))
                            {
                                txtPhoneNumberDB.Text = ds.Tables[0].Rows[0]["Phone_Num"].ToString();
                            }
                            else
                            {
                                txtPhoneNumberDB.Text = string.Empty;
                            }

                            if ((!object.ReferenceEquals(ds.Tables[0].Rows[0]["CoOriginator"], System.DBNull.Value)))
                            {
                                txtCooriginator.Text = ds.Tables[0].Rows[0]["CoOriginator"].ToString();
                            }
                            else
                            {
                                txtCooriginator.Text = string.Empty;
                            }

                            if ((!object.ReferenceEquals(ds.Tables[0].Rows[0]["EO_Mode"], System.DBNull.Value)))
                            {
                                if (ds.Tables[0].Rows[0]["EO_Mode"].ToString() == "E")
                                {
                                    rbEOType.Items[0].Selected = true;
                                }
                                else if (ds.Tables[0].Rows[0]["EO_Mode"].ToString() == "S")
                                {
                                    rbEOType.Items[1].Selected = true;
                                }
                                else if (ds.Tables[0].Rows[0]["EO_Mode"].ToString() == "O")
                                {
                                    rbEOType.Items[2].Selected = true;
                                }
                                else if (ds.Tables[0].Rows[0]["EO_Mode"].ToString() == "H")
                                {
                                    rbEOType.Items[3].Selected = true;
                                }

                            }
                            else
                            {
                            }

                        }
                    }
                }
            }
        }

        public void Get_EO_Mandatory_Lock()
        {
            DataSet ds = null;

            if (objEOBA.GETEOMandatory(Convert.ToInt32(ViewState["EOID"]), ref ds))
            {
                if ((ds != null))
                {
                    if (ds.Tables.Count != 0)
                    {
                        if (ds.Tables[0].Rows.Count != 0)
                        {
                            if (ds.Tables[0].Rows[0]["Two_Tab_Routing"] != System.DBNull.Value)
                            {
                                ViewState["Two_Tab_Routing"] = ds.Tables[0].Rows[0]["Two_Tab_Routing"];
                            }
                            else
                            {
                                ViewState["Two_Tab_Routing"] = "N";
                            }

                            if (ds.Tables[0].Rows[0]["Plant_ID"] != System.DBNull.Value)
                            {
                                txtPlantID.Text = ds.Tables[0].Rows[0]["Plant_ID"].ToString();
                            }
                            else
                            {
                                txtPlantID.Text = string.Empty;
                            }

                            if (ds.Tables[0].Rows[0]["Current_Stage"] != System.DBNull.Value)
                            {
                                lblCurStage.Text = ds.Tables[0].Rows[0]["Current_Stage"].ToString();
                            }
                            else
                            {
                                lblCurStage.Text = string.Empty;
                            }

                            if (ds.Tables[0].Rows[0]["Stage_Status"] != System.DBNull.Value)
                            {
                                lblstatus.Text = ds.Tables[0].Rows[0]["Stage_Status"].ToString();
                            }
                            else
                            {
                                lblstatus.Text = string.Empty;
                            }

                            if (lblCurStage.Text.ToUpper() == "CloseOut".ToUpper())
                            {
                                if (lblstatus.Text.ToUpper() == "Approved".ToUpper())
                                {
                                    lblstatus.Text = "Completed";
                                }
                            }

                            if (ds.Tables[0].Rows[0]["EO_Title"] != System.DBNull.Value)
                            {
                                lblTitle.Text = ds.Tables[0].Rows[0]["EO_Title"].ToString();
                            }
                            else
                            {
                                lblTitle.Text = string.Empty;
                            }

                            if (ds.Tables[0].Rows[0]["EO_Number"] != System.DBNull.Value)
                            {
                                lblEOnum.Text = ds.Tables[0].Rows[0]["EO_Number"].ToString();
                            }
                            else
                            {
                                lblEOnum.Text = "New EO";
                            }

                            if (ds.Tables[0].Rows[0]["SAP_IO_Number"] != System.DBNull.Value)
                            {
                                lblSAPIO.Text = ds.Tables[0].Rows[0]["SAP_IO_Number"].ToString();
                            }
                            else
                            {
                                lblSAPIO.Text = "Not Assigned";
                            }

                            //Added on 01/20/2010 
                            //For MUREO PCRs
                            //By: David
                            if (ds.Tables[0].Rows[0]["SMART_Clearance_Number"] == DBNull.Value)
                            {
                                lblSmartClearance.Text = "Not Assigned";
                                if ((ViewState["EOIDFlag"] != null) && (ViewState["EOIDFlag"].ToString() == "1"))
                                {
                                    lblSmartClearance.Visible = true;
                                }

                            }
                            else if (ds.Tables[0].Rows[0]["SMART_Clearance_Number"].ToString() == "In Process")
                            {
                                lblSmartClearance.Text = " ";
                                hdnSmart.Value = "In Process";

                            }
                            else
                            {
                                lblSmartClearance.Text = ds.Tables[0].Rows[0]["SMART_Clearance_Number"].ToString();
                                hdnSmart.Value = ds.Tables[0].Rows[0]["SMART_Clearance_Number"].ToString();
                            }


                            if (ds.Tables[0].Rows[0]["Category_Name"] != System.DBNull.Value)
                            {
                                lblCategory.Text = ds.Tables[0].Rows[0]["Category_Name"].ToString();
                            }
                            else
                            {
                                lblCategory.Text = string.Empty;
                            }

                            if (ds.Tables[0].Rows[0]["Plant_Name"] != System.DBNull.Value)
                            {
                                lblPlant.Text = ds.Tables[0].Rows[0]["Plant_Name"].ToString();
                            }
                            else
                            {
                                lblPlant.Text = string.Empty;
                            }

                            if (ds.Tables[0].Rows[0]["Plant_Name"] != System.DBNull.Value)
                            {
                                drpPlant.SelectedIndex = -1;
                                drpPlant.Items[drpPlant.Items.IndexOf(drpPlant.Items.FindByText(ds.Tables[0].Rows[0]["Plant_Name"].ToString()))].Selected = true;
                            }
                            else
                            {
                                drpPlant.Items[drpPlant.Items.IndexOf(drpPlant.Items.FindByValue("0"))].Selected = true;
                            }

                            if (ds.Tables[0].Rows[0]["Project_Name"] != System.DBNull.Value)
                            {
                                lblProjects.Text = ds.Tables[0].Rows[0]["Project_Name"].ToString();
                            }
                            else
                            {
                                lblProjects.Text = string.Empty;
                            }

                            if (ds.Tables[0].Rows[0]["Originator"] != System.DBNull.Value)
                            {
                                lblOriginator.Text = ds.Tables[0].Rows[0]["Originator"].ToString();
                            }
                            else
                            {
                                lblOriginator.Text = string.Empty;
                            }

                            try
                            {
                                if (ds.Tables[0].Rows[0]["Originator"] != System.DBNull.Value)
                                {
                                    lblCloseOriginatorDB.Text = ds.Tables[0].Rows[0]["Originator"].ToString();
                                }
                                else
                                {
                                    lblCloseOriginatorDB.Text = string.Empty;
                                }

                            }
                            catch (Exception ex)
                            {
                            }

                            if (ds.Tables[0].Rows[0]["EO_Number"] != System.DBNull.Value)
                            {
                                lbEONumberDB.Text = ds.Tables[0].Rows[0]["EO_Number"].ToString();
                            }
                            else
                            {
                                lbEONumberDB.Text = "New EO";
                            }

                            if (ds.Tables[0].Rows[0]["SAP_IO_Number"] != System.DBNull.Value)
                            {
                                lbSAPIODB.Text = ds.Tables[0].Rows[0]["SAP_IO_Number"].ToString();
                            }
                            else
                            {
                                lbSAPIODB.Text = "Not Assigned";
                            }


                            //Added on 01/20/2010 
                            //For MUREO PCRs
                            //By: David
                            if (ds.Tables[0].Rows[0]["SMART_Clearance_Number"] != DBNull.Value)
                            {
                                lblSmartClearanceDB.Text = ds.Tables[0].Rows[0]["SMART_Clearance_Number"].ToString();
                                lblSmartClearance.Text = ds.Tables[0].Rows[0]["SMART_Clearance_Number"].ToString();
                                if (ds.Tables[0].Rows[0]["SMART_Clearance_Number"].ToString() == "In Process")
                                {
                                    lblSmartClearanceDB.Text = " ";
                                    lblSmartClearance.Text = " ";
                                }
                                if ((ViewState["EOIDFlag"] != null) && (ViewState["EOIDFlag"].ToString() == "1"))
                                {
                                    lblSmartClearance.Visible = true;
                                }

                            }
                            else
                            {
                                lblSmartClearanceDB.Text = "Not Needed";
                                lblSmartClearance.Text = "Not Needed";
                                if ((ViewState["EOIDFlag"] != null) && (ViewState["EOIDFlag"].ToString() == "1"))
                                {
                                    lblSmartClearance.Visible = true;
                                }
                            }

                            if (ds.Tables[0].Rows[0]["Office_Num"] != System.DBNull.Value)
                            {
                                lblOfficeNo.Text = ds.Tables[0].Rows[0]["Office_Num"].ToString();
                            }
                            else
                            {
                                lblOfficeNo.Text = string.Empty;
                            }

                            if (ds.Tables[0].Rows[0]["Phone_Num"] != System.DBNull.Value)
                            {
                                lblPhno.Text = ds.Tables[0].Rows[0]["Phone_Num"].ToString();
                            }
                            else
                            {
                                lblPhno.Text = string.Empty;
                            }

                            if (ds.Tables[0].Rows[0]["CoOriginator"] != System.DBNull.Value)
                            {
                                lblCoOrginator.Text = ds.Tables[0].Rows[0]["CoOriginator"].ToString();
                            }
                            else
                            {
                                lblCoOrginator.Text = string.Empty;
                            }

                            if (ds.Tables[0].Rows[0]["EO_Mode"] != System.DBNull.Value)
                            {
                                if (ds.Tables[0].Rows[0]["EO_Mode"].ToString() == "E")
                                {
                                    lblEOMode.Text = "EO";
                                }
                                else if (ds.Tables[0].Rows[0]["EO_Mode"].ToString() == "S")
                                {
                                    lblEOMode.Text = "Site Test";
                                }
                                else if (ds.Tables[0].Rows[0]["EO_Mode"].ToString() == "O")
                                {
                                    lblEOMode.Text = "Others";
                                }
                                else if (ds.Tables[0].Rows[0]["EO_Mode"].ToString() == "H")
                                {
                                    lblEOMode.Text = "Hub";
                                }
                            }
                            else
                            {
                                lblEOMode.Text = string.Empty;
                            }

                        }

                        if (!(ds.Tables[1].Rows.Count == 0))
                        {
                            int intRowCount = 0;
                            for (intRowCount = 0; intRowCount <= ds.Tables[1].Rows.Count - 1; intRowCount++)
                            {
                                if (string.IsNullOrEmpty(lblEvents.Text))
                                {
                                    lblEvents.Text = ds.Tables[1].Rows[intRowCount]["Event_Name"].ToString();
                                }
                                else
                                {
                                    lblEvents.Text = lblEvents.Text + "," + ds.Tables[1].Rows[intRowCount]["Event_Name"];
                                }
                            }
                        }

                        if (!(ds.Tables[2].Rows.Count == 0))
                        {
                            int intRowCount = 0;
                            for (intRowCount = 0; intRowCount <= ds.Tables[2].Rows.Count - 1; intRowCount++)
                            {
                                if (string.IsNullOrEmpty(lblSelBrands.Text))
                                {
                                    lblSelBrands.Text = ds.Tables[2].Rows[intRowCount]["Brand_Segment_Name"].ToString();
                                    lblBrands.Text = ds.Tables[2].Rows[intRowCount]["Brand_Segment_Name"].ToString();
                                }
                                else
                                {
                                    lblSelBrands.Text = lblSelBrands.Text + "," + ds.Tables[2].Rows[intRowCount]["Brand_Segment_Name"];
                                    lblBrands.Text = lblBrands.Text + "," + ds.Tables[2].Rows[intRowCount]["Brand_Segment_Name"];
                                }
                            }
                        }
                    }
                }
            }
        }

        public void GET_EO_Preliminary_Lock()
        {
            SetEditLockNewFields();
            DataSet ds = null;

            if (objEOBA.GET_EO_Preliminary(Convert.ToInt32(ViewState["EOID"]), ref ds))
            {
                if ((ds != null))
                {

                    if (!(ds.Tables.Count == 0))
                    {
                        if (!(ds.Tables[19].Rows.Count == 0))
                        {
                            dgrdAttachment_ReadOnly.DataSource = ds.Tables[19].DefaultView;
                            dgrdAttachment_ReadOnly.DataBind();
                        }

                        try
                        {
                            if (!(ds.Tables[13].Rows.Count == 0))
                            {
                                int intRowCount = 0;
                                for (intRowCount = 0; intRowCount <= ds.Tables[13].Rows.Count - 1; intRowCount++)
                                {
                                    if ((!object.ReferenceEquals(ds.Tables[13].Rows[intRowCount]["Prod_Pack_Name"], System.DBNull.Value)))
                                    {
                                        if (!string.IsNullOrEmpty(ds.Tables[13].Rows[intRowCount]["Prod_Pack_Name"].ToString()))
                                        {
                                            if (string.IsNullOrEmpty(lblProdBePacked.Text))
                                            {
                                                lblProdBePacked.Text = ds.Tables[13].Rows[intRowCount]["Prod_Pack_Name"].ToString();
                                            }
                                            else
                                            {
                                                lblProdBePacked.Text = lblProdBePacked.Text + "," + ds.Tables[13].Rows[intRowCount]["Prod_Pack_Name"];
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        catch (Exception ex)
                        {
                        }

                        try
                        {
                            if (!(ds.Tables[18].Rows.Count == 0))
                            {
                                int intRowCount = 0;
                                for (intRowCount = 0; intRowCount <= ds.Tables[18].Rows.Count - 1; intRowCount++)
                                {
                                    if ((!object.ReferenceEquals(ds.Tables[18].Rows[intRowCount][0], System.DBNull.Value)))
                                    {
                                        if (!string.IsNullOrEmpty(ds.Tables[18].Rows[intRowCount][0].ToString()))
                                        {
                                            if (ds.Tables[18].Rows[intRowCount][0].ToString() == "1")
                                            {
                                                if (string.IsNullOrEmpty(lblPackaging.Text))
                                                {
                                                    lblPackaging.Text = "Brown Box";
                                                }
                                                else
                                                {
                                                    lblPackaging.Text = lblPackaging.Text + "," + "Brown Box";
                                                }
                                            }
                                            else if (ds.Tables[18].Rows[intRowCount][0].ToString() == "2")
                                            {
                                                if (string.IsNullOrEmpty(lblPackaging.Text))
                                                {
                                                    lblPackaging.Text = "LCP";
                                                }
                                                else
                                                {
                                                    lblPackaging.Text = lblPackaging.Text + "," + "LCP";
                                                }

                                            }
                                        }
                                    }
                                }
                            }
                        }
                        catch (Exception ex)
                        {
                        }



                        if (!(ds.Tables[0].Rows.Count == 0))
                        {
                            if ((!object.ReferenceEquals(ds.Tables[0].Rows[0]["New_EO_Type_Name"], System.DBNull.Value)))
                            {
                                lblOtherEOType.Text = ds.Tables[0].Rows[0]["New_EO_Type_Name"].ToString();
                            }
                            else
                            {
                                lblOtherEOType.Text = string.Empty;
                            }
                            if ((!object.ReferenceEquals(ds.Tables[0].Rows[0]["Scope_Project_Phase_Name"], System.DBNull.Value)))
                            {

                                if (!(ds.Tables[0].Rows[0]["Scope_Project_Phase_Name"].ToString() == "--SELECT--"))
                                {
                                    lblEOScopeProjectPhase.Text = ds.Tables[0].Rows[0]["Scope_Project_Phase_Name"].ToString();
                                    //jagan 12/28/07 Two Tab Route
                                    lblEOScopeProjectPhase_TwoTbRte.Text = ds.Tables[0].Rows[0]["Scope_Project_Phase_Name"].ToString();
                                }
                                else
                                {
                                    lblEOScopeProjectPhase.Text = string.Empty;
                                    //jagan 12/28/07 Two Tab Route
                                    lblEOScopeProjectPhase_TwoTbRte.Text = string.Empty;
                                }
                            }
                            else
                            {
                                lblEOScopeProjectPhase.Text = string.Empty;
                            }

                            if ((!object.ReferenceEquals(ds.Tables[0].Rows[0]["New_Scope_Project_Type_Name"], System.DBNull.Value)))
                            {
                                lblEOScopeProjectPhaseOther.Text = ds.Tables[0].Rows[0]["New_Scope_Project_Type_Name"].ToString();
                            }
                            else
                            {
                                lblEOScopeProjectPhaseOther.Text = string.Empty;
                            }

                            if ((!object.ReferenceEquals(ds.Tables[0].Rows[0]["Description"], System.DBNull.Value)))
                            {
                                lblBriefDecription.Text = ds.Tables[0].Rows[0]["Description"].ToString();
                                //jagan 12/28/07 Two Tab Route
                                lblBriefDecription_TwoTbRte.Text = ds.Tables[0].Rows[0]["Description"].ToString();
                            }
                            else
                            {
                                lblBriefDecription.Text = string.Empty;
                                //jagan 12/28/07 Two Tab Route
                                lblBriefDecription_TwoTbRte.Text = string.Empty;
                            }

                            if ((!object.ReferenceEquals(ds.Tables[0].Rows[0]["Paper_Making_Days"], System.DBNull.Value)))
                            {
                                lblTotPaperMakingTime.Text = ds.Tables[0].Rows[0]["Paper_Making_Days"].ToString();
                            }
                            else
                            {
                                lblTotPaperMakingTime.Text = string.Empty;
                            }

                            if ((!object.ReferenceEquals(ds.Tables[0].Rows[0]["Converting_Time_Days"], System.DBNull.Value)))
                            {
                                lblTotPaperConvertingTime.Text = ds.Tables[0].Rows[0]["Converting_Time_Days"].ToString();
                            }
                            else
                            {
                                lblTotPaperConvertingTime.Text = string.Empty;
                            }

                            if ((!object.ReferenceEquals(ds.Tables[0].Rows[0]["New_Material_Cost"], System.DBNull.Value)))
                            {
                                lblTotCostOfNewMaterials.Text = ds.Tables[0].Rows[0]["New_Material_Cost"].ToString();
                            }
                            else
                            {
                                lblTotCostOfNewMaterials.Text = string.Empty;
                            }

                            if ((!object.ReferenceEquals(ds.Tables[0].Rows[0]["EO_Specific_Cost"], System.DBNull.Value)))
                            {
                                lblTotCostOfanyEPSpecific.Text = ds.Tables[0].Rows[0]["EO_Specific_Cost"].ToString();
                            }
                            else
                            {
                                lblTotCostOfanyEPSpecific.Text = string.Empty;
                            }

                            if ((!object.ReferenceEquals(ds.Tables[0].Rows[0]["Total_Pre_Spending"], System.DBNull.Value)))
                            {
                                lblTotPreSpending.Text = ds.Tables[0].Rows[0]["Total_Pre_Spending"].ToString();
                            }
                            else
                            {
                                lblTotPreSpending.Text = string.Empty;
                            }

                            if ((!object.ReferenceEquals(ds.Tables[0].Rows[0]["EO_Executing_Cost"], System.DBNull.Value)))
                            {
                                lblEoExecutionCost.Text = ds.Tables[0].Rows[0]["EO_Executing_Cost"].ToString();
                            }
                            else
                            {
                                lblEoExecutionCost.Text = string.Empty;
                            }

                            if ((!object.ReferenceEquals(ds.Tables[0].Rows[0]["Total_Cost"], System.DBNull.Value)))
                            {
                                lblTotCost.Text = ds.Tables[0].Rows[0]["Total_Cost"].ToString();
                            }
                            else
                            {
                                lblTotCost.Text = string.Empty;
                            }

                            if ((!object.ReferenceEquals(ds.Tables[0].Rows[0]["Selected_Budget_Center_Name"], System.DBNull.Value)))
                            {
                                if (ds.Tables[0].Rows[0]["Selected_Budget_Center_Name"].ToString() == "--SELECT--" || ds.Tables[0].Rows[0]["Selected_Budget_Center_Name"].ToString() == "-- Select Budget Center --")
                                {
                                    lblSuggestedBudCenter.Text = string.Empty;
                                    lblSuggestedBudCenter_TwoTbRte.Text = string.Empty;
                                    lblPreSelectedBudgetCenter.Text = string.Empty;
                                    lblPreCOSelectedBudgetCenter.Text = string.Empty;
                                    lblPreSelBudgetCenterLock.Text = string.Empty;
                                    lblPreCOSelBudgetCenterLock.Text = string.Empty;
                                }
                                else
                                {
                                    lblSuggestedBudCenter.Text = ds.Tables[0].Rows[0]["Selected_Budget_Center_Name"].ToString();
                                    lblSuggestedBudCenter_TwoTbRte.Text = ds.Tables[0].Rows[0]["Selected_Budget_Center_Name"].ToString();
                                    lblPreSelectedBudgetCenter.Text = ds.Tables[0].Rows[0]["Selected_Budget_Center_Name"].ToString();
                                    lblPreCOSelectedBudgetCenter.Text = ds.Tables[0].Rows[0]["Selected_Budget_Center_Name"].ToString();
                                    lblPreSelBudgetCenterLock.Text = ds.Tables[0].Rows[0]["Selected_Budget_Center_Name"].ToString();
                                    lblPreCOSelBudgetCenterLock.Text = ds.Tables[0].Rows[0]["Selected_Budget_Center_Name"].ToString();
                                }
                            }
                            else
                            {
                                lblSuggestedBudCenter.Text = string.Empty;
                                lblPreSelectedBudgetCenter.Text = string.Empty;
                                lblPreCOSelectedBudgetCenter.Text = string.Empty;
                                lblPreSelBudgetCenterLock.Text = string.Empty;
                                lblPreCOSelBudgetCenterLock.Text = string.Empty;
                            }

                            if ((!object.ReferenceEquals(ds.Tables[0].Rows[0]["Other_Center_Department"], System.DBNull.Value)))
                            {
                                lblOtherSuggestedBudCenter.Text = ds.Tables[0].Rows[0]["Other_Center_Department"].ToString();
                            }
                            else
                            {
                                lblOtherSuggestedBudCenter.Text = string.Empty;
                            }

                            if ((!object.ReferenceEquals(ds.Tables[0].Rows[0]["Suggested_Budget_Center_Name"], System.DBNull.Value)))
                            {
                                if (!(ds.Tables[0].Rows[0]["Suggested_Budget_Center_Name"].ToString() == "--SELECT--"))
                                {
                                    lblSelectedBudgetCenter.Text = ds.Tables[0].Rows[0]["Suggested_Budget_Center_Name"].ToString();
                                }
                                else
                                {
                                    lblSelectedBudgetCenter.Text = string.Empty;
                                }
                            }
                            else
                            {
                                lblSelectedBudgetCenter.Text = string.Empty;
                            }
                        }
                        if (!(ds.Tables[1].Rows.Count == 0))
                        {
                            int intRowCount = 0;
                            for (intRowCount = 0; intRowCount <= ds.Tables[1].Rows.Count - 1; intRowCount++)
                            {
                                if ((!object.ReferenceEquals(ds.Tables[1].Rows[intRowCount][1], System.DBNull.Value)))
                                {
                                    if (string.IsNullOrEmpty(lblEOType.Text))
                                    {
                                        lblEOType.Text = ds.Tables[1].Rows[intRowCount][1].ToString();
                                        //jagan 12/28/07 Two Tab Route
                                        lblEOType_TwoTbRte.Text = ds.Tables[1].Rows[intRowCount][1].ToString();

                                    }
                                    else
                                    {
                                        lblEOType.Text = lblEOType.Text + "," + ds.Tables[1].Rows[intRowCount][1];
                                        //jagan 12/28/07 Two Tab Route
                                        lblEOType_TwoTbRte.Text = lblEOType.Text + "," + ds.Tables[1].Rows[intRowCount][1];
                                    }
                                }
                            }
                        }
                        //NewMaterialandBrandsReadOnly
                        if (!(ds.Tables[2].Rows.Count == 0))
                        {
                            if ((!object.ReferenceEquals(ds.Tables[2].Rows[0]["EO_Raw_Packing_Material"], System.DBNull.Value)))
                            {
                                if (ds.Tables[2].Rows[0]["EO_Raw_Packing_Material"].ToString() == "Y")
                                {
                                    lblNewRawPackMaterials.Text = "Yes";
                                }
                                else
                                {
                                    lblNewRawPackMaterials.Text = "No";
                                }

                            }
                            else
                            {
                                lblNewRawPackMaterials.Text = string.Empty;
                            }

                            if ((!object.ReferenceEquals(ds.Tables[2].Rows[0]["EO_Parent_Rolls"], System.DBNull.Value)))
                            {
                                if (ds.Tables[2].Rows[0]["EO_Parent_Rolls"].ToString() == "Y")
                                {
                                    lblParentRolls.Text = "Yes";
                                }
                                else
                                {
                                    lblParentRolls.Text = "No";
                                }
                            }
                            else
                            {
                                lblParentRolls.Text = string.Empty;
                            }

                            if ((!object.ReferenceEquals(ds.Tables[2].Rows[0]["EO_Intermediate_Material"], System.DBNull.Value)))
                            {
                                if (ds.Tables[2].Rows[0]["EO_Intermediate_Material"].ToString() == "Y")
                                {
                                    lblEOProduceOrInvolve.Text = "Yes";
                                }
                                else
                                {
                                    lblEOProduceOrInvolve.Text = "No";
                                }
                            }
                            else
                            {
                                lblEOProduceOrInvolve.Text = string.Empty;
                            }

                            if ((!object.ReferenceEquals(ds.Tables[2].Rows[0]["EO_Regulated_Product"], System.DBNull.Value)))
                            {
                                if (ds.Tables[2].Rows[0]["EO_Regulated_Product"].ToString() == "Y")
                                {
                                    lblIsRegulatedProduct.Text = "Yes";
                                }
                                else
                                {
                                    lblIsRegulatedProduct.Text = "No";
                                }
                            }
                            else
                            {
                                lblIsRegulatedProduct.Text = string.Empty;
                            }

                            if ((!object.ReferenceEquals(ds.Tables[2].Rows[0]["EO_GMP_Classification"], System.DBNull.Value)))
                            {
                                if (ds.Tables[2].Rows[0]["EO_GMP_Classification"].ToString() == "A")
                                {
                                    lblGMPClassification.Text = "Yes";
                                }
                                else
                                {
                                    lblGMPClassification.Text = "No";
                                }
                            }
                            else
                            {
                                lblGMPClassification.Text = string.Empty;
                            }

                            if ((!object.ReferenceEquals(ds.Tables[2].Rows[0]["EO_Current_Brand"], System.DBNull.Value)))
                            {
                                if (ds.Tables[2].Rows[0]["EO_Current_Brand"].ToString() == "Y")
                                {
                                    lblCurrentBrand.Text = "Yes";
                                }
                                else
                                {
                                    lblCurrentBrand.Text = "No";
                                }
                            }
                            else
                            {
                                lblCurrentBrand.Text = string.Empty;
                            }

                            if ((!object.ReferenceEquals(ds.Tables[2].Rows[0]["EO_Consumer_Lab_Evaluation"], System.DBNull.Value)))
                            {
                                if (ds.Tables[2].Rows[0]["EO_Consumer_Lab_Evaluation"].ToString() == "Y")
                                {
                                    lblLabEvaluation.Text = "Yes";
                                }
                                else
                                {
                                    lblLabEvaluation.Text = "No";
                                }
                            }
                            else
                            {
                                lblLabEvaluation.Text = string.Empty;
                            }

                            if ((!object.ReferenceEquals(ds.Tables[2].Rows[0]["EO_GCAS"], System.DBNull.Value)))
                            {
                                if (ds.Tables[2].Rows[0]["EO_GCAS"].ToString() == "Y")
                                {
                                    lblUMOF.Text = "Yes";
                                }
                                else
                                {
                                    lblUMOF.Text = "No";
                                }
                            }
                            else
                            {
                                lblUMOF.Text = string.Empty;
                            }
                        }
                        if (!(ds.Tables[3].Rows.Count == 0))
                        {
                            dgdGCASInfoRO.DataSource = ds.Tables[3];
                            dgdGCASInfoRO.DataBind();

                            //jagan 12/28/07 Two Tab Route
                            dgdGCASInfoRO_TwoTbRte.DataSource = ds.Tables[3];
                            dgdGCASInfoRO_TwoTbRte.DataBind();

                        }
                        //HSandSEReadOnly
                        if (!(ds.Tables[4].Rows.Count == 0))
                        {
                            if ((!object.ReferenceEquals(ds.Tables[4].Rows[0]["New_Chemical_Change"], System.DBNull.Value)))
                            {
                                if (ds.Tables[4].Rows[0]["New_Chemical_Change"].ToString() == "Y")
                                {
                                    lblExistingChemical.Text = "Yes";
                                    //jagan 12/28/07 Two Tab Route
                                    lblExistingChemical_TwoTbRte.Text = "Yes";
                                }
                                else
                                {
                                    lblExistingChemical.Text = "No";
                                    //jagan 12/28/07 Two Tab Route
                                    lblExistingChemical_TwoTbRte.Text = "No";
                                }
                            }
                            else
                            {
                                lblExistingChemical.Text = string.Empty;
                                //jagan 12/28/07 Two Tab Route
                                lblExistingChemical_TwoTbRte.Text = string.Empty;
                            }
                            if ((!object.ReferenceEquals(ds.Tables[4].Rows[0]["New_Raw_Material_Change"], System.DBNull.Value)))
                            {
                                if (ds.Tables[4].Rows[0]["New_Raw_Material_Change"].ToString() == "Y")
                                {
                                    lblPhysicalProperties.Text = "Yes";

                                    //jagan 12/28/07 Two Tab Route
                                    lblPhysicalProperties_TwoTbRte.Text = "Yes";
                                }
                                else
                                {
                                    lblPhysicalProperties.Text = "No";

                                    //jagan 12/28/07 Two Tab Route
                                    lblPhysicalProperties_TwoTbRte.Text = "No";
                                }
                            }
                            else
                            {
                                lblPhysicalProperties.Text = string.Empty;

                                //jagan 12/28/07 Two Tab Route
                                lblPhysicalProperties_TwoTbRte.Text = string.Empty;
                            }

                            if ((!object.ReferenceEquals(ds.Tables[4].Rows[0]["New_Equipment_Change"], System.DBNull.Value)))
                            {
                                if (ds.Tables[4].Rows[0]["New_Equipment_Change"].ToString() == "Y")
                                {
                                    lblEqupProcessSupSystem.Text = "Yes";

                                    //jagan 12/28/07 Two Tab Route
                                    lblEqupProcessSupSystem_TwoTbRte.Text = "Yes";
                                }
                                else
                                {
                                    lblEqupProcessSupSystem.Text = "No";

                                    //jagan 12/28/07 Two Tab Route
                                    lblEqupProcessSupSystem_TwoTbRte.Text = "No";
                                }
                            }
                            else
                            {
                                lblEqupProcessSupSystem.Text = string.Empty;
                                //jagan 12/28/07 Two Tab Route
                                lblEqupProcessSupSystem_TwoTbRte.Text = string.Empty;
                            }
                            if ((!object.ReferenceEquals(ds.Tables[4].Rows[0]["New_Job_Task_Change"], System.DBNull.Value)))
                            {
                                if (ds.Tables[4].Rows[0]["New_Job_Task_Change"].ToString() == "Y")
                                {
                                    lblNewJobTask.Text = "Yes";
                                    //jagan 12/28/07 Two Tab Route
                                    lblNewJobTask_TwoTbRte.Text = "Yes";
                                }
                                else
                                {
                                    lblNewJobTask.Text = "No";
                                    //jagan 12/28/07 Two Tab Route
                                    lblNewJobTask_TwoTbRte.Text = "No";
                                }
                            }
                            else
                            {
                                lblNewJobTask.Text = string.Empty;
                                //jagan 12/28/07 Two Tab Route
                                lblNewJobTask_TwoTbRte.Text = string.Empty;
                            }
                        }


                        if ((lblExistingChemical.Text == "No" & lblPhysicalProperties.Text == "No" & lblEqupProcessSupSystem.Text == "No" & lblNewJobTask.Text == "No"))
                        {
                            Label81.Text = "<br>(FYI Only - NO Approval Required)";
                            Label81.Visible = true;
                        }
                        //PSandRAReadOnly
                        if (!(ds.Tables[6].Rows.Count == 0))
                        {
                            if ((!object.ReferenceEquals(ds.Tables[6].Rows[0]["PSRA_Name"], System.DBNull.Value)))
                            {
                                lblPSRADB.Text = ds.Tables[6].Rows[0]["PSRA_Name"].ToString();

                                //jagan 12/28/07 Two Tab Route
                                lblPSRADB_TwoTbRte.Text = ds.Tables[6].Rows[0]["PSRA_Name"].ToString();
                            }
                            else
                            {
                                lblPSRADB.Text = string.Empty;
                                //jagan 12/28/07 Two Tab Route
                                lblPSRADB_TwoTbRte.Text = string.Empty;
                            }

                            if ((!object.ReferenceEquals(ds.Tables[6].Rows[0]["Additional_Info"], System.DBNull.Value)))
                            {
                                lblOtherPSRADB.Text = ds.Tables[6].Rows[0]["Additional_Info"].ToString();
                            }
                            else
                            {
                                lblOtherPSRADB.Text = string.Empty;
                            }
                            //lblOtherPSRADB.Text = ds.Tables[6).Rows(0).Item("Additional_Info")

                        }

                        //PSRA Datagrid RaedOnly
                        if (!(ds.Tables[5].Rows.Count == 0))
                        {
                            dgdPSRAInfoRO.DataSource = ds.Tables[5];
                            dgdPSRAInfoRO.DataBind();

                            //jagan 12/28/07 Two Tab Route
                            dgdPSRAInfoRO_TwoTbRte.DataSource = ds.Tables[5];
                            dgdPSRAInfoRO_TwoTbRte.DataBind();
                        }

                        //PlanningandBudgetInfoReadOnly
                        if (!(ds.Tables[7].Rows.Count == 0))
                        {
                            //If Not ds.Tables[7).Rows(0).Item("PSRA_Name") = DBNull.Value.ToString Then
                            //    lblPlantSiteRO.Text = ds.Tables[7).Rows(0).Item("PSRA_Name")
                            //Else
                            //    lblPlantSiteRO.Text = String.Empty
                            //End If
                            if ((!object.ReferenceEquals(ds.Tables[7].Rows[0]["Lines_Machines"], System.DBNull.Value)))
                            {
                                lblLinesMachineRO.Text = ds.Tables[7].Rows[0]["Lines_Machines"].ToString();

                                //jagan 12/28/07 Two Tab Route
                                lblLinesMachineRO_TwoTbRte.Text = ds.Tables[7].Rows[0]["Lines_Machines"].ToString();
                            }
                            else
                            {
                                lblLinesMachineRO.Text = string.Empty;
                                //jagan 12/28/07 Two Tab Route
                                lblLinesMachineRO_TwoTbRte.Text = string.Empty;
                            }
                            if ((!object.ReferenceEquals(ds.Tables[7].Rows[0]["Planned_Start_Date"], System.DBNull.Value)))
                            {
                                lblPlannesStDateRO.Text = ds.Tables[7].Rows[0]["Planned_Start_Date"].ToString();
                                //jagan 12/28/07 Two Tab Route
                                lblPlannesStDateRO_TwoTbRte.Text = ds.Tables[7].Rows[0]["Planned_Start_Date"].ToString();
                            }
                            else
                            {
                                lblPlannesStDateRO.Text = string.Empty;
                                //jagan 12/28/07 Two Tab Route
                                lblPlannesStDateRO_TwoTbRte.Text = string.Empty;
                            }
                            if ((!object.ReferenceEquals(ds.Tables[7].Rows[0]["Formula_Card_Number"], System.DBNull.Value)))
                            {
                                lblFormulaCardNORO.Text = ds.Tables[7].Rows[0]["Formula_Card_Number"].ToString();
                            }
                            else
                            {
                                lblFormulaCardNORO.Text = string.Empty;
                            }
                            if ((!object.ReferenceEquals(ds.Tables[7].Rows[0]["IGCAS_Number"], System.DBNull.Value)))
                            {
                                lblIPSGCAS.Text = ds.Tables[7].Rows[0]["IGCAS_Number"].ToString();
                            }
                            else
                            {
                                lblIPSGCAS.Text = string.Empty;
                            }
                        }
                        //ProductionandPackagingReadOnly
                        if (!(ds.Tables[8].Rows.Count == 0))
                        {
                            if ((!object.ReferenceEquals(ds.Tables[8].Rows[0]["PP_Format"], System.DBNull.Value)))
                            {
                                lblFormats.Text = ds.Tables[8].Rows[0]["PP_Format"].ToString();
                                //jagan 12/28/07 Two Tab Route
                                lblFormats_TwoTbRte.Text = ds.Tables[8].Rows[0]["PP_Format"].ToString();
                            }
                            else
                            {
                                lblFormats.Text = string.Empty;
                                //jagan 12/28/07 Two Tab Route
                                lblFormats_TwoTbRte.Text = string.Empty;
                            }
                        }


                        //Packaging / Disposition Information REadOnly
                        try
                        {
                            if (!(ds.Tables[13].Rows.Count == 0))
                            {
                                int intRowCount = 0;
                                for (intRowCount = 0; intRowCount <= ds.Tables[13].Rows.Count - 1; intRowCount++)
                                {
                                    if ((!object.ReferenceEquals(ds.Tables[13].Rows[intRowCount]["Prod_Pack_Name"], System.DBNull.Value)))
                                    {
                                        if (!string.IsNullOrEmpty(Convert.ToString(ds.Tables[13].Rows[intRowCount]["Prod_Pack_Name"])))
                                        {
                                            if (string.IsNullOrEmpty(lblProdBePacked.Text))
                                            {
                                                lblProdBePacked.Text = ds.Tables[13].Rows[intRowCount]["Prod_Pack_Name"].ToString();
                                            }
                                            else
                                            {
                                                lblProdBePacked.Text = lblProdBePacked.Text + "," + ds.Tables[13].Rows[intRowCount]["Prod_Pack_Name"];
                                            }
                                        }

                                    }
                                }
                            }
                        }
                        catch (Exception ex)
                        {
                        }

                        if (!(ds.Tables[10].Rows.Count == 0))
                        {
                            if ((!object.ReferenceEquals(ds.Tables[10].Rows[0]["Current_Packaging"], System.DBNull.Value)))
                            {
                                if (ds.Tables[10].Rows[0]["Current_Packaging"].ToString() == "Y")
                                {
                                    lblCurrentPackagingRO.Text = "Yes";
                                }
                                else
                                {
                                    lblCurrentPackagingRO.Text = "No";
                                }
                            }
                            else
                            {
                                lblCurrentPackagingRO.Text = string.Empty;
                            }

                            if ((!object.ReferenceEquals(ds.Tables[10].Rows[0]["Experimental_Packaging"], System.DBNull.Value)))
                            {
                                if (ds.Tables[10].Rows[0]["Experimental_Packaging"].ToString() == "Y")
                                {
                                    lblExperimPackagingRO.Text = "Yes";
                                }
                                else
                                {
                                    lblExperimPackagingRO.Text = "No";
                                }
                            }
                            else
                            {
                                lblExperimPackagingRO.Text = string.Empty;
                            }

                            if ((!object.ReferenceEquals(ds.Tables[10].Rows[0]["Exp_Pack_Clear_Poly"], System.DBNull.Value)))
                            {
                                if (ds.Tables[10].Rows[0]["Exp_Pack_Clear_Poly"].ToString() == "Y")
                                {
                                    lblClearPolyRO.Text = "Yes";
                                }
                                else
                                {
                                    lblClearPolyRO.Text = "No";
                                }
                            }
                            else
                            {
                                lblClearPolyRO.Text = string.Empty;
                            }

                            if ((!object.ReferenceEquals(ds.Tables[10].Rows[0]["Exp_Pack_Blank_KDF"], System.DBNull.Value)))
                            {
                                if (ds.Tables[10].Rows[0]["Exp_Pack_Blank_KDF"].ToString() == "Y")
                                {
                                    lblBlankKDFRO.Text = "Yes";
                                }
                                else
                                {
                                    lblBlankKDFRO.Text = "No";
                                }
                            }
                            else
                            {
                                lblBlankKDFRO.Text = string.Empty;
                            }

                            if ((!object.ReferenceEquals(ds.Tables[10].Rows[0]["Prod_Disposition_Name"], System.DBNull.Value)))
                            {
                                if (!(ds.Tables[10].Rows[0]["Prod_Disposition_Name"].ToString() == "--SELECT--"))
                                {
                                    lbProductDisposition.Text = ds.Tables[10].Rows[0]["Prod_Disposition_Name"].ToString();
                                }
                                else
                                {
                                    lbProductDisposition.Text = string.Empty;
                                }
                            }
                            else
                            {
                                lbProductDisposition.Text = string.Empty;
                            }

                            if ((!object.ReferenceEquals(ds.Tables[10].Rows[0]["Prod_Disp_Add_Comments"], System.DBNull.Value)))
                            {
                                lbAdditionalCommnets.Text = ds.Tables[10].Rows[0]["Prod_Disp_Add_Comments"].ToString();
                            }
                            else
                            {
                                lbAdditionalCommnets.Text = string.Empty;
                            }

                            if ((!object.ReferenceEquals(ds.Tables[10].Rows[0]["Pallet_Patter_SKU"], System.DBNull.Value)))
                            {
                                if (ds.Tables[10].Rows[0]["Pallet_Patter_SKU"].ToString() == "Y")
                                {
                                    lblUniquePallet.Text = "Yes";
                                }
                                else
                                {
                                    lblUniquePallet.Text = "No";
                                }
                            }
                            else
                            {
                                lblUniquePallet.Text = string.Empty;
                            }
                            if ((!object.ReferenceEquals(ds.Tables[10].Rows[0]["Stack_Testing"], System.DBNull.Value)))
                            {
                                if (ds.Tables[10].Rows[0]["Stack_Testing"].ToString() == "Y")
                                {
                                    lblStackTesting.Text = "Yes";
                                }
                                else
                                {
                                    lblStackTesting.Text = "No";
                                }
                            }
                            else
                            {
                                lblStackTesting.Text = string.Empty;
                            }

                            if ((!object.ReferenceEquals(ds.Tables[10].Rows[0]["Ship_Testing"], System.DBNull.Value)))
                            {
                                if (ds.Tables[10].Rows[0]["Ship_Testing"].ToString() == "Y")
                                {
                                    lblShipTesting.Text = "Yes";
                                }
                                else
                                {
                                    lblShipTesting.Text = "No";
                                }
                            }
                            else
                            {
                                lblShipTesting.Text = string.Empty;
                            }

                            if ((!object.ReferenceEquals(ds.Tables[10].Rows[0]["Material_Disposition_Name"], System.DBNull.Value)))
                            {
                                if (!(ds.Tables[10].Rows[0]["Material_Disposition_Name"].ToString() == "--SELECT--"))
                                {
                                    lblMaterialDisposition.Text = ds.Tables[10].Rows[0]["Material_Disposition_Name"].ToString();
                                }
                                else
                                {
                                    lblMaterialDisposition.Text = string.Empty;
                                }
                            }
                            else
                            {
                                lblMaterialDisposition.Text = string.Empty;
                            }

                            if ((!object.ReferenceEquals(ds.Tables[10].Rows[0]["Mat_Disp_Add_Comments"], System.DBNull.Value)))
                            {
                                lblAdditionalMaterialDisposition.Text = ds.Tables[10].Rows[0]["Mat_Disp_Add_Comments"].ToString();
                            }
                            else
                            {
                                lblAdditionalMaterialDisposition.Text = string.Empty;
                            }

                            if ((!object.ReferenceEquals(ds.Tables[10].Rows[0]["Broke_Disp_Normal"], System.DBNull.Value)))
                            {
                                if (ds.Tables[10].Rows[0]["Broke_Disp_Normal"].ToString() == "Y")
                                {
                                    lblEOGraterNormalBroke.Text = "Yes";
                                }
                                else
                                {
                                    lblEOGraterNormalBroke.Text = "No";
                                }
                            }
                            else
                            {
                                lblEOGraterNormalBroke.Text = string.Empty;
                            }

                            if ((!object.ReferenceEquals(ds.Tables[10].Rows[0]["Printer_Broke"], System.DBNull.Value)))
                            {
                                if (ds.Tables[10].Rows[0]["Printer_Broke"].ToString() == "Y")
                                {
                                    lblPrinyBrokeRO.Text = "Yes";
                                }
                                else
                                {
                                    lblPrinyBrokeRO.Text = "No";
                                }
                            }
                            else
                            {
                                lblPrinyBrokeRO.Text = string.Empty;
                            }

                            if ((!object.ReferenceEquals(ds.Tables[10].Rows[0]["Ink_Coverage"], System.DBNull.Value)))
                            {
                                if (ds.Tables[10].Rows[0]["Ink_Coverage"].ToString() == "Y")
                                {
                                    lblinkCovBrokeRO.Text = "Yes";
                                }
                                else
                                {
                                    lblinkCovBrokeRO.Text = "No";
                                }
                            }
                            else
                            {
                                lblinkCovBrokeRO.Text = string.Empty;
                            }

                            if ((!object.ReferenceEquals(ds.Tables[10].Rows[0]["Ink_Coverage"], System.DBNull.Value)))
                            {
                                lblinkCovBrokeRO.Text = ds.Tables[10].Rows[0]["Ink_Coverage"].ToString();
                            }
                            else
                            {
                                lblinkCovBrokeRO.Text = string.Empty;
                            }

                            if ((!object.ReferenceEquals(ds.Tables[10].Rows[0]["Lab_Notebook_Number"], System.DBNull.Value)))
                            {
                                lblLabNoteBookRO.Text = ds.Tables[10].Rows[0]["Lab_Notebook_Number"].ToString();
                            }
                            else
                            {
                                lblLabNoteBookRO.Text = string.Empty;
                            }

                            if ((!object.ReferenceEquals(ds.Tables[10].Rows[0]["Comments"], System.DBNull.Value)))
                            {
                                lblApproverComments.Text = ds.Tables[10].Rows[0]["Comments"].ToString();
                            }
                            else
                            {
                                lblApproverComments.Text = string.Empty;
                            }
                        }
                        //Code Added by Srilakshmi
                        //for concurece group
                        if (!(ds.Tables[14].Rows.Count == 0))
                        {
                            dgrConcurenceGrp.Visible = true;
                            dgrConcurenceGrp.DataSource = ds.Tables[14];
                            dgrConcurenceGrp.DataBind();

                            int dlRowCount = 0;
                            if (dgrConcurenceGrp.Items.Count == 0)
                            {
                            }
                            else
                            {
                                dgrConcurenceGrp.Visible = true;
                                for (dlRowCount = 0; dlRowCount <= dgrConcurenceGrp.Items.Count - 1; dlRowCount++)
                                {
                                    if (object.ReferenceEquals(ds.Tables[14].Rows[dlRowCount]["Is_Responded"], System.DBNull.Value))
                                    {
                                        dgrConcurenceGrp.Items[dlRowCount].FindControl("lnkDeclined").Visible = true;
                                        dgrConcurenceGrp.Items[dlRowCount].FindControl("lnkApproval").Visible = true;
                                    }
                                    else if (ds.Tables[14].Rows[dlRowCount]["Is_Responded"].ToString() == "No Response")
                                    {
                                        if (objSecurity.UserName.ToUpper() == txtCooriginator.Text.ToUpper() || objSecurity.UserName.ToUpper() == lblOriginator.Text.ToUpper())
                                        {
                                            if (objSecurity.UserName.ToUpper() == ds.Tables[14].Rows[dlRowCount]["Approver_Name"].ToString().ToUpper())
                                            {
                                                //If UCase(objSecurity.UserName) = UCase("srinivasachary.n") Then
                                                dgrConcurenceGrp.Items[dlRowCount].FindControl("lnkDeclined").Visible = true;
                                                dgrConcurenceGrp.Items[dlRowCount].FindControl("lnkApproval").Visible = true;
                                                dgrConcurenceGrp.Items[dlRowCount].FindControl("lnkBackUp").Visible = true;
                                            }
                                            else
                                            {
                                                dgrConcurenceGrp.Items[dlRowCount].FindControl("lnkBackUp").Visible = true;
                                                dgrConcurenceGrp.Items[dlRowCount].FindControl("lnkDeclined").Visible = false;
                                                dgrConcurenceGrp.Items[dlRowCount].FindControl("lnkApproval").Visible = false;
                                            }
                                        }
                                        else if (objSecurity.UserName.ToUpper() == ds.Tables[14].Rows[dlRowCount]["Approver_Name"].ToString().ToUpper())
                                        {
                                            dgrConcurenceGrp.Items[dlRowCount].FindControl("lnkDeclined").Visible = true;
                                            dgrConcurenceGrp.Items[dlRowCount].FindControl("lnkApproval").Visible = true;
                                            dgrConcurenceGrp.Items[dlRowCount].FindControl("lnkBackUp").Visible = false;
                                        }
                                        else
                                        {
                                            dgrConcurenceGrp.Items[dlRowCount].FindControl("lnkDeclined").Visible = false;
                                            dgrConcurenceGrp.Items[dlRowCount].FindControl("lnkApproval").Visible = false;
                                            dgrConcurenceGrp.Items[dlRowCount].FindControl("lnkBackUp").Visible = false;
                                        }

                                    }
                                    else if (ds.Tables[14].Rows[dlRowCount]["Is_Responded"].ToString() == "Approved")
                                    {
                                        dgrConcurenceGrp.Items[dlRowCount].FindControl("lnkDeclined").Visible = false;
                                        dgrConcurenceGrp.Items[dlRowCount].FindControl("lnkApproval").Visible = false;
                                        dgrConcurenceGrp.Items[dlRowCount].FindControl("lnkBackUp").Visible = false;
                                        //lnkDeclined.Visible = true
                                    }
                                    else if (ds.Tables[14].Rows[dlRowCount]["Is_Responded"].ToString() == "Declined")
                                    {
                                        dgrConcurenceGrp.Items[dlRowCount].FindControl("lnkApproval").Visible = false;
                                        dgrConcurenceGrp.Items[dlRowCount].FindControl("lnkDeclined").Visible = false;
                                        dgrConcurenceGrp.Items[dlRowCount].FindControl("lnkBackUp").Visible = false;
                                    }
                                }
                            }
                            try
                            {
                                if (Request.QueryString["From"].ToString() == "ForEOLock")
                                {
                                    lnkConGrp.Enabled = false;
                                    dgrConcurenceGrp.Columns[4].Visible = false;
                                    dgrConcurenceGrp.Columns[5].Visible = false;
                                    dgrConcurenceGrp.Columns[6].Visible = false;

                                }
                            }
                            catch (Exception ex)
                            {


                            }
                        }

                        //End of Concurrence
                        //for pre screeners
                        if (!(ds.Tables[15].Rows.Count == 0))
                        {
                            dgrPrescrenners.Visible = true;
                            dgrPrescrenners.DataSource = ds.Tables[15];
                            dgrPrescrenners.DataBind();

                            int dlRowCountp = 0;
                            if (dgrPrescrenners.Items.Count == 0)
                            {
                            }
                            else
                            {
                                dgrPrescrenners.Visible = true;
                                for (dlRowCountp = 0; dlRowCountp <= dgrPrescrenners.Items.Count - 1; dlRowCountp++)
                                {
                                    if (object.ReferenceEquals(ds.Tables[15].Rows[dlRowCountp]["Is_Responded"], System.DBNull.Value))
                                    {
                                        dgrPrescrenners.Items[dlRowCountp].FindControl("lnkpreDeclined").Visible = true;
                                        dgrPrescrenners.Items[dlRowCountp].FindControl("lnkpreApproval").Visible = true;
                                    }
                                    else if (ds.Tables[15].Rows[dlRowCountp]["Is_Responded"].ToString() == "No Response")
                                    {
                                        if (objSecurity.UserName.ToUpper() == ds.Tables[15].Rows[dlRowCountp]["Approver_Name"].ToString().ToUpper())
                                        {
                                            dgrPrescrenners.Items[dlRowCountp].FindControl("lnkpreDeclined").Visible = true;
                                            dgrPrescrenners.Items[dlRowCountp].FindControl("lnkpreApproval").Visible = true;
                                        }
                                        else
                                        {
                                            dgrPrescrenners.Items[dlRowCountp].FindControl("lnkpreDeclined").Visible = false;
                                            dgrPrescrenners.Items[dlRowCountp].FindControl("lnkpreApproval").Visible = false;
                                        }

                                    }
                                    else if (ds.Tables[15].Rows[dlRowCountp]["Is_Responded"].ToString() == "Approved")
                                    {
                                        dgrPrescrenners.Items[dlRowCountp].FindControl("lnkpreDeclined").Visible = false;
                                        dgrPrescrenners.Items[dlRowCountp].FindControl("lnkpreApproval").Visible = false;
                                        //lnkDeclined.Visible = true
                                    }
                                    else if (ds.Tables[15].Rows[dlRowCountp]["Is_Responded"].ToString() == "Declined")
                                    {
                                        dgrPrescrenners.Items[dlRowCountp].FindControl("lnkpreApproval").Visible = false;
                                        dgrPrescrenners.Items[dlRowCountp].FindControl("lnkpreDeclined").Visible = false;
                                    }


                                }
                            }
                        }
                        //Preliminary-Approval Section Read Only
                        if (!(ds.Tables[12].Rows.Count == 0))
                        {
                            int intRowCount = 0;
                            for (intRowCount = 0; intRowCount <= ds.Tables[12].Rows.Count - 1; intRowCount++)
                            {
                                //If ds.Tables[12).Rows(intRowCount).Item("Function_Name") Is System.DBNull.Value Or Not ds.Tables[12).Rows(intRowCount).Item("Function_Name") = "" Then
                                //For Preliminary Approval GrpID
                                if ((!object.ReferenceEquals(ds.Tables[12].Rows[intRowCount]["Approval_Group_Name"], System.DBNull.Value)))
                                {
                                    lblPreliminaryAppGrp.Text = ds.Tables[12].Rows[intRowCount]["Approval_Group_Name"].ToString();
                                }
                                else
                                {
                                    lblPreliminaryAppGrp.Text = string.Empty;
                                }

                                if ((!object.ReferenceEquals(ds.Tables[12].Rows[intRowCount]["Function_Name"], System.DBNull.Value)))
                                {
                                    if (ds.Tables[12].Rows[intRowCount]["Function_Name"].ToString() == "Budget Center")
                                    {
                                        //If Not ds.Tables[12).Rows(intRowCount).Item("Approver_Name") Is System.DBNull.Value Or Not ds.Tables[12).Rows(intRowCount).Item("Approver_Name") = "" Then
                                        if ((!object.ReferenceEquals(ds.Tables[12].Rows[intRowCount]["Approver_Name"], System.DBNull.Value)))
                                        {
                                            lblBORO.Text = ds.Tables[12].Rows[intRowCount]["Approver_Name"].ToString();
                                            if ((!object.ReferenceEquals(ds.Tables[12].Rows[intRowCount]["Is_Approved"], System.DBNull.Value)))
                                            {
                                                if (ds.Tables[12].Rows[intRowCount]["Is_Approved"].ToString().ToUpper() == "Y")
                                                {
                                                    imgBudgetYes.Visible = true;
                                                    imgBudgetNo.Visible = false;
                                                }
                                                else if (ds.Tables[12].Rows[intRowCount]["Is_Approved"].ToString().ToUpper() == "N")
                                                {
                                                    imgBudgetNo.Visible = true;
                                                    imgBudgetYes.Visible = false;
                                                }
                                            }
                                        }
                                        else
                                        {
                                            lblBORO.Text = string.Empty;
                                        }
                                    }

                                    if (ds.Tables[12].Rows[intRowCount]["Function_Name"].ToString() == "GBU HS&E Resource")
                                    {
                                        //If Not ds.Tables[12).Rows(intRowCount).Item("Approver_Name") Is System.DBNull.Value Or Not ds.Tables[12).Rows(intRowCount).Item("Approver_Name") = "" Then
                                        if ((!object.ReferenceEquals(ds.Tables[12].Rows[intRowCount]["Approver_Name"], System.DBNull.Value)))
                                        {
                                            lblGBUHSERO.Text = ds.Tables[12].Rows[intRowCount]["Approver_Name"].ToString();
                                            if ((!object.ReferenceEquals(ds.Tables[12].Rows[intRowCount]["Is_Approved"], System.DBNull.Value)))
                                            {
                                                if (ds.Tables[12].Rows[intRowCount]["Is_Approved"].ToString().ToUpper() == "Y")
                                                {
                                                    imgGbuHseYes.Visible = true;
                                                    imgGbuHseNo.Visible = false;
                                                }
                                                else if (ds.Tables[12].Rows[intRowCount]["Is_Approved"].ToString().ToUpper() == "N")
                                                {
                                                    imgGbuHseNo.Visible = true;
                                                    imgGbuHseYes.Visible = false;
                                                }
                                            }
                                        }
                                        else
                                        {
                                            lblGBUHSERO.Text = string.Empty;
                                        }
                                    }

                                    if (ds.Tables[12].Rows[intRowCount]["Function_Name"].ToString() == "Site HS&E Resource")
                                    {
                                        //If Not ds.Tables[12).Rows(intRowCount).Item("Approver_Name") Is System.DBNull.Value Or Not ds.Tables[12).Rows(intRowCount).Item("Approver_Name") = "" Then
                                        if ((!object.ReferenceEquals(ds.Tables[12].Rows[intRowCount]["Approver_Name"], System.DBNull.Value)))
                                        {
                                            lblSiteHSERO.Text = ds.Tables[12].Rows[intRowCount]["Approver_Name"].ToString();
                                            if ((!object.ReferenceEquals(ds.Tables[12].Rows[intRowCount]["Is_Approved"], System.DBNull.Value)))
                                            {
                                                if (ds.Tables[12].Rows[intRowCount]["Is_Approved"].ToString().ToUpper() == "Y")
                                                {
                                                    imgSiteHseYes.Visible = true;
                                                    imgSiteHseNo.Visible = false;
                                                }
                                                else if (ds.Tables[12].Rows[intRowCount]["Is_Approved"].ToString().ToUpper() == "N")
                                                {
                                                    imgSiteHseNo.Visible = true;
                                                    imgSiteHseYes.Visible = false;
                                                }
                                            }
                                        }
                                        else
                                        {
                                            lblSiteHSERO.Text = string.Empty;
                                        }
                                    }

                                    if (ds.Tables[12].Rows[intRowCount]["Function_Name"].ToString() == "Site Contact")
                                    {
                                        //If Not ds.Tables[12).Rows(intRowCount).Item("Approver_Name") Is System.DBNull.Value Or Not ds.Tables[12).Rows(intRowCount).Item("Approver_Name") = "" Then
                                        if ((!object.ReferenceEquals(ds.Tables[12].Rows[intRowCount]["Approver_Name"], System.DBNull.Value)))
                                        {
                                            lblSiteContactRO.Text = ds.Tables[12].Rows[intRowCount]["Approver_Name"].ToString();
                                            if ((!object.ReferenceEquals(ds.Tables[12].Rows[intRowCount]["Is_Approved"], System.DBNull.Value)))
                                            {
                                                if (ds.Tables[12].Rows[intRowCount]["Is_Approved"].ToString().ToUpper() == "Y")
                                                {
                                                    imgSiteContactYes.Visible = true;
                                                    imgSiteContactNo.Visible = false;
                                                }
                                                else if (ds.Tables[12].Rows[intRowCount]["Is_Approved"].ToString().ToUpper() == "N")
                                                {
                                                    imgSiteContactNo.Visible = true;
                                                    imgSiteContactYes.Visible = false;
                                                }
                                            }
                                        }
                                        else
                                        {
                                            lblSiteContactRO.Text = string.Empty;
                                        }
                                    }

                                    if (ds.Tables[12].Rows[intRowCount]["Function_Name"].ToString() == "Site Planning")
                                    {
                                        //If Not ds.Tables[12).Rows(intRowCount).Item("Approver_Name") Is System.DBNull.Value Or Not ds.Tables[12).Rows(intRowCount).Item("Approver_Name") = "" Then
                                        if ((!object.ReferenceEquals(ds.Tables[12].Rows[intRowCount]["Approver_Name"], System.DBNull.Value)))
                                        {
                                            lblSitePlanningRO.Text = ds.Tables[12].Rows[intRowCount]["Approver_Name"].ToString();
                                            if ((!object.ReferenceEquals(ds.Tables[12].Rows[intRowCount]["Is_Approved"], System.DBNull.Value)))
                                            {
                                                if (ds.Tables[12].Rows[intRowCount]["Is_Approved"].ToString().ToUpper() == "Y")
                                                {
                                                    imgSitePlanningYes.Visible = true;
                                                    imgSitePlanningNo.Visible = false;
                                                }
                                                else if (ds.Tables[12].Rows[intRowCount]["Is_Approved"].ToString().ToUpper() == "N")
                                                {
                                                    imgSitePlanningNo.Visible = true;
                                                    imgSitePlanningYes.Visible = false;
                                                }
                                            }
                                        }
                                        else
                                        {
                                            lblSitePlanningRO.Text = string.Empty;
                                        }
                                    }

                                    if (ds.Tables[12].Rows[intRowCount]["Function_Name"].ToString() == "QA")
                                    {
                                        //If Not ds.Tables[12).Rows(intRowCount).Item("Approver_Name") Is System.DBNull.Value Or Not ds.Tables[12).Rows(intRowCount).Item("Approver_Name") = "" Then
                                        if ((!object.ReferenceEquals(ds.Tables[12].Rows[intRowCount]["Approver_Name"], System.DBNull.Value)))
                                        {
                                            lblQAPreRO.Text = ds.Tables[12].Rows[intRowCount]["Approver_Name"].ToString();
                                        }
                                        else
                                        {
                                            lblQAPreRO.Text = string.Empty;
                                        }
                                    }

                                    if (ds.Tables[12].Rows[intRowCount]["Function_Name"].ToString() == "Central QA")
                                    {
                                        //If Not ds.Tables[12).Rows(intRowCount).Item("Approver_Name") Is System.DBNull.Value Or Not ds.Tables[12).Rows(intRowCount).Item("Approver_Name") = "" Then
                                        if ((!object.ReferenceEquals(ds.Tables[12].Rows[intRowCount]["Approver_Name"], System.DBNull.Value)))
                                        {
                                            lblCentralQAPreRO.Text = ds.Tables[12].Rows[intRowCount]["Approver_Name"].ToString();
                                        }
                                        else
                                        {
                                            lblCentralQAPreRO.Text = string.Empty;
                                        }
                                    }

                                    if (ds.Tables[12].Rows[intRowCount]["Function_Name"].ToString() == "Central Planning")
                                    {
                                        //If Not ds.Tables[12).Rows(intRowCount).Item("Approver_Name") Is System.DBNull.Value Or Not ds.Tables[12).Rows(intRowCount).Item("Approver_Name") = "" Then
                                        if ((!object.ReferenceEquals(ds.Tables[12].Rows[intRowCount]["Approver_Name"], System.DBNull.Value)))
                                        {
                                            lblCenPlanningRO.Text = ds.Tables[12].Rows[intRowCount]["Approver_Name"].ToString();
                                            if ((!object.ReferenceEquals(ds.Tables[12].Rows[intRowCount]["Is_Approved"], System.DBNull.Value)))
                                            {
                                                if (ds.Tables[12].Rows[intRowCount]["Is_Approved"].ToString().ToUpper() == "Y")
                                                {
                                                    imgCentralPlanningYes.Visible = true;
                                                    imgCentralPlanningNo.Visible = false;
                                                }
                                                else if (ds.Tables[12].Rows[intRowCount]["Is_Approved"].ToString().ToUpper() == "N")
                                                {
                                                    imgCentralPlanningNo.Visible = true;
                                                    imgCentralPlanningYes.Visible = false;
                                                }
                                            }
                                        }
                                        else
                                        {
                                            lblCenPlanningRO.Text = string.Empty;
                                        }
                                    }

                                    if (ds.Tables[12].Rows[intRowCount]["Function_Name"].ToString() == "SAP Cost Center Coordinator")
                                    {
                                        //If Not ds.Tables[12).Rows(intRowCount).Item("Approver_Name") Is System.DBNull.Value Or Not ds.Tables[12).Rows(intRowCount).Item("Approver_Name") = "" Then
                                        if ((!object.ReferenceEquals(ds.Tables[12].Rows[intRowCount]["Approver_Name"], System.DBNull.Value)))
                                        {
                                            lblSAPRO.Text = ds.Tables[12].Rows[intRowCount]["Approver_Name"].ToString();
                                            if ((!object.ReferenceEquals(ds.Tables[12].Rows[intRowCount]["Is_Approved"], System.DBNull.Value)))
                                            {
                                                if (ds.Tables[12].Rows[intRowCount]["Is_Approved"].ToString().ToUpper() == "Y")
                                                {
                                                    imgSapYes.Visible = true;
                                                    imgSapNo.Visible = false;
                                                }
                                                else if (ds.Tables[12].Rows[intRowCount]["Is_Approved"].ToString().ToUpper() == "N")
                                                {
                                                    imgSapNo.Visible = true;
                                                    imgSapYes.Visible = false;
                                                }
                                            }
                                        }
                                        else
                                        {
                                            lblSAPRO.Text = string.Empty;
                                        }
                                    }

                                    if (ds.Tables[12].Rows[intRowCount]["Function_Name"].ToString() == "SMART Clearance")
                                    {
                                        //If Not ds.Tables[12).Rows(intRowCount).Item("Approver_Name") Is System.DBNull.Value Or Not ds.Tables[12).Rows(intRowCount).Item("Approver_Name") = "" Then
                                        if ((!object.ReferenceEquals(ds.Tables[12].Rows[intRowCount]["Approver_Name"], System.DBNull.Value)))
                                        {
                                            lblSmartClearancePRO.Text = ds.Tables[12].Rows[intRowCount]["Approver_Name"].ToString();
                                            if ((!object.ReferenceEquals(ds.Tables[12].Rows[intRowCount]["Is_Approved"], System.DBNull.Value)))
                                            {
                                                if (ds.Tables[12].Rows[intRowCount]["Is_Approved"].ToString().ToUpper() == "Y")
                                                {
                                                    imgSmartClearanceYes.Visible = true;
                                                    imgSmartClearanceNo.Visible = false;
                                                }
                                                else if (ds.Tables[12].Rows[intRowCount]["Is_Approved"].ToString().ToUpper() == "N")
                                                {
                                                    imgSmartClearanceNo.Visible = true;
                                                    imgSmartClearanceYes.Visible = false;
                                                }
                                            }
                                        }
                                        else
                                        {
                                            lblSmartClearancePRO.Text = string.Empty;
                                        }
                                    }


                                    if (ds.Tables[12].Rows[intRowCount]["Function_Name"].ToString() == "Timing Gate Exception")
                                    {
                                        //If Not ds.Tables[12).Rows(intRowCount).Item("Approver_Name") Is System.DBNull.Value Or Not ds.Tables[12).Rows(intRowCount).Item("Approver_Name") = "" Then
                                        if ((!object.ReferenceEquals(ds.Tables[12].Rows[intRowCount]["Approver_Name"], System.DBNull.Value)))
                                        {
                                            lblTimingGateRO.Text = ds.Tables[12].Rows[intRowCount]["Approver_Name"].ToString();
                                            if ((!object.ReferenceEquals(ds.Tables[12].Rows[intRowCount]["Is_Approved"], System.DBNull.Value)))
                                            {
                                                if (ds.Tables[12].Rows[intRowCount]["Is_Approved"].ToString().ToUpper() == "Y")
                                                {
                                                    imgTimingGateYes.Visible = true;
                                                    imgTimingGateNo.Visible = false;
                                                }
                                                else if (ds.Tables[12].Rows[intRowCount]["Is_Approved"].ToString().ToUpper() == "N")
                                                {
                                                    imgTimingGateNo.Visible = true;
                                                    imgTimingGateYes.Visible = false;
                                                }
                                            }
                                        }
                                        else
                                        {
                                            lblTimingGateRO.Text = string.Empty;
                                        }
                                    }

                                    if (ds.Tables[12].Rows[intRowCount]["Function_Name"].ToString() == "Standards Office")
                                    {
                                        //If Not ds.Tables[12).Rows(intRowCount).Item("Approver_Name") Is System.DBNull.Value Or Not ds.Tables[12).Rows(intRowCount).Item("Approver_Name") = "" Then
                                        if ((!object.ReferenceEquals(ds.Tables[12].Rows[intRowCount]["Approver_Name"], System.DBNull.Value)))
                                        {
                                            lblStansOffRO.Text = ds.Tables[12].Rows[intRowCount]["Approver_Name"].ToString();
                                            if ((!object.ReferenceEquals(ds.Tables[12].Rows[intRowCount]["Is_Approved"], System.DBNull.Value)))
                                            {
                                                if (ds.Tables[12].Rows[intRowCount]["Is_Approved"].ToString().ToUpper() == "Y")
                                                {
                                                    imgStandardOfficeYes.Visible = true;
                                                    imgStandardOfficeNo.Visible = false;
                                                }
                                                else if (ds.Tables[12].Rows[intRowCount]["Is_Approved"].ToString().ToUpper() == "N")
                                                {
                                                    imgStandardOfficeNo.Visible = true;
                                                    imgStandardOfficeYes.Visible = false;
                                                }
                                            }
                                        }
                                        else
                                        {
                                            lblStansOffRO.Text = string.Empty;
                                        }
                                    }

                                    //Added by David - MUREO PCR : 4 Additional Approvers - Date: 01/03/2012

                                    if (ds.Tables[12].Rows[intRowCount]["Function_Name"].ToString() == "Additional approver #1")
                                    {
                                        if ((!object.ReferenceEquals(ds.Tables[12].Rows[intRowCount]["Approver_Name"], System.DBNull.Value)))
                                        {
                                            lblAdditionalApprover1RO.Text = ds.Tables[12].Rows[intRowCount]["Approver_Name"].ToString();
                                            if ((!object.ReferenceEquals(ds.Tables[12].Rows[intRowCount]["Is_Approved"], System.DBNull.Value)))
                                            {
                                                if (ds.Tables[12].Rows[intRowCount]["Is_Approved"].ToString().ToUpper() == "Y")
                                                {
                                                    imgAdditionalApprover1Yes.Visible = true;
                                                    imgAdditionalApprover1No.Visible = false;
                                                }
                                                else if (ds.Tables[12].Rows[intRowCount]["Is_Approved"].ToString().ToUpper() == "N")
                                                {
                                                    imgAdditionalApprover1No.Visible = true;
                                                    imgAdditionalApprover1Yes.Visible = false;
                                                }
                                            }
                                        }
                                        else
                                        {
                                            lblAdditionalApprover1RO.Text = string.Empty;
                                        }
                                    }

                                    if (ds.Tables[12].Rows[intRowCount]["Function_Name"].ToString() == "Additional approver #2")
                                    {
                                        if ((!object.ReferenceEquals(ds.Tables[12].Rows[intRowCount]["Approver_Name"], System.DBNull.Value)))
                                        {
                                            lblAdditionalApprover2RO.Text = ds.Tables[12].Rows[intRowCount]["Approver_Name"].ToString();
                                            if ((!object.ReferenceEquals(ds.Tables[12].Rows[intRowCount]["Is_Approved"], System.DBNull.Value)))
                                            {
                                                if (ds.Tables[12].Rows[intRowCount]["Is_Approved"].ToString().ToUpper() == "Y")
                                                {
                                                    imgAdditionalApprover2Yes.Visible = true;
                                                    imgAdditionalApprover2No.Visible = false;
                                                }
                                                else if (ds.Tables[12].Rows[intRowCount]["Is_Approved"].ToString().ToUpper() == "N")
                                                {
                                                    imgAdditionalApprover2No.Visible = true;
                                                    imgAdditionalApprover2Yes.Visible = false;
                                                }
                                            }
                                        }
                                        else
                                        {
                                            lblAdditionalApprover2RO.Text = string.Empty;
                                        }
                                    }

                                    if (ds.Tables[12].Rows[intRowCount]["Function_Name"].ToString() == "Additional approver #3")
                                    {
                                        if ((!object.ReferenceEquals(ds.Tables[12].Rows[intRowCount]["Approver_Name"], System.DBNull.Value)))
                                        {
                                            lblAdditionalApprover3RO.Text = ds.Tables[12].Rows[intRowCount]["Approver_Name"].ToString();
                                            if ((!object.ReferenceEquals(ds.Tables[12].Rows[intRowCount]["Is_Approved"], System.DBNull.Value)))
                                            {
                                                if (ds.Tables[12].Rows[intRowCount]["Is_Approved"].ToString().ToUpper() == "Y")
                                                {
                                                    imgAdditionalApprover3Yes.Visible = true;
                                                    imgAdditionalApprover3No.Visible = false;
                                                }
                                                else if (ds.Tables[12].Rows[intRowCount]["Is_Approved"].ToString().ToUpper() == "N")
                                                {
                                                    imgAdditionalApprover3No.Visible = true;
                                                    imgAdditionalApprover3Yes.Visible = false;
                                                }
                                            }
                                        }
                                        else
                                        {
                                            lblAdditionalApprover3RO.Text = string.Empty;
                                        }
                                    }

                                    if (ds.Tables[12].Rows[intRowCount]["Function_Name"].ToString() == "Additional approver #4")
                                    {
                                        if ((!object.ReferenceEquals(ds.Tables[12].Rows[intRowCount]["Approver_Name"], System.DBNull.Value)))
                                        {
                                            lblAdditionalApprover4RO.Text = ds.Tables[12].Rows[intRowCount]["Approver_Name"].ToString();
                                            if ((!object.ReferenceEquals(ds.Tables[12].Rows[intRowCount]["Is_Approved"], System.DBNull.Value)))
                                            {
                                                if (ds.Tables[12].Rows[intRowCount]["Is_Approved"].ToString().ToUpper() == "Y")
                                                {
                                                    imgAdditionalApprover4Yes.Visible = true;
                                                    imgAdditionalApprover4No.Visible = false;
                                                }
                                                else if (ds.Tables[12].Rows[intRowCount]["Is_Approved"].ToString().ToUpper() == "N")
                                                {
                                                    imgAdditionalApprover4No.Visible = true;
                                                    imgAdditionalApprover4Yes.Visible = false;
                                                }
                                            }
                                        }
                                        else
                                        {
                                            lblAdditionalApprover4RO.Text = string.Empty;
                                        }
                                    }
                                }
                            }
                            if (!(ds.Tables[16].Rows.Count == 0))
                            {
                                dgrdRevHistory.DataSource = ds.Tables[16];
                                dgrdRevHistory.DataBind();
                            }
                            if (!(ds.Tables[17].Rows.Count == 0))
                            {
                                dgrdAppHistory.DataSource = ds.Tables[17];
                                dgrdAppHistory.DataBind();
                            }
                        }
                        else
                        {
                            lblBORO.Text = string.Empty;
                            lblGBUHSERO.Text = string.Empty;
                            lblSiteHSERO.Text = string.Empty;
                            lblSiteContactRO.Text = string.Empty;
                            lblSitePlanningRO.Text = string.Empty;
                            lblCenPlanningRO.Text = string.Empty;
                            lblSAPRO.Text = string.Empty;
                            lblTimingGateRO.Text = string.Empty;
                            lblStansOffRO.Text = string.Empty;
                        }
                    }
                }
            }
        }

        public void finalApprovalCheck()
        {
            string strFUNAPPName = null;
            bool HSEApproval = false;
            // for HS&E FYI/Approval
            string strBackUpAppName = null;
            string strFinalAppStatus = null;
            DataSet dsMandatory = null;
            DataSet dsPreliminary = null;
            string strCoOrginator = "";
            string strOrginator = null;
            SqlParameter[] paramOut = null;



            // To get CoOriginator,Originator info to check whether the logged in user in Budget Owner or Originator or Co Originator 6/12/07
            if (objEOBA.GETEOMandatory(Convert.ToInt32(ViewState["EOID"]), ref dsMandatory))
            {
                if ((dsMandatory != null))
                {
                    if (!(dsMandatory.Tables.Count == 0))
                    {
                        if (!(dsMandatory.Tables[0].Rows.Count == 0))
                        {
                            if ((!object.ReferenceEquals(dsMandatory.Tables[0].Rows[0]["CoOriginator"], System.DBNull.Value)))
                            {
                                strCoOrginator = dsMandatory.Tables[0].Rows[0]["CoOriginator"].ToString();
                            }
                            if ((!object.ReferenceEquals(dsMandatory.Tables[0].Rows[0]["Originator"], System.DBNull.Value)))
                            {
                                strOrginator = dsMandatory.Tables[0].Rows[0]["Originator"].ToString();
                            }
                        }
                    }
                }
            }
            //strFinalAppStatus = "N"
            DataSet ds = null;

            if (objEOBA.GET_EO_Final(Convert.ToInt32(ViewState["EOID"]), ref ds))
            {
                if (!(ds.Tables[13].Rows.Count == 0))
                {
                    int intRowCount = 0;
                    for (intRowCount = 0; intRowCount <= ds.Tables[13].Rows.Count - 1; intRowCount++)
                    {
                        if (ds.Tables[13].Rows[intRowCount]["Function_Name"].ToString() == "Budget Center")
                        {
                            if ((!object.ReferenceEquals(ds.Tables[13].Rows[intRowCount]["Approver_Name"], System.DBNull.Value)))
                            {
                                strFUNAPPName = ds.Tables[13].Rows[intRowCount]["Approver_Name"].ToString();
                            }
                            else
                            {
                                strFUNAPPName = string.Empty;
                            }
                            if ((!object.ReferenceEquals(ds.Tables[13].Rows[intRowCount]["Backup_Approver_Name"], System.DBNull.Value)))
                            {
                                strBackUpAppName = ds.Tables[13].Rows[intRowCount]["Backup_Approver_Name"].ToString();
                            }
                            else
                            {
                                strBackUpAppName = string.Empty;
                            }

                            //Checking for current EO approved by Budget Owner or not.If not Approve,Decline,Commnets,Backup links will be visible.
                            //strFinalAppStatus = objclsEO.GET_EO_Is_Approved(Convert.ToInt32(ViewState["EOID"]), ds.Tables[13].Rows[intRowCount]["Function_Name"], , "Final");
                            if (objEOBA.GET_EO_Is_Approved(Convert.ToInt32(ViewState["EOID"]), ds.Tables[13].Rows[intRowCount]["Function_Name"].ToString(), strFUNAPPName, "Final", ref paramOut))
                                strFinalAppStatus = paramOut[0].Value.ToString();

                            if ((strCoOrginator.ToUpper() == objSecurity.UserName.Trim().ToUpper()) || (strOrginator.ToUpper() == objSecurity.UserName.Trim().ToUpper()) || (ViewState["UserRole"].ToString().ToUpper() == "MUREO_Admin".ToUpper()))
                            {
                                if (strFinalAppStatus.ToUpper() != "Y")
                                {
                                    lnkFinalBOBackUp.Visible = true;
                                }
                                else
                                {
                                    lnkFinalBOBackUp.Visible = false;
                                    lnkFinBOComments.Visible = false;
                                    lnkFinBudgetApproved.Visible = false;
                                    lnkFinBudgetDeclined.Visible = false;
                                }
                            }
                            if (strBackUpAppName.Trim().ToUpper() == objSecurity.UserName.Trim().ToUpper() || strFUNAPPName.Trim().ToUpper() == objSecurity.UserName.Trim().ToUpper())
                            {
                                if (strFinalAppStatus.ToUpper() != "Y")
                                {
                                    lnkFinBudgetApproved.Visible = true;
                                    lnkFinBudgetDeclined.Visible = true;
                                    lnkFinBOComments.Visible = true;
                                    lnkFinalBOBackUp.Visible = true;
                                }
                                else
                                {
                                    //intRowCount = 0
                                    lnkFinalBOBackUp.Visible = false;
                                    lnkFinBOComments.Visible = false;
                                    lnkFinBudgetApproved.Visible = false;
                                    lnkFinBudgetDeclined.Visible = false;
                                }
                            }
                        }
                        //If current EO approved by Budget Owner then Approve,Decline,Commnets,Backup links will be visible for remaining Approvers.
                        bool tempBool = false;
                        if (ViewState["Two_Tab_Routing"].ToString() == "Y")
                        {
                            if (strFinalAppStatus.ToUpper() == "Y")
                            {
                                tempBool = true;
                            }
                            else
                            {
                                tempBool = false;
                                if ((strCoOrginator.ToUpper() == objSecurity.UserName.Trim().ToUpper()) || (strOrginator.ToUpper() == objSecurity.UserName.Trim().ToUpper()) || (ViewState["UserRole"].ToString().ToUpper() == "MUREO_Admin".ToUpper()))
                                {
                                    if (objEOBA.GET_EO_Preliminary(Convert.ToInt32(ViewState["EOID"]), ref dsPreliminary))
                                    {
                                        if ((dsPreliminary != null))
                                        {
                                            if (!(dsPreliminary.Tables.Count == 0))
                                            {
                                                if (!(dsPreliminary.Tables[4].Rows.Count == 0))
                                                {
                                                    if (dsPreliminary.Tables[4].Rows[0][0].ToString() == "Y" || dsPreliminary.Tables[4].Rows[0][1].ToString() == "Y" || dsPreliminary.Tables[4].Rows[0][2].ToString() == "Y" || dsPreliminary.Tables[4].Rows[0][3].ToString() == "Y")
                                                    {
                                                        //-----
                                                        HSEApproval = true;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        else
                        {
                            tempBool = true;
                        }
                        //If UCase(strFinalAppStatus) = "Y"  Then
                        if (tempBool == true)
                        {
                            if (ds.Tables[13].Rows[intRowCount]["Function_Name"].ToString() == "PS Initiative Manager")
                            {
                                if ((!object.ReferenceEquals(ds.Tables[13].Rows[intRowCount]["Approver_Name"], System.DBNull.Value)))
                                {
                                    strFUNAPPName = ds.Tables[13].Rows[intRowCount]["Approver_Name"].ToString();
                                }
                                else
                                {
                                    strFUNAPPName = string.Empty;
                                }
                                if ((!object.ReferenceEquals(ds.Tables[13].Rows[intRowCount]["Backup_Approver_Name"], System.DBNull.Value)))
                                {
                                    strBackUpAppName = ds.Tables[13].Rows[intRowCount]["Backup_Approver_Name"].ToString();
                                }
                                else
                                {
                                    strBackUpAppName = string.Empty;
                                }
                                string strAppStrStatus = null;

                                if (objEOBA.GET_EO_Is_Approved(Convert.ToInt32(ViewState["EOID"]), ds.Tables[13].Rows[intRowCount]["Function_Name"].ToString(), objSecurity.UserName.ToString(), "Final", ref paramOut))
                                    strAppStrStatus = paramOut[0].Value.ToString();

                                if ((strCoOrginator.ToUpper() == objSecurity.UserName.Trim().ToUpper()) || (strOrginator.ToUpper() == objSecurity.UserName.Trim().ToUpper()) | (ViewState["UserRole"].ToString().ToUpper() == "MUREO_Admin".ToUpper()))
                                {
                                    if (strAppStrStatus.ToUpper() != "Y")
                                    {
                                        lnkFinalPSIntiaBackUp.Visible = true;
                                    }
                                    else
                                    {
                                        lnkFinalPSIntiaBackUp.Visible = false;
                                        lnkFinBOPSIniComments.Visible = false;
                                        lnkPSIniApproved.Visible = false;
                                        lnkPSIniDeclined.Visible = false;
                                    }
                                }
                                if (strBackUpAppName.Trim().ToUpper() == objSecurity.UserName.Trim().ToUpper() || strFUNAPPName.Trim().ToUpper() == objSecurity.UserName.Trim().ToUpper())
                                {
                                    if (!(strAppStrStatus == "Y"))
                                    {
                                        lnkPSIniApproved.Visible = true;
                                        lnkPSIniDeclined.Visible = true;
                                        lnkFinBOPSIniComments.Visible = true;
                                        lnkFinalPSIntiaBackUp.Visible = true;
                                    }
                                    else
                                    {
                                        lnkFinalPSIntiaBackUp.Visible = false;
                                        lnkFinBOPSIniComments.Visible = false;
                                        lnkPSIniApproved.Visible = false;
                                        lnkPSIniDeclined.Visible = false;
                                    }
                                }
                            }
                            if (ds.Tables[13].Rows[intRowCount]["Function_Name"].ToString() == "Products Research")
                            {
                                if ((!object.ReferenceEquals(ds.Tables[13].Rows[intRowCount]["Approver_Name"], System.DBNull.Value)))
                                {
                                    strFUNAPPName = ds.Tables[13].Rows[intRowCount]["Approver_Name"].ToString();
                                }
                                else
                                {
                                    strFUNAPPName = string.Empty;
                                }
                                if ((!object.ReferenceEquals(ds.Tables[13].Rows[intRowCount]["Backup_Approver_Name"], System.DBNull.Value)))
                                {
                                    strBackUpAppName = ds.Tables[13].Rows[intRowCount]["Backup_Approver_Name"].ToString();
                                }
                                else
                                {
                                    strBackUpAppName = string.Empty;
                                }
                                string strAppStrStatus = null;
                                // strAppStrStatus = objclsEO.GET_EO_Is_Approved(Convert.ToInt32(ViewState["EOID"]), ds.Tables[13].Rows[intRowCount]["Function_Name"], objSecurity.UserName, "Final");

                                if (objEOBA.GET_EO_Is_Approved(Convert.ToInt32(ViewState["EOID"]), ds.Tables[13].Rows[intRowCount]["Function_Name"].ToString(), objSecurity.UserName, "Final", ref paramOut))
                                    strAppStrStatus = paramOut[0].Value.ToString();

                                ViewState["UserRole"] = objSecurity.UserRole().ToString().Trim();
                                if (strCoOrginator == null)
                                    strCoOrginator = "";
                                if ((strCoOrginator.ToUpper() == objSecurity.UserName.Trim().ToUpper()) || (strOrginator.ToUpper() == objSecurity.UserName.Trim().ToUpper()) || (ViewState["UserRole"].ToString().ToUpper() == "MUREO_Admin".ToUpper()))
                                {
                                    if (strAppStrStatus.ToUpper() != "Y")
                                    {
                                        lnkFinalProdReasBackUp.Visible = true;
                                    }
                                    else
                                    {
                                        lnkFinalProdReasBackUp.Visible = false;
                                        lnkFinProdReseComments.Visible = false;
                                        lnkProdResearchApproved.Visible = false;
                                        lnkProdResearchDeclined.Visible = false;
                                    }
                                }
                                if (strBackUpAppName.Trim().ToUpper() == objSecurity.UserName.Trim().ToUpper() || strFUNAPPName.Trim().ToUpper() == objSecurity.UserName.Trim().ToUpper())
                                {
                                    if (!(strAppStrStatus == "Y"))
                                    {
                                        lnkProdResearchApproved.Visible = true;
                                        lnkProdResearchDeclined.Visible = true;
                                        lnkFinProdReseComments.Visible = true;
                                        lnkFinalProdReasBackUp.Visible = true;
                                    }
                                    else
                                    {
                                        lnkFinalProdReasBackUp.Visible = false;
                                        lnkFinProdReseComments.Visible = false;
                                        lnkProdResearchApproved.Visible = false;
                                        lnkProdResearchDeclined.Visible = false;
                                    }
                                }
                            }
                            if (ds.Tables[13].Rows[intRowCount]["Function_Name"].ToString() == "Site HS&E Resource")
                            {
                                if ((!object.ReferenceEquals(ds.Tables[13].Rows[intRowCount]["Approver_Name"], System.DBNull.Value)))
                                {
                                    if (ds.Tables[13].Rows[intRowCount]["Approver_Name"].ToString() == "Approval Not Needed")
                                    {
                                    }
                                    else
                                    {
                                        if (objEOBA.GET_EO_Preliminary(Convert.ToInt32(ViewState["EOID"]), ref dsPreliminary))
                                        {
                                            if ((dsPreliminary != null))
                                            {
                                                if (!(dsPreliminary.Tables.Count == 0))
                                                {
                                                    if (!(dsPreliminary.Tables[4].Rows.Count == 0))
                                                    {

                                                        if ((dsPreliminary.Tables[4].Rows[0][0] == System.DBNull.Value) || (dsPreliminary.Tables[4].Rows[0][1] == System.DBNull.Value) || (dsPreliminary.Tables[4].Rows[0][2] == System.DBNull.Value) || (dsPreliminary.Tables[4].Rows[0][3] == System.DBNull.Value))
                                                        {
                                                        }
                                                        else
                                                        {
                                                            if (dsPreliminary.Tables[4].Rows[0][0].ToString() == "Y" || dsPreliminary.Tables[4].Rows[0][1].ToString() == "Y" || dsPreliminary.Tables[4].Rows[0][2].ToString() == "Y" || dsPreliminary.Tables[4].Rows[0][3].ToString() == "Y")
                                                            {
                                                                //-----
                                                                HSEApproval = true;
                                                                if ((!object.ReferenceEquals(ds.Tables[13].Rows[intRowCount]["Approver_Name"], System.DBNull.Value)))
                                                                {
                                                                    strFUNAPPName = ds.Tables[13].Rows[intRowCount]["Approver_Name"].ToString();
                                                                }
                                                                else
                                                                {
                                                                    strFUNAPPName = string.Empty;
                                                                }
                                                                if ((!object.ReferenceEquals(ds.Tables[13].Rows[intRowCount]["Backup_Approver_Name"], System.DBNull.Value)))
                                                                {
                                                                    strBackUpAppName = ds.Tables[13].Rows[intRowCount]["Backup_Approver_Name"].ToString();
                                                                }
                                                                else
                                                                {
                                                                    strBackUpAppName = string.Empty;
                                                                }

                                                                string strAppStrStatus = string.Empty;

                                                                if (objEOBA.GET_EO_Is_Approved(Convert.ToInt32(ViewState["EOID"]), ds.Tables[13].Rows[intRowCount]["Function_Name"].ToString(), objSecurity.UserName, "Final", ref paramOut))
                                                                    strAppStrStatus = paramOut[0].Value.ToString();

                                                                if ((strCoOrginator.ToUpper() == objSecurity.UserName.Trim().ToUpper()) | (strOrginator.ToUpper() == objSecurity.UserName.Trim().ToUpper()) | (ViewState["UserRole"].ToString().ToUpper() == "MUREO_Admin".ToUpper()))
                                                                {
                                                                    if (strAppStrStatus.ToUpper() != "Y")
                                                                    {
                                                                        lnkFinalSiteHSEBackUp.Visible = true;
                                                                    }
                                                                    else
                                                                    {
                                                                        lnkFinSiteHSEDeclined.Visible = false;
                                                                        lnkFinSiteHSEApproved.Visible = false;
                                                                        lnkFinSiteHSEComments.Visible = false;
                                                                        lnkFinalSiteHSEBackUp.Visible = false;
                                                                    }
                                                                }

                                                                if (strBackUpAppName.Trim().ToUpper() == objSecurity.UserName.Trim().ToUpper() | strFUNAPPName.Trim().ToUpper() == objSecurity.UserName.Trim().ToUpper())
                                                                {
                                                                    if (!(strAppStrStatus == "Y"))
                                                                    {
                                                                        lnkFinSiteHSEApproved.Visible = true;
                                                                        lnkFinSiteHSEDeclined.Visible = true;
                                                                        lnkFinSiteHSEComments.Visible = true;
                                                                        lnkFinalSiteHSEBackUp.Visible = true;
                                                                    }
                                                                    else
                                                                    {
                                                                        lnkFinSiteHSEDeclined.Visible = false;
                                                                        lnkFinSiteHSEApproved.Visible = false;
                                                                        lnkFinSiteHSEComments.Visible = false;
                                                                        lnkFinalSiteHSEBackUp.Visible = false;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }



                            if (ds.Tables[13].Rows[intRowCount]["Function_Name"].ToString() == "SAP Cost Center Coordinator")
                            {
                                if (ds.Tables[13].Rows[intRowCount]["Approver_Name"] != System.DBNull.Value)
                                {
                                    strFUNAPPName = ds.Tables[13].Rows[intRowCount]["Approver_Name"].ToString();
                                }
                                else
                                {
                                    strFUNAPPName = string.Empty;
                                }
                                if ((!object.ReferenceEquals(ds.Tables[13].Rows[intRowCount]["Backup_Approver_Name"], System.DBNull.Value)))
                                {
                                    strBackUpAppName = ds.Tables[13].Rows[intRowCount]["Backup_Approver_Name"].ToString();
                                }
                                else
                                {
                                    strBackUpAppName = string.Empty;
                                }

                                string strAppStrStatus = null;
                                //strAppStrStatus = objclsEO.GET_EO_Is_Approved(Convert.ToInt32(ViewState["EOID"]), ds.Tables[13].Rows[intRowCount]["Function_Name"], objSecurity.UserName, "Final");

                                if (objEOBA.GET_EO_Is_Approved(Convert.ToInt32(ViewState["EOID"]), ds.Tables[13].Rows[intRowCount]["Function_Name"].ToString(), objSecurity.UserName.ToString(), "Final", ref paramOut))
                                    strAppStrStatus = paramOut[0].Value.ToString();

                                if ((strCoOrginator.ToUpper() == objSecurity.UserName.Trim().ToUpper()) | (strOrginator.ToUpper() == objSecurity.UserName.Trim().ToUpper()) | (ViewState["UserRole"].ToString().ToUpper() == "MUREO_Admin".ToUpper()))
                                {
                                    if (strAppStrStatus.ToUpper() != "Y")
                                    {
                                        lnkFinalSAPBackUp.Visible = true;
                                    }
                                    else
                                    {
                                        lnkFinalSAPBackUp.Visible = false;
                                        lnkFinSAPApproved.Visible = false;
                                        lnkFinSAPDeclined.Visible = false;
                                        lnkFinSAPComments.Visible = false;
                                    }
                                }
                                if (strBackUpAppName.Trim().ToUpper() == objSecurity.UserName.Trim().ToUpper() | strFUNAPPName.Trim().ToUpper() == objSecurity.UserName.Trim().ToUpper())
                                {
                                    if (!(strAppStrStatus == "Y"))
                                    {
                                        lnkFinSAPApproved.Visible = true;
                                        lnkFinSAPDeclined.Visible = true;
                                        lnkFinSAPComments.Visible = true;
                                        lnkFinalSAPBackUp.Visible = true;
                                    }
                                    else
                                    {
                                        lnkFinalSAPBackUp.Visible = false;
                                        lnkFinSAPApproved.Visible = false;
                                        lnkFinSAPDeclined.Visible = false;
                                        lnkFinSAPComments.Visible = false;
                                    }
                                }
                            }

                            //Added by David
                            //Date: 07/16/2010

                            if (ds.Tables[13].Rows[intRowCount]["Function_Name"].ToString() == "SMART Clearance")
                            {
                                if ((!object.ReferenceEquals(ds.Tables[13].Rows[intRowCount]["Approver_Name"], System.DBNull.Value)))
                                {
                                    strFUNAPPName = ds.Tables[13].Rows[intRowCount]["Approver_Name"].ToString();
                                }
                                else
                                {
                                    strFUNAPPName = string.Empty;
                                }
                                if ((!object.ReferenceEquals(ds.Tables[13].Rows[intRowCount]["Backup_Approver_Name"], System.DBNull.Value)))
                                {
                                    strBackUpAppName = ds.Tables[13].Rows[intRowCount]["Backup_Approver_Name"].ToString();
                                }
                                else
                                {
                                    strBackUpAppName = string.Empty;
                                }
                                string strAppStrStatus = null;
                                //strAppStrStatus = objclsEO.GET_EO_Is_Approved(Convert.ToInt32(ViewState["EOID"]), ds.Tables[13].Rows[intRowCount]["Function_Name"], objSecurity.UserName, "Final");

                                if (objEOBA.GET_EO_Is_Approved(Convert.ToInt32(ViewState["EOID"]), ds.Tables[13].Rows[intRowCount]["Function_Name"].ToString(), objSecurity.UserName, "Final", ref paramOut))
                                    strAppStrStatus = paramOut[0].Value.ToString();

                                if ((strCoOrginator.ToUpper() == objSecurity.UserName.Trim().ToUpper()) | (strOrginator.ToUpper() == objSecurity.UserName.Trim().ToUpper()) | (ViewState["UserRole"].ToString().ToUpper() == "MUREO_Admin".ToUpper()))
                                {
                                    if (strAppStrStatus.ToUpper() != "Y")
                                    {
                                        lnkFinalSMARTClearanceBackUp.Visible = true;
                                    }
                                    else
                                    {
                                        lnkFinalSMARTClearanceBackUp.Visible = false;
                                        lnkFinSMARTClearanceApproved.Visible = false;
                                        lnkFinSMARTClearanceDeclined.Visible = false;
                                        lnkFinSMARTClearanceComments.Visible = false;
                                    }
                                }

                                if (strBackUpAppName.Trim().ToUpper() == objSecurity.UserName.Trim().ToUpper() | strFUNAPPName.Trim().ToUpper() == objSecurity.UserName.Trim().ToUpper())
                                {
                                    if (!(strAppStrStatus == "Y"))
                                    {
                                        lnkFinSMARTClearanceApproved.Visible = true;
                                        lnkFinSMARTClearanceDeclined.Visible = true;
                                        lnkFinSMARTClearanceComments.Visible = true;
                                        lnkFinalSMARTClearanceBackUp.Visible = true;
                                    }
                                    else
                                    {
                                        lnkFinalSMARTClearanceBackUp.Visible = false;
                                        lnkFinSMARTClearanceApproved.Visible = false;
                                        lnkFinSMARTClearanceDeclined.Visible = false;
                                        lnkFinSMARTClearanceComments.Visible = false;
                                    }
                                }
                            }


                            if (ds.Tables[13].Rows[intRowCount]["Function_Name"].ToString() == "Site Planning")
                            {
                                if ((!object.ReferenceEquals(ds.Tables[13].Rows[intRowCount]["Approver_Name"], System.DBNull.Value)))
                                {
                                    strFUNAPPName = ds.Tables[13].Rows[intRowCount]["Approver_Name"].ToString();
                                }
                                else
                                {
                                    strFUNAPPName = string.Empty;
                                }
                                if ((!object.ReferenceEquals(ds.Tables[13].Rows[intRowCount]["Backup_Approver_Name"], System.DBNull.Value)))
                                {
                                    strBackUpAppName = ds.Tables[13].Rows[intRowCount]["Backup_Approver_Name"].ToString();
                                }
                                else
                                {
                                    strBackUpAppName = string.Empty;
                                }
                                string strAppStrStatus = null;

                                if (objEOBA.GET_EO_Is_Approved(Convert.ToInt32(ViewState["EOID"]), ds.Tables[13].Rows[intRowCount]["Function_Name"].ToString(), objSecurity.UserName, "Final", ref paramOut))
                                    strAppStrStatus = paramOut[0].Value.ToString();

                                if ((strCoOrginator.ToUpper() == objSecurity.UserName.Trim().ToUpper()) | (strOrginator.ToUpper() == objSecurity.UserName.Trim().ToUpper()) | (ViewState["UserRole"].ToString().ToUpper() == "MUREO_Admin".ToUpper()))
                                {
                                    if (strAppStrStatus.ToUpper() != "Y")
                                    {
                                        lnkFinalSitePlnaBackUp.Visible = true;
                                    }
                                    else
                                    {
                                        lnkFinalSitePlnaBackUp.Visible = false;
                                        lnkFinSitePlanningDeclined.Visible = false;
                                        lnkFinSitePlanningApproved.Visible = false;
                                        lnkFinSitePlanComments.Visible = false;
                                    }
                                }

                                if (strBackUpAppName.Trim().ToUpper() == objSecurity.UserName.Trim().ToUpper() | strFUNAPPName.Trim().ToUpper() == objSecurity.UserName.Trim().ToUpper())
                                {
                                    if (!(strAppStrStatus == "Y"))
                                    {
                                        lnkFinSitePlanningApproved.Visible = true;
                                        lnkFinSitePlanningDeclined.Visible = true;
                                        lnkFinSitePlanComments.Visible = true;
                                        lnkFinalSitePlnaBackUp.Visible = true;
                                    }
                                    else
                                    {
                                        lnkFinalSitePlnaBackUp.Visible = false;
                                        lnkFinSitePlanningDeclined.Visible = false;
                                        lnkFinSitePlanningApproved.Visible = false;
                                        lnkFinSitePlanComments.Visible = false;
                                    }
                                }
                            }

                            if (ds.Tables[13].Rows[intRowCount]["Function_Name"].ToString() == "Site Contact")
                            {
                                if ((!object.ReferenceEquals(ds.Tables[13].Rows[intRowCount]["Approver_Name"], System.DBNull.Value)))
                                {
                                    strFUNAPPName = ds.Tables[13].Rows[intRowCount]["Approver_Name"].ToString();
                                }
                                else
                                {
                                    strFUNAPPName = string.Empty;
                                }
                                if ((!object.ReferenceEquals(ds.Tables[13].Rows[intRowCount]["Backup_Approver_Name"], System.DBNull.Value)))
                                {
                                    strBackUpAppName = ds.Tables[13].Rows[intRowCount]["Backup_Approver_Name"].ToString();
                                }
                                else
                                {
                                    strBackUpAppName = string.Empty;
                                }
                                string strAppStrStatus = null;
                                //strAppStrStatus = objclsEO.GET_EO_Is_Approved(Convert.ToInt32(ViewState["EOID"]), ds.Tables[13].Rows[intRowCount]["Function_Name"], objSecurity.UserName, "Final");
                                if (objEOBA.GET_EO_Is_Approved(Convert.ToInt32(ViewState["EOID"]), ds.Tables[13].Rows[intRowCount]["Function_Name"].ToString(), objSecurity.UserName, "Final", ref paramOut))
                                    strAppStrStatus = paramOut[0].Value.ToString();
                                if ((strCoOrginator.ToUpper() == objSecurity.UserName.Trim().ToUpper()) | (strOrginator.ToUpper() == objSecurity.UserName.Trim().ToUpper()) | (ViewState["UserRole"].ToString().ToUpper() == "MUREO_Admin".ToUpper()))
                                {
                                    if (strAppStrStatus.ToUpper() != "Y")
                                    {
                                        lnkFinalSiteBackUp.Visible = true;
                                    }
                                    else
                                    {
                                        lnkFinalSiteBackUp.Visible = false;
                                        lnkFinSiteContactDeclined.Visible = false;
                                        lnkFinSiteContactApproved.Visible = false;
                                        lnkFinSiteConComments.Visible = false;
                                    }
                                }

                                if (strBackUpAppName.Trim().ToUpper() == objSecurity.UserName.Trim().ToUpper() | strFUNAPPName.Trim().ToUpper() == objSecurity.UserName.Trim().ToUpper())
                                {
                                    if (!(strAppStrStatus == "Y"))
                                    {
                                        lnkFinSiteContactApproved.Visible = true;
                                        lnkFinSiteContactDeclined.Visible = true;
                                        lnkFinSiteConComments.Visible = true;
                                        lnkFinalSiteBackUp.Visible = true;
                                    }
                                    else
                                    {
                                        lnkFinalSiteBackUp.Visible = false;
                                        lnkFinSiteContactDeclined.Visible = false;
                                        lnkFinSiteContactApproved.Visible = false;
                                        lnkFinSiteConComments.Visible = false;
                                    }
                                }
                            }
                            if (ds.Tables[13].Rows[intRowCount]["Function_Name"].ToString() == "Site Finance")
                            {
                                if ((!object.ReferenceEquals(ds.Tables[13].Rows[intRowCount]["Approver_Name"], System.DBNull.Value)))
                                {
                                    strFUNAPPName = ds.Tables[13].Rows[intRowCount]["Approver_Name"].ToString();
                                }
                                else
                                {
                                    strFUNAPPName = string.Empty;
                                }
                                if ((!object.ReferenceEquals(ds.Tables[13].Rows[intRowCount]["Backup_Approver_Name"], System.DBNull.Value)))
                                {
                                    strBackUpAppName = ds.Tables[13].Rows[intRowCount]["Backup_Approver_Name"].ToString();
                                }
                                else
                                {
                                    strBackUpAppName = string.Empty;
                                }

                                string strAppStrStatus = null;
                                //strAppStrStatus = objclsEO.GET_EO_Is_Approved(Convert.ToInt32(ViewState["EOID"]), ds.Tables[13].Rows[intRowCount]["Function_Name"], objSecurity.UserName, "Final");
                                if (objEOBA.GET_EO_Is_Approved(Convert.ToInt32(ViewState["EOID"]), ds.Tables[13].Rows[intRowCount]["Function_Name"].ToString(), objSecurity.UserName, "Final", ref paramOut))
                                    strAppStrStatus = paramOut[0].Value.ToString();
                                if ((strCoOrginator.ToUpper() == objSecurity.UserName.Trim().ToUpper()) | (strOrginator.ToUpper() == objSecurity.UserName.Trim().ToUpper()) | (ViewState["UserRole"].ToString().ToUpper() == "MUREO_Admin".ToUpper()))
                                {
                                    if (strAppStrStatus.ToUpper() != "Y")
                                    {
                                        lnkFinalSiteSiteFanBackUp.Visible = true;
                                    }
                                    else
                                    {
                                        lnkFinalSiteSiteFanBackUp.Visible = false;
                                        lnkFinSiteFinaComments.Visible = false;
                                        lnkFinSiteFinanceApproved.Visible = false;
                                        lnkFinSiteFinananceDeclined.Visible = false;
                                    }
                                }

                                if (strBackUpAppName.Trim().ToUpper() == objSecurity.UserName.Trim().ToUpper() | strFUNAPPName.Trim().ToUpper() == objSecurity.UserName.Trim().ToUpper())
                                {
                                    if (!(strAppStrStatus == "Y"))
                                    {
                                        lnkFinSiteFinanceApproved.Visible = true;
                                        lnkFinSiteFinananceDeclined.Visible = true;
                                        lnkFinSiteFinaComments.Visible = true;
                                        lnkFinalSiteSiteFanBackUp.Visible = true;
                                    }
                                    else
                                    {
                                        lnkFinalSiteSiteFanBackUp.Visible = false;
                                        lnkFinSiteFinaComments.Visible = false;
                                        lnkFinSiteFinanceApproved.Visible = false;
                                        lnkFinSiteFinananceDeclined.Visible = false;
                                    }
                                }
                            }

                            if (ds.Tables[13].Rows[intRowCount]["Function_Name"].ToString() == "Site Leadership")
                            {
                                if ((!object.ReferenceEquals(ds.Tables[13].Rows[intRowCount]["Approver_Name"], System.DBNull.Value)))
                                {
                                    strFUNAPPName = ds.Tables[13].Rows[intRowCount]["Approver_Name"].ToString();
                                }
                                else
                                {
                                    strFUNAPPName = string.Empty;
                                }
                                if ((!object.ReferenceEquals(ds.Tables[13].Rows[intRowCount]["Backup_Approver_Name"], System.DBNull.Value)))
                                {
                                    strBackUpAppName = ds.Tables[13].Rows[intRowCount]["Backup_Approver_Name"].ToString();
                                }
                                else
                                {
                                    strBackUpAppName = string.Empty;
                                }

                                string strAppStrStatus = null;
                                //strAppStrStatus = objclsEO.GET_EO_Is_Approved(Convert.ToInt32(ViewState["EOID"]), ds.Tables[13].Rows[intRowCount]["Function_Name"], objSecurity.UserName, "Final");
                                if (objEOBA.GET_EO_Is_Approved(Convert.ToInt32(ViewState["EOID"]), ds.Tables[13].Rows[intRowCount]["Function_Name"].ToString(), objSecurity.UserName, "Final", ref paramOut))
                                    strAppStrStatus = paramOut[0].Value.ToString();
                                if ((strCoOrginator.ToUpper() == objSecurity.UserName.Trim().ToUpper()) | (strOrginator.ToUpper() == objSecurity.UserName.Trim().ToUpper()) | (ViewState["UserRole"].ToString().ToUpper() == "MUREO_Admin".ToUpper()))
                                {
                                    if (strAppStrStatus.ToUpper() != "Y")
                                    {
                                        lnkFinalSiteSiteLeadBackUp.Visible = true;
                                    }
                                    else
                                    {
                                        lnkFinalSiteSiteLeadBackUp.Visible = false;
                                        lnkFinSiteLeadComments.Visible = false;
                                        lnkFinSiteLeadershipApproved.Visible = false;
                                        lnkFinSiteLeadershipDeclined.Visible = false;
                                    }
                                }

                                if (strBackUpAppName.Trim().ToUpper() == objSecurity.UserName.Trim().ToUpper() | strFUNAPPName.Trim().ToUpper() == objSecurity.UserName.Trim().ToUpper())
                                {
                                    if (!(strAppStrStatus == "Y"))
                                    {
                                        lnkFinSiteLeadershipApproved.Visible = true;
                                        lnkFinSiteLeadershipDeclined.Visible = true;
                                        lnkFinSiteLeadComments.Visible = true;
                                        lnkFinalSiteSiteLeadBackUp.Visible = true;
                                    }
                                    else
                                    {
                                        lnkFinalSiteSiteLeadBackUp.Visible = false;
                                        lnkFinSiteLeadComments.Visible = false;
                                        lnkFinSiteLeadershipApproved.Visible = false;
                                        lnkFinSiteLeadershipDeclined.Visible = false;
                                    }
                                }
                            }
                            if (ds.Tables[13].Rows[intRowCount]["Function_Name"].ToString() == "PS&RA")
                            {
                                if ((!object.ReferenceEquals(ds.Tables[13].Rows[intRowCount]["Approver_Name"], System.DBNull.Value)))
                                {
                                    strFUNAPPName = ds.Tables[13].Rows[intRowCount]["Approver_Name"].ToString();
                                }
                                else
                                {
                                    strFUNAPPName = string.Empty;
                                }
                                if ((!object.ReferenceEquals(ds.Tables[13].Rows[intRowCount]["Backup_Approver_Name"], System.DBNull.Value)))
                                {
                                    strBackUpAppName = ds.Tables[13].Rows[intRowCount]["Backup_Approver_Name"].ToString();
                                }
                                else
                                {
                                    strBackUpAppName = string.Empty;
                                }
                                string strAppStrStatus = null;
                                //strAppStrStatus = objclsEO.GET_EO_Is_Approved(Convert.ToInt32(ViewState["EOID"]), ds.Tables[13].Rows[intRowCount]["Function_Name"], System., "Final");

                                if (objEOBA.GET_EO_Is_Approved(Convert.ToInt32(ViewState["EOID"]), ds.Tables[13].Rows[intRowCount]["Function_Name"].ToString(), objSecurity.UserName, "Final", ref paramOut))
                                    strAppStrStatus = paramOut[0].Value.ToString();


                                if ((strCoOrginator.ToUpper() == objSecurity.UserName.Trim().ToUpper()) | (strOrginator.ToUpper() == objSecurity.UserName.Trim().ToUpper()) | (ViewState["UserRole"].ToString().ToUpper() == "MUREO_Admin".ToUpper()))
                                {
                                    if (strAppStrStatus.ToUpper() != "Y")
                                    {
                                        lnkFinalPSRABackUp.Visible = true;
                                    }
                                    else
                                    {
                                        lnkFinalPSRABackUp.Visible = false;
                                        lnkFinPSRAComments.Visible = false;
                                        lnkFinPSRAApproved.Visible = false;
                                        lnkFinPSRADeclined.Visible = false;
                                    }
                                }

                                if (strBackUpAppName.Trim().ToUpper() == objSecurity.UserName.Trim().ToUpper() | strFUNAPPName.Trim().ToUpper() == objSecurity.UserName.Trim().ToUpper())
                                {
                                    if (!(strAppStrStatus == "Y"))
                                    {
                                        lnkFinPSRAApproved.Visible = true;
                                        lnkFinPSRADeclined.Visible = true;
                                        lnkFinPSRAComments.Visible = true;
                                        lnkFinalPSRABackUp.Visible = true;
                                    }
                                    else
                                    {
                                        lnkFinalPSRABackUp.Visible = false;
                                        lnkFinPSRAComments.Visible = false;
                                        lnkFinPSRAApproved.Visible = false;
                                        lnkFinPSRADeclined.Visible = false;
                                    }
                                }
                            }

                            if (ds.Tables[13].Rows[intRowCount]["Function_Name"].ToString() == "Timing Gate Exception")
                            {
                                if ((!object.ReferenceEquals(ds.Tables[13].Rows[intRowCount]["Approver_Name"], System.DBNull.Value)))
                                {
                                    strFUNAPPName = ds.Tables[13].Rows[intRowCount]["Approver_Name"].ToString();
                                }
                                else
                                {
                                    strFUNAPPName = string.Empty;
                                }
                                if ((!object.ReferenceEquals(ds.Tables[13].Rows[intRowCount]["Backup_Approver_Name"], System.DBNull.Value)))
                                {
                                    strBackUpAppName = ds.Tables[13].Rows[intRowCount]["Backup_Approver_Name"].ToString();
                                }
                                else
                                {
                                    strBackUpAppName = string.Empty;
                                }

                                string strAppStrStatus = null;
                                //strAppStrStatus = objclsEO.GET_EO_Is_Approved(Convert.ToInt32(ViewState["EOID"]), ds.Tables[13].Rows[intRowCount]["Function_Name"], objSecurity.UserName, "Final");

                                if (objEOBA.GET_EO_Is_Approved(Convert.ToInt32(ViewState["EOID"]), ds.Tables[13].Rows[intRowCount]["Function_Name"].ToString(), objSecurity.UserName, "Final", ref paramOut))
                                    strAppStrStatus = paramOut[0].Value.ToString();

                                if ((strCoOrginator.ToUpper() == objSecurity.UserName.Trim().ToUpper()) | (strOrginator.ToUpper() == objSecurity.UserName.Trim().ToUpper()) | (ViewState["UserRole"].ToString().ToUpper() == "MUREO_Admin".ToUpper()))
                                {
                                    if (strAppStrStatus.ToUpper() != "Y")
                                    {
                                        lnkFinalTimingGateBackUp.Visible = true;
                                    }
                                    else
                                    {
                                        lnkFinalTimingGateBackUp.Visible = false;
                                        lnkFinTimingGateComments.Visible = false;
                                        lnkFinTimingGateApproved.Visible = false;
                                        lnkFinTimingGateDeclined.Visible = false;
                                    }
                                }

                                if (strBackUpAppName.Trim().ToUpper() == objSecurity.UserName.Trim().ToUpper() | strFUNAPPName.Trim().ToUpper() == objSecurity.UserName.Trim().ToUpper())
                                {
                                    if (!(strAppStrStatus == "Y"))
                                    {
                                        lnkFinTimingGateApproved.Visible = true;
                                        lnkFinTimingGateDeclined.Visible = true;
                                        lnkFinTimingGateComments.Visible = true;
                                        lnkFinalTimingGateBackUp.Visible = true;
                                    }
                                    else
                                    {
                                        lnkFinalTimingGateBackUp.Visible = false;
                                        lnkFinTimingGateComments.Visible = false;
                                        lnkFinTimingGateApproved.Visible = false;
                                        lnkFinTimingGateDeclined.Visible = false;
                                    }
                                }

                            }

                            if (ds.Tables[13].Rows[intRowCount]["Function_Name"].ToString() == "QA")
                            {
                                if ((!object.ReferenceEquals(ds.Tables[13].Rows[intRowCount]["Approver_Name"], System.DBNull.Value)))
                                {
                                    strFUNAPPName = ds.Tables[13].Rows[intRowCount]["Approver_Name"].ToString();
                                }
                                else
                                {
                                    strFUNAPPName = string.Empty;
                                }
                                if ((!object.ReferenceEquals(ds.Tables[13].Rows[intRowCount]["Backup_Approver_Name"], System.DBNull.Value)))
                                {
                                    strBackUpAppName = ds.Tables[13].Rows[intRowCount]["Backup_Approver_Name"].ToString();
                                }
                                else
                                {
                                    strBackUpAppName = string.Empty;
                                }
                                string strAppStrStatus = null;
                                //strAppStrStatus = objclsEO.GET_EO_Is_Approved(Convert.ToInt32(ViewState["EOID"]), ds.Tables[13].Rows[intRowCount]["Function_Name"], objSecurity.UserName, "Final");
                                if (objEOBA.GET_EO_Is_Approved(Convert.ToInt32(ViewState["EOID"]), ds.Tables[13].Rows[intRowCount]["Function_Name"].ToString(), objSecurity.UserName, "Final", ref paramOut))
                                    strAppStrStatus = paramOut[0].Value.ToString();
                                if ((strCoOrginator.ToUpper() == objSecurity.UserName.Trim().ToUpper()) | (strOrginator.ToUpper() == objSecurity.UserName.Trim().ToUpper()) | (ViewState["UserRole"].ToString().ToUpper() == "MUREO_Admin".ToUpper()))
                                {
                                    if (strAppStrStatus.ToUpper() != "Y")
                                    {
                                        lnkFinalQABackUp.Visible = true;
                                    }
                                    else
                                    {
                                        lnkFinalQABackUp.Visible = false;
                                        lnkFinQAComments.Visible = false;
                                        lnkFinQAApproved.Visible = false;
                                        lnkFinQADeclined.Visible = false;
                                    }
                                }
                                if (strBackUpAppName.Trim().ToUpper() == objSecurity.UserName.Trim().ToUpper() | strFUNAPPName.Trim().ToUpper() == objSecurity.UserName.Trim().ToUpper())
                                {
                                    if (!(strAppStrStatus == "Y"))
                                    {
                                        lnkFinQAApproved.Visible = true;
                                        lnkFinQADeclined.Visible = true;
                                        lnkFinQAComments.Visible = true;
                                        lnkFinalQABackUp.Visible = true;
                                    }
                                    else
                                    {
                                        lnkFinalQABackUp.Visible = false;
                                        lnkFinQAComments.Visible = false;
                                        lnkFinQAApproved.Visible = false;
                                        lnkFinQADeclined.Visible = false;
                                    }
                                }
                            }

                            if (ds.Tables[13].Rows[intRowCount]["Function_Name"].ToString() == "Standards Office")
                            {
                                if ((!object.ReferenceEquals(ds.Tables[13].Rows[intRowCount]["Approver_Name"], System.DBNull.Value)))
                                {
                                    strFUNAPPName = ds.Tables[13].Rows[intRowCount]["Approver_Name"].ToString();
                                }
                                else
                                {
                                    strFUNAPPName = string.Empty;
                                }
                                if ((!object.ReferenceEquals(ds.Tables[13].Rows[intRowCount]["Backup_Approver_Name"], System.DBNull.Value)))
                                {
                                    strBackUpAppName = ds.Tables[13].Rows[intRowCount]["Backup_Approver_Name"].ToString();
                                }
                                else
                                {
                                    strBackUpAppName = string.Empty;
                                }
                                string strAppStrStatus = null;
                                //strAppStrStatus = objclsEO.GET_EO_Is_Approved(Convert.ToInt32(ViewState["EOID"]), ds.Tables[13].Rows[intRowCount]["Function_Name"], objSecurity.UserName, "Final");

                                if (objEOBA.GET_EO_Is_Approved(Convert.ToInt32(ViewState["EOID"]), ds.Tables[13].Rows[intRowCount]["Function_Name"].ToString(), objSecurity.UserName, "Final", ref paramOut))
                                    strAppStrStatus = paramOut[0].Value.ToString();

                                if ((strCoOrginator.ToUpper() == objSecurity.UserName.Trim().ToUpper()) | (strOrginator.ToUpper() == objSecurity.UserName.Trim().ToUpper()) | (ViewState["UserRole"].ToString().ToUpper() == "MUREO_Admin".ToUpper()))
                                {
                                    if (strAppStrStatus.ToUpper() != "Y")
                                    {
                                        lnkStndsOffiBackUp.Visible = true;
                                    }
                                    else
                                    {
                                        lnkStndsOffiBackUp.Visible = false;
                                        lnkFinStandsOffComments.Visible = false;
                                        lnkFinStandardOfficeApproved.Visible = false;
                                        lnkFinStandardOfficeDeclined.Visible = false;
                                    }
                                }

                                if (strBackUpAppName.Trim().ToUpper() == objSecurity.UserName.Trim().ToUpper() | strFUNAPPName.Trim().ToUpper() == objSecurity.UserName.Trim().ToUpper())
                                {
                                    if (!(strAppStrStatus == "Y"))
                                    {
                                        lnkFinStandardOfficeApproved.Visible = true;
                                        lnkFinStandardOfficeDeclined.Visible = true;
                                        lnkFinStandsOffComments.Visible = true;
                                        lnkStndsOffiBackUp.Visible = true;
                                    }
                                    else
                                    {
                                        lnkStndsOffiBackUp.Visible = false;
                                        lnkFinStandsOffComments.Visible = false;
                                        lnkFinStandardOfficeApproved.Visible = false;
                                        lnkFinStandardOfficeDeclined.Visible = false;
                                    }
                                }
                            }


                            //Added by David - MUREO PCR : 4 Additional Approvers - Date: 01/03/2012

                            if (ds.Tables[13].Rows[intRowCount]["Function_Name"].ToString() == "Additional approver #1")
                            {
                                if ((!object.ReferenceEquals(ds.Tables[13].Rows[intRowCount]["Approver_Name"], System.DBNull.Value)))
                                {
                                    strFUNAPPName = ds.Tables[13].Rows[intRowCount]["Approver_Name"].ToString();
                                }
                                else
                                {
                                    strFUNAPPName = string.Empty;
                                }
                                if ((!object.ReferenceEquals(ds.Tables[13].Rows[intRowCount]["Backup_Approver_Name"], System.DBNull.Value)))
                                {
                                    strBackUpAppName = ds.Tables[13].Rows[intRowCount]["Backup_Approver_Name"].ToString();
                                }
                                else
                                {
                                    strBackUpAppName = string.Empty;
                                }

                                string strAppStrStatus = null;
                                //strAppStrStatus = objclsEO.GET_EO_Is_Approved(Convert.ToInt32(ViewState["EOID"]), ds.Tables[13].Rows[intRowCount]["Function_Name"], objSecurity.UserName, "Final");
                                if (objEOBA.GET_EO_Is_Approved(Convert.ToInt32(ViewState["EOID"]), ds.Tables[13].Rows[intRowCount]["Function_Name"].ToString(), objSecurity.UserName, "Final", ref paramOut))
                                    strAppStrStatus = paramOut[0].Value.ToString();

                                if ((strCoOrginator.ToUpper() == objSecurity.UserName.Trim().ToUpper()) | (strOrginator.ToUpper() == objSecurity.UserName.Trim().ToUpper()) | (ViewState["UserRole"].ToString().ToUpper() == "MUREO_Admin".ToUpper()))
                                {
                                    if (strAppStrStatus.ToUpper() != "Y")
                                    {
                                        lnkFinAdditionalApprover1BackUp.Visible = true;

                                    }
                                    else
                                    {
                                        lnkFinAdditionalApprover1BackUp.Visible = false;
                                        lnkFinAdditionalApprover1Comments.Visible = false;
                                        lnkFinAdditionalApprover1Approved.Visible = false;
                                        lnkFinAdditionalApprover1Declined.Visible = false;
                                    }
                                }


                                if (strBackUpAppName.Trim().ToUpper() == objSecurity.UserName.Trim().ToUpper() | strFUNAPPName.Trim().ToUpper() == objSecurity.UserName.Trim().ToUpper())
                                {
                                    if (!(strAppStrStatus == "Y"))
                                    {
                                        lnkFinAdditionalApprover1Approved.Visible = true;
                                        lnkFinAdditionalApprover1Declined.Visible = true;
                                        lnkFinAdditionalApprover1Comments.Visible = true;
                                        lnkFinAdditionalApprover1BackUp.Visible = true;
                                    }
                                    else
                                    {
                                        lnkFinAdditionalApprover1BackUp.Visible = false;
                                        lnkFinAdditionalApprover1Comments.Visible = false;
                                        lnkFinAdditionalApprover1Approved.Visible = false;
                                        lnkFinAdditionalApprover1Declined.Visible = false;
                                    }
                                }
                            }


                            if (ds.Tables[13].Rows[intRowCount]["Function_Name"].ToString() == "Additional approver #2")
                            {
                                if ((!object.ReferenceEquals(ds.Tables[13].Rows[intRowCount]["Approver_Name"], System.DBNull.Value)))
                                {
                                    strFUNAPPName = ds.Tables[13].Rows[intRowCount]["Approver_Name"].ToString();
                                }
                                else
                                {
                                    strFUNAPPName = string.Empty;
                                }
                                if ((!object.ReferenceEquals(ds.Tables[13].Rows[intRowCount]["Backup_Approver_Name"], System.DBNull.Value)))
                                {
                                    strBackUpAppName = ds.Tables[13].Rows[intRowCount]["Backup_Approver_Name"].ToString();
                                }
                                else
                                {
                                    strBackUpAppName = string.Empty;
                                }

                                string strAppStrStatus = null;
                                //strAppStrStatus = objclsEO.GET_EO_Is_Approved(Convert.ToInt32(ViewState["EOID"]), ds.Tables[13].Rows[intRowCount]["Function_Name"], objSecurity.UserName, "Final");
                                if (objEOBA.GET_EO_Is_Approved(Convert.ToInt32(ViewState["EOID"]), ds.Tables[13].Rows[intRowCount]["Function_Name"].ToString(), objSecurity.UserName, "Final", ref paramOut))
                                    strAppStrStatus = paramOut[0].Value.ToString();

                                if ((strCoOrginator.ToUpper() == objSecurity.UserName.Trim().ToUpper()) | (strOrginator.ToUpper() == objSecurity.UserName.Trim().ToUpper()) | (ViewState["UserRole"].ToString().ToUpper() == "MUREO_Admin".ToUpper()))
                                {
                                    if (strAppStrStatus.ToUpper() != "Y")
                                    {
                                        lnkFinAdditionalApprover2BackUp.Visible = true;
                                    }
                                    else
                                    {
                                        lnkFinAdditionalApprover2BackUp.Visible = false;
                                        lnkFinAdditionalApprover2Comments.Visible = false;
                                        lnkFinAdditionalApprover2Approved.Visible = false;
                                        lnkFinAdditionalApprover2Declined.Visible = false;
                                    }
                                }



                                if (strBackUpAppName.Trim().ToUpper() == objSecurity.UserName.Trim().ToUpper() | strFUNAPPName.Trim().ToUpper() == objSecurity.UserName.Trim().ToUpper())
                                {
                                    if (!(strAppStrStatus == "Y"))
                                    {
                                        lnkFinAdditionalApprover2Approved.Visible = true;
                                        lnkFinAdditionalApprover2Declined.Visible = true;
                                        lnkFinAdditionalApprover2Comments.Visible = true;
                                        lnkFinAdditionalApprover2BackUp.Visible = true;
                                    }
                                    else
                                    {
                                        lnkFinAdditionalApprover2BackUp.Visible = false;
                                        lnkFinAdditionalApprover2Comments.Visible = false;
                                        lnkFinAdditionalApprover2Approved.Visible = false;
                                        lnkFinAdditionalApprover2Declined.Visible = false;
                                    }
                                }
                            }


                            if (ds.Tables[13].Rows[intRowCount]["Function_Name"].ToString() == "Additional approver #3")
                            {
                                if ((!object.ReferenceEquals(ds.Tables[13].Rows[intRowCount]["Approver_Name"], System.DBNull.Value)))
                                {
                                    strFUNAPPName = ds.Tables[13].Rows[intRowCount]["Approver_Name"].ToString();
                                }
                                else
                                {
                                    strFUNAPPName = string.Empty;
                                }
                                if ((!object.ReferenceEquals(ds.Tables[13].Rows[intRowCount]["Backup_Approver_Name"], System.DBNull.Value)))
                                {
                                    strBackUpAppName = ds.Tables[13].Rows[intRowCount]["Backup_Approver_Name"].ToString();
                                }
                                else
                                {
                                    strBackUpAppName = string.Empty;
                                }

                                string strAppStrStatus = null;
                                //strAppStrStatus = objclsEO.GET_EO_Is_Approved(Convert.ToInt32(ViewState["EOID"]), ds.Tables[13].Rows[intRowCount]["Function_Name"], objSecurity.UserName, "Final");
                                if (objEOBA.GET_EO_Is_Approved(Convert.ToInt32(ViewState["EOID"]), ds.Tables[13].Rows[intRowCount]["Function_Name"].ToString(), objSecurity.UserName, "Final", ref paramOut))
                                    strAppStrStatus = paramOut[0].Value.ToString();
                                if ((strCoOrginator.ToUpper() == objSecurity.UserName.Trim().ToUpper()) | (strOrginator.ToUpper() == objSecurity.UserName.Trim().ToUpper()) | (ViewState["UserRole"].ToString().ToUpper() == "MUREO_Admin".ToUpper()))
                                {
                                    if (strAppStrStatus.ToUpper() != "Y")
                                    {
                                        lnkFinAdditionalApprover3BackUp.Visible = true;
                                    }
                                    else
                                    {
                                        lnkFinAdditionalApprover3BackUp.Visible = false;
                                        lnkFinAdditionalApprover3Comments.Visible = false;
                                        lnkFinAdditionalApprover3Approved.Visible = false;
                                        lnkFinAdditionalApprover3Declined.Visible = false;
                                    }
                                }



                                if (strBackUpAppName.Trim().ToUpper() == objSecurity.UserName.Trim().ToUpper() | strFUNAPPName.Trim().ToUpper() == objSecurity.UserName.Trim().ToUpper())
                                {
                                    if (!(strAppStrStatus == "Y"))
                                    {
                                        lnkFinAdditionalApprover3Approved.Visible = true;
                                        lnkFinAdditionalApprover3Declined.Visible = true;
                                        lnkFinAdditionalApprover3Comments.Visible = true;
                                        lnkFinAdditionalApprover3BackUp.Visible = true;
                                    }
                                    else
                                    {
                                        lnkFinAdditionalApprover3BackUp.Visible = false;
                                        lnkFinAdditionalApprover3Comments.Visible = false;
                                        lnkFinAdditionalApprover3Approved.Visible = false;
                                        lnkFinAdditionalApprover3Declined.Visible = false;
                                    }
                                }
                            }

                            if (ds.Tables[13].Rows[intRowCount]["Function_Name"].ToString() == "Additional approver #4")
                            {
                                if ((!object.ReferenceEquals(ds.Tables[13].Rows[intRowCount]["Approver_Name"], System.DBNull.Value)))
                                {
                                    strFUNAPPName = ds.Tables[13].Rows[intRowCount]["Approver_Name"].ToString();
                                }
                                else
                                {
                                    strFUNAPPName = string.Empty;
                                }
                                if ((!object.ReferenceEquals(ds.Tables[13].Rows[intRowCount]["Backup_Approver_Name"], System.DBNull.Value)))
                                {
                                    strBackUpAppName = ds.Tables[13].Rows[intRowCount]["Backup_Approver_Name"].ToString();
                                }
                                else
                                {
                                    strBackUpAppName = string.Empty;
                                }

                                string strAppStrStatus = null;
                                //strAppStrStatus = objclsEO.GET_EO_Is_Approved(Convert.ToInt32(ViewState["EOID"]), ds.Tables[13].Rows[intRowCount]["Function_Name"], objSecurity.UserName, "Final");
                                if (objEOBA.GET_EO_Is_Approved(Convert.ToInt32(ViewState["EOID"]), ds.Tables[13].Rows[intRowCount]["Function_Name"].ToString(), objSecurity.UserName, "Final", ref paramOut))
                                    strAppStrStatus = paramOut[0].Value.ToString();
                                if ((strCoOrginator.ToUpper() == objSecurity.UserName.Trim().ToUpper()) | (strOrginator.ToUpper() == objSecurity.UserName.Trim().ToUpper()) | (ViewState["UserRole"].ToString().ToUpper() == "MUREO_Admin".ToUpper()))
                                {
                                    if (strAppStrStatus.ToUpper() != "Y")
                                    {
                                        lnkFinAdditionalApprover4BackUp.Visible = true;
                                    }
                                    else
                                    {
                                        lnkFinAdditionalApprover4BackUp.Visible = false;
                                        lnkFinAdditionalApprover4Comments.Visible = false;
                                        lnkFinAdditionalApprover4Approved.Visible = false;
                                        lnkFinAdditionalApprover4Declined.Visible = false;
                                    }
                                }


                                if (strBackUpAppName.Trim().ToUpper() == objSecurity.UserName.Trim().ToUpper() | strFUNAPPName.Trim().ToUpper() == objSecurity.UserName.Trim().ToUpper())
                                {
                                    if (!(strAppStrStatus == "Y"))
                                    {
                                        lnkFinAdditionalApprover4Approved.Visible = true;
                                        lnkFinAdditionalApprover4Declined.Visible = true;
                                        lnkFinAdditionalApprover4Comments.Visible = true;
                                        lnkFinAdditionalApprover4BackUp.Visible = true;
                                    }
                                    else
                                    {
                                        lnkFinAdditionalApprover4BackUp.Visible = false;
                                        lnkFinAdditionalApprover4Comments.Visible = false;
                                        lnkFinAdditionalApprover4Approved.Visible = false;
                                        lnkFinAdditionalApprover4Declined.Visible = false;
                                    }
                                }
                            }





                        }


                    }
                }


                //-----------------------------------------

                if (!(ds.Tables[13].Rows.Count == 0))
                {
                    int intRowCount = 0;
                    for (intRowCount = 0; intRowCount <= ds.Tables[13].Rows.Count - 1; intRowCount++)
                    {
                        if (ds.Tables[13].Rows[intRowCount]["Function_Name"].ToString() == "Budget Center")
                        {

                            //Checking for current EO approved by Budget Owner or not.If not Approve,Decline,Commnets,Backup links will be visible.
                            //strFinalAppStatus = objclsEO.GET_EO_Is_Approved(Convert.ToInt32(ViewState["EOID"]), ds.Tables[13].Rows[intRowCount]["Function_Name"], strFUNAPPName, "Final");
                            if (objEOBA.GET_EO_Is_Approved(Convert.ToInt32(ViewState["EOID"]), ds.Tables[13].Rows[intRowCount]["Function_Name"].ToString(), objSecurity.UserName, "Final", ref paramOut))
                                strFinalAppStatus = paramOut[0].Value.ToString();

                            if ((strCoOrginator.ToUpper() == objSecurity.UserName.Trim().ToUpper()) | (strOrginator.ToUpper() == objSecurity.UserName.Trim().ToUpper()) | (ViewState["UserRole"].ToString().ToUpper() == "MUREO_Admin".ToUpper()))
                            {
                                if (strFinalAppStatus.ToUpper() != "Y")
                                {
                                    lnkFinalBOBackUp.Visible = true;
                                }
                            }
                        }
                        //If UCase(strFinalAppStatus) = "Y"  Then
                        if (ds.Tables[13].Rows[intRowCount]["Function_Name"].ToString() == "PS Initiative Manager")
                        {

                            string strAppStrStatus = null;
                            //strAppStrStatus = objclsEO.GET_EO_Is_Approved(Convert.ToInt32(ViewState["EOID"]), ds.Tables[13].Rows[intRowCount]["Function_Name"], objSecurity.UserName, "Final");
                            if (objEOBA.GET_EO_Is_Approved(Convert.ToInt32(ViewState["EOID"]), ds.Tables[13].Rows[intRowCount]["Function_Name"].ToString(), objSecurity.UserName, "Final", ref paramOut))
                                strAppStrStatus = paramOut[0].Value.ToString();
                            if ((strCoOrginator.ToUpper() == objSecurity.UserName.Trim().ToUpper()) | (strOrginator.ToUpper() == objSecurity.UserName.Trim().ToUpper()) | (ViewState["UserRole"].ToString().ToUpper() == "MUREO_Admin".ToUpper()))
                            {
                                if (strAppStrStatus.ToUpper() != "Y")
                                {
                                    lnkFinalPSIntiaBackUp.Visible = true;
                                }
                            }
                        }
                        if (ds.Tables[13].Rows[intRowCount]["Function_Name"].ToString() == "Products Research")
                        {

                            string strAppStrStatus = null;
                            //strAppStrStatus = objclsEO.GET_EO_Is_Approved(Convert.ToInt32(ViewState["EOID"]), ds.Tables[13].Rows[intRowCount]["Function_Name"], objSecurity.UserName, "Final");
                            if (objEOBA.GET_EO_Is_Approved(Convert.ToInt32(ViewState["EOID"]), ds.Tables[13].Rows[intRowCount]["Function_Name"].ToString(), objSecurity.UserName, "Final", ref paramOut))
                                strAppStrStatus = paramOut[0].Value.ToString();

                            if ((strCoOrginator.ToUpper() == objSecurity.UserName.Trim().ToUpper()) | (strOrginator.ToUpper() == objSecurity.UserName.Trim().ToUpper()) | (ViewState["UserRole"].ToString().ToUpper() == "MUREO_Admin".ToUpper()))
                            {
                                if (strAppStrStatus.ToUpper() != "Y")
                                {
                                    lnkFinalProdReasBackUp.Visible = true;
                                }
                            }
                        }
                        if (HSEApproval == true)
                        {
                            if (ds.Tables[13].Rows[intRowCount]["Function_Name"].ToString() == "Site HS&E Resource")
                            {

                                string strAppStrStatus = null;
                                //strAppStrStatus = objclsEO.GET_EO_Is_Approved(Convert.ToInt32(ViewState["EOID"]), ds.Tables[13].Rows[intRowCount]["Function_Name"], objSecurity.UserName, "Final");
                                if (objEOBA.GET_EO_Is_Approved(Convert.ToInt32(ViewState["EOID"]), ds.Tables[13].Rows[intRowCount]["Function_Name"].ToString(), objSecurity.UserName, "Final", ref paramOut))
                                    strAppStrStatus = paramOut[0].Value.ToString();

                                if ((strCoOrginator.ToUpper() == objSecurity.UserName.Trim().ToUpper()) | (strOrginator.ToUpper() == objSecurity.UserName.Trim().ToUpper()) | (ViewState["UserRole"].ToString().ToUpper() == "MUREO_Admin".ToUpper()))
                                {
                                    if (strAppStrStatus.ToUpper() != "Y")
                                    {
                                        lnkFinalSiteHSEBackUp.Visible = true;
                                    }
                                }

                            }
                        }
                        if (ds.Tables[13].Rows[intRowCount]["Function_Name"].ToString() == "SAP Cost Center Coordinator")
                        {

                            string strAppStrStatus = null;
                            //strAppStrStatus = objclsEO.GET_EO_Is_Approved(Convert.ToInt32(ViewState["EOID"]), ds.Tables[13].Rows[intRowCount]["Function_Name"], objSecurity.UserName, "Final");
                            if (objEOBA.GET_EO_Is_Approved(Convert.ToInt32(ViewState["EOID"]), ds.Tables[13].Rows[intRowCount]["Function_Name"].ToString(), objSecurity.UserName, "Final", ref paramOut))
                                strAppStrStatus = paramOut[0].Value.ToString();
                            if ((strCoOrginator.ToUpper() == objSecurity.UserName.Trim().ToUpper()) | (strOrginator.ToUpper() == objSecurity.UserName.Trim().ToUpper()) | (ViewState["UserRole"].ToString().ToUpper() == "MUREO_Admin".ToUpper()))
                            {
                                if (strAppStrStatus.ToUpper() != "Y")
                                {
                                    lnkFinalSAPBackUp.Visible = true;
                                }
                            }
                        }

                        //Added by David
                        //Date: 07/16/2010

                        if (ds.Tables[13].Rows[intRowCount]["Function_Name"].ToString() == "SMART Clearance")
                        {

                            string strAppStrStatus = null;
                            //strAppStrStatus = objclsEO.GET_EO_Is_Approved(Convert.ToInt32(ViewState["EOID"]), ds.Tables[13].Rows[intRowCount]["Function_Name"], objSecurity.UserName, "Final");
                            if (objEOBA.GET_EO_Is_Approved(Convert.ToInt32(ViewState["EOID"]), ds.Tables[13].Rows[intRowCount]["Function_Name"].ToString(), objSecurity.UserName, "Final", ref paramOut))
                                strAppStrStatus = paramOut[0].Value.ToString();
                            if ((strCoOrginator.ToUpper() == objSecurity.UserName.Trim().ToUpper()) | (strOrginator.ToUpper() == objSecurity.UserName.Trim().ToUpper()) | (ViewState["UserRole"].ToString().ToUpper() == "MUREO_Admin".ToUpper()))
                            {
                                if (strAppStrStatus.ToUpper() != "Y")
                                {
                                    lnkFinalSMARTClearanceBackUp.Visible = true;
                                }
                            }
                        }

                        if (ds.Tables[13].Rows[intRowCount]["Function_Name"].ToString() == "Site Planning")
                        {

                            string strAppStrStatus = null;
                            //strAppStrStatus = objclsEO.GET_EO_Is_Approved(Convert.ToInt32(ViewState["EOID"]), ds.Tables[13].Rows[intRowCount]["Function_Name"], objSecurity.UserName, "Final");
                            if (objEOBA.GET_EO_Is_Approved(Convert.ToInt32(ViewState["EOID"]), ds.Tables[13].Rows[intRowCount]["Function_Name"].ToString(), objSecurity.UserName, "Final", ref paramOut))
                                strAppStrStatus = paramOut[0].Value.ToString();
                            if ((strCoOrginator.ToUpper() == objSecurity.UserName.Trim().ToUpper()) | (strOrginator.ToUpper() == objSecurity.UserName.Trim().ToUpper()) | (ViewState["UserRole"].ToString().ToUpper() == "MUREO_Admin".ToUpper()))
                            {
                                if (strAppStrStatus.ToUpper() != "Y")
                                {
                                    lnkFinalSitePlnaBackUp.Visible = true;

                                }
                            }

                        }


                        if (ds.Tables[13].Rows[intRowCount]["Function_Name"].ToString() == "Site Contact")
                        {

                            string strAppStrStatus = null;
                            //strAppStrStatus = objclsEO.GET_EO_Is_Approved(Convert.ToInt32(ViewState["EOID"]), ds.Tables[13].Rows[intRowCount]["Function_Name"], objSecurity.UserName, "Final");
                            if (objEOBA.GET_EO_Is_Approved(Convert.ToInt32(ViewState["EOID"]), ds.Tables[13].Rows[intRowCount]["Function_Name"].ToString(), objSecurity.UserName, "Final", ref paramOut))
                                strAppStrStatus = paramOut[0].Value.ToString();
                            if ((strCoOrginator.ToUpper() == objSecurity.UserName.Trim().ToUpper()) | (strOrginator.ToUpper() == objSecurity.UserName.Trim().ToUpper()) | (ViewState["UserRole"].ToString().ToUpper() == "MUREO_Admin".ToUpper()))
                            {
                                if (strAppStrStatus.ToUpper() != "Y")
                                {
                                    lnkFinalSiteBackUp.Visible = true;

                                }
                            }

                        }
                        if (ds.Tables[13].Rows[intRowCount]["Function_Name"].ToString() == "Site Finance")
                        {

                            string strAppStrStatus = null;
                            // strAppStrStatus = objclsEO.GET_EO_Is_Approved(Convert.ToInt32(ViewState["EOID"]), ds.Tables[13].Rows[intRowCount]["Function_Name"], objSecurity.UserName, "Final");
                            if (objEOBA.GET_EO_Is_Approved(Convert.ToInt32(ViewState["EOID"]), ds.Tables[13].Rows[intRowCount]["Function_Name"].ToString(), objSecurity.UserName, "Final", ref paramOut))
                                strAppStrStatus = paramOut[0].Value.ToString();
                            if ((strCoOrginator.ToUpper() == objSecurity.UserName.Trim().ToUpper()) | (strOrginator.ToUpper() == objSecurity.UserName.Trim().ToUpper()) | (ViewState["UserRole"].ToString().ToUpper() == "MUREO_Admin".ToUpper()))
                            {
                                if (strAppStrStatus.ToUpper() != "Y")
                                {
                                    lnkFinalSiteSiteFanBackUp.Visible = true;
                                }
                            }
                        }

                        if (ds.Tables[13].Rows[intRowCount]["Function_Name"].ToString() == "Site Leadership")
                        {

                            string strAppStrStatus = null;
                            // strAppStrStatus = objclsEO.GET_EO_Is_Approved(Convert.ToInt32(ViewState["EOID"]), ds.Tables[13].Rows[intRowCount]["Function_Name"], objSecurity.UserName, "Final");
                            if (objEOBA.GET_EO_Is_Approved(Convert.ToInt32(ViewState["EOID"]), ds.Tables[13].Rows[intRowCount]["Function_Name"].ToString(), objSecurity.UserName, "Final", ref paramOut))
                                strAppStrStatus = paramOut[0].Value.ToString();
                            if ((strCoOrginator.ToUpper() == objSecurity.UserName.Trim().ToUpper()) | (strOrginator.ToUpper() == objSecurity.UserName.Trim().ToUpper()) | (ViewState["UserRole"].ToString().ToUpper() == "MUREO_Admin".ToUpper()))
                            {
                                if (strAppStrStatus.ToUpper() != "Y")
                                {
                                    lnkFinalSiteSiteLeadBackUp.Visible = true;
                                }
                            }

                        }
                        if (ds.Tables[13].Rows[intRowCount]["Function_Name"].ToString() == "PS&RA")
                        {

                            string strAppStrStatus = null;
                            //strAppStrStatus = objclsEO.GET_EO_Is_Approved(Convert.ToInt32(ViewState["EOID"]), ds.Tables[13].Rows[intRowCount]["Function_Name"], objSecurity.UserName, "Final");
                            if (objEOBA.GET_EO_Is_Approved(Convert.ToInt32(ViewState["EOID"]), ds.Tables[13].Rows[intRowCount]["Function_Name"].ToString(), objSecurity.UserName, "Final", ref paramOut))
                                strAppStrStatus = paramOut[0].Value.ToString();
                            if ((strCoOrginator.ToUpper() == objSecurity.UserName.Trim().ToUpper()) | (strOrginator.ToUpper() == objSecurity.UserName.Trim().ToUpper()) | (ViewState["UserRole"].ToString().ToUpper() == "MUREO_Admin".ToUpper()))
                            {
                                if (strAppStrStatus.ToUpper() != "Y")
                                {
                                    lnkFinalPSRABackUp.Visible = true;

                                }
                            }
                        }
                        if (ds.Tables[13].Rows[intRowCount]["Function_Name"].ToString() == "Timing Gate Exception")
                        {

                            string strAppStrStatus = null;
                            //strAppStrStatus = objclsEO.GET_EO_Is_Approved(Convert.ToInt32(ViewState["EOID"]), ds.Tables[13].Rows[intRowCount]["Function_Name"], objSecurity.UserName, "Final");
                            if (objEOBA.GET_EO_Is_Approved(Convert.ToInt32(ViewState["EOID"]), ds.Tables[13].Rows[intRowCount]["Function_Name"].ToString(), objSecurity.UserName, "Final", ref paramOut))
                                strAppStrStatus = paramOut[0].Value.ToString();
                            if ((strCoOrginator.ToUpper() == objSecurity.UserName.Trim().ToUpper()) | (strOrginator.ToUpper() == objSecurity.UserName.Trim().ToUpper()) | (ViewState["UserRole"].ToString().ToUpper() == "MUREO_Admin".ToUpper()))
                            {
                                if (strAppStrStatus.ToUpper() != "Y")
                                {
                                    lnkFinalTimingGateBackUp.Visible = true;
                                }
                            }
                        }
                        if (ds.Tables[13].Rows[intRowCount]["Function_Name"].ToString() == "QA")
                        {

                            string strAppStrStatus = null;
                            //strAppStrStatus = objclsEO.GET_EO_Is_Approved(Convert.ToInt32(ViewState["EOID"]), ds.Tables[13].Rows[intRowCount]["Function_Name"], objSecurity.UserName, "Final");
                            if (objEOBA.GET_EO_Is_Approved(Convert.ToInt32(ViewState["EOID"]), ds.Tables[13].Rows[intRowCount]["Function_Name"].ToString(), objSecurity.UserName, "Final", ref paramOut))
                                strAppStrStatus = paramOut[0].Value.ToString();
                            if ((strCoOrginator.ToUpper() == objSecurity.UserName.Trim().ToUpper()) | (strOrginator.ToUpper() == objSecurity.UserName.Trim().ToUpper()) | (ViewState["UserRole"].ToString().ToUpper() == "MUREO_Admin".ToUpper()))
                            {
                                if (strAppStrStatus.ToUpper() != "Y")
                                {
                                    lnkFinalQABackUp.Visible = true;
                                }
                            }
                        }

                        if (ds.Tables[13].Rows[intRowCount]["Function_Name"].ToString() == "Standards Office")
                        {

                            string strAppStrStatus = null;
                            //strAppStrStatus = objclsEO.GET_EO_Is_Approved(Convert.ToInt32(ViewState["EOID"]), ds.Tables[13].Rows[intRowCount]["Function_Name"], objSecurity.UserName, "Final");

                            if (objEOBA.GET_EO_Is_Approved(Convert.ToInt32(ViewState["EOID"]), ds.Tables[13].Rows[intRowCount]["Function_Name"].ToString(), objSecurity.UserName, "Final", ref paramOut))
                                strAppStrStatus = paramOut[0].Value.ToString();
                            if ((strCoOrginator.ToUpper() == objSecurity.UserName.Trim().ToUpper()) | (strOrginator.ToUpper() == objSecurity.UserName.Trim().ToUpper()) | (ViewState["UserRole"].ToString().ToUpper() == "MUREO_Admin".ToUpper()))
                            {
                                if (strAppStrStatus.ToUpper() != "Y")
                                {
                                    lnkStndsOffiBackUp.Visible = true;
                                }
                            }
                        }

                        //Added by David - MUREO PCR : 4 Additional Approvers - Date: 01/03/2012

                        if (ds.Tables[13].Rows[intRowCount]["Function_Name"].ToString() == "Additional approver #1")
                        {

                            string strAppStrStatus = null;
                            //strAppStrStatus = objclsEO.GET_EO_Is_Approved(Convert.ToInt32(ViewState["EOID"]), ds.Tables[13].Rows[intRowCount]["Function_Name"], objSecurity.UserName, "Final");

                            if (objEOBA.GET_EO_Is_Approved(Convert.ToInt32(ViewState["EOID"]), ds.Tables[13].Rows[intRowCount]["Function_Name"].ToString(), objSecurity.UserName, "Final", ref paramOut))
                                strAppStrStatus = paramOut[0].Value.ToString();

                            if ((strCoOrginator.ToUpper() == objSecurity.UserName.Trim().ToUpper()) | (strOrginator.ToUpper() == objSecurity.UserName.Trim().ToUpper()) | (ViewState["UserRole"].ToString().ToUpper() == "MUREO_Admin".ToUpper()))
                            {
                                if (strAppStrStatus.ToUpper() != "Y")
                                {
                                    lnkFinAdditionalApprover1BackUp.Visible = true;
                                }
                            }
                        }

                        if (ds.Tables[13].Rows[intRowCount]["Function_Name"].ToString() == "Additional approver #2")
                        {

                            string strAppStrStatus = null;
                            //strAppStrStatus = objclsEO.GET_EO_Is_Approved(Convert.ToInt32(ViewState["EOID"]), ds.Tables[13].Rows[intRowCount]["Function_Name"], objSecurity.UserName, "Final");

                            if (objEOBA.GET_EO_Is_Approved(Convert.ToInt32(ViewState["EOID"]), ds.Tables[13].Rows[intRowCount]["Function_Name"].ToString(), objSecurity.UserName, "Final", ref paramOut))
                                strAppStrStatus = paramOut[0].Value.ToString();
                            if ((strCoOrginator.ToUpper() == objSecurity.UserName.Trim().ToUpper()) | (strOrginator.ToUpper() == objSecurity.UserName.Trim().ToUpper()) | (ViewState["UserRole"].ToString().ToUpper() == "MUREO_Admin".ToUpper()))
                            {
                                if (strAppStrStatus.ToUpper() != "Y")
                                {
                                    lnkFinAdditionalApprover2BackUp.Visible = true;
                                }
                            }
                        }

                        if (ds.Tables[13].Rows[intRowCount]["Function_Name"].ToString() == "Additional approver #3")
                        {

                            string strAppStrStatus = null;
                            //strAppStrStatus = objclsEO.GET_EO_Is_Approved(Convert.ToInt32(ViewState["EOID"]), ds.Tables[13].Rows[intRowCount]["Function_Name"], objSecurity.UserName, "Final");

                            if (objEOBA.GET_EO_Is_Approved(Convert.ToInt32(ViewState["EOID"]), ds.Tables[13].Rows[intRowCount]["Function_Name"].ToString(), objSecurity.UserName, "Final", ref paramOut))
                                strAppStrStatus = paramOut[0].Value.ToString();
                            if ((strCoOrginator.ToUpper() == objSecurity.UserName.Trim().ToUpper()) | (strOrginator.ToUpper() == objSecurity.UserName.Trim().ToUpper()) | (ViewState["UserRole"].ToString().ToUpper() == "MUREO_Admin".ToUpper()))
                            {
                                if (strAppStrStatus.ToUpper() != "Y")
                                {
                                    lnkFinAdditionalApprover3BackUp.Visible = true;
                                }
                            }
                        }

                        if (ds.Tables[13].Rows[intRowCount]["Function_Name"].ToString() == "Additional approver #4")
                        {

                            string strAppStrStatus = null;
                            //strAppStrStatus = objclsEO.GET_EO_Is_Approved(Convert.ToInt32(ViewState["EOID"]), ds.Tables[13].Rows[intRowCount]["Function_Name"], objSecurity.UserName, "Final");
                            if (objEOBA.GET_EO_Is_Approved(Convert.ToInt32(ViewState["EOID"]), ds.Tables[13].Rows[intRowCount]["Function_Name"].ToString(), objSecurity.UserName, "Final", ref paramOut))
                                strAppStrStatus = paramOut[0].Value.ToString();
                            if ((strCoOrginator.ToUpper() == objSecurity.UserName.Trim().ToUpper()) | (strOrginator.ToUpper() == objSecurity.UserName.Trim().ToUpper()) | (ViewState["UserRole"].ToString().ToUpper() == "MUREO_Admin".ToUpper()))
                            {
                                if (strAppStrStatus.ToUpper() != "Y")
                                {
                                    lnkFinAdditionalApprover4BackUp.Visible = true;
                                }
                            }
                        }

                    }
                }
            }

        }

        public void CarryPrelToFinal()
        {
            DataSet ds = null;
            DataSet dsFinal = null;

            if (objEOBA.GET_EO_Preliminary(Convert.ToInt32(ViewState["EOID"]), ref ds))
            {
                if (objEOBA.GET_EO_Final(Convert.ToInt32(ViewState["EOID"]), ref dsFinal))
                {
                    if ((ds != null))
                    {
                        if (!(ds.Tables.Count == 0))
                        {
                            try
                            {
                                if ((dsFinal != null))
                                {
                                    if (!(dsFinal.Tables.Count == 0))
                                    {
                                        if (dsFinal.Tables[19].Rows.Count == 0)
                                        {
                                            if (!(ds.Tables[18].Rows.Count == 0))
                                            {
                                                lbFinalPackage.SelectedIndex = -1;
                                                int intRowCount = 0;
                                                for (intRowCount = 0; intRowCount <= ds.Tables[18].Rows.Count - 1; intRowCount++)
                                                {
                                                    if ((!object.ReferenceEquals(ds.Tables[18].Rows[intRowCount]["PDI_Packaging_Type"], System.DBNull.Value)))
                                                    {
                                                        if (ds.Tables[18].Rows[intRowCount]["PDI_Packaging_Type"] != "")
                                                        {
                                                            lbFinalPackage.Items[lbFinalPackage.Items.IndexOf(lbFinalPackage.Items.FindByValue(ds.Tables[18].Rows[intRowCount]["PDI_Packaging_Type"].ToString()))].Selected = true;
                                                        }
                                                        else
                                                        {
                                                            lbFinalPackage.SelectedIndex = 0;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        else
                                        {
                                            if (!(dsFinal.Tables[19].Rows.Count == 0))
                                            {
                                                lbFinalPackage.SelectedIndex = -1;
                                                int intRowCount = 0;
                                                for (intRowCount = 0; intRowCount <= dsFinal.Tables[19].Rows.Count - 1; intRowCount++)
                                                {
                                                    if ((!object.ReferenceEquals(dsFinal.Tables[19].Rows[intRowCount]["PDI_Packaging_Type"], System.DBNull.Value)))
                                                    {
                                                        if (dsFinal.Tables[19].Rows[intRowCount]["PDI_Packaging_Type"] != "")
                                                        {
                                                            lbFinalPackage.Items[lbFinalPackage.Items.IndexOf(lbFinalPackage.Items.FindByValue(dsFinal.Tables[19].Rows[intRowCount]["PDI_Packaging_Type"].ToString()))].Selected = true;
                                                        }
                                                        else
                                                        {
                                                            lbFinalPackage.SelectedIndex = 0;
                                                        }
                                                    }
                                                }
                                            }

                                        }

                                        if (dsFinal.Tables[14].Rows.Count == 0)
                                        {
                                            if (!(ds.Tables[14].Rows.Count == 0))
                                            {
                                                lbFinalPackagingInfoDB.SelectedIndex = -1;
                                                int intRowCount = 0;
                                                for (intRowCount = 0; intRowCount <= ds.Tables[14].Rows.Count - 1; intRowCount++)
                                                {
                                                    if ((!object.ReferenceEquals(ds.Tables[14].Rows[intRowCount]["Prod_Pack_Name"], System.DBNull.Value)))
                                                    {
                                                        if (ds.Tables[14].Rows[intRowCount]["Prod_Pack_Name"] != "")
                                                        {
                                                            lbFinalPackagingInfoDB.Items[lbFinalPackagingInfoDB.Items.IndexOf(lbFinalPackagingInfoDB.Items.FindByText(ds.Tables[14].Rows[intRowCount]["Prod_Pack_Name"].ToString()))].Selected = true;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        else
                                        {
                                            lbFinalPackagingInfoDB.SelectedIndex = -1;
                                            int intRowCount = 0;
                                            for (intRowCount = 0; intRowCount <= dsFinal.Tables[14].Rows.Count - 1; intRowCount++)
                                            {
                                                if ((!object.ReferenceEquals(dsFinal.Tables[14].Rows[intRowCount]["Prod_Pack_ID"], System.DBNull.Value)))
                                                {
                                                    if (!(Convert.ToInt32(dsFinal.Tables[14].Rows[intRowCount]["Prod_Pack_ID"]) == 0))
                                                    {
                                                        lbFinalPackagingInfoDB.Items[lbFinalPackagingInfoDB.Items.IndexOf(lbFinalPackagingInfoDB.Items.FindByValue(dsFinal.Tables[14].Rows[intRowCount]["Prod_Pack_ID"].ToString()))].Selected = true;
                                                    }
                                                    else
                                                    {
                                                        lbFinalPackagingInfoDB.SelectedIndex = 0;
                                                    }
                                                }
                                            }

                                        }
                                        if (!(ds.Tables[7].Rows.Count == 0))
                                        {
                                            if ((!object.ReferenceEquals(ds.Tables[7].Rows[0]["Formula_Card_Number"], System.DBNull.Value)))
                                            {
                                                txtFinal.Text = ds.Tables[7].Rows[0]["Formula_Card_Number"].ToString();
                                            }
                                            else
                                            {
                                                txtFinal.Text = string.Empty;
                                            }
                                        }
                                        if (dsFinal.Tables[1].Rows.Count == 0 | string.IsNullOrEmpty(dsFinal.Tables[1].Rows[0]["Current_Packaging"].ToString()))
                                        {
                                            if ((!object.ReferenceEquals(ds.Tables[10].Rows[0]["Current_Packaging"], System.DBNull.Value)))
                                            {
                                                if (ds.Tables[10].Rows[0]["Current_Packaging"].ToString() == "Y")
                                                {
                                                    chkCurPack.Checked = true;
                                                }
                                                else
                                                {
                                                    chkCurPack.Checked = false;
                                                }
                                            }
                                        }
                                        if (dsFinal.Tables[1].Rows.Count == 0 | string.IsNullOrEmpty(dsFinal.Tables[1].Rows[0]["Experimental_Packaging"].ToString()))
                                        {
                                            if ((!object.ReferenceEquals(ds.Tables[10].Rows[0]["Experimental_Packaging"], System.DBNull.Value)))
                                            {
                                                if (ds.Tables[10].Rows[0]["Experimental_Packaging"].ToString() == "Y")
                                                {
                                                    chkExpPack.Checked = true;
                                                }
                                                else
                                                {
                                                    chkExpPack.Checked = false;
                                                }
                                            }
                                        }
                                        if (dsFinal.Tables[1].Rows.Count == 0 | string.IsNullOrEmpty(dsFinal.Tables[1].Rows[0]["Exp_Pack_Clear_Poly"].ToString()))
                                        {
                                            if ((!object.ReferenceEquals(ds.Tables[10].Rows[0]["Exp_Pack_Clear_Poly"], System.DBNull.Value)))
                                            {
                                                if (ds.Tables[10].Rows[0]["Exp_Pack_Clear_Poly"].ToString() == "Y")
                                                {
                                                    chkCurrentPoly.Checked = true;
                                                }
                                                else
                                                {
                                                    chkCurrentPoly.Checked = false;
                                                }
                                            }
                                        }
                                        if (dsFinal.Tables[1].Rows.Count == 0 | string.IsNullOrEmpty(dsFinal.Tables[1].Rows[0]["Exp_Pack_Blank_KDF"].ToString()))
                                        {
                                            if ((!object.ReferenceEquals(ds.Tables[10].Rows[0]["Exp_Pack_Blank_KDF"], System.DBNull.Value)))
                                            {
                                                if (ds.Tables[10].Rows[0]["Exp_Pack_Blank_KDF"].ToString() == "Y")
                                                {
                                                    chkBlankKGF.Checked = true;
                                                }
                                                else
                                                {
                                                    chkBlankKGF.Checked = false;
                                                }
                                            }
                                        }
                                        if (dsFinal.Tables[1].Rows.Count == 0 || Convert.ToInt32(dsFinal.Tables[1].Rows[0]["Prod_Disp_ID"]) == 0)
                                        {
                                            if ((!object.ReferenceEquals(ds.Tables[10].Rows[0]["Prod_Disp_ID"], System.DBNull.Value)))
                                            {
                                                if ((!object.ReferenceEquals(ds.Tables[10].Rows[0]["Prod_Disp_ID"], System.DBNull.Value)))
                                                {
                                                    if (Convert.ToInt32(ds.Tables[10].Rows[0]["Prod_Disp_ID"]) != 0)
                                                    {
                                                        drpFinalProductDispositionDB.SelectedIndex = -1;
                                                        drpFinalProductDispositionDB.Items[drpFinalProductDispositionDB.Items.IndexOf(drpFinalProductDispositionDB.Items.FindByValue(ds.Tables[10].Rows[0]["Prod_Disp_ID"].ToString()))].Selected = true;
                                                    }

                                                }
                                            }
                                        }
                                        else
                                        {
                                            drpFinalProductDispositionDB.SelectedIndex = -1;
                                            drpFinalProductDispositionDB.Items[drpFinalProductDispositionDB.Items.IndexOf(drpFinalProductDispositionDB.Items.FindByValue(dsFinal.Tables[1].Rows[0]["Prod_Disp_ID"].ToString()))].Selected = true;
                                        }
                                        if (dsFinal.Tables[1].Rows.Count == 0 || string.IsNullOrEmpty(dsFinal.Tables[1].Rows[0]["Prod_Disp_Add_Comments"].ToString()))
                                        {
                                            if ((!object.ReferenceEquals(ds.Tables[10].Rows[0]["Prod_Disp_Add_Comments"], System.DBNull.Value)))
                                            {
                                                txtProductDisposition.Text = ds.Tables[10].Rows[0]["Prod_Disp_Add_Comments"].ToString();
                                            }
                                            else
                                            {
                                                txtProductDisposition.Text = string.Empty;
                                            }
                                        }
                                        else
                                        {
                                            txtProductDisposition.Text = dsFinal.Tables[1].Rows[0]["Prod_Disp_Add_Comments"].ToString();
                                        }
                                        if (!(dsFinal.Tables[29].Rows.Count == 0))
                                        {
                                            if ((!object.ReferenceEquals(dsFinal.Tables[29].Rows[0]["EO_Raw_Packing_Material"], System.DBNull.Value)))
                                            {
                                                if (dsFinal.Tables[29].Rows[0]["EO_Raw_Packing_Material"].ToString() == "Y")
                                                {
                                                    rbRawMaterialFinal.Items[0].Selected = true;
                                                    rbRawMaterialFinal.Items[1].Selected = false;
                                                    //  txtCostSheetDiff.Enabled = true
                                                }
                                                else if (dsFinal.Tables[29].Rows[0]["EO_Raw_Packing_Material"].ToString() == "N")
                                                {
                                                    rbRawMaterialFinal.Items[0].Selected = false;
                                                    rbRawMaterialFinal.Items[1].Selected = true;
                                                }
                                            }
                                            else
                                            {
                                                rbRawMaterialFinal.Items[0].Selected = false;
                                                rbRawMaterialFinal.Items[1].Selected = false;
                                            }

                                            if ((!object.ReferenceEquals(dsFinal.Tables[29].Rows[0]["EO_Parent_Rolls"], System.DBNull.Value)))
                                            {
                                                if (dsFinal.Tables[29].Rows[0]["EO_Parent_Rolls"].ToString() == "Y")
                                                {
                                                    rbParentRollsFinal.Items[0].Selected = true;
                                                    rbParentRollsFinal.Items[1].Selected = false;
                                                    //  txtCostSheetDiff.Enabled = true
                                                }
                                                else if (dsFinal.Tables[29].Rows[0]["EO_Parent_Rolls"].ToString() == "N")
                                                {
                                                    rbParentRollsFinal.Items[0].Selected = false;
                                                    rbParentRollsFinal.Items[1].Selected = true;
                                                }
                                            }
                                            else
                                            {
                                                rbParentRollsFinal.Items[0].Selected = false;
                                                rbParentRollsFinal.Items[1].Selected = false;
                                            }

                                            if ((!object.ReferenceEquals(dsFinal.Tables[29].Rows[0]["EO_Intermediate_Material"], System.DBNull.Value)))
                                            {
                                                if (dsFinal.Tables[29].Rows[0]["EO_Intermediate_Material"].ToString() == "Y")
                                                {
                                                    rbInterMaterialsFinal.Items[0].Selected = true;
                                                    rbInterMaterialsFinal.Items[1].Selected = false;
                                                    //  txtCostSheetDiff.Enabled = true
                                                }
                                                else if (dsFinal.Tables[29].Rows[0]["EO_Intermediate_Material"].ToString() == "N")
                                                {
                                                    rbInterMaterialsFinal.Items[0].Selected = false;
                                                    rbInterMaterialsFinal.Items[1].Selected = true;
                                                }
                                            }
                                            else
                                            {
                                                rbInterMaterialsFinal.Items[0].Selected = false;
                                                rbInterMaterialsFinal.Items[1].Selected = false;
                                            }

                                            if ((!object.ReferenceEquals(dsFinal.Tables[29].Rows[0]["EO_Current_Brand"], System.DBNull.Value)))
                                            {
                                                if (dsFinal.Tables[29].Rows[0]["EO_Current_Brand"].ToString() == "Y")
                                                {
                                                    rbShippedFinal.Items[0].Selected = true;
                                                    rbShippedFinal.Items[1].Selected = false;
                                                    //  txtCostSheetDiff.Enabled = true
                                                }
                                                else if (dsFinal.Tables[29].Rows[0]["EO_Current_Brand"].ToString() == "N")
                                                {
                                                    rbShippedFinal.Items[0].Selected = false;
                                                    rbShippedFinal.Items[1].Selected = true;
                                                }
                                            }
                                            else
                                            {
                                                rbShippedFinal.Items[0].Selected = false;
                                                rbShippedFinal.Items[1].Selected = false;
                                            }

                                            if ((!object.ReferenceEquals(dsFinal.Tables[29].Rows[0]["EO_Consumer_Lab_Evaluation"], System.DBNull.Value)))
                                            {
                                                if (dsFinal.Tables[29].Rows[0]["EO_Consumer_Lab_Evaluation"].ToString() == "Y")
                                                {
                                                    rbTestProductedShippedFinal.Items[0].Selected = true;
                                                    rbTestProductedShippedFinal.Items[1].Selected = false;
                                                    //  txtCostSheetDiff.Enabled = true
                                                }
                                                else if (dsFinal.Tables[29].Rows[0]["EO_Consumer_Lab_Evaluation"].ToString() == "N")
                                                {
                                                    rbTestProductedShippedFinal.Items[0].Selected = false;
                                                    rbTestProductedShippedFinal.Items[1].Selected = true;
                                                }
                                            }
                                            else
                                            {
                                                rbTestProductedShippedFinal.Items[0].Selected = false;
                                                rbTestProductedShippedFinal.Items[1].Selected = false;
                                            }


                                            if ((!object.ReferenceEquals(dsFinal.Tables[29].Rows[0]["EO_GCAS"], System.DBNull.Value)))
                                            {
                                                if (dsFinal.Tables[29].Rows[0]["EO_GCAS"].ToString() == "Y")
                                                {
                                                    rbGCASNumberFinal.Items[0].Selected = true;
                                                    rbGCASNumberFinal.Items[1].Selected = false;
                                                    //  txtCostSheetDiff.Enabled = true
                                                }
                                                else if (dsFinal.Tables[29].Rows[0]["EO_GCAS"].ToString() == "N")
                                                {
                                                    rbGCASNumberFinal.Items[0].Selected = false;
                                                    rbGCASNumberFinal.Items[1].Selected = true;
                                                }
                                            }
                                            else
                                            {
                                                rbGCASNumberFinal.Items[0].Selected = false;
                                                rbGCASNumberFinal.Items[1].Selected = false;
                                            }
                                            if (!((object.ReferenceEquals(dsFinal.Tables[29].Rows[0]["Is_Understood_Policy_37"], DBNull.Value)) || (dsFinal.Tables[29].Rows[0]["Is_Understood_Policy_37"] == null)))
                                            {
                                                if (Convert.ToBoolean(dsFinal.Tables[29].Rows[0]["Is_Understood_Policy_37"]) == false)
                                                {
                                                    chkFinalMaterialsBrands.Items[0].Selected = true;
                                                    chkFinalMaterialsBrands.Items[1].Selected = false;
                                                    chkFinalMaterialsBrands.Items[2].Selected = false;
                                                }
                                            }


                                            if (!((object.ReferenceEquals(dsFinal.Tables[29].Rows[0]["Is_Exception_Policy_37"], DBNull.Value)) || (dsFinal.Tables[29].Rows[0]["Is_Exception_Policy_37"] == null)))
                                            {
                                                if (Convert.ToBoolean(dsFinal.Tables[29].Rows[0]["Is_Exception_Policy_37"]) == false)
                                                {
                                                    chkFinalMaterialsBrands.Items[1].Selected = true;
                                                    chkFinalMaterialsBrands.Items[0].Selected = false;
                                                    chkFinalMaterialsBrands.Items[2].Selected = false;
                                                }
                                            }


                                            if (!((object.ReferenceEquals(dsFinal.Tables[29].Rows[0]["Is_EO_Covered_Policy_37"], DBNull.Value)) || (dsFinal.Tables[29].Rows[0]["Is_EO_Covered_Policy_37"] == null)))
                                            {
                                                if (Convert.ToBoolean(dsFinal.Tables[29].Rows[0]["Is_EO_Covered_Policy_37"]) == false)
                                                {
                                                    chkFinalMaterialsBrands.Items[2].Selected = true;
                                                    chkFinalMaterialsBrands.Items[0].Selected = false;
                                                    chkFinalMaterialsBrands.Items[1].Selected = false;

                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            catch (Exception ex)
                            {
                            }


                            try
                            {

                                if (!(dsFinal.Tables[30].Rows.Count == 0))
                                {
                                    if ((!object.ReferenceEquals(dsFinal.Tables[30].Rows[0]["Is_Product_Go_To_Customers"], System.DBNull.Value)))
                                    {
                                        if (dsFinal.Tables[30].Rows[0]["Is_Product_Go_To_Customers"].ToString() == "Y")
                                        {
                                            rblFinalProductConsumerOption.Items[0].Selected = true;
                                            rblFinalProductConsumerOption.Items[1].Selected = false;
                                            //  txtCostSheetDiff.Enabled = true
                                        }
                                        else if (dsFinal.Tables[30].Rows[0]["Is_Product_Go_To_Customers"].ToString() == "N")
                                        {
                                            rblFinalProductConsumerOption.Items[0].Selected = false;
                                            rblFinalProductConsumerOption.Items[1].Selected = true;
                                        }
                                    }
                                    if ((!object.ReferenceEquals(dsFinal.Tables[30].Rows[0]["Is_Using_Approved_FC_R_ATS"], System.DBNull.Value)))
                                    {
                                        if (dsFinal.Tables[30].Rows[0]["Is_Using_Approved_FC_R_ATS"].ToString() == "Y")
                                        {
                                            rblFinalProductApprovedOption.Items[0].Selected = true;
                                            rblFinalProductApprovedOption.Items[1].Selected = false;
                                            //  txtCostSheetDiff.Enabled = true
                                        }
                                        else if (dsFinal.Tables[30].Rows[0]["Is_Using_Approved_FC_R_ATS"].ToString() == "N")
                                        {
                                            rblFinalProductApprovedOption.Items[0].Selected = false;
                                            rblFinalProductApprovedOption.Items[1].Selected = true;
                                        }
                                    }
                                }

                                if (!(dsFinal.Tables[30].Rows.Count == 0))
                                {
                                    if ((!object.ReferenceEquals(dsFinal.Tables[30].Rows[0]["Is_Approved_At_Level"], System.DBNull.Value)))
                                    {
                                        if (dsFinal.Tables[30].Rows[0]["Is_Approved_At_Level"].ToString() == "Y")
                                        {
                                            rblFinalRawMaterialsQ1.Items[0].Selected = true;
                                            rblFinalRawMaterialsQ1.Items[1].Selected = false;
                                            //  txtCostSheetDiff.Enabled = true
                                        }
                                        else if (dsFinal.Tables[30].Rows[0]["Is_Approved_At_Level"].ToString() == "N")
                                        {
                                            rblFinalRawMaterialsQ1.Items[0].Selected = false;
                                            rblFinalRawMaterialsQ1.Items[1].Selected = true;
                                        }
                                    }
                                }

                                if (((rblFinalProductConsumerOption.Items[0].Selected == true) & (rblFinalProductApprovedOption.Items[1].Selected == true)))
                                {
                                    tblPSRAFinal2.Style.Add("display", "block");

                                }
                                else
                                {
                                    rblFinalRawMaterialsQ1.ClearSelection();
                                    rblFinalRawMaterialsQ2.ClearSelection();
                                    rblFinalRawMaterialsQ3.ClearSelection();
                                    rblFinalRawMaterialsQ4.ClearSelection();
                                    tblPSRAFinal2.Style.Add("display", "none");

                                }

                                if (!(dsFinal.Tables[30].Rows.Count == 0))
                                {
                                    if ((!object.ReferenceEquals(dsFinal.Tables[30].Rows[0]["Is_Approved_For_Region"], System.DBNull.Value)))
                                    {
                                        if (dsFinal.Tables[30].Rows[0]["Is_Approved_For_Region"].ToString() == "Y")
                                        {
                                            rblFinalRawMaterialsQ2.Items[0].Selected = true;
                                            rblFinalRawMaterialsQ2.Items[1].Selected = false;
                                            //  txtCostSheetDiff.Enabled = true
                                        }
                                        else if (dsFinal.Tables[30].Rows[0]["Is_Approved_For_Region"].ToString() == "N")
                                        {
                                            rblFinalRawMaterialsQ2.Items[0].Selected = false;
                                            rblFinalRawMaterialsQ2.Items[1].Selected = true;
                                        }
                                    }
                                }

                                if (!(dsFinal.Tables[30].Rows.Count == 0))
                                {
                                    if ((!object.ReferenceEquals(dsFinal.Tables[30].Rows[0]["Is_Approved_For_Application"], System.DBNull.Value)))
                                    {
                                        if (dsFinal.Tables[30].Rows[0]["Is_Approved_For_Application"].ToString() == "Y")
                                        {
                                            rblFinalRawMaterialsQ3.Items[0].Selected = true;
                                            rblFinalRawMaterialsQ3.Items[1].Selected = false;
                                            //  txtCostSheetDiff.Enabled = true
                                        }
                                        else if (dsFinal.Tables[30].Rows[0]["Is_Approved_For_Application"].ToString() == "N")
                                        {
                                            rblFinalRawMaterialsQ3.Items[0].Selected = false;
                                            rblFinalRawMaterialsQ3.Items[1].Selected = true;
                                        }
                                    }
                                }


                                if (!(dsFinal.Tables[30].Rows.Count == 0))
                                {
                                    if ((!object.ReferenceEquals(dsFinal.Tables[30].Rows[0]["Is_Approved_At_Prev_Application_Rate"], System.DBNull.Value)))
                                    {
                                        if (dsFinal.Tables[30].Rows[0]["Is_Approved_At_Prev_Application_Rate"].ToString() == "Y")
                                        {
                                            rblFinalRawMaterialsQ4.Items[0].Selected = true;
                                            rblFinalRawMaterialsQ4.Items[1].Selected = false;
                                            //  txtCostSheetDiff.Enabled = true
                                        }
                                        else if (dsFinal.Tables[30].Rows[0]["Is_Approved_At_Prev_Application_Rate"].ToString() == "N")
                                        {
                                            rblFinalRawMaterialsQ4.Items[0].Selected = false;
                                            rblFinalRawMaterialsQ4.Items[1].Selected = true;
                                        }
                                    }
                                }


                            }
                            catch (Exception ex)
                            {
                            }
                            try
                            {
                                if ((dsFinal != null))
                                {
                                    if (!(dsFinal.Tables.Count == 0))
                                    {
                                        if (dsFinal.Tables[1].Rows.Count == 0 || string.IsNullOrEmpty(dsFinal.Tables[1].Rows[0]["Pallet_Patter_SKU"].ToString()))
                                        {
                                            if ((!object.ReferenceEquals(ds.Tables[10].Rows[0]["Pallet_Patter_SKU"], System.DBNull.Value)))
                                            {
                                                if (ds.Tables[10].Rows[0]["Pallet_Patter_SKU"].ToString() == "Y")
                                                {
                                                    rbUniqPallet.Items[0].Selected = true;
                                                    rbUniqPallet.Items[1].Selected = false;
                                                }
                                                else if (ds.Tables[10].Rows[0]["Pallet_Patter_SKU"].ToString() == "N")
                                                {
                                                    rbUniqPallet.Items[0].Selected = false;
                                                    rbUniqPallet.Items[1].Selected = true;
                                                }
                                                else
                                                {
                                                    rbUniqPallet.Items[0].Selected = false;
                                                    rbUniqPallet.Items[1].Selected = false;
                                                }
                                            }
                                            else
                                            {
                                                rbUniqPallet.Items[0].Selected = false;
                                                rbUniqPallet.Items[1].Selected = false;
                                            }
                                        }
                                        else
                                        {
                                            if ((!object.ReferenceEquals(dsFinal.Tables[1].Rows[0]["Pallet_Patter_SKU"], System.DBNull.Value)))
                                            {
                                                if (dsFinal.Tables[1].Rows[0]["Pallet_Patter_SKU"].ToString() == "Y")
                                                {
                                                    rbUniqPallet.Items[0].Selected = true;
                                                    rbUniqPallet.Items[1].Selected = false;
                                                }
                                                else if (dsFinal.Tables[1].Rows[0]["Pallet_Patter_SKU"].ToString() == "N")
                                                {
                                                    rbUniqPallet.Items[0].Selected = false;
                                                    rbUniqPallet.Items[1].Selected = true;
                                                }
                                                else
                                                {
                                                    rbUniqPallet.Items[0].Selected = false;
                                                    rbUniqPallet.Items[1].Selected = false;
                                                }
                                            }
                                            else
                                            {
                                                rbUniqPallet.Items[0].Selected = false;
                                                rbUniqPallet.Items[1].Selected = false;
                                            }
                                        }
                                    }
                                }
                            }
                            catch (Exception ex)
                            {
                            }

                            //changed for making stack/ship radio button to check box on 12/03/08
                            try
                            {
                                if ((dsFinal != null))
                                {
                                    if (!(dsFinal.Tables.Count == 0))
                                    {
                                        if (dsFinal.Tables[1].Rows.Count == 0 || object.ReferenceEquals(dsFinal.Tables[1].Rows[0]["Stack_Testing"], System.DBNull.Value))
                                        {
                                            if (chkStackShipTesting.Items[0].Selected == true)
                                            {
                                                chkFinalStackShip.Items[0].Selected = true;
                                            }
                                            else
                                            {
                                                chkFinalStackShip.Items[0].Selected = false;
                                            }
                                        }
                                        else
                                        {
                                            if (dsFinal.Tables[1].Rows[0]["Stack_Testing"].ToString() == "Y")
                                            {
                                                chkFinalStackShip.Items[0].Selected = true;
                                            }
                                            else
                                            {
                                                chkFinalStackShip.Items[0].Selected = false;
                                            }
                                        }
                                    }
                                }

                            }
                            catch (Exception ex)
                            {
                            }

                            try
                            {
                                if ((dsFinal != null))
                                {
                                    if (!(dsFinal.Tables.Count == 0))
                                    {
                                        if (dsFinal.Tables[1].Rows.Count == 0 || object.ReferenceEquals(dsFinal.Tables[1].Rows[0]["Ship_Testing"], System.DBNull.Value))
                                        {
                                            if (chkStackShipTesting.Items[1].Selected == true)
                                            {
                                                chkFinalStackShip.Items[1].Selected = true;
                                            }
                                            else
                                            {
                                                chkFinalStackShip.Items[1].Selected = false;
                                            }
                                        }
                                        else
                                        {
                                            if (dsFinal.Tables[1].Rows[0]["Ship_Testing"].ToString() == "N")
                                            {
                                                chkFinalStackShip.Items[1].Selected = false;
                                            }
                                            else
                                            {
                                                chkFinalStackShip.Items[1].Selected = true;
                                            }
                                        }
                                    }
                                }
                            }
                            catch (Exception ex)
                            {
                            }
                            try
                            {
                                if ((dsFinal != null))
                                {
                                    if (!(dsFinal.Tables.Count == 0))
                                    {
                                        if (dsFinal.Tables[1].Rows.Count == 0 || Convert.ToInt32(dsFinal.Tables[1].Rows[0]["Material_Disposition_ID"]) == 0)
                                        {
                                            if ((!object.ReferenceEquals(ds.Tables[10].Rows[0]["Material_Disposition_ID"], System.DBNull.Value)))
                                            {
                                                if ((!object.ReferenceEquals(ds.Tables[10].Rows[0]["Material_Disposition_ID"], System.DBNull.Value)))
                                                {
                                                    if (Convert.ToInt32(ds.Tables[10].Rows[0]["Material_Disposition_ID"]) != 0)
                                                    {
                                                        drpFinalMaterialDispositionDBFinal.SelectedIndex = -1;
                                                        drpFinalMaterialDispositionDBFinal.Items[drpFinalMaterialDispositionDBFinal.Items.IndexOf(drpFinalMaterialDispositionDBFinal.Items.FindByValue(ds.Tables[10].Rows[0]["Material_Disposition_ID"].ToString()))].Selected = true;
                                                    }
                                                }
                                            }
                                        }
                                        else
                                        {
                                            drpFinalMaterialDispositionDBFinal.SelectedIndex = -1;
                                            drpFinalMaterialDispositionDBFinal.Items[drpFinalMaterialDispositionDBFinal.Items.IndexOf(drpFinalMaterialDispositionDBFinal.Items.FindByValue(dsFinal.Tables[1].Rows[0]["Material_Disposition_ID"].ToString()))].Selected = true;
                                        }
                                    }
                                }
                            }
                            catch (Exception ex)
                            {
                            }

                            try
                            {
                                if ((dsFinal != null))
                                {
                                    if (!(dsFinal.Tables.Count == 0))
                                    {
                                        if (dsFinal.Tables[1].Rows.Count == 0 || string.IsNullOrEmpty(dsFinal.Tables[1].Rows[0]["Mat_Disp_Add_Comments"].ToString()))
                                        {
                                            if ((!object.ReferenceEquals(ds.Tables[10].Rows[0]["Mat_Disp_Add_Comments"], System.DBNull.Value)))
                                            {
                                                txtMaterialDisposition.Text = ds.Tables[10].Rows[0]["Mat_Disp_Add_Comments"].ToString();
                                            }
                                            else
                                            {
                                                txtMaterialDisposition.Text = string.Empty;
                                            }
                                        }
                                        else
                                        {
                                            txtMaterialDisposition.Text = dsFinal.Tables[1].Rows[0]["Mat_Disp_Add_Comments"].ToString();
                                        }
                                    }
                                }
                            }
                            catch (Exception ex)
                            {
                            }


                            try
                            {
                                if ((dsFinal != null))
                                {
                                    if (!(dsFinal.Tables.Count == 0))
                                    {
                                        if (dsFinal.Tables[1].Rows.Count == 0 || string.IsNullOrEmpty(dsFinal.Tables[1].Rows[0]["Broke_Disp_Normal"].ToString()))
                                        {
                                            if ((!object.ReferenceEquals(ds.Tables[10].Rows[0]["Broke_Disp_Normal"], System.DBNull.Value)))
                                            {
                                                if (ds.Tables[10].Rows[0]["Broke_Disp_Normal"].ToString() == "Y")
                                                {
                                                    rbBrokeDisposition.Items[0].Selected = true;
                                                    rbBrokeDisposition.Items[1].Selected = false;
                                                }
                                                else if (ds.Tables[10].Rows[0]["Broke_Disp_Normal"].ToString() == "N")
                                                {
                                                    rbBrokeDisposition.Items[0].Selected = false;
                                                    rbBrokeDisposition.Items[1].Selected = true;
                                                }
                                                else
                                                {
                                                    rbBrokeDisposition.Items[0].Selected = false;
                                                    rbBrokeDisposition.Items[1].Selected = false;
                                                }
                                            }
                                            else
                                            {
                                                rbBrokeDisposition.Items[0].Selected = false;
                                                rbBrokeDisposition.Items[1].Selected = false;
                                            }
                                        }
                                        else
                                        {
                                            if ((!object.ReferenceEquals(dsFinal.Tables[1].Rows[0]["Broke_Disp_Normal"], System.DBNull.Value)))
                                            {
                                                if (dsFinal.Tables[1].Rows[0]["Broke_Disp_Normal"].ToString() == "Y")
                                                {
                                                    rbBrokeDisposition.Items[0].Selected = true;
                                                    rbBrokeDisposition.Items[1].Selected = false;
                                                }
                                                else if (dsFinal.Tables[1].Rows[0]["Broke_Disp_Normal"].ToString() == "N")
                                                {
                                                    rbBrokeDisposition.Items[0].Selected = false;
                                                    rbBrokeDisposition.Items[1].Selected = true;
                                                }
                                                else
                                                {
                                                    rbBrokeDisposition.Items[0].Selected = false;
                                                    rbBrokeDisposition.Items[1].Selected = false;
                                                }
                                            }
                                            else
                                            {
                                                rbBrokeDisposition.Items[0].Selected = false;
                                                rbBrokeDisposition.Items[1].Selected = false;
                                            }
                                        }
                                    }
                                }
                            }
                            catch (Exception ex)
                            {
                            }

                            try
                            {
                                if ((dsFinal != null))
                                {
                                    if (!(dsFinal.Tables.Count == 0))
                                    {
                                        if (dsFinal.Tables[1].Rows.Count == 0 || string.IsNullOrEmpty(dsFinal.Tables[1].Rows[0]["Printer_Broke"].ToString()))
                                        {
                                            if ((!object.ReferenceEquals(ds.Tables[10].Rows[0]["Printer_Broke"], System.DBNull.Value)))
                                            {
                                                if (ds.Tables[10].Rows[0]["Printer_Broke"].ToString() == "Y")
                                                {
                                                    rbPrintBrokeFinal.Items[0].Selected = true;
                                                    rbPrintBrokeFinal.Items[1].Selected = false;
                                                }
                                                else if (ds.Tables[10].Rows[0]["Printer_Broke"].ToString() == "N")
                                                {
                                                    rbPrintBrokeFinal.Items[0].Selected = false;
                                                    rbPrintBrokeFinal.Items[1].Selected = true;
                                                }
                                                else
                                                {
                                                    rbPrintBrokeFinal.Items[0].Selected = false;
                                                    rbPrintBrokeFinal.Items[1].Selected = false;
                                                }
                                            }
                                            else
                                            {
                                                rbPrintBrokeFinal.Items[0].Selected = false;
                                                rbPrintBrokeFinal.Items[1].Selected = false;
                                            }
                                        }
                                        else
                                        {
                                            if ((!object.ReferenceEquals(dsFinal.Tables[1].Rows[0]["Printer_Broke"], System.DBNull.Value)))
                                            {
                                                if (dsFinal.Tables[1].Rows[0]["Printer_Broke"].ToString() == "Y")
                                                {
                                                    rbPrintBrokeFinal.Items[0].Selected = true;
                                                    rbPrintBrokeFinal.Items[1].Selected = false;
                                                }
                                                else if (dsFinal.Tables[1].Rows[0]["Printer_Broke"].ToString() == "N")
                                                {
                                                    rbPrintBrokeFinal.Items[0].Selected = false;
                                                    rbPrintBrokeFinal.Items[1].Selected = true;
                                                }
                                                else
                                                {
                                                    rbPrintBrokeFinal.Items[0].Selected = false;
                                                    rbPrintBrokeFinal.Items[1].Selected = false;
                                                }
                                            }
                                            else
                                            {
                                                rbPrintBrokeFinal.Items[0].Selected = false;
                                                rbPrintBrokeFinal.Items[1].Selected = false;
                                            }
                                        }
                                    }
                                }
                            }
                            catch (Exception ex)
                            {
                            }

                            try
                            {
                                if ((dsFinal != null))
                                {
                                    if (!(dsFinal.Tables.Count == 0))
                                    {
                                        if (dsFinal.Tables[1].Rows.Count == 0 || string.IsNullOrEmpty(dsFinal.Tables[1].Rows[0]["Ink_Coverage"].ToString()))
                                        {
                                            if ((!object.ReferenceEquals(ds.Tables[10].Rows[0]["Ink_Coverage"], System.DBNull.Value)))
                                            {
                                                if (ds.Tables[10].Rows[0]["Ink_Coverage"].ToString() == "Y")
                                                {
                                                    rbPrintedBrokeInk.Items[0].Selected = true;
                                                    rbPrintedBrokeInk.Items[1].Selected = false;
                                                }
                                                else if (ds.Tables[10].Rows[0]["Ink_Coverage"].ToString() == "N")
                                                {
                                                    rbPrintedBrokeInk.Items[0].Selected = false;
                                                    rbPrintedBrokeInk.Items[1].Selected = true;
                                                }
                                                else
                                                {
                                                    rbPrintedBrokeInk.Items[0].Selected = false;
                                                    rbPrintedBrokeInk.Items[1].Selected = false;
                                                }
                                            }
                                            else
                                            {
                                                rbPrintedBrokeInk.Items[0].Selected = false;
                                                rbPrintedBrokeInk.Items[1].Selected = false;
                                            }
                                        }
                                        else
                                        {
                                            if ((!object.ReferenceEquals(dsFinal.Tables[1].Rows[0]["Ink_Coverage"], System.DBNull.Value)))
                                            {
                                                if (dsFinal.Tables[1].Rows[0]["Ink_Coverage"].ToString() == "Y")
                                                {
                                                    rbPrintedBrokeInk.Items[0].Selected = true;
                                                    rbPrintedBrokeInk.Items[1].Selected = false;
                                                }
                                                else if (ds.Tables[1].Rows[0]["Ink_Coverage"].ToString() == "N")
                                                {
                                                    rbPrintedBrokeInk.Items[0].Selected = false;
                                                    rbPrintedBrokeInk.Items[1].Selected = true;
                                                }
                                                else
                                                {
                                                    rbPrintedBrokeInk.Items[0].Selected = false;
                                                    rbPrintedBrokeInk.Items[1].Selected = false;
                                                }
                                            }
                                            else
                                            {
                                                rbPrintedBrokeInk.Items[0].Selected = false;
                                                rbPrintedBrokeInk.Items[1].Selected = false;
                                            }
                                        }
                                    }
                                }
                            }
                            catch (Exception ex)
                            {
                            }
                        }

                        try
                        {
                            if ((dsFinal != null))
                            {
                                if (!(dsFinal.Tables.Count == 0))
                                {
                                    if (dsFinal.Tables[1].Rows.Count == 0 || string.IsNullOrEmpty(dsFinal.Tables[1].Rows[0]["Mat_Disp_Add_Comments"].ToString()))
                                    {
                                        if ((!object.ReferenceEquals(ds.Tables[10].Rows[0]["Mat_Disp_Add_Comments"], System.DBNull.Value)))
                                        {
                                            txtMaterialDisposition.Text = ds.Tables[10].Rows[0]["Mat_Disp_Add_Comments"].ToString();
                                        }
                                        else
                                        {
                                            txtMaterialDisposition.Text = string.Empty;
                                        }
                                    }
                                    else
                                    {
                                        txtMaterialDisposition.Text = dsFinal.Tables[1].Rows[0]["Mat_Disp_Add_Comments"].ToString();
                                    }
                                }
                            }
                        }
                        catch (Exception ex)
                        {
                        }
                    }
                }
            }



            for (int intchkFinalMaterialsBrands = 0; intchkFinalMaterialsBrands <= chkFinalMaterialsBrands.Items.Count - 1; intchkFinalMaterialsBrands++)
            {
                if (chkFinalMaterialsBrands.Items[intchkFinalMaterialsBrands].Selected == true)
                {
                    //Page.RegisterStartupScript("js", "<script>FinalHandleOnCheck();</script>");
                    ScriptManager.RegisterStartupScript(Page, Page.GetType(), Guid.NewGuid().ToString(), "FinalHandleOnCheck();", true);
                    break; // TODO: might not be correct. Was : Exit For
                }
            }
        }

        public void CarryApprovalDetais()
        {
            DataSet ds = null;

            if (objEOBA.GET_EO_Preliminary(Convert.ToInt32(ViewState["EOID"]), ref ds))
            {
                try
                {
                    if (!(ds.Tables[12].Rows.Count == 0))
                    {
                        int intRowCount = 0;
                        for (intRowCount = 0; intRowCount <= ds.Tables[12].Rows.Count - 1; intRowCount++)
                        {
                            //If ds.Tables[12).Rows(intRowCount).Item("Function_Name") Is System.DBNull.Value Or Not ds.Tables[12).Rows(intRowCount).Item("Function_Name") = "" Then
                            if ((!object.ReferenceEquals(ds.Tables[12].Rows[intRowCount]["Function_Name"], System.DBNull.Value)))
                            {
                                if (ds.Tables[12].Rows[intRowCount]["Function_Name"].ToString() == "Budget Center")
                                {
                                    //If Not ds.Tables[12).Rows(intRowCount).Item("Approver_Name") Is System.DBNull.Value Or Not ds.Tables[12).Rows(intRowCount).Item("Approver_Name") = "" Then
                                    if ((!object.ReferenceEquals(ds.Tables[12].Rows[intRowCount]["Approver_Name"], System.DBNull.Value)))
                                    {
                                        if (string.IsNullOrEmpty(txtBudgetOwnerFinal.Text))
                                        {
                                            txtBudgetOwnerFinal.Text = ds.Tables[12].Rows[intRowCount]["Approver_Name"].ToString();
                                        }
                                    }
                                }

                                if (ds.Tables[12].Rows[intRowCount]["Function_Name"].ToString() == "GBU HS&E Resource")
                                {
                                    //If Not ds.Tables[12).Rows(intRowCount).Item("Approver_Name") Is System.DBNull.Value Or Not ds.Tables[12).Rows(intRowCount).Item("Approver_Name") = "" Then
                                    if ((!object.ReferenceEquals(ds.Tables[12].Rows[intRowCount]["Approver_Name"], System.DBNull.Value)))
                                    {
                                        if (string.IsNullOrEmpty(txtGBUHSEFinal.Text))
                                        {
                                            txtGBUHSEFinal.Text = ds.Tables[12].Rows[intRowCount]["Approver_Name"].ToString();
                                        }
                                    }
                                }

                                if (ds.Tables[12].Rows[intRowCount]["Function_Name"].ToString() == "Site HS&E Resource")
                                {
                                    //If Not ds.Tables[12).Rows(intRowCount).Item("Approver_Name") Is System.DBNull.Value Or Not ds.Tables[12).Rows(intRowCount).Item("Approver_Name") = "" Then
                                    if ((!object.ReferenceEquals(ds.Tables[12].Rows[intRowCount]["Approver_Name"], System.DBNull.Value)))
                                    {
                                        if (string.IsNullOrEmpty(txtSiteHSEFinal.Text))
                                        {
                                            txtSiteHSEFinal.Text = ds.Tables[12].Rows[intRowCount]["Approver_Name"].ToString();
                                        }
                                    }
                                }

                                if (ds.Tables[12].Rows[intRowCount]["Function_Name"].ToString() == "Site Contact")
                                {
                                    //If Not ds.Tables[12).Rows(intRowCount).Item("Approver_Name") Is System.DBNull.Value Or Not ds.Tables[12).Rows(intRowCount).Item("Approver_Name") = "" Then
                                    if ((!object.ReferenceEquals(ds.Tables[12].Rows[intRowCount]["Approver_Name"], System.DBNull.Value)))
                                    {
                                        if (string.IsNullOrEmpty(txtSiteContactFinal.Text))
                                        {
                                            txtSiteContactFinal.Text = ds.Tables[12].Rows[intRowCount]["Approver_Name"].ToString();
                                        }
                                    }
                                }

                                if (ds.Tables[12].Rows[intRowCount]["Function_Name"].ToString() == "Site Planning")
                                {
                                    //If Not ds.Tables[12).Rows(intRowCount).Item("Approver_Name") Is System.DBNull.Value Or Not ds.Tables[12).Rows(intRowCount).Item("Approver_Name") = "" Then
                                    if ((!object.ReferenceEquals(ds.Tables[12].Rows[intRowCount]["Approver_Name"], System.DBNull.Value)))
                                    {
                                        if (string.IsNullOrEmpty(txtSitePlanFinal.Text))
                                        {
                                            txtSitePlanFinal.Text = ds.Tables[12].Rows[intRowCount]["Approver_Name"].ToString();
                                        }
                                    }
                                }

                                if (ds.Tables[12].Rows[intRowCount]["Function_Name"].ToString() == "SAP Cost Center Coordinator")
                                {
                                    //If Not ds.Tables[12).Rows(intRowCount).Item("Approver_Name") Is System.DBNull.Value Or Not ds.Tables[12).Rows(intRowCount).Item("Approver_Name") = "" Then
                                    if ((!object.ReferenceEquals(ds.Tables[12].Rows[intRowCount]["Approver_Name"], System.DBNull.Value)))
                                    {
                                        if (string.IsNullOrEmpty(txtSAPCostCenter.Text))
                                        {
                                            txtSAPCostCenter.Text = ds.Tables[12].Rows[intRowCount]["Approver_Name"].ToString();
                                        }
                                    }
                                }


                                if (ds.Tables[12].Rows[intRowCount]["Function_Name"].ToString() == "SMART Clearance")
                                {
                                    //If Not ds.Tables[12).Rows(intRowCount).Item("Approver_Name") Is System.DBNull.Value Or Not ds.Tables[12).Rows(intRowCount).Item("Approver_Name") = "" Then
                                    if ((!object.ReferenceEquals(ds.Tables[12].Rows[intRowCount]["Approver_Name"], System.DBNull.Value)))
                                    {
                                        if (string.IsNullOrEmpty(txtSMARTClearanceFinal.Text))
                                        {
                                            txtSMARTClearanceFinal.Text = ds.Tables[12].Rows[intRowCount]["Approver_Name"].ToString();
                                        }
                                    }
                                }

                                if (ds.Tables[12].Rows[intRowCount]["Function_Name"].ToString() == "Timing Gate Exception")
                                {
                                    //If Not ds.Tables[12).Rows(intRowCount).Item("Approver_Name") Is System.DBNull.Value Or Not ds.Tables[12).Rows(intRowCount).Item("Approver_Name") = "" Then
                                    if ((!object.ReferenceEquals(ds.Tables[12].Rows[intRowCount]["Approver_Name"], System.DBNull.Value)))
                                    {
                                        if (string.IsNullOrEmpty(txtFinalTimingGate.Text))
                                        {
                                            txtFinalTimingGate.Text = ds.Tables[12].Rows[intRowCount]["Approver_Name"].ToString();
                                        }
                                    }
                                }

                                if (ds.Tables[12].Rows[intRowCount]["Function_Name"].ToString() == "Standards Office")
                                {
                                    //If Not ds.Tables[12).Rows(intRowCount).Item("Approver_Name") Is System.DBNull.Value Or Not ds.Tables[12).Rows(intRowCount).Item("Approver_Name") = "" Then
                                    if ((!object.ReferenceEquals(ds.Tables[12].Rows[intRowCount]["Approver_Name"], System.DBNull.Value)))
                                    {
                                        if (string.IsNullOrEmpty(txtFinalStandardsOffice.Text))
                                        {
                                            txtFinalStandardsOffice.Text = ds.Tables[12].Rows[intRowCount]["Approver_Name"].ToString();
                                        }
                                    }
                                }


                                //Added by David - MUREO PCR : 4 Additional Approvers - Date: 01/03/2012
                                if (ds.Tables[12].Rows[intRowCount]["Function_Name"].ToString() == "Additional approver #1")
                                {
                                    if ((!object.ReferenceEquals(ds.Tables[12].Rows[intRowCount]["Approver_Name"], System.DBNull.Value)))
                                    {
                                        if (string.IsNullOrEmpty(txtFinalAdditionalApprover1.Text))
                                        {
                                            txtFinalAdditionalApprover1.Text = ds.Tables[12].Rows[intRowCount]["Approver_Name"].ToString();
                                        }
                                    }
                                }


                                if (ds.Tables[12].Rows[intRowCount]["Function_Name"].ToString() == "Additional approver #2")
                                {
                                    if ((!object.ReferenceEquals(ds.Tables[12].Rows[intRowCount]["Approver_Name"], System.DBNull.Value)))
                                    {
                                        if (string.IsNullOrEmpty(txtFinalAdditionalApprover2.Text))
                                        {
                                            txtFinalAdditionalApprover2.Text = ds.Tables[12].Rows[intRowCount]["Approver_Name"].ToString();
                                        }
                                    }
                                }

                                if (ds.Tables[12].Rows[intRowCount]["Function_Name"].ToString() == "Additional approver #3")
                                {
                                    if ((!object.ReferenceEquals(ds.Tables[12].Rows[intRowCount]["Approver_Name"], System.DBNull.Value)))
                                    {
                                        if (string.IsNullOrEmpty(txtFinalAdditionalApprover3.Text))
                                        {
                                            txtFinalAdditionalApprover3.Text = ds.Tables[12].Rows[intRowCount]["Approver_Name"].ToString();
                                        }
                                    }
                                }

                                if (ds.Tables[12].Rows[intRowCount]["Function_Name"].ToString() == "Additional approver #4")
                                {
                                    if ((!object.ReferenceEquals(ds.Tables[12].Rows[intRowCount]["Approver_Name"], System.DBNull.Value)))
                                    {
                                        if (string.IsNullOrEmpty(txtFinalAdditionalApprover4.Text))
                                        {
                                            txtFinalAdditionalApprover4.Text = ds.Tables[12].Rows[intRowCount]["Approver_Name"].ToString();
                                        }
                                    }
                                }


                            }
                        }
                    }

                }

                catch (Exception ex)
                {
                }
            }
        }

        public void Mandatory_Pre_lock()
        {
            btnTabPreliminary.ImageUrl = "../Images/preliminary-over.gif";
            btnTabFinal.ImageUrl = "../Images/final-nor.gif";
            btnTabCloseOut.ImageUrl = "../Images/close-out-nor.gif";
            tblTop.Visible = false;
            tblTopReadonly.Visible = true;
            FirstSectionPreliminary.Visible = false;
            TrGeneralPreliminaryRO.Visible = true;
            NewMaterialandBrands.Visible = false;
            NewMaterialandBrandsReadOnly.Visible = true;
            HSandSE.Visible = false;
            HSandSEReadOnly.Visible = true;
            PSandRA.Visible = false;
            PSandRAReadOnly.Visible = true;
            PlanningandBudgetInfo.Visible = false;
            PlanningandBudgetInfoReadOnly.Visible = true;
            ProductionandPackaging.Visible = false;
            ProductionandPackagingReadOnly.Visible = true;
            PackagingandDispositionPreliminary.Visible = false;
            PackagingandDispositionPreliminaryReadOnly.Visible = true;
            PreliminaryApprovals.Visible = false;
            PreliminaryApprovalsReadOnly.Visible = true;
            PreliminaryRevision.Visible = true;

            FinalPackagingandDisposition.Visible = false;
            FinalPackagingandDispositionReadOnly.Visible = false;
            FinalCostSheet.Visible = false;
            FinalCostSheetReadOnly.Visible = false;
            TrFinalQA.Visible = false;
            TrFinalQARO.Visible = false;
            FinalFormulaCardInformation.Visible = false;
            FinalFormulaCardInformationReadOnly.Visible = false;
            FinalTestPlans.Visible = false;
            FinalTestPlansReadOnly.Visible = false;
            LabSamplingPlans.Visible = false;
            LabSamplingPlansReadOnly.Visible = false;
            FinalProductTestFlowMatrix.Visible = false;
            FinalProductTestFlowMatrixReadonly.Visible = false;
            FinalOtherSupportingDoc.Visible = false;
            FinalOtherSupportingDocReadonly.Visible = false;
            FinalApprovals.Visible = false;
            FinalApprovalsReadOnly.Visible = false;
            ViewState["Mandatory_Pre_lock"] = "Lock";

            //For PCRs
            trFinalMaterialsBrandsRadioBefore.Visible = false;
            trFinalMaterialsBrands.Visible = false;
            trFinalMaterialsBrandsRadioAfter.Visible = false;
            trFinalPSRA.Visible = false;
            trFinalMaterialsBrandshead.Visible = false;
            trFinalPSRAhead.Visible = false;

            NewMaterialandBrandsReadOnlyFinal.Visible = false;
            trProdRegulatedProductRAQ2Final.Visible = false;
            PSandRAReadOnlyFinal.Visible = false;

        }

        public void GET_EO_CloseOut_Edit()
        {
            DataSet ds = null;


            if (objEOBA.GET_EO_Closeout(Convert.ToInt32(ViewState["EOID"]), ref ds))
            {
                if ((ds != null))
                {
                    if (!(ds.Tables.Count == 0))
                    {
                        if (!(ds.Tables[0].Rows.Count == 0))
                        {
                            if ((!object.ReferenceEquals(ds.Tables[0].Rows[0]["Lab_NoteBook_Number"], System.DBNull.Value)))
                            {
                                txtCloseLabNoteBook.Text = ds.Tables[0].Rows[0]["Lab_NoteBook_Number"].ToString();
                            }
                            else
                            {
                                txtCloseLabNoteBook.Text = string.Empty;
                            }
                            if ((!object.ReferenceEquals(ds.Tables[0].Rows[0]["Completion_Date"], System.DBNull.Value)))
                            {
                                txtCloseCompletionDate.Text = ds.Tables[0].Rows[0]["Completion_Date"].ToString();
                            }
                            else
                            {
                                txtCloseCompletionDate.Text = string.Empty;
                            }
                        }
                        //Actual Cost Sheet
                        if (!(ds.Tables[1].Rows.Count == 0))
                        {
                            if ((!object.ReferenceEquals(ds.Tables[1].Rows[0]["Total_CostSheet"], System.DBNull.Value)))
                            {
                                txtTotalCostSheetAttach.Text = ds.Tables[1].Rows[0]["Total_CostSheet"].ToString();
                            }
                            else
                            {
                                txtTotalCostSheetAttach.Text = string.Empty;
                            }
                        }
                        if (!(ds.Tables[11].Rows.Count == 0))
                        {
                            lbFinalCostAttach.DataSource = ds.Tables[11].DefaultView;
                            lbFinalCostAttach.DataTextField = "Actual_Cost_Sheet_Attachment_File_Name";
                            lbFinalCostAttach.DataValueField = "Actual_Cost_Sheet_Attach_ID";
                            lbFinalCostAttach.DataBind();
                            dgrdActualCostCloseOut.DataSource = ds.Tables[11].DefaultView;
                            dgrdActualCostCloseOut.DataBind();
                        }
                        if (!(ds.Tables[12].Rows.Count == 0))
                        {
                            lbILR.DataSource = ds.Tables[12].DefaultView;
                            lbILR.DataTextField = "Initial_Learning_Attachment_File_Name";
                            lbILR.DataValueField = "Initial_Learning_Attach_ID";
                            lbILR.DataBind();
                            dgrdILR.DataSource = ds.Tables[12].DefaultView;
                            dgrdILR.DataBind();
                        }
                        if (!(ds.Tables[13].Rows.Count == 0))
                        {
                            lbTestPlanUsedAttach.DataSource = ds.Tables[13].DefaultView;
                            lbTestPlanUsedAttach.DataTextField = "Plans_Used_Attachment_File_Name";
                            lbTestPlanUsedAttach.DataValueField = "Plans_Used_Attach_ID";
                            lbTestPlanUsedAttach.DataBind();
                            dgrdTestPlansCloseOut.DataSource = ds.Tables[13].DefaultView;
                            dgrdTestPlansCloseOut.DataBind();
                        }
                        //Close Out Report
                        if (!(ds.Tables[4].Rows.Count == 0))
                        {
                            if ((!object.ReferenceEquals(ds.Tables[4].Rows[0]["Keyword_1"], System.DBNull.Value)))
                            {
                                txtCloseKeyworkd1.Text = ds.Tables[4].Rows[0]["Keyword_1"].ToString();
                            }
                            else
                            {
                                txtCloseKeyworkd1.Text = string.Empty;
                            }
                            if ((!object.ReferenceEquals(ds.Tables[4].Rows[0]["Keyword_2"], System.DBNull.Value)))
                            {
                                txtCloseKeyworkd2.Text = ds.Tables[4].Rows[0]["Keyword_2"].ToString();
                            }
                            else
                            {
                                txtCloseKeyworkd2.Text = string.Empty;
                            }
                            if ((!object.ReferenceEquals(ds.Tables[4].Rows[0]["Keyword_3"], System.DBNull.Value)))
                            {
                                txtCloseKeyworkd3.Text = ds.Tables[4].Rows[0]["Keyword_3"].ToString();
                            }
                            else
                            {
                                txtCloseKeyworkd3.Text = string.Empty;
                            }
                            if ((!object.ReferenceEquals(ds.Tables[4].Rows[0]["Keyword_4"], System.DBNull.Value)))
                            {
                                txtCloseKeyworkd4.Text = ds.Tables[4].Rows[0]["Keyword_4"].ToString();
                            }
                            else
                            {
                                txtCloseKeyworkd4.Text = string.Empty;
                            }
                            if ((!object.ReferenceEquals(ds.Tables[4].Rows[0]["Keyword_5"], System.DBNull.Value)))
                            {
                                txtCloseKeyworkd5.Text = ds.Tables[4].Rows[0]["Keyword_5"].ToString();
                            }
                            else
                            {
                                txtCloseKeyworkd5.Text = string.Empty;
                            }
                            if ((!object.ReferenceEquals(ds.Tables[4].Rows[0]["Keyword_6"], System.DBNull.Value)))
                            {
                                txtCloseKeyworkd6.Text = ds.Tables[4].Rows[0]["Keyword_6"].ToString();
                            }
                            else
                            {
                                txtCloseKeyworkd6.Text = string.Empty;
                            }

                        }
                        //Close Out Approvals
                        Brand_Plant_EO_Mode_AppGrp_CloseOut();
                        try
                        {
                            if (!(ds.Tables[5].Rows.Count == 0))
                            {
                                if ((!object.ReferenceEquals(ds.Tables[5].Rows[0]["Approval_Group_ID"], System.DBNull.Value)))
                                {
                                    drpCloseApprovalGroup.SelectedIndex = -1;
                                    drpCloseApprovalGroup.Items[drpCloseApprovalGroup.Items.IndexOf(drpCloseApprovalGroup.Items.FindByValue(ds.Tables[5].Rows[0]["Approval_Group_ID"].ToString()))].Selected = true;
                                }
                            }
                        }
                        catch (Exception ex)
                        {
                        }
                        if (!(ds.Tables[5].Rows.Count == 0))
                        {
                            int intRowCount = 0;
                            for (intRowCount = 0; intRowCount <= ds.Tables[5].Rows.Count - 1; intRowCount++)
                            {
                                //If ds.Tables[5).Rows(intRowCount).Item("Function_Name") Is System.DBNull.Value Or Not ds.Tables[5).Rows(intRowCount).Item("Function_Name") = "" Then
                                if ((!object.ReferenceEquals(ds.Tables[5].Rows[intRowCount]["Function_Name"], System.DBNull.Value)))
                                {
                                    if (ds.Tables[5].Rows[intRowCount]["Function_Name"].ToString() == "Site Finance")
                                    {
                                        //If Not ds.Tables[5).Rows(intRowCount).Item("Approver_Name") Is System.DBNull.Value Or Not ds.Tables[5).Rows(intRowCount).Item("Approver_Name") = "" Then
                                        if ((!object.ReferenceEquals(ds.Tables[5].Rows[intRowCount]["Approver_Name"], System.DBNull.Value)))
                                        {
                                            txtCloseSiteFinance.Text = ds.Tables[5].Rows[intRowCount]["Approver_Name"].ToString();
                                        }
                                        else
                                        {
                                            txtCloseSiteFinance.Text = string.Empty;
                                        }
                                    }
                                    if (ds.Tables[5].Rows[intRowCount]["Function_Name"].ToString() == "Budget Center")
                                    {
                                        //If Not ds.Tables[5).Rows(intRowCount).Item("Approver_Name") Is System.DBNull.Value Or Not ds.Tables[5).Rows(intRowCount).Item("Approver_Name") = "" Then
                                        if ((!object.ReferenceEquals(ds.Tables[5].Rows[intRowCount]["Approver_Name"], System.DBNull.Value)))
                                        {
                                            txtCloseBudgetOwner.Text = ds.Tables[5].Rows[intRowCount]["Approver_Name"].ToString();
                                        }
                                        else
                                        {
                                            txtCloseBudgetOwner.Text = string.Empty;
                                        }
                                    }
                                }
                            }
                        }
                        else
                        {
                            //drpCloseApprovalGroup.Items[drpCloseApprovalGroup.Items.IndexOf(drpCloseApprovalGroup.Items.FindByValue(0))].Selected = true
                            txtCloseSiteFinance.Text = string.Empty;
                            txtCloseBudgetOwner.Text = string.Empty;
                        }
                    }
                    if (!(ds.Tables[14].Rows.Count == 0))
                    {
                        lbCOReport.DataSource = ds.Tables[14].DefaultView;
                        lbCOReport.DataTextField = "Closeout_Report_Attachment_File_Name";
                        lbCOReport.DataValueField = "Closeout_Report_Attach_ID";
                        lbCOReport.DataBind();
                        dgrdCOReport.DataSource = ds.Tables[14].DefaultView;
                        dgrdCOReport.DataBind();
                    }
                }
            }
        }

        public void GET_EO_Final_Edit()
        {
            DataSet ds = null;

            if (objEOBA.GET_EO_Final(Convert.ToInt32(ViewState["EOID"]), ref ds))
            {
                if ((ds != null))
                {
                    if (!(ds.Tables.Count == 0))
                    {
                        try
                        {
                            if (!(ds.Tables[19].Rows.Count == 0))
                            {
                                int intRowCount = 0;
                                for (intRowCount = 0; intRowCount <= ds.Tables[19].Rows.Count - 1; intRowCount++)
                                {
                                    if ((!object.ReferenceEquals(ds.Tables[19].Rows[intRowCount]["PDI_Packaging_Type"], System.DBNull.Value)))
                                    {
                                        if (!string.IsNullOrEmpty(ds.Tables[19].Rows[intRowCount]["PDI_Packaging_Type"].ToString()))
                                        {
                                            lbFinalPackage.Items[lbFinalPackage.Items.IndexOf(lbFinalPackage.Items.FindByValue(ds.Tables[19].Rows[intRowCount]["PDI_Packaging_Type"].ToString()))].Selected = true;
                                        }
                                        else
                                        {
                                            lbFinalPackage.SelectedIndex = 0;
                                        }
                                    }
                                }
                            }
                        }
                        catch (Exception ex)
                        {
                        }
                        if (!(ds.Tables[1].Rows.Count == 0))
                        {
                            //Packaging / Disposition Information Final Editing
                            if ((!object.ReferenceEquals(ds.Tables[1].Rows[0]["Current_Packaging"], System.DBNull.Value)))
                            {
                                if (ds.Tables[1].Rows[0]["Current_Packaging"].ToString() == "Y")
                                {
                                    chkCurPack.Checked = true;
                                }
                                else
                                {
                                    chkCurPack.Checked = false;
                                }
                            }
                            else
                            {
                                chkCurPack.Checked = false;
                            }

                            if ((!object.ReferenceEquals(ds.Tables[1].Rows[0]["Experimental_Packaging"], System.DBNull.Value)))
                            {
                                if (ds.Tables[1].Rows[0]["Experimental_Packaging"].ToString() == "Y")
                                {
                                    chkExpPack.Checked = true;
                                }
                                else
                                {
                                    chkExpPack.Checked = false;
                                }
                            }
                            else
                            {
                                chkExpPack.Checked = false;
                            }

                            if ((!object.ReferenceEquals(ds.Tables[1].Rows[0]["Exp_Pack_Clear_Poly"], System.DBNull.Value)))
                            {
                                if (ds.Tables[1].Rows[0]["Exp_Pack_Clear_Poly"].ToString() == "Y")
                                {
                                    chkCurrentPoly.Checked = true;
                                }
                                else
                                {
                                    chkCurrentPoly.Checked = false;
                                }
                            }
                            else
                            {
                                chkCurrentPoly.Checked = false;
                            }

                            if ((!object.ReferenceEquals(ds.Tables[1].Rows[0]["Exp_Pack_Blank_KDF"], System.DBNull.Value)))
                            {
                                if (ds.Tables[1].Rows[0]["Exp_Pack_Blank_KDF"].ToString() == "Y")
                                {
                                    chkBlankKGF.Checked = true;
                                }
                                else
                                {
                                    chkBlankKGF.Checked = false;
                                }
                            }
                            else
                            {
                                chkBlankKGF.Checked = false;
                            }

                            try
                            {
                                drpFinalProductDispositionDB.SelectedIndex = -1;
                                if ((!object.ReferenceEquals(ds.Tables[1].Rows[0]["Prod_Disp_ID"], System.DBNull.Value)))
                                {
                                    if (Convert.ToInt32(ds.Tables[1].Rows[0]["Prod_Disp_ID"]) != 0)
                                    {
                                        drpFinalProductDispositionDB.Items[drpFinalProductDispositionDB.Items.IndexOf(drpFinalProductDispositionDB.Items.FindByValue(ds.Tables[1].Rows[0]["Prod_Disp_ID"].ToString()))].Selected = true;
                                        //drpFinalProductDispositionDB.SelectedItem.Value = ds.Tables[1).Rows(0).Item("Prod_Disp_ID")
                                    }
                                }
                            }
                            catch (Exception ex)
                            {
                            }


                            if ((!object.ReferenceEquals(ds.Tables[1].Rows[0]["Prod_Disp_Add_Comments"], System.DBNull.Value)))
                            {
                                txtProductDisposition.Text = ds.Tables[1].Rows[0]["Prod_Disp_Add_Comments"].ToString();
                            }
                            else
                            {
                                txtProductDisposition.Text = string.Empty;
                            }

                            if ((!object.ReferenceEquals(ds.Tables[1].Rows[0]["Pallet_Patter_SKU"], System.DBNull.Value)))
                            {
                                if (ds.Tables[1].Rows[0]["Pallet_Patter_SKU"].ToString() == "Y")
                                {
                                    rbUniqPallet.Items[0].Selected = true;
                                    rbUniqPallet.Items[1].Selected = false;
                                }
                                else if (ds.Tables[1].Rows[0]["Pallet_Patter_SKU"].ToString() == "N")
                                {
                                    rbUniqPallet.Items[0].Selected = false;
                                    rbUniqPallet.Items[1].Selected = true;
                                }
                                else
                                {
                                    rbUniqPallet.Items[0].Selected = false;
                                    rbUniqPallet.Items[1].Selected = false;
                                }
                            }
                            else
                            {
                                rbUniqPallet.Items[0].Selected = false;
                                rbUniqPallet.Items[1].Selected = false;
                            }

                            //changed for making stack/ship radio button to check box on 12/03/08
                            if ((!object.ReferenceEquals(ds.Tables[1].Rows[0]["Stack_Testing"], System.DBNull.Value)))
                            {
                                if (ds.Tables[1].Rows[0]["Stack_Testing"].ToString() == "Y")
                                {
                                    chkFinalStackShip.Items[0].Selected = true;
                                }
                                else if (ds.Tables[1].Rows[0]["Stack_Testing"].ToString() == "N")
                                {
                                    chkFinalStackShip.Items[0].Selected = false;
                                }
                                else
                                {
                                    chkFinalStackShip.Items[0].Selected = false;
                                }
                            }
                            else
                            {
                                chkFinalStackShip.Items[0].Selected = false;
                            }

                            if ((!object.ReferenceEquals(ds.Tables[1].Rows[0]["Ship_Testing"], System.DBNull.Value)))
                            {
                                if (ds.Tables[1].Rows[0]["Ship_Testing"].ToString() == "Y")
                                {
                                    chkFinalStackShip.Items[1].Selected = true;
                                }
                                else if (ds.Tables[1].Rows[0]["Ship_Testing"].ToString() == "N")
                                {
                                    chkFinalStackShip.Items[1].Selected = false;
                                }
                                else
                                {
                                    chkFinalStackShip.Items[1].Selected = false;
                                }
                            }
                            else
                            {
                                chkFinalStackShip.Items[1].Selected = false;
                            }

                            try
                            {
                                drpFinalMaterialDispositionDBFinal.SelectedIndex = -1;
                                if ((!object.ReferenceEquals(ds.Tables[1].Rows[0]["Material_Disposition_ID"], System.DBNull.Value)))
                                {
                                    if (Convert.ToInt32(ds.Tables[1].Rows[0]["Material_Disposition_ID"]) != 0)
                                    {
                                        drpFinalMaterialDispositionDBFinal.Items[drpFinalMaterialDispositionDBFinal.Items.IndexOf(drpFinalMaterialDispositionDBFinal.Items.FindByValue(ds.Tables[1].Rows[0]["Material_Disposition_ID"].ToString()))].Selected = true;
                                    }
                                }

                            }
                            catch (Exception ex)
                            {
                            }


                            if ((!object.ReferenceEquals(ds.Tables[1].Rows[0]["Mat_Disp_Add_Comments"], System.DBNull.Value)))
                            {
                                txtMaterialDisposition.Text = ds.Tables[1].Rows[0]["Mat_Disp_Add_Comments"].ToString();
                            }
                            else
                            {
                                txtMaterialDisposition.Text = string.Empty;
                            }

                            if ((!object.ReferenceEquals(ds.Tables[1].Rows[0]["Broke_Disp_Normal"], System.DBNull.Value)))
                            {
                                if (ds.Tables[1].Rows[0]["Broke_Disp_Normal"].ToString() == "Y")
                                {
                                    rbBrokeDisposition.Items[0].Selected = true;
                                    rbBrokeDisposition.Items[1].Selected = false;
                                }
                                else if (ds.Tables[1].Rows[0]["Broke_Disp_Normal"].ToString() == "N")
                                {
                                    rbBrokeDisposition.Items[1].Selected = true;
                                    rbBrokeDisposition.Items[0].Selected = false;
                                }
                                else
                                {
                                    rbBrokeDisposition.Items[1].Selected = false;
                                    rbBrokeDisposition.Items[0].Selected = false;
                                }
                            }
                            else
                            {
                                rbBrokeDisposition.Items[1].Selected = false;
                                rbBrokeDisposition.Items[0].Selected = false;
                            }

                            if ((!object.ReferenceEquals(ds.Tables[1].Rows[0]["Printer_Broke"], System.DBNull.Value)))
                            {
                                if (ds.Tables[1].Rows[0]["Printer_Broke"].ToString() == "Y")
                                {
                                    rbPrintBrokeFinal.Items[0].Selected = true;
                                    rbPrintBrokeFinal.Items[1].Selected = false;
                                }
                                else if (ds.Tables[1].Rows[0]["Printer_Broke"].ToString() == "N")
                                {
                                    rbPrintBrokeFinal.Items[0].Selected = false;
                                    rbPrintBrokeFinal.Items[1].Selected = true;
                                }
                                else
                                {
                                    rbPrintBrokeFinal.Items[0].Selected = false;
                                    rbPrintBrokeFinal.Items[1].Selected = false;
                                }
                            }
                            else
                            {
                                rbPrintBrokeFinal.Items[0].Selected = false;
                                rbPrintBrokeFinal.Items[1].Selected = false;
                            }

                            if ((!object.ReferenceEquals(ds.Tables[1].Rows[0]["Ink_Coverage"], System.DBNull.Value)))
                            {
                                if (ds.Tables[1].Rows[0]["Ink_Coverage"].ToString() == "Y")
                                {
                                    rbPrintedBrokeInk.Items[0].Selected = true;
                                    rbPrintedBrokeInk.Items[1].Selected = false;
                                }
                                else if (ds.Tables[1].Rows[0]["Ink_Coverage"].ToString() == "N")
                                {
                                    rbPrintedBrokeInk.Items[0].Selected = false;
                                    rbPrintedBrokeInk.Items[1].Selected = true;
                                }
                                else
                                {
                                    rbPrintedBrokeInk.Items[0].Selected = false;
                                    rbPrintedBrokeInk.Items[1].Selected = false;
                                }
                            }
                            else
                            {
                                rbPrintedBrokeInk.Items[0].Selected = false;
                                rbPrintedBrokeInk.Items[1].Selected = false;
                            }
                        }
                        //Cost Sheet Final Tab Editing
                        if (!(ds.Tables[21].Rows.Count == 0))
                        {
                            lbCostSheetAttach.DataSource = ds.Tables[21].DefaultView;
                            lbCostSheetAttach.DataTextField = "Cost_Sheet_Attachment_File_Name";
                            lbCostSheetAttach.DataValueField = "Cost_Sheet_Attach_ID";
                            lbCostSheetAttach.DataBind();

                            dgrdCostSheetFinal.DataSource = ds.Tables[21].DefaultView;
                            dgrdCostSheetFinal.DataBind();
                        }

                        if (!(ds.Tables[3].Rows.Count == 0))
                        {
                            if ((!object.ReferenceEquals(ds.Tables[3].Rows[0]["Amount_Preliminary_Stage"], System.DBNull.Value)))
                            {
                                txtEstimatedAmount.Text = ds.Tables[3].Rows[0]["Amount_Preliminary_Stage"].ToString();
                            }
                            else
                            {
                                txtEstimatedAmount.Text = string.Empty;
                            }

                            if ((!object.ReferenceEquals(ds.Tables[3].Rows[0]["Total_Cost_Diff"], System.DBNull.Value)))
                            {
                                if (ds.Tables[3].Rows[0]["Total_Cost_Diff"].ToString() == "Y")
                                {
                                    rbCostSheetDiff.Items[0].Selected = true;
                                    rbCostSheetDiff.Items[1].Selected = false;
                                    txtCostSheetDiff.Enabled = true;
                                }
                                else
                                {
                                    rbCostSheetDiff.Items[0].Selected = false;
                                    rbCostSheetDiff.Items[1].Selected = true;
                                }
                            }
                            else
                            {
                                rbCostSheetDiff.Items[0].Selected = false;
                                rbCostSheetDiff.Items[1].Selected = false;
                            }

                            if ((!object.ReferenceEquals(ds.Tables[3].Rows[0]["Cost_Cost_Sheet"], System.DBNull.Value)))
                            {
                                txtCostSheetDiff.Text = ds.Tables[3].Rows[0]["Cost_Cost_Sheet"].ToString();
                            }
                            else
                            {
                                txtCostSheetDiff.Text = string.Empty;
                            }

                            if ((!object.ReferenceEquals(ds.Tables[3].Rows[0]["Comments"], System.DBNull.Value)))
                            {
                                txtCostSheetComments.Text = ds.Tables[3].Rows[0]["Comments"].ToString();
                            }
                            else
                            {
                                txtCostSheetComments.Text = string.Empty;
                            }
                        }
                        //Formula Card Information
                        if (!(ds.Tables[5].Rows.Count == 0))
                        {
                            if ((!object.ReferenceEquals(ds.Tables[5].Rows[0]["Formula_Card_ID"], System.DBNull.Value)))
                            {
                                txtFinal.Text = ds.Tables[5].Rows[0]["Formula_Card_ID"].ToString();
                            }
                            else
                            {
                                txtFinal.Text = "";
                            }
                        }
                        if (!(ds.Tables[23].Rows.Count == 0))
                        {
                            lbFormulaCardAttach.DataSource = ds.Tables[23].DefaultView;
                            lbFormulaCardAttach.DataTextField = "Formula_Cards_Attachment_File_Name";
                            lbFormulaCardAttach.DataValueField = "Formula_Cards_Attach_ID";
                            lbFormulaCardAttach.DataBind();

                            dgrdFormulaCard.DataSource = ds.Tables[23].DefaultView;
                            dgrdFormulaCard.DataBind();
                        }

                        //TestPlan
                        if (!(ds.Tables[24].Rows.Count == 0))
                        {
                            lbTestPlansAttach.DataSource = ds.Tables[24].DefaultView;
                            lbTestPlansAttach.DataTextField = "Test_Plans_Attachment_File_Name";
                            lbTestPlansAttach.DataValueField = "Test_Plans_Attach_ID";
                            lbTestPlansAttach.DataBind();

                            dgrdTestPlansFinal.DataSource = ds.Tables[24].DefaultView;
                            dgrdTestPlansFinal.DataBind();
                        }

                        //Lab Sampling Plans
                        if (!(ds.Tables[8].Rows.Count == 0))
                        {
                            if ((!object.ReferenceEquals(ds.Tables[8].Rows[0]["Central_Analytical_Lab"], System.DBNull.Value)))
                            {
                                if (ds.Tables[8].Rows[0]["Central_Analytical_Lab"].ToString() == "Y")
                                {
                                    chkCenAnaLab.Checked = true;
                                }
                                else
                                {
                                    chkCenAnaLab.Checked = false;
                                }
                            }
                            else
                            {
                                chkCenAnaLab.Checked = false;
                            }
                            if ((!object.ReferenceEquals(ds.Tables[8].Rows[0]["Site_Testing_Lab"], System.DBNull.Value)))
                            {
                                if (ds.Tables[8].Rows[0]["Site_Testing_Lab"].ToString() == "Y")
                                {
                                    chkSiteTestLab.Checked = true;
                                }
                                else
                                {
                                    chkSiteTestLab.Checked = false;
                                }
                            }
                            else
                            {
                                chkSiteTestLab.Checked = false;
                            }
                        }

                        if (!(ds.Tables[25].Rows.Count == 0))
                        {
                            lbLabSampleAttach.DataSource = ds.Tables[25].DefaultView;
                            lbLabSampleAttach.DataTextField = "Lab_Sampling_Attachment_File_Name";
                            lbLabSampleAttach.DataValueField = "Lab_Sampling_Attach_ID";
                            lbLabSampleAttach.DataBind();

                            dgrdLabSamp.DataSource = ds.Tables[25].DefaultView;
                            dgrdLabSamp.DataBind();
                        }


                        //'Product or Detailed Test Flow Matrix
                        if (!(ds.Tables[26].Rows.Count == 0))
                        {
                            lbFlowMatrixAttach.DataSource = ds.Tables[26].DefaultView;
                            lbFlowMatrixAttach.DataTextField = "Matrix_Attachment_File_Name";
                            lbFlowMatrixAttach.DataValueField = "Matrix_Attach_ID";
                            lbFlowMatrixAttach.DataBind();

                            dgrdTestMatrix.DataSource = ds.Tables[26].DefaultView;
                            dgrdTestMatrix.DataBind();
                        }


                        //'Other Supporting Documentation
                        if (!(ds.Tables[27].Rows.Count == 0))
                        {
                            lbSupDocAttach.DataSource = ds.Tables[27].DefaultView;
                            lbSupDocAttach.DataTextField = "Other_Docs_Attachment_File_Name";
                            lbSupDocAttach.DataValueField = "Others_Attach_ID";
                            lbSupDocAttach.DataBind();

                            dgrdOtherDocFinal.DataSource = ds.Tables[27].DefaultView;
                            dgrdOtherDocFinal.DataBind();
                        }

                        //lblSupDocCommnets()
                        if (!(ds.Tables[11].Rows.Count == 0))
                        {
                            if ((!object.ReferenceEquals(ds.Tables[11].Rows[0]["Comments_Approvers"], System.DBNull.Value)))
                            {
                                txtApproverComments.Text = ds.Tables[11].Rows[0]["Comments_Approvers"].ToString();
                            }
                            else
                            {
                                txtApproverComments.Text = string.Empty;
                            }
                        }
                    }
                    //Final Section Approvals Edit
                    Brand_Plant_EO_Mode_AppGrp_final();
                    try
                    {
                        if (!(ds.Tables[13].Rows.Count == 0))
                        {
                            if ((!object.ReferenceEquals(ds.Tables[13].Rows[0]["Approval_Group_Name"], System.DBNull.Value)))
                            {
                                drpAppGrpFinal.SelectedIndex = -1;
                                drpAppGrpFinal.Items[drpAppGrpFinal.Items.IndexOf(drpAppGrpFinal.Items.FindByText(ds.Tables[13].Rows[0]["Approval_Group_Name"].ToString()))].Selected = true;
                            }
                            else
                            {
                                //drpAppGrpFinal.SelectedIndex = 0
                            }
                        }
                        else
                        {
                            //drpAppGrpFinal.SelectedIndex = 0
                        }

                    }
                    catch (Exception ex)
                    {
                    }


                    if (!(ds.Tables[13].Rows.Count == 0))
                    {
                        int intRowCount = 0;
                        for (intRowCount = 0; intRowCount <= ds.Tables[13].Rows.Count - 1; intRowCount++)
                        {
                            //If ds.Tables[13).Rows(intRowCount).Item("Function_Name") Is System.DBNull.Value Or Not ds.Tables[13).Rows(intRowCount).Item("Function_Name") = "" Then
                            if ((!object.ReferenceEquals(ds.Tables[13].Rows[intRowCount]["Function_Name"], DBNull.Value)))
                            {
                                if (ds.Tables[13].Rows[intRowCount]["Function_Name"].ToString() == "PS Initiative Manager")
                                {
                                    //If Not ds.Tables[13).Rows(intRowCount).Item("Approver_Name") Is System.DBNull.Value Or Not ds.Tables[13).Rows(intRowCount).Item("Approver_Name") = "" Then
                                    if ((!object.ReferenceEquals(ds.Tables[13].Rows[intRowCount]["Function_Name"], System.DBNull.Value)))
                                    {
                                        txtPSInitiative.Text = ds.Tables[13].Rows[intRowCount]["Approver_Name"].ToString();
                                    }
                                    else
                                    {
                                        txtPSInitiative.Text = string.Empty;
                                    }
                                }
                            }
                            //If Not ds.Tables[13).Rows(intRowCount).Item("Function_Name") = "Products Research" Then
                            if ((!object.ReferenceEquals(ds.Tables[13].Rows[intRowCount]["Function_Name"], DBNull.Value)))
                            {
                                if (ds.Tables[13].Rows[intRowCount]["Function_Name"].ToString() == "Products Research")
                                {
                                    //If Not ds.Tables[13).Rows(intRowCount).Item("Approver_Name") Is System.DBNull.Value Or Not ds.Tables[13).Rows(intRowCount).Item("Approver_Name") = "" Then

                                    if ((!object.ReferenceEquals(ds.Tables[13].Rows[intRowCount]["Approver_Name"], DBNull.Value)))
                                    {
                                        txtProductsResearch.Text = ds.Tables[13].Rows[intRowCount]["Approver_Name"].ToString();
                                    }
                                    else
                                    {
                                        txtProductsResearch.Text = string.Empty;
                                    }
                                }
                            }
                            if ((!object.ReferenceEquals(ds.Tables[13].Rows[intRowCount]["Function_Name"], DBNull.Value)))
                            {
                                if (ds.Tables[13].Rows[intRowCount]["Function_Name"].ToString() == "Budget Center")
                                {
                                    //If Not ds.Tables[13).Rows(intRowCount).Item("Approver_Name") Is System.DBNull.Value Or Not ds.Tables[13).Rows(intRowCount).Item("Approver_Name") = "" Then
                                    if ((!object.ReferenceEquals(ds.Tables[13].Rows[intRowCount]["Approver_Name"], System.DBNull.Value)))
                                    {
                                        txtBudgetOwnerFinal.Text = ds.Tables[13].Rows[intRowCount]["Approver_Name"].ToString();
                                    }
                                    else
                                    {
                                        txtBudgetOwnerFinal.Text = string.Empty;
                                    }
                                }
                            }
                            if ((!object.ReferenceEquals(ds.Tables[13].Rows[intRowCount]["Function_Name"], DBNull.Value)))
                            {
                                if (ds.Tables[13].Rows[intRowCount]["Function_Name"].ToString() == "GBU HS&E Resource")
                                {
                                    //If Not ds.Tables[13).Rows(intRowCount).Item("Approver_Name") Is System.DBNull.Value Or Not ds.Tables[13).Rows(intRowCount).Item("Approver_Name") = "" Then
                                    if ((!object.ReferenceEquals(ds.Tables[13].Rows[intRowCount]["Approver_Name"], System.DBNull.Value)))
                                    {
                                        txtGBUHSEFinal.Text = ds.Tables[13].Rows[intRowCount]["Approver_Name"].ToString();
                                    }
                                    else
                                    {
                                        txtGBUHSEFinal.Text = string.Empty;
                                    }
                                }
                            }
                            if ((!object.ReferenceEquals(ds.Tables[13].Rows[intRowCount]["Function_Name"], DBNull.Value)))
                            {
                                if (ds.Tables[13].Rows[intRowCount]["Function_Name"].ToString() == "Site HS&E Resource")
                                {
                                    //If Not ds.Tables[13).Rows(intRowCount).Item("Approver_Name") Is System.DBNull.Value Or Not ds.Tables[13).Rows(intRowCount).Item("Approver_Name") = "" Then
                                    if ((!object.ReferenceEquals(ds.Tables[13].Rows[intRowCount]["Approver_Name"], System.DBNull.Value)))
                                    {
                                        txtSiteHSEFinal.Text = ds.Tables[13].Rows[intRowCount]["Approver_Name"].ToString();
                                    }
                                    else
                                    {
                                        txtSiteHSEFinal.Text = string.Empty;
                                    }
                                }
                            }
                            if ((!object.ReferenceEquals(ds.Tables[13].Rows[intRowCount]["Function_Name"], DBNull.Value)))
                            {
                                if (ds.Tables[13].Rows[intRowCount]["Function_Name"].ToString() == "SAP Cost Center Coordinator")
                                {
                                    //If Not ds.Tables[13).Rows(intRowCount).Item("Approver_Name") Is System.DBNull.Value Or Not ds.Tables[13).Rows(intRowCount).Item("Approver_Name") = "" Then
                                    if ((!object.ReferenceEquals(ds.Tables[13].Rows[intRowCount]["Approver_Name"], System.DBNull.Value)))
                                    {
                                        txtSAPCostCenter.Text = ds.Tables[13].Rows[intRowCount]["Approver_Name"].ToString();
                                    }
                                    else
                                    {
                                        txtSAPCostCenter.Text = string.Empty;
                                    }
                                }
                            }

                            //Doubt
                            //Added by David
                            //Date: 07/16/2010
                            if ((!object.ReferenceEquals(ds.Tables[13].Rows[intRowCount]["Function_Name"], DBNull.Value)))
                            {
                                if (ds.Tables[13].Rows[intRowCount]["Function_Name"].ToString() == "SMART Clearance")
                                {
                                    //If Not ds.Tables[13).Rows(intRowCount).Item("Approver_Name") Is System.DBNull.Value Or Not ds.Tables[13).Rows(intRowCount).Item("Approver_Name") = "" Then
                                    if ((!object.ReferenceEquals(ds.Tables[13].Rows[intRowCount]["Approver_Name"], System.DBNull.Value)))
                                    {
                                        txtSMARTClearanceFinal.Text = ds.Tables[13].Rows[intRowCount]["Approver_Name"].ToString();
                                    }
                                    else
                                    {
                                        txtSMARTClearanceFinal.Text = string.Empty;
                                    }
                                }
                            }

                            if ((!object.ReferenceEquals(ds.Tables[13].Rows[intRowCount]["Function_Name"], DBNull.Value)))
                            {
                                if (ds.Tables[13].Rows[intRowCount]["Function_Name"].ToString() == "Site Planning")
                                {
                                    //If Not ds.Tables[13).Rows(intRowCount).Item("Approver_Name") Is System.DBNull.Value Or Not ds.Tables[13).Rows(intRowCount).Item("Approver_Name") = "" Then
                                    if ((!object.ReferenceEquals(ds.Tables[13].Rows[intRowCount]["Approver_Name"], System.DBNull.Value)))
                                    {
                                        txtSitePlanFinal.Text = ds.Tables[13].Rows[intRowCount]["Approver_Name"].ToString();
                                    }
                                    else
                                    {
                                        txtSitePlanFinal.Text = string.Empty;
                                    }
                                }
                            }

                            if ((!object.ReferenceEquals(ds.Tables[13].Rows[intRowCount]["Function_Name"], DBNull.Value)))
                            {
                                if (ds.Tables[13].Rows[intRowCount]["Function_Name"].ToString() == "Site Contact")
                                {
                                    //If Not ds.Tables[13).Rows(intRowCount).Item("Approver_Name") Is System.DBNull.Value Or Not ds.Tables[13).Rows(intRowCount).Item("Approver_Name") = "" Then
                                    if ((!object.ReferenceEquals(ds.Tables[13].Rows[intRowCount]["Approver_Name"], System.DBNull.Value)))
                                    {
                                        txtSiteContactFinal.Text = ds.Tables[13].Rows[intRowCount]["Approver_Name"].ToString();
                                    }
                                    else
                                    {
                                        txtSiteContactFinal.Text = string.Empty;
                                    }
                                }
                            }

                            if ((!object.ReferenceEquals(ds.Tables[13].Rows[intRowCount]["Function_Name"], DBNull.Value)))
                            {
                                if (ds.Tables[13].Rows[intRowCount]["Function_Name"].ToString() == "Site Finance")
                                {
                                    //If Not ds.Tables[13).Rows(intRowCount).Item("Approver_Name") Is System.DBNull.Value Or Not ds.Tables[13).Rows(intRowCount).Item("Approver_Name") = "" Then
                                    if ((!object.ReferenceEquals(ds.Tables[13].Rows[intRowCount]["Approver_Name"], System.DBNull.Value)))
                                    {
                                        txtSiteFinance.Text = ds.Tables[13].Rows[intRowCount]["Approver_Name"].ToString();
                                    }
                                    else
                                    {
                                        txtSiteFinance.Text = string.Empty;
                                    }
                                }
                            }

                            if ((!object.ReferenceEquals(ds.Tables[13].Rows[intRowCount]["Function_Name"], DBNull.Value)))
                            {
                                if (ds.Tables[13].Rows[intRowCount]["Function_Name"].ToString() == "Site Leadership")
                                {
                                    //If Not ds.Tables[13).Rows(intRowCount).Item("Approver_Name") Is System.DBNull.Value Or Not ds.Tables[13).Rows(intRowCount).Item("Approver_Name") = "" Then
                                    if ((!object.ReferenceEquals(ds.Tables[13].Rows[intRowCount]["Approver_Name"], System.DBNull.Value)))
                                    {
                                        txtSiteLeaderShip.Text = ds.Tables[13].Rows[intRowCount]["Approver_Name"].ToString();
                                    }
                                    else
                                    {
                                        txtSiteLeaderShip.Text = string.Empty;
                                    }
                                }
                            }

                            if ((!object.ReferenceEquals(ds.Tables[13].Rows[intRowCount]["Function_Name"], DBNull.Value)))
                            {
                                if (ds.Tables[13].Rows[intRowCount]["Function_Name"].ToString() == "PS&RA")
                                {
                                    //If Not ds.Tables[13).Rows(intRowCount).Item("Approver_Name") Is System.DBNull.Value Or Not ds.Tables[13).Rows(intRowCount).Item("Approver_Name") = "" Then
                                    if ((!object.ReferenceEquals(ds.Tables[13].Rows[intRowCount]["Approver_Name"], System.DBNull.Value)))
                                    {
                                        txtPSRAFinal.Text = ds.Tables[13].Rows[intRowCount]["Approver_Name"].ToString();
                                    }
                                    else
                                    {
                                        txtPSRAFinal.Text = string.Empty;
                                    }
                                }
                            }


                            if ((!object.ReferenceEquals(ds.Tables[13].Rows[intRowCount]["Function_Name"], DBNull.Value)))
                            {
                                if (ds.Tables[13].Rows[intRowCount]["Function_Name"].ToString() == "PS&RA")
                                {
                                    //If Not ds.Tables[13).Rows(intRowCount).Item("Approver_Name") Is System.DBNull.Value Or Not ds.Tables[13).Rows(intRowCount).Item("Approver_Name") = "" Then
                                    if ((!object.ReferenceEquals(ds.Tables[13].Rows[intRowCount]["Approver_Name"], System.DBNull.Value)))
                                    {
                                        txtPSRAFinal.Text = ds.Tables[13].Rows[intRowCount]["Approver_Name"].ToString();
                                    }
                                    else
                                    {
                                        txtPSRAFinal.Text = string.Empty;
                                    }
                                }
                            }

                            if ((!object.ReferenceEquals(ds.Tables[13].Rows[intRowCount]["Function_Name"], DBNull.Value)))
                            {
                                if (ds.Tables[13].Rows[intRowCount]["Function_Name"].ToString() == "Timing Gate Exception")
                                {
                                    //If Not ds.Tables[13).Rows(intRowCount).Item("Approver_Name") Is System.DBNull.Value Or Not ds.Tables[13).Rows(intRowCount).Item("Approver_Name") = "" Then
                                    if ((!object.ReferenceEquals(ds.Tables[13].Rows[intRowCount]["Approver_Name"], System.DBNull.Value)))
                                    {
                                        txtFinalTimingGate.Text = ds.Tables[13].Rows[intRowCount]["Approver_Name"].ToString();
                                    }
                                    else
                                    {
                                        txtFinalTimingGate.Text = string.Empty;
                                    }
                                }
                            }


                            if ((!object.ReferenceEquals(ds.Tables[13].Rows[intRowCount]["Function_Name"], DBNull.Value)))
                            {
                                if (ds.Tables[13].Rows[intRowCount]["Function_Name"].ToString() == "QA")
                                {
                                    //If Not ds.Tables[13).Rows(intRowCount).Item("Approver_Name") Is System.DBNull.Value Or Not ds.Tables[13).Rows(intRowCount).Item("Approver_Name") = "" Then
                                    if ((!object.ReferenceEquals(ds.Tables[13].Rows[intRowCount]["Approver_Name"], System.DBNull.Value)))
                                    {
                                        txtFinalQA.Text = ds.Tables[13].Rows[intRowCount]["Approver_Name"].ToString();
                                    }
                                    else
                                    {
                                        txtFinalQA.Text = string.Empty;
                                    }
                                }
                            }

                            if ((!object.ReferenceEquals(ds.Tables[13].Rows[intRowCount]["Function_Name"], DBNull.Value)))
                            {
                                if (ds.Tables[13].Rows[intRowCount]["Function_Name"].ToString() == "Central QA")
                                {
                                    //If Not ds.Tables[13).Rows(intRowCount).Item("Approver_Name") Is System.DBNull.Value Or Not ds.Tables[13).Rows(intRowCount).Item("Approver_Name") = "" Then
                                    if ((!object.ReferenceEquals(ds.Tables[13].Rows[intRowCount]["Approver_Name"], System.DBNull.Value)))
                                    {
                                        txtFinalCentralQA.Text = ds.Tables[13].Rows[intRowCount]["Approver_Name"].ToString();
                                    }
                                    else
                                    {
                                        txtFinalCentralQA.Text = string.Empty;
                                    }
                                }
                            }

                            if ((!object.ReferenceEquals(ds.Tables[13].Rows[intRowCount]["Function_Name"], DBNull.Value)))
                            {
                                if (ds.Tables[13].Rows[intRowCount]["Function_Name"].ToString() == "Standards Office")
                                {
                                    //If Not ds.Tables[13).Rows(intRowCount).Item("Approver_Name") Is System.DBNull.Value Or Not ds.Tables[13).Rows(intRowCount).Item("Approver_Name") = "" Then
                                    if ((!object.ReferenceEquals(ds.Tables[13].Rows[intRowCount]["Approver_Name"], System.DBNull.Value)))
                                    {
                                        txtFinalStandardsOffice.Text = ds.Tables[13].Rows[intRowCount]["Approver_Name"].ToString();
                                    }
                                    else
                                    {
                                        txtFinalStandardsOffice.Text = string.Empty;
                                    }
                                }
                            }

                            //Added by David - MUREO PCR : 4 Additional Approvers - Date: 01/03/2012
                            if ((!object.ReferenceEquals(ds.Tables[13].Rows[intRowCount]["Function_Name"], DBNull.Value)))
                            {
                                if (ds.Tables[13].Rows[intRowCount]["Function_Name"].ToString() == "Additional approver #1")
                                {
                                    if ((!object.ReferenceEquals(ds.Tables[13].Rows[intRowCount]["Approver_Name"], System.DBNull.Value)))
                                    {
                                        txtFinalAdditionalApprover1.Text = ds.Tables[13].Rows[intRowCount]["Approver_Name"].ToString();
                                    }
                                    else
                                    {
                                        txtFinalAdditionalApprover1.Text = string.Empty;
                                    }
                                }
                            }


                            if ((!object.ReferenceEquals(ds.Tables[13].Rows[intRowCount]["Function_Name"], DBNull.Value)))
                            {
                                if (ds.Tables[13].Rows[intRowCount]["Function_Name"].ToString() == "Additional approver #2")
                                {
                                    if ((!object.ReferenceEquals(ds.Tables[13].Rows[intRowCount]["Approver_Name"], System.DBNull.Value)))
                                    {
                                        txtFinalAdditionalApprover2.Text = ds.Tables[13].Rows[intRowCount]["Approver_Name"].ToString();
                                    }
                                    else
                                    {
                                        txtFinalAdditionalApprover2.Text = string.Empty;
                                    }
                                }
                            }

                            if ((!object.ReferenceEquals(ds.Tables[13].Rows[intRowCount]["Function_Name"], DBNull.Value)))
                            {
                                if (ds.Tables[13].Rows[intRowCount]["Function_Name"].ToString() == "Additional approver #3")
                                {
                                    if ((!object.ReferenceEquals(ds.Tables[13].Rows[intRowCount]["Approver_Name"], System.DBNull.Value)))
                                    {
                                        txtFinalAdditionalApprover3.Text = ds.Tables[13].Rows[intRowCount]["Approver_Name"].ToString();
                                    }
                                    else
                                    {
                                        txtFinalAdditionalApprover3.Text = string.Empty;
                                    }
                                }
                            }

                            if ((!object.ReferenceEquals(ds.Tables[13].Rows[intRowCount]["Function_Name"], DBNull.Value)))
                            {
                                if (ds.Tables[13].Rows[intRowCount]["Function_Name"].ToString() == "Additional approver #4")
                                {
                                    if ((!object.ReferenceEquals(ds.Tables[13].Rows[intRowCount]["Approver_Name"], System.DBNull.Value)))
                                    {
                                        txtFinalAdditionalApprover4.Text = ds.Tables[13].Rows[intRowCount]["Approver_Name"].ToString();
                                    }
                                    else
                                    {
                                        txtFinalAdditionalApprover4.Text = string.Empty;
                                    }
                                }
                            }

                        }
                    }
                    else
                    {
                        txtPSInitiative.Text = "";
                        txtProductsResearch.Text = "";
                        txtBudgetOwnerFinal.Text = "";
                        txtGBUHSEFinal.Text = "";
                        txtSiteHSEFinal.Text = "";
                        txtSAPCostCenter.Text = "";
                        //Added by David
                        //Date: 07/16/2010
                        txtSMARTClearanceFinal.Text = "";

                        txtSitePlanFinal.Text = "";
                        txtSiteContactFinal.Text = "";
                        txtSiteFinance.Text = "";
                        txtSiteLeaderShip.Text = "";
                        txtPSRAFinal.Text = "";
                        txtFinalTimingGate.Text = "";
                        txtFinalQA.Text = "";
                        txtFinalCentralQA.Text = "";
                        txtFinalStandardsOffice.Text = "";

                        txtFinalAdditionalApprover1.Text = "";
                        txtFinalAdditionalApprover2.Text = "";
                        txtFinalAdditionalApprover3.Text = "";
                        txtFinalAdditionalApprover4.Text = "";

                    }

                    try
                    {
                        if (!(ds.Tables[14].Rows.Count == 0))
                        {

                            for (int intRowCount = 0; intRowCount <= ds.Tables[14].Rows.Count - 1; intRowCount++)
                            {
                                if ((!object.ReferenceEquals(ds.Tables[14].Rows[intRowCount]["Prod_Pack_ID"], System.DBNull.Value)))
                                {
                                    if (Convert.ToInt32(ds.Tables[14].Rows[intRowCount]["Prod_Pack_ID"]) != 0)
                                    {
                                        lbFinalPackagingInfoDB.Items[lbFinalPackagingInfoDB.Items.IndexOf(lbFinalPackagingInfoDB.Items.FindByValue(ds.Tables[14].Rows[intRowCount]["Prod_Pack_ID"].ToString()))].Selected = true;
                                    }
                                    else
                                    {
                                        lbFinalPackagingInfoDB.SelectedIndex = 0;
                                    }

                                }
                            }
                        }

                    }
                    catch (Exception ex)
                    {
                    }

                    try
                    {
                        if (!(ds.Tables[19].Rows.Count == 0))
                        {
                            int intRowCount = 0;
                            for (intRowCount = 0; intRowCount <= ds.Tables[19].Rows.Count - 1; intRowCount++)
                            {
                                if ((!object.ReferenceEquals(ds.Tables[19].Rows[intRowCount]["PDI_Packaging_Type"], System.DBNull.Value)))
                                {
                                    if (!string.IsNullOrEmpty(ds.Tables[19].Rows[intRowCount]["PDI_Packaging_Type"].ToString()))
                                    {
                                        lbFinalPackage.Items[lbFinalPackage.Items.IndexOf(lbFinalPackage.Items.FindByValue(ds.Tables[19].Rows[intRowCount]["PDI_Packaging_Type"].ToString()))].Selected = true;
                                    }
                                    else
                                    {
                                        lbFinalPackage.SelectedIndex = 0;
                                    }

                                }
                            }
                        }

                    }
                    catch (Exception ex)
                    {
                    }
                    if (!(ds.Tables[22].Rows.Count == 0))
                    {
                        lbFinalQAAttach.DataSource = ds.Tables[22].DefaultView;
                        lbFinalQAAttach.DataTextField = "QA_Info_Attachment_File_Name";
                        lbFinalQAAttach.DataValueField = "QA_Info_Attach_ID";
                        lbFinalQAAttach.DataBind();

                        dgrdQAFinalTabAttachment.DataSource = ds.Tables[22].DefaultView;
                        dgrdQAFinalTabAttachment.DataBind();
                    }


                    if ((ViewState["EOIDFlag"] != null) && (ViewState["EOIDFlag"].ToString() == "1"))
                    {
                        if (!(ds.Tables[30].Rows.Count == 0))
                        {
                            if ((!object.ReferenceEquals(ds.Tables[30].Rows[0]["Is_Product_Go_To_Customers"], System.DBNull.Value)))
                            {
                                if (Convert.ToBoolean(ds.Tables[30].Rows[0]["Is_Product_Go_To_Customers"]) == true)
                                {
                                    rblFinalProductConsumerOption.Items[0].Selected = true;
                                    rblFinalProductConsumerOption.Items[1].Selected = false;
                                    //  txtCostSheetDiff.Enabled = true
                                }
                                else
                                {
                                    rblFinalProductConsumerOption.Items[0].Selected = false;
                                    rblFinalProductConsumerOption.Items[1].Selected = true;
                                }
                            }
                            else
                            {
                                rblFinalProductConsumerOption.Items[0].Selected = false;
                                rblFinalProductConsumerOption.Items[1].Selected = false;
                            }
                        }

                        if (!(ds.Tables[30].Rows.Count == 0))
                        {
                            if ((!object.ReferenceEquals(ds.Tables[30].Rows[0]["Is_Using_Approved_FC_R_ATS"], System.DBNull.Value)))
                            {
                                if (Convert.ToBoolean(ds.Tables[30].Rows[0]["Is_Using_Approved_FC_R_ATS"]) == true)
                                {
                                    rblFinalProductApprovedOption.Items[0].Selected = true;
                                    rblFinalProductApprovedOption.Items[1].Selected = false;
                                    //  txtCostSheetDiff.Enabled = true
                                }
                                else
                                {
                                    rblFinalProductApprovedOption.Items[0].Selected = false;
                                    rblFinalProductApprovedOption.Items[1].Selected = true;
                                }
                            }
                            else
                            {
                                rblFinalProductApprovedOption.Items[0].Selected = false;
                                rblFinalProductApprovedOption.Items[1].Selected = false;
                            }
                        }



                        if (((rblFinalProductConsumerOption.Items[0].Selected == true) & (rblFinalProductApprovedOption.Items[1].Selected == true)))
                        {
                            tblPSRAFinal2.Style.Add("display", "block");

                        }
                        else
                        {
                            rblFinalRawMaterialsQ1.ClearSelection();
                            rblFinalRawMaterialsQ2.ClearSelection();
                            rblFinalRawMaterialsQ3.ClearSelection();
                            rblFinalRawMaterialsQ4.ClearSelection();
                            tblPSRAFinal2.Style.Add("display", "none");

                        }

                        if (!(ds.Tables[30].Rows.Count == 0))
                        {
                            if ((!object.ReferenceEquals(ds.Tables[30].Rows[0]["Is_Approved_At_Level"], System.DBNull.Value)))
                            {
                                if (Convert.ToBoolean(ds.Tables[30].Rows[0]["Is_Approved_At_Level"]) == true)
                                {
                                    rblFinalRawMaterialsQ1.Items[0].Selected = true;
                                    rblFinalRawMaterialsQ1.Items[1].Selected = false;
                                    //  txtCostSheetDiff.Enabled = true
                                }
                                else
                                {
                                    rblFinalRawMaterialsQ1.Items[0].Selected = false;
                                    rblFinalRawMaterialsQ1.Items[1].Selected = true;
                                }
                            }
                            else
                            {
                                rblFinalRawMaterialsQ1.Items[0].Selected = false;
                                rblFinalRawMaterialsQ1.Items[1].Selected = false;
                            }
                        }

                        if (!(ds.Tables[30].Rows.Count == 0))
                        {
                            if ((!object.ReferenceEquals(ds.Tables[30].Rows[0]["Is_Approved_For_Region"], System.DBNull.Value)))
                            {
                                if (Convert.ToBoolean(ds.Tables[30].Rows[0]["Is_Approved_For_Region"]) == true)
                                {
                                    rblFinalRawMaterialsQ2.Items[0].Selected = true;
                                    rblFinalRawMaterialsQ2.Items[1].Selected = false;
                                    //  txtCostSheetDiff.Enabled = true
                                }
                                else
                                {
                                    rblFinalRawMaterialsQ2.Items[0].Selected = false;
                                    rblFinalRawMaterialsQ2.Items[1].Selected = true;
                                }
                            }
                            else
                            {
                                rblFinalRawMaterialsQ2.Items[0].Selected = false;
                                rblFinalRawMaterialsQ2.Items[1].Selected = false;
                            }
                        }

                        if (!(ds.Tables[30].Rows.Count == 0))
                        {
                            if ((!object.ReferenceEquals(ds.Tables[30].Rows[0]["Is_Approved_For_Application"], System.DBNull.Value)))
                            {
                                if (Convert.ToBoolean(ds.Tables[30].Rows[0]["Is_Approved_For_Application"]) == true)
                                {
                                    rblFinalRawMaterialsQ3.Items[0].Selected = true;
                                    rblFinalRawMaterialsQ3.Items[1].Selected = false;
                                    //  txtCostSheetDiff.Enabled = true
                                }
                                else
                                {
                                    rblFinalRawMaterialsQ3.Items[0].Selected = false;
                                    rblFinalRawMaterialsQ3.Items[1].Selected = true;
                                }
                            }
                            else
                            {
                                rblFinalRawMaterialsQ3.Items[0].Selected = false;
                                rblFinalRawMaterialsQ3.Items[1].Selected = false;
                            }
                        }


                        if (!(ds.Tables[30].Rows.Count == 0))
                        {
                            if ((!object.ReferenceEquals(ds.Tables[30].Rows[0]["Is_Approved_At_Prev_Application_Rate"], System.DBNull.Value)))
                            {
                                if (Convert.ToBoolean(ds.Tables[30].Rows[0]["Is_Approved_At_Prev_Application_Rate"]) == true)
                                {
                                    rblFinalRawMaterialsQ4.Items[0].Selected = true;
                                    rblFinalRawMaterialsQ4.Items[1].Selected = false;
                                    //  txtCostSheetDiff.Enabled = true
                                }
                                else
                                {
                                    rblFinalRawMaterialsQ4.Items[0].Selected = false;
                                    rblFinalRawMaterialsQ4.Items[1].Selected = true;
                                }
                            }
                            else
                            {
                                rblFinalRawMaterialsQ4.Items[0].Selected = false;
                                rblFinalRawMaterialsQ4.Items[1].Selected = false;
                            }
                        }


                        if (!(ds.Tables[29].Rows.Count == 0))
                        {
                            if ((!object.ReferenceEquals(ds.Tables[29].Rows[0]["EO_Raw_Packing_Material"], System.DBNull.Value)))
                            {
                                if (ds.Tables[29].Rows[0]["EO_Raw_Packing_Material"].ToString() == "Y")
                                {
                                    rbRawMaterialFinal.Items[0].Selected = true;
                                    rbRawMaterialFinal.Items[1].Selected = false;
                                    //  txtCostSheetDiff.Enabled = true
                                }
                                else
                                {
                                    rbRawMaterialFinal.Items[0].Selected = false;
                                    rbRawMaterialFinal.Items[1].Selected = true;
                                }
                            }
                            else
                            {
                                rbRawMaterialFinal.Items[0].Selected = false;
                                rbRawMaterialFinal.Items[1].Selected = false;
                            }

                            if ((!object.ReferenceEquals(ds.Tables[29].Rows[0]["EO_Parent_Rolls"], System.DBNull.Value)))
                            {
                                if (ds.Tables[29].Rows[0]["EO_Parent_Rolls"].ToString() == "Y")
                                {
                                    rbParentRollsFinal.Items[0].Selected = true;
                                    rbParentRollsFinal.Items[1].Selected = false;
                                    //  txtCostSheetDiff.Enabled = true
                                }
                                else
                                {
                                    rbParentRollsFinal.Items[0].Selected = false;
                                    rbParentRollsFinal.Items[1].Selected = true;
                                }
                            }
                            else
                            {
                                rbParentRollsFinal.Items[0].Selected = false;
                                rbParentRollsFinal.Items[1].Selected = false;
                            }

                            if ((!object.ReferenceEquals(ds.Tables[29].Rows[0]["EO_Intermediate_Material"], System.DBNull.Value)))
                            {
                                if (ds.Tables[29].Rows[0]["EO_Intermediate_Material"].ToString() == "Y")
                                {
                                    rbInterMaterialsFinal.Items[0].Selected = true;
                                    rbInterMaterialsFinal.Items[1].Selected = false;
                                    //  txtCostSheetDiff.Enabled = true
                                }
                                else
                                {
                                    rbInterMaterialsFinal.Items[0].Selected = false;
                                    rbInterMaterialsFinal.Items[1].Selected = true;
                                }
                            }
                            else
                            {
                                rbInterMaterialsFinal.Items[0].Selected = false;
                                rbInterMaterialsFinal.Items[1].Selected = false;
                            }

                            if ((!object.ReferenceEquals(ds.Tables[29].Rows[0]["EO_Current_Brand"], System.DBNull.Value)))
                            {
                                if (ds.Tables[29].Rows[0]["EO_Current_Brand"].ToString() == "Y")
                                {
                                    rbShippedFinal.Items[0].Selected = true;
                                    rbShippedFinal.Items[1].Selected = false;
                                    //  txtCostSheetDiff.Enabled = true
                                }
                                else
                                {
                                    rbShippedFinal.Items[0].Selected = false;
                                    rbShippedFinal.Items[1].Selected = true;
                                }
                            }
                            else
                            {
                                rbShippedFinal.Items[0].Selected = false;
                                rbShippedFinal.Items[1].Selected = false;
                            }

                            if ((!object.ReferenceEquals(ds.Tables[29].Rows[0]["EO_Consumer_Lab_Evaluation"], System.DBNull.Value)))
                            {
                                if (ds.Tables[29].Rows[0]["EO_Consumer_Lab_Evaluation"].ToString() == "Y")
                                {
                                    rbTestProductedShippedFinal.Items[0].Selected = true;
                                    rbTestProductedShippedFinal.Items[1].Selected = false;
                                    //  txtCostSheetDiff.Enabled = true
                                }
                                else
                                {
                                    rbTestProductedShippedFinal.Items[0].Selected = false;
                                    rbTestProductedShippedFinal.Items[1].Selected = true;
                                }
                            }
                            else
                            {
                                rbTestProductedShippedFinal.Items[0].Selected = false;
                                rbTestProductedShippedFinal.Items[1].Selected = false;
                            }


                            if ((!object.ReferenceEquals(ds.Tables[29].Rows[0]["EO_GCAS"], System.DBNull.Value)))
                            {
                                if (ds.Tables[29].Rows[0]["EO_GCAS"].ToString() == "Y")
                                {
                                    rbGCASNumberFinal.Items[0].Selected = true;
                                    rbGCASNumberFinal.Items[1].Selected = false;
                                    //  txtCostSheetDiff.Enabled = true
                                }
                                else
                                {
                                    rbGCASNumberFinal.Items[0].Selected = false;
                                    rbGCASNumberFinal.Items[1].Selected = true;
                                }
                            }
                            else
                            {
                                rbGCASNumberFinal.Items[0].Selected = false;
                                rbGCASNumberFinal.Items[1].Selected = false;
                            }

                        }




                        if (!(ds.Tables[29].Rows.Count == 0))
                        {
                            if ((!object.ReferenceEquals(ds.Tables[29].Rows[0]["Is_Understood_Policy_37"], DBNull.Value)))
                            {
                                if (Convert.ToBoolean(ds.Tables[29].Rows[0]["Is_Understood_Policy_37"]) == false)
                                {
                                    chkFinalMaterialsBrands.Items[0].Selected = true;
                                    chkFinalMaterialsBrands.Items[1].Selected = false;
                                    chkFinalMaterialsBrands.Items[2].Selected = false;
                                }
                            }
                            else
                            {
                                chkFinalMaterialsBrands.Items[0].Selected = false;
                                chkFinalMaterialsBrands.Items[1].Selected = false;
                                chkFinalMaterialsBrands.Items[2].Selected = false;

                            }
                        }
                        else
                        {
                            chkFinalMaterialsBrands.Items[0].Selected = false;
                            chkFinalMaterialsBrands.Items[1].Selected = false;
                            chkFinalMaterialsBrands.Items[2].Selected = false;
                        }

                        if (!(ds.Tables[29].Rows.Count == 0))
                        {
                            if ((!object.ReferenceEquals(ds.Tables[29].Rows[0]["Is_Exception_Policy_37"], DBNull.Value)))
                            {
                                if (Convert.ToBoolean(ds.Tables[29].Rows[0]["Is_Exception_Policy_37"]) == false)
                                {
                                    chkFinalMaterialsBrands.Items[1].Selected = true;
                                    chkFinalMaterialsBrands.Items[0].Selected = false;
                                    chkFinalMaterialsBrands.Items[2].Selected = false;
                                }
                            }
                            else
                            {
                                chkFinalMaterialsBrands.Items[0].Selected = false;
                                chkFinalMaterialsBrands.Items[1].Selected = false;
                                chkFinalMaterialsBrands.Items[2].Selected = false;
                            }
                        }
                        else
                        {
                            chkFinalMaterialsBrands.Items[0].Selected = false;
                            chkFinalMaterialsBrands.Items[1].Selected = false;
                            chkFinalMaterialsBrands.Items[2].Selected = false;
                        }

                        if (!(ds.Tables[29].Rows.Count == 0))
                        {
                            if ((!object.ReferenceEquals(ds.Tables[29].Rows[0]["Is_EO_Covered_Policy_37"], DBNull.Value)))
                            {
                                if (Convert.ToBoolean(ds.Tables[29].Rows[0]["Is_EO_Covered_Policy_37"]) == false)
                                {
                                    chkFinalMaterialsBrands.Items[2].Selected = true;
                                    chkFinalMaterialsBrands.Items[0].Selected = false;
                                    chkFinalMaterialsBrands.Items[1].Selected = false;
                                }
                            }
                            else
                            {
                                chkFinalMaterialsBrands.Items[0].Selected = false;
                                chkFinalMaterialsBrands.Items[1].Selected = false;
                                chkFinalMaterialsBrands.Items[2].Selected = false;
                            }
                        }
                        else
                        {
                            chkFinalMaterialsBrands.Items[0].Selected = false;
                            chkFinalMaterialsBrands.Items[1].Selected = false;
                            chkFinalMaterialsBrands.Items[2].Selected = false;
                        }

                    }
                }

                for (int intchkFinalMaterialsBrands = 0; intchkFinalMaterialsBrands <= chkFinalMaterialsBrands.Items.Count - 1; intchkFinalMaterialsBrands++)
                {
                    if (chkFinalMaterialsBrands.Items[intchkFinalMaterialsBrands].Selected == true)
                    {
                        //Page.RegisterStartupScript("js", "<script>FinalHandleOnCheck();</script>");
                        ScriptManager.RegisterStartupScript(Page, Page.GetType(), Guid.NewGuid().ToString(), "FinalHandleOnCheck();", true);
                        break; // TODO: might not be correct. Was : Exit For

                    }
                }
            }

        }

        public void Mandatory_final_lock()
        {
            btnTabFinal.ImageUrl = "../Images/final-over.gif";
            btnTabPreliminary.ImageUrl = "../Images/preliminary-nor.gif";
            btnTabCloseOut.ImageUrl = "../Images/close-out-nor.gif";
            if (!(ViewState["2tabEOstage"] == null))
            {
                if (ViewState["2tabEOstage"].ToString().ToUpper() == "Closeout".ToUpper() & ViewState["2tabEOstatus"].ToString().ToUpper() == "Draft".ToUpper())
                {
                }
                else if (ViewState["2tabEOstage"].ToString().ToUpper() == "Closeout".ToUpper() & ViewState["2tabEOstatus"].ToString().ToUpper() == "Routed".ToUpper())
                {
                }
                else if (ViewState["2tabEOstage"].ToString().ToUpper() == "Closeout".ToUpper() & ViewState["2tabEOstatus"].ToString().ToUpper() == "Approved".ToUpper())
                {
                }
                else
                {
                    try
                    {
                        if ((ViewState["Two_Tab_Routing"].ToString() != "N"))
                        {
                            trTowtabRoutePrelimData.Visible = true;
                        }
                        else
                        {
                            trTowtabRoutePrelimData.Visible = false;
                        }
                    }
                    catch (Exception ex)
                    {
                        trTowtabRoutePrelimData.Visible = false;
                    }
                }
            }
            else
            {
                try
                {
                    if ((ViewState["Two_Tab_Routing"].ToString() != "N"))
                    {
                        trTowtabRoutePrelimData.Visible = true;
                    }
                    else
                    {
                        trTowtabRoutePrelimData.Visible = false;
                    }
                }
                catch (Exception ex)
                {
                    trTowtabRoutePrelimData.Visible = false;
                }

            }
            tblTop.Visible = false;
            tblTopReadonly.Visible = true;
            FirstSectionPreliminary.Visible = false;
            TrGeneralPreliminaryRO.Visible = false;
            NewMaterialandBrands.Visible = false;
            NewMaterialandBrandsReadOnly.Visible = false;
            HSandSE.Visible = false;
            HSandSEReadOnly.Visible = false;
            PSandRA.Visible = false;
            PSandRAReadOnly.Visible = false;
            PlanningandBudgetInfo.Visible = false;
            PlanningandBudgetInfoReadOnly.Visible = false;
            ProductionandPackaging.Visible = false;
            ProductionandPackagingReadOnly.Visible = false;
            PackagingandDispositionPreliminary.Visible = false;
            PackagingandDispositionPreliminaryReadOnly.Visible = false;
            PreliminaryApprovals.Visible = false;
            PreliminaryApprovalsReadOnly.Visible = false;
            PreliminaryRevision.Visible = true;
            FinalPackagingandDisposition.Visible = false;
            FinalPackagingandDispositionReadOnly.Visible = true;
            FinalCostSheet.Visible = false;
            FinalCostSheetReadOnly.Visible = true;
            TrFinalQA.Visible = false;
            TrFinalQARO.Visible = true;
            FinalFormulaCardInformation.Visible = false;
            FinalFormulaCardInformationReadOnly.Visible = true;
            FinalTestPlans.Visible = false;
            FinalTestPlansReadOnly.Visible = true;
            LabSamplingPlans.Visible = false;
            LabSamplingPlansReadOnly.Visible = true;
            FinalProductTestFlowMatrix.Visible = false;
            FinalProductTestFlowMatrixReadonly.Visible = true;
            FinalOtherSupportingDoc.Visible = false;
            FinalOtherSupportingDocReadonly.Visible = true;
            FinalApprovals.Visible = false;
            FinalApprovalsReadOnly.Visible = true;
            ViewState["Mandatory_Final_lock"] = "Lock";
            //For PCRs
            trFinalMaterialsBrandsRadioBefore.Visible = false;
            trFinalMaterialsBrands.Visible = false;
            trFinalMaterialsBrandsRadioAfter.Visible = false;
            trFinalPSRA.Visible = false;
            trFinalMaterialsBrandshead.Visible = false;
            trFinalPSRAhead.Visible = false;
            NewMaterialandBrandsReadOnlyFinal.Visible = true;
            trProdRegulatedProductRAQ2Final.Visible = true;
            PSandRAReadOnlyFinal.Visible = true;
            if ((Request.QueryString["From"].ToString() == "MailEdit" || Request.QueryString["From"].ToString() == "ForEOEdit") && ViewState["stage"].ToString().ToUpper() == "Final".ToUpper() && ViewState["Status"].ToString().ToUpper() == "Draft".ToUpper())
            {
                imgPreRoute.Visible = false;
                imgPreFinalRoute.Visible = true;
                FinalPackagingandDisposition.Visible = true;
                //test()
                FinalPackagingandDispositionReadOnly.Visible = false;
                FinalCostSheet.Visible = true;
                FinalCostSheetReadOnly.Visible = false;
                TrFinalQA.Visible = true;
                TrFinalQARO.Visible = false;
                FinalFormulaCardInformation.Visible = true;
                FinalFormulaCardInformationReadOnly.Visible = false;
                FinalTestPlans.Visible = true;
                FinalTestPlansReadOnly.Visible = false;
                LabSamplingPlans.Visible = true;
                LabSamplingPlansReadOnly.Visible = false;
                FinalProductTestFlowMatrix.Visible = true;
                FinalProductTestFlowMatrixReadonly.Visible = false;
                FinalOtherSupportingDoc.Visible = true;
                FinalOtherSupportingDocReadonly.Visible = false;
                FinalApprovals.Visible = true;
                FinalApprovalsReadOnly.Visible = false;
                ViewState["Mandatory_Final_lock"] = "Lock";
                //For PCRs
                trFinalMaterialsBrandsRadioBefore.Visible = true;
                trFinalMaterialsBrands.Visible = true;
                trFinalMaterialsBrandsRadioAfter.Visible = true;
                trFinalPSRA.Visible = true;
                trFinalMaterialsBrandshead.Visible = true;
                trFinalPSRAhead.Visible = true;
                NewMaterialandBrandsReadOnlyFinal.Visible = false;
                trProdRegulatedProductRAQ2Final.Visible = false;
                PSandRAReadOnlyFinal.Visible = false;
            }
            else if ((Request.QueryString["From"].ToString() == "MailEdit" || Request.QueryString["From"].ToString() == "ForEOEdit") && ViewState["stage"].ToString().ToUpper() == "Final".ToUpper() && ViewState["Status"].ToString().ToUpper() == "Routed".ToUpper())
            {
                imgPreRoute.Visible = false;
                imgPreFinalRoute.Visible = false;
                FinalPackagingandDisposition.Visible = false;
                FinalPackagingandDispositionReadOnly.Visible = true;
                FinalCostSheet.Visible = false;
                FinalCostSheetReadOnly.Visible = true;
                TrFinalQA.Visible = false;
                TrFinalQARO.Visible = true;
                FinalFormulaCardInformation.Visible = false;
                FinalFormulaCardInformationReadOnly.Visible = true;
                FinalTestPlans.Visible = false;
                FinalTestPlansReadOnly.Visible = true;
                LabSamplingPlans.Visible = false;
                LabSamplingPlansReadOnly.Visible = true;
                FinalProductTestFlowMatrix.Visible = false;
                FinalProductTestFlowMatrixReadonly.Visible = true;
                FinalOtherSupportingDoc.Visible = false;
                FinalOtherSupportingDocReadonly.Visible = true;
                FinalApprovals.Visible = false;
                FinalApprovalsReadOnly.Visible = true;
                ViewState["Mandatory_Final_lock"] = "Lock";
                //For PCRs
                trFinalMaterialsBrandsRadioBefore.Visible = false;
                trFinalMaterialsBrands.Visible = false;
                trFinalMaterialsBrandsRadioAfter.Visible = false;
                trFinalPSRA.Visible = false;
                trFinalMaterialsBrandshead.Visible = false;
                trFinalPSRAhead.Visible = false;
                NewMaterialandBrandsReadOnlyFinal.Visible = true;
                trProdRegulatedProductRAQ2Final.Visible = true;
                PSandRAReadOnlyFinal.Visible = true;
            }
            else if ((Request.QueryString["From"].ToString() == "MailEdit" || Request.QueryString["From"].ToString() == "ForEOEdit") && ViewState["stage"].ToString().ToUpper() == "CloseOut".ToUpper() && ViewState["Status"].ToString().ToUpper() == "Draft".ToUpper())
            {
                btnTabFinal.ImageUrl = "../Images/final-nor.gif";
                btnTabPreliminary.ImageUrl = "../Images/preliminary-nor.gif";
                btnTabCloseOut.ImageUrl = "../Images/close-out-over.gif";
                imgPreRoute.Visible = false;
                imgPreFinalRoute.Visible = false;
                imgCloseOutRoute.Visible = true;
                FirstSectionPreliminary.Visible = false;
                TrGeneralPreliminaryRO.Visible = false;
                NewMaterialandBrands.Visible = false;
                NewMaterialandBrandsReadOnly.Visible = false;
                HSandSE.Visible = false;
                HSandSEReadOnly.Visible = false;
                PSandRA.Visible = false;
                PSandRAReadOnly.Visible = false;
                PlanningandBudgetInfo.Visible = false;
                PlanningandBudgetInfoReadOnly.Visible = false;
                ProductionandPackaging.Visible = false;
                ProductionandPackagingReadOnly.Visible = false;
                PackagingandDispositionPreliminary.Visible = false;
                PackagingandDispositionPreliminaryReadOnly.Visible = false;
                PreliminaryApprovals.Visible = false;
                PreliminaryApprovalsReadOnly.Visible = false;
                PreliminaryRevision.Visible = true;
                FinalPackagingandDisposition.Visible = false;
                FinalPackagingandDispositionReadOnly.Visible = false;
                FinalCostSheet.Visible = false;
                FinalCostSheetReadOnly.Visible = false;
                TrFinalQA.Visible = false;
                TrFinalQARO.Visible = false;
                FinalFormulaCardInformation.Visible = false;
                FinalFormulaCardInformationReadOnly.Visible = false;
                FinalTestPlans.Visible = false;
                FinalTestPlansReadOnly.Visible = false;
                LabSamplingPlans.Visible = false;
                LabSamplingPlansReadOnly.Visible = false;
                FinalProductTestFlowMatrix.Visible = false;
                FinalProductTestFlowMatrixReadonly.Visible = false;
                FinalOtherSupportingDoc.Visible = false;
                FinalOtherSupportingDocReadonly.Visible = false;
                FinalApprovals.Visible = false;
                FinalApprovalsReadOnly.Visible = false;
                FinalPackagingandDisposition.Visible = false;
                FinalPackagingandDispositionReadOnly.Visible = false;
                FinalCostSheet.Visible = false;
                FinalCostSheetReadOnly.Visible = false;
                TrFinalQA.Visible = false;
                TrFinalQARO.Visible = false;
                FinalFormulaCardInformation.Visible = false;
                FinalFormulaCardInformationReadOnly.Visible = false;
                FinalTestPlans.Visible = false;
                FinalTestPlansReadOnly.Visible = false;
                LabSamplingPlans.Visible = false;
                LabSamplingPlansReadOnly.Visible = false;
                FinalProductTestFlowMatrix.Visible = false;
                FinalProductTestFlowMatrixReadonly.Visible = false;
                FinalOtherSupportingDoc.Visible = false;
                FinalOtherSupportingDocReadonly.Visible = false;
                FinalApprovals.Visible = false;
                FinalApprovalsReadOnly.Visible = false;
                trFinalMaterialsBrandsRadioBefore.Visible = false;
                trFinalMaterialsBrands.Visible = false;
                trFinalMaterialsBrandsRadioAfter.Visible = false;
                trFinalPSRA.Visible = false;
                trFinalMaterialsBrandshead.Visible = false;
                trFinalPSRAhead.Visible = false;
                NewMaterialandBrandsReadOnlyFinal.Visible = false;
                trProdRegulatedProductRAQ2Final.Visible = false;
                PSandRAReadOnlyFinal.Visible = false;
                //Close Out Edit Fields
                CloseFirstSection.Visible = true;
                CloseActualCostSheet.Visible = true;
                CloseInitialLearningReport.Visible = true;
                CloseTestPlansUsed.Visible = true;
                CloseOutReport.Visible = true;
                CloseApprovals.Visible = true;
                CloseRevision.Visible = true;
                //Close Out Read only Fields
                CloseActualCostSheetReadonly.Visible = false;
                CloseInitialLearningReportReadOnly.Visible = false;
                CloseTestPlansUsedReadonly.Visible = false;
                CloseoutReportRO.Visible = false;
                CloseApprovalsReadonly.Visible = false;
            }
            else if ((Request.QueryString["From"].ToString() == "MailEdit" || Request.QueryString["From"].ToString() == "ForEOEdit") && ViewState["stage"].ToString().ToUpper() == "CloseOut".ToUpper() && ViewState["Status"].ToString().ToUpper() == "Routed".ToUpper())
            {
                btnTabFinal.ImageUrl = "../Images/final-nor.gif";
                btnTabPreliminary.ImageUrl = "../Images/preliminary-nor.gif";
                btnTabCloseOut.ImageUrl = "../Images/close-out-over.gif";
                imgPreRoute.Visible = false;
                imgPreFinalRoute.Visible = false;
                imgCloseOutRoute.Visible = false;
                FirstSectionPreliminary.Visible = false;
                TrGeneralPreliminaryRO.Visible = false;
                NewMaterialandBrands.Visible = false;
                NewMaterialandBrandsReadOnly.Visible = false;
                HSandSE.Visible = false;
                HSandSEReadOnly.Visible = false;
                PSandRA.Visible = false;
                PSandRAReadOnly.Visible = false;
                PlanningandBudgetInfo.Visible = false;
                PlanningandBudgetInfoReadOnly.Visible = false;
                ProductionandPackaging.Visible = false;
                ProductionandPackagingReadOnly.Visible = false;
                PackagingandDispositionPreliminary.Visible = false;
                PackagingandDispositionPreliminaryReadOnly.Visible = false;
                PreliminaryApprovals.Visible = false;
                PreliminaryApprovalsReadOnly.Visible = false;
                PreliminaryRevision.Visible = true;
                FinalPackagingandDisposition.Visible = false;
                FinalPackagingandDispositionReadOnly.Visible = false;
                FinalCostSheet.Visible = false;
                FinalCostSheetReadOnly.Visible = false;
                TrFinalQA.Visible = false;
                TrFinalQARO.Visible = false;
                FinalFormulaCardInformation.Visible = false;
                FinalFormulaCardInformationReadOnly.Visible = false;
                FinalTestPlans.Visible = false;
                FinalTestPlansReadOnly.Visible = false;
                LabSamplingPlans.Visible = false;
                LabSamplingPlansReadOnly.Visible = false;
                FinalProductTestFlowMatrix.Visible = false;
                FinalProductTestFlowMatrixReadonly.Visible = false;
                FinalOtherSupportingDoc.Visible = false;
                FinalOtherSupportingDocReadonly.Visible = false;
                FinalApprovals.Visible = false;
                FinalApprovalsReadOnly.Visible = false;
                FinalPackagingandDisposition.Visible = false;
                FinalPackagingandDispositionReadOnly.Visible = false;
                FinalCostSheet.Visible = false;
                FinalCostSheetReadOnly.Visible = false;
                TrFinalQA.Visible = false;
                TrFinalQARO.Visible = false;
                FinalFormulaCardInformation.Visible = false;
                FinalFormulaCardInformationReadOnly.Visible = false;
                FinalTestPlans.Visible = false;
                FinalTestPlansReadOnly.Visible = false;
                LabSamplingPlans.Visible = false;
                LabSamplingPlansReadOnly.Visible = false;
                FinalProductTestFlowMatrix.Visible = false;
                FinalProductTestFlowMatrixReadonly.Visible = false;
                FinalOtherSupportingDoc.Visible = false;
                FinalOtherSupportingDocReadonly.Visible = false;
                FinalApprovals.Visible = false;
                FinalApprovalsReadOnly.Visible = false;
                //For PCRs
                trFinalMaterialsBrandsRadioBefore.Visible = false;
                trFinalMaterialsBrands.Visible = false;
                trFinalMaterialsBrandsRadioAfter.Visible = false;
                trFinalPSRA.Visible = false;
                trFinalMaterialsBrandshead.Visible = false;
                trFinalPSRAhead.Visible = false;
                NewMaterialandBrandsReadOnlyFinal.Visible = false;
                trProdRegulatedProductRAQ2Final.Visible = false;
                PSandRAReadOnlyFinal.Visible = false;
                //Close Out Edit Fields
                CloseFirstSection.Visible = false;
                CloseActualCostSheet.Visible = false;
                CloseInitialLearningReport.Visible = false;
                CloseTestPlansUsed.Visible = false;
                CloseOutReport.Visible = false;
                CloseApprovals.Visible = false;
                CloseRevision.Visible = false;
                //Close Out Read only Fields
                CloseFirstSectionReadonly.Visible = true;
                CloseActualCostSheetReadonly.Visible = true;
                CloseInitialLearningReportReadOnly.Visible = true;
                CloseTestPlansUsedReadonly.Visible = true;
                CloseoutReportRO.Visible = true;
                CloseApprovalsReadonly.Visible = true;
            }
            else if ((Request.QueryString["From"].ToString() == "MailEdit" || Request.QueryString["From"].ToString() == "ForEOEdit") && ViewState["stage"].ToString().ToUpper() == "CloseOut".ToUpper() && ViewState["Status"].ToString().ToUpper() == "Approved".ToUpper())
            {
                //ViewState["Mandatory_Final_lock"] = "Lock"
                btnTabFinal.ImageUrl = "../Images/final-nor.gif";
                btnTabPreliminary.ImageUrl = "../Images/preliminary-nor.gif";
                btnTabCloseOut.ImageUrl = "../Images/close-out-over.gif";
                imgPreRoute.Visible = false;
                imgPreFinalRoute.Visible = false;
                imgCloseOutRoute.Visible = false;
                FirstSectionPreliminary.Visible = false;
                TrGeneralPreliminaryRO.Visible = false;
                NewMaterialandBrands.Visible = false;
                NewMaterialandBrandsReadOnly.Visible = false;
                HSandSE.Visible = false;
                HSandSEReadOnly.Visible = false;
                PSandRA.Visible = false;
                PSandRAReadOnly.Visible = false;
                PlanningandBudgetInfo.Visible = false;
                PlanningandBudgetInfoReadOnly.Visible = false;
                ProductionandPackaging.Visible = false;
                ProductionandPackagingReadOnly.Visible = false;
                PackagingandDispositionPreliminary.Visible = false;
                PackagingandDispositionPreliminaryReadOnly.Visible = false;
                PreliminaryApprovals.Visible = false;
                PreliminaryApprovalsReadOnly.Visible = false;
                PreliminaryRevision.Visible = true;
                FinalPackagingandDisposition.Visible = false;
                FinalPackagingandDispositionReadOnly.Visible = false;
                FinalCostSheet.Visible = false;
                FinalCostSheetReadOnly.Visible = false;
                TrFinalQA.Visible = false;
                TrFinalQARO.Visible = false;
                FinalFormulaCardInformation.Visible = false;
                FinalFormulaCardInformationReadOnly.Visible = false;
                FinalTestPlans.Visible = false;
                FinalTestPlansReadOnly.Visible = false;
                LabSamplingPlans.Visible = false;
                LabSamplingPlansReadOnly.Visible = false;
                FinalProductTestFlowMatrix.Visible = false;
                FinalProductTestFlowMatrixReadonly.Visible = false;
                FinalOtherSupportingDoc.Visible = false;
                FinalOtherSupportingDocReadonly.Visible = false;
                FinalApprovals.Visible = false;
                FinalApprovalsReadOnly.Visible = false;
                FinalPackagingandDisposition.Visible = false;
                FinalPackagingandDispositionReadOnly.Visible = false;
                FinalCostSheet.Visible = false;
                FinalCostSheetReadOnly.Visible = false;
                TrFinalQA.Visible = false;
                TrFinalQARO.Visible = false;
                FinalFormulaCardInformation.Visible = false;
                FinalFormulaCardInformationReadOnly.Visible = false;
                FinalTestPlans.Visible = false;
                FinalTestPlansReadOnly.Visible = false;
                LabSamplingPlans.Visible = false;
                LabSamplingPlansReadOnly.Visible = false;
                FinalProductTestFlowMatrix.Visible = false;
                FinalProductTestFlowMatrixReadonly.Visible = false;
                FinalOtherSupportingDoc.Visible = false;
                FinalOtherSupportingDocReadonly.Visible = false;
                FinalApprovals.Visible = false;
                FinalApprovalsReadOnly.Visible = false;
                //For PCRs
                trFinalMaterialsBrandsRadioBefore.Visible = false;
                trFinalMaterialsBrands.Visible = false;
                trFinalMaterialsBrandsRadioAfter.Visible = false;
                trFinalPSRA.Visible = false;
                trFinalMaterialsBrandshead.Visible = false;
                trFinalPSRAhead.Visible = false;
                NewMaterialandBrandsReadOnlyFinal.Visible = false;
                trProdRegulatedProductRAQ2Final.Visible = false;
                PSandRAReadOnlyFinal.Visible = false;
                //Close Out Edit Fields
                CloseFirstSection.Visible = false;
                CloseActualCostSheet.Visible = false;
                CloseInitialLearningReport.Visible = false;
                CloseTestPlansUsed.Visible = false;
                CloseOutReport.Visible = false;
                CloseApprovals.Visible = false;
                CloseRevision.Visible = false;
                //Close Out Read only Fields
                CloseFirstSectionReadonly.Visible = true;
                CloseActualCostSheetReadonly.Visible = true;
                CloseInitialLearningReportReadOnly.Visible = true;
                CloseTestPlansUsedReadonly.Visible = true;
                CloseoutReportRO.Visible = true;
                CloseApprovalsReadonly.Visible = true;
            }
        }

        public void lockforapprovers()
        {
            if ((ViewState["stage"] != null))
            {
                string strOriginatorcheck = null;
                string strCooriginatorcheck = null;
                DataSet ds = new DataSet();



                if (objEOBA.GETEOMandatory(Convert.ToInt32(Request.QueryString["EOID"]), ref ds))
                {
                    if (ds.Tables[0].Rows[0]["Originator"] != System.DBNull.Value)
                    {
                        strOriginatorcheck = ds.Tables[0].Rows[0]["Originator"].ToString();
                    }
                    else
                    {
                        strOriginatorcheck = string.Empty;
                    }
                    if (ds.Tables[0].Rows[0]["CoOriginator"] != System.DBNull.Value)
                    {
                        strCooriginatorcheck = ds.Tables[0].Rows[0]["CoOriginator"].ToString();
                    }
                    else
                    {
                        strCooriginatorcheck = string.Empty;
                    }
                }
                if (ViewState["stage"].ToString().ToUpper() == "Preliminary".ToUpper() && ViewState["Status"].ToString().ToUpper() == "Routed".ToUpper())
                {
                    if (strOriginatorcheck.ToUpper() == objSecurity.UserName.Trim().ToUpper())
                    {
                    }
                    else if (strCooriginatorcheck.ToUpper() == objSecurity.UserName.Trim().ToUpper())
                    {
                    }
                    else
                    {
                        GET_EO_Final_Lock();
                        Mandatory_final_lock();
                        CloseActualCostSheet.Visible = false;
                        CloseInitialLearningReport.Visible = false;
                        CloseTestPlansUsed.Visible = false;
                        CloseOutReport.Visible = false;
                        CloseApprovals.Visible = false;
                        CloseRevision.Visible = false;
                        CloseFirstSectionReadonly.Visible = true;
                        CloseActualCostSheetReadonly.Visible = true;
                        CloseInitialLearningReportReadOnly.Visible = true;
                        CloseTestPlansUsedReadonly.Visible = true;
                        CloseoutReportRO.Visible = true;
                        CloseApprovalsReadonly.Visible = true;
                        btnTabPreliminary.ImageUrl = "../Images/preliminary-over.gif";
                        btnTabFinal.ImageUrl = "../Images/final-nor.gif";
                        btnTabCloseOut.ImageUrl = "../Images/close-out-nor.gif";
                        tblTop.Visible = false;
                        tblTopReadonly.Visible = true;
                        FirstSectionPreliminary.Visible = false;
                        TrGeneralPreliminaryRO.Visible = true;
                        NewMaterialandBrands.Visible = false;
                        NewMaterialandBrandsReadOnly.Visible = true;
                        HSandSE.Visible = false;
                        HSandSEReadOnly.Visible = true;
                        PSandRA.Visible = false;
                        PSandRAReadOnly.Visible = true;
                        PlanningandBudgetInfo.Visible = false;
                        PlanningandBudgetInfoReadOnly.Visible = true;
                        ProductionandPackaging.Visible = false;
                        ProductionandPackagingReadOnly.Visible = true;
                        PackagingandDispositionPreliminary.Visible = false;
                        PackagingandDispositionPreliminaryReadOnly.Visible = true;
                        PreliminaryApprovals.Visible = false;
                        PreliminaryApprovalsReadOnly.Visible = true;
                        PreliminaryRevision.Visible = true;
                        FinalPackagingandDisposition.Visible = false;
                        FinalPackagingandDispositionReadOnly.Visible = false;
                        FinalCostSheet.Visible = false;
                        FinalCostSheetReadOnly.Visible = false;
                        TrFinalQA.Visible = false;
                        TrFinalQARO.Visible = false;
                        FinalFormulaCardInformation.Visible = false;
                        FinalFormulaCardInformationReadOnly.Visible = false;
                        FinalTestPlans.Visible = false;
                        FinalTestPlansReadOnly.Visible = false;
                        LabSamplingPlans.Visible = false;
                        LabSamplingPlansReadOnly.Visible = false;
                        FinalProductTestFlowMatrix.Visible = false;
                        FinalProductTestFlowMatrixReadonly.Visible = false;
                        FinalOtherSupportingDoc.Visible = false;
                        FinalOtherSupportingDocReadonly.Visible = false;
                        FinalApprovals.Visible = false;
                        FinalApprovalsReadOnly.Visible = false;
                        trFinalMaterialsBrandsRadioBefore.Visible = false;
                        trFinalMaterialsBrands.Visible = false;
                        trFinalMaterialsBrandsRadioAfter.Visible = false;
                        trFinalPSRA.Visible = false;
                        trFinalMaterialsBrandshead.Visible = false;
                        trFinalPSRAhead.Visible = false;
                        NewMaterialandBrandsReadOnlyFinal.Visible = false;
                        trProdRegulatedProductRAQ2Final.Visible = false;
                        PSandRAReadOnlyFinal.Visible = false;
                        CloseFirstSection.Visible = false;
                        CloseActualCostSheet.Visible = false;
                        CloseInitialLearningReport.Visible = false;
                        CloseTestPlansUsed.Visible = false;
                        CloseOutReport.Visible = false;
                        CloseApprovals.Visible = false;
                        CloseRevision.Visible = false;
                        CloseFirstSectionReadonly.Visible = false;
                        CloseActualCostSheetReadonly.Visible = false;
                        CloseInitialLearningReportReadOnly.Visible = false;
                        CloseTestPlansUsedReadonly.Visible = false;
                        CloseoutReportRO.Visible = false;
                        CloseApprovalsReadonly.Visible = false;
                        imgSaveResume.Visible = false;
                        btnSave.Visible = false;
                        btnSaveandExit.Visible = false;
                    }
                }

                if (ViewState["stage"].ToString().ToUpper() == "Final".ToUpper() & ViewState["Status"].ToString().ToUpper() == "Routed".ToUpper())
                {
                    if (strOriginatorcheck.ToUpper() == objSecurity.UserName.Trim().ToUpper())
                    {
                    }
                    else if (strCooriginatorcheck.ToUpper() == objSecurity.UserName.Trim().ToUpper())
                    {
                    }
                    else
                    {
                        GET_EO_Preliminary_Lock();
                        Mandatory_Pre_lock();
                        GET_EO_Final_Lock();
                        Mandatory_final_lock();
                        CloseActualCostSheet.Visible = false;
                        CloseInitialLearningReport.Visible = false;
                        CloseTestPlansUsed.Visible = false;
                        CloseOutReport.Visible = false;
                        CloseApprovals.Visible = false;
                        CloseRevision.Visible = false;
                        CloseFirstSectionReadonly.Visible = false;
                        CloseActualCostSheetReadonly.Visible = false;
                        CloseInitialLearningReportReadOnly.Visible = false;
                        CloseTestPlansUsedReadonly.Visible = false;
                        CloseoutReportRO.Visible = false;
                        CloseApprovalsReadonly.Visible = false;
                        btnTabFinal.ImageUrl = "../Images/final-over.gif";
                        btnTabPreliminary.ImageUrl = "../Images/preliminary-nor.gif";
                        btnTabCloseOut.ImageUrl = "../Images/close-out-nor.gif";
                        imgSaveResume.Visible = false;
                        btnSave.Visible = false;
                        btnSaveandExit.Visible = false;
                    }
                }
                if (ViewState["stage"].ToString().ToUpper() == "CloseOut".ToUpper() && ViewState["Status"].ToString().ToUpper() == "Routed".ToUpper())
                {
                    if (strOriginatorcheck.ToUpper() == objSecurity.UserName.Trim().ToUpper())
                    {
                    }
                    else if (strCooriginatorcheck.ToUpper() == objSecurity.UserName.Trim().ToUpper())
                    {
                    }
                    else
                    {
                        Mandatory_AllTabs_lock();
                        btnTabCloseOut.ImageUrl = "../Images/close-out-over.gif";
                        btnTabPreliminary.ImageUrl = "../Images/preliminary-nor.gif";
                        btnTabFinal.ImageUrl = "../Images/final-nor.gif";
                        imgSaveResume.Visible = false;
                        btnSave.Visible = false;
                        btnSaveandExit.Visible = false;
                    }
                }
            }
            if (ViewState["stage"] != null)
                lblStageLevel.Text = ViewState["stage"].ToString();
            if (ViewState["Status"] != null)
                lblStatusType.Text = ViewState["Status"].ToString();
        }

        public void FillGCASDataGrid()
        {
            DataTable dtGCAS = new DataTable();
            try
            {
                dtGCAS = (DataTable)Session["DT"];
                if (dtGCAS != null)
                {
                    dgdGCASInfo.DataSource = dtGCAS;
                    dgdGCASInfo.DataBind();
                    txtGCASYESNOOptionValue.Text = "No";
                }
            }
            finally
            { dtGCAS = null; }

        }

        public void FillPSRADataGrid()
        {
            DataTable dtPSRA = new DataTable();
            try
            {
                dtPSRA = (DataTable)Session["DTPSRA"];
                if ((dtPSRA != null))
                {
                    dgdPSRAInfo.DataSource = dtPSRA;
                    dgdPSRAInfo.DataBind();
                    txtPSRAYESNOOptionValue.Text = "No";
                }
            }
            finally
            { dtPSRA = null; }
        }

        private DataTable MakePSRATable()
        {
            // Create a new DataTable titled 'Names.'
            DataTable namesTable = new DataTable("PSRATable");
            // Add three column objects to the table.
            DataColumn CTTrackingColumn = new DataColumn();
            CTTrackingColumn.DataType = System.Type.GetType("System.Double");
            CTTrackingColumn.ColumnName = "CT Tracking Number";
            namesTable.Columns.Add(CTTrackingColumn);

            DataColumn SupplierColumn = new DataColumn();
            SupplierColumn.DataType = System.Type.GetType("System.String");
            SupplierColumn.ColumnName = "Supplier Name";
            namesTable.Columns.Add(SupplierColumn);

            DataColumn MatlApplicationColumn = new DataColumn();
            MatlApplicationColumn.DataType = System.Type.GetType("System.String");
            MatlApplicationColumn.ColumnName = "Matl Application";
            namesTable.Columns.Add(MatlApplicationColumn);

            DataColumn MaterialUsageColumn = new DataColumn();
            MaterialUsageColumn.DataType = System.Type.GetType("System.String");
            MaterialUsageColumn.ColumnName = "Matl Usage Amt";
            namesTable.Columns.Add(MaterialUsageColumn);

            DataColumn PSRALevelColumn = new DataColumn();
            PSRALevelColumn.DataType = System.Type.GetType("System.String");
            PSRALevelColumn.ColumnName = "PS&RA Level";
            namesTable.Columns.Add(PSRALevelColumn);

            // Return the new DataTable.
            return namesTable;
        }

        private DataTable MakeNamesTable()
        {
            // Create a new DataTable titled 'Names.'
            DataTable namesTable = new DataTable("GCASTable");
            // Add three column objects to the table.
            DataColumn GCASColumn = new DataColumn();
            GCASColumn.DataType = System.Type.GetType("System.Double");
            GCASColumn.ColumnName = "GCAS Number";
            namesTable.Columns.Add(GCASColumn);

            DataColumn siteColumn = new DataColumn();
            siteColumn.DataType = System.Type.GetType("System.String");
            siteColumn.ColumnName = "Site";
            namesTable.Columns.Add(siteColumn);

            DataColumn NewsiteColumn = new DataColumn();
            siteColumn.DataType = System.Type.GetType("System.String");
            NewsiteColumn.ColumnName = "New To Site";
            namesTable.Columns.Add(NewsiteColumn);

            DataColumn categoryColumn = new DataColumn();
            categoryColumn.DataType = System.Type.GetType("System.String");
            categoryColumn.ColumnName = "New To Category";
            namesTable.Columns.Add(categoryColumn);

            DataColumn interColumn = new DataColumn();
            interColumn.DataType = System.Type.GetType("System.String");
            interColumn.ColumnName = "Intermediate";
            namesTable.Columns.Add(interColumn);

            DataColumn TypeColumn = new DataColumn();
            TypeColumn.DataType = System.Type.GetType("System.String");
            TypeColumn.ColumnName = "Type";
            namesTable.Columns.Add(TypeColumn);
            // Return the new DataTable.
            return namesTable;
        }

        public void DataNotFound()
        {
            //string strJavaScript = string.Empty;
            //strJavaScript = "<script>alert('Events are required for creating an EO.')</script>";
            //Page.RegisterStartupScript("error_message", strJavaScript);
            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "alert('Events are required for creating an EO.');", true);
        }

        private void lnkRecal_Click(System.Object sender, System.EventArgs e)
        {
            if (string.IsNullOrEmpty(txtPaperMaking.Text))
            {
                txtPaperMaking.Text = "0";
            }
            if (string.IsNullOrEmpty(txtConvertingTime.Text))
            {
                txtConvertingTime.Text = "0";
            }
            if (string.IsNullOrEmpty(txtCostNewMaterials.Text))
            {
                txtCostNewMaterials.Text = "0";
            }
            if (string.IsNullOrEmpty(txtEOEquipment.Text))
            {
                txtEOEquipment.Text = "0";
            }
            if (string.IsNullOrEmpty(txtExecutionCost.Text))
            {
                txtExecutionCost.Text = "0";
            }
            lbPreSpending.Text = (Convert.ToDouble(txtCostNewMaterials.Text) + Convert.ToDouble(txtEOEquipment.Text)).ToString();
            lbTotalCost.Text = (Convert.ToDouble(txtCostNewMaterials.Text) + Convert.ToDouble(txtEOEquipment.Text) + Convert.ToDouble(txtExecutionCost.Text)).ToString();
            ViewState["Cost"] = lbTotalCost.Text;
        }



        private void BrandSegmentSelect()
        {
            lblEOSelectedBrandDB.Text = "";
            lblBrandIDList.Text = "";
            int intBrand = 0;
            for (intBrand = 0; intBrand <= lbEOBrandsDB.Items.Count - 1; intBrand++)
            {
                if (lbEOBrandsDB.Items[intBrand].Selected == true)
                {
                    if (string.IsNullOrEmpty(lblEOSelectedBrandDB.Text))
                    {
                        lblEOSelectedBrandDB.Text = lbEOBrandsDB.Items[intBrand].Text;
                    }
                    else
                    {
                        lblEOSelectedBrandDB.Text = lblEOSelectedBrandDB.Text + "," + lbEOBrandsDB.Items[intBrand].Text;
                    }
                }
            }
            lbEOEventsDB.Items.Clear();
            for (intBrand = 0; intBrand <= lbEOBrandsDB.Items.Count - 1; intBrand++)
            {
                if (lbEOBrandsDB.Items[intBrand].Selected == true)
                {
                    if (string.IsNullOrEmpty(lblBrandIDList.Text))
                    {
                        lblBrandIDList.Text = lbEOBrandsDB.Items[intBrand].Value;
                    }
                    else
                    {
                        lblBrandIDList.Text = lblBrandIDList.Text + "," + lbEOBrandsDB.Items[intBrand].Value;
                    }
                }
            }

            //To fill Progect dropdown based on category & Brand Segment selection 
            DataSet dsProj = new DataSet();

            int intCatID = 0;
            if (drpCategoryDB.SelectedItem.Text == "--Select a Category--")
            {
                intCatID = 0;
            }
            else
            {
                intCatID = Convert.ToInt32(drpCategoryDB.SelectedItem.Value);
            }

            if (objEOBA.GET_MUR_Projects_By_Category_Brand_Segment(intCatID, lblBrandIDList.Text, ref dsProj))
            {
                drpEOProjectsDB.DataSource = dsProj;
                drpEOProjectsDB.DataTextField = "Project_Name";
                drpEOProjectsDB.DataValueField = "Project_ID";
                drpEOProjectsDB.DataBind();
                drpEOProjectsDB.Items.Insert(0, "--Select a Project--");
            }

            DataSet ds = new DataSet();
            int intPID = 0;
            if (drpPlant.SelectedItem.Value == "--Select a Plant--")
            {
                intPID = 0;
            }
            else
            {
                intPID = Convert.ToInt32(drpPlant.SelectedItem.Value);
            }

            if (objEOBA.GET_EO_Approval_Groups_By_Plant_Brand_EOMode(intPID, lblBrandIDList.Text, Convert.ToChar(rbEOType.SelectedItem.Value), ref ds))
            {

                drpPrelimApproval.DataSource = ds;
                drpPrelimApproval.DataTextField = "Approval_Group_Name";
                drpPrelimApproval.DataValueField = "Approval_Group_ID";
                drpPrelimApproval.DataBind();

                if (drpBudgetCenterDB.SelectedItem.Text == "--Select a Budget Center--")
                {
                    drpBudgetCenterDB.Items.Clear();
                    drpBudgetCenterDB.DataSource = ds.Tables[1].DefaultView;
                    drpBudgetCenterDB.DataTextField = "Budget_Center_Name";
                    drpBudgetCenterDB.DataValueField = "Budget_Center_ID";
                    drpBudgetCenterDB.DataBind();
                    drpBudgetCenterDB.Items.Insert(0, "--Select a Budget Center--");
                }

                if ((Request.QueryString["From"] != null) && (!(Request.QueryString["From"].ToString() == "CopyNew" || Request.QueryString["From"].ToString() == "ForEOEdit" || Request.QueryString["From"].ToString() == "ForEOLock" || Request.QueryString["From"].ToString() == "MailEdit")))
                {
                    drpPrelimApproval.Items.Insert(0, "--Select Approver Group--");
                }

                drpAppGrpFinal.DataSource = ds;
                drpAppGrpFinal.DataTextField = "Approval_Group_Name";
                drpAppGrpFinal.DataValueField = "Approval_Group_ID";
                drpAppGrpFinal.DataBind();
                drpAppGrpFinal.Items.Insert(0, "--Select Approver Group--");

                drpCloseApprovalGroup.DataSource = ds;
                drpCloseApprovalGroup.DataTextField = "Approval_Group_Name";
                drpCloseApprovalGroup.DataValueField = "Approval_Group_ID";
                drpCloseApprovalGroup.DataBind();
                drpCloseApprovalGroup.Items.Insert(0, "--Select Approver Group--");
            }
        }

        private int GCASPSRASave()
        {

            objEO objEO = new objEO();
            //Main(top) 
            objEO.EOID = "0";
            //ViewState["EOID"]
            if (!string.IsNullOrEmpty(txtTitle.Text))
            {
                objEO.Title = txtTitle.Text;
            }
            else
            {
                objEO.Title = "NewEO" + System.DateTime.Now;
            }
            objEO.CurrentStagePre = "Preliminary";
            objEO.StageStatus = "Draft";
            objEO.EOSiteTestOther = "E";
            //Evnets ListBox
            int intEvents = 0;
            string EventID = null;
            for (intEvents = 0; intEvents <= lbEOEventsDB.Items.Count - 1; intEvents++)
            {
                if (lbEOEventsDB.Items[intEvents].Selected == true)
                {
                    if (string.IsNullOrEmpty(EventID))
                    {
                        EventID = lbEOEventsDB.Items[intEvents].Value;
                        //lbEOEventsDB.SelectedItem.Value
                    }
                    else
                    {
                        EventID = EventID + "," + lbEOEventsDB.Items[intEvents].Value;
                        //lbEOEventsDB.SelectedItem.Value
                    }
                }
            }
            if (!string.IsNullOrEmpty(EventID))
            {
                objEO.EventIDs = EventID;
            }
            else
            {
                objEO.EventIDs = DBNull.Value.ToString();
            }
            //Project dropdown
            if (!(drpEOProjectsDB.SelectedIndex == -1))
            {
                if (!(drpEOProjectsDB.SelectedItem.Value == "--Select a Project--"))
                {
                    objEO.ProjectID = Convert.ToInt32(drpEOProjectsDB.SelectedItem.Value);
                }
                else
                {
                    objEO.ProjectID = 0;
                }
            }
            else
            {
                objEO.ProjectID = 0;
            }

            //Plant dropdown

            if (!(drpPlant.SelectedIndex == -1 || drpPlant.SelectedItem.Text == "--Select a Plant--"))
            {
                objEO.PlantID = Convert.ToInt32(drpPlant.SelectedItem.Value);
            }
            else
            {
                objEO.PlantID = 0;
            }

            if (!(drpCategoryDB.SelectedIndex == -1))
            {
                if (!(drpCategoryDB.SelectedItem.Value == "--Select a Category--"))
                {
                    objEO.CategoryID = Convert.ToInt32(drpCategoryDB.SelectedItem.Value);
                }
                else
                {
                    objEO.CategoryID = 0;
                }
            }
            else
            {
                objEO.CategoryID = 0;
            }

            //CoOrdinator label
            if (!string.IsNullOrEmpty(lblCoOrdinator.Text))
            {
                objEO.Originator = lblCoOrdinator.Text;
            }
            else
            {
                objEO.Originator = DBNull.Value.ToString();
            }

            //Office Number
            if (!string.IsNullOrEmpty(txtOfficeNumber.Text))
            {
                objEO.OfficeNumber = txtOfficeNumber.Text;
            }
            else
            {
                objEO.OfficeNumber = DBNull.Value.ToString();
            }

            //PhNumber
            if (!string.IsNullOrEmpty(txtPhoneNumberDB.Text))
            {
                objEO.PhoneNumber = txtPhoneNumberDB.Text;
            }
            else
            {
                objEO.PhoneNumber = DBNull.Value.ToString();
            }

            //Brand Segment list

            string strBrands = null;
            int intBrandlist = 0;
            for (intBrandlist = 0; intBrandlist <= lbEOBrandsDB.Items.Count - 1; intBrandlist++)
            {
                if (lbEOBrandsDB.Items[intBrandlist].Selected == true)
                {
                    if (string.IsNullOrEmpty(strBrands))
                    {
                        strBrands = lbEOBrandsDB.Items[intBrandlist].Value;
                    }
                    else
                    {
                        strBrands = strBrands + "," + lbEOBrandsDB.Items[intBrandlist].Value;
                    }
                }

            }
            if (!string.IsNullOrEmpty(strBrands))
            {
                objEO.Brands = strBrands;
            }
            else
            {
                objEO.Brands = DBNull.Value.ToString();
            }

            //objEO.Brands = DBNull.Value.ToString

            //Coorginator
            if (!string.IsNullOrEmpty(txtCooriginator.Text))
            {
                objEO.CoOrginator = txtCooriginator.Text;
            }
            else
            {
                objEO.CoOrginator = DBNull.Value.ToString();
            }


            int intresSetEOMandatory = 0;

            SqlParameter[] paramOut = null;
            if (objEOBA.SetEOMandatory(objEO, ref paramOut))
            {
                intresSetEOMandatory = Convert.ToInt32(paramOut[0].Value);
            }
            ViewState["EOID"] = intresSetEOMandatory;
            objEO.EOID = intresSetEOMandatory.ToString();
            return intresSetEOMandatory;
        }

        public void preliminaryApprCheck()
        {

            string strFUNAPPName = string.Empty;
            string strBackUpAppName = string.Empty;
            string strCoOrginator = string.Empty;
            string strOrginator = string.Empty;
            DataSet ds = new DataSet();
            DataSet dsmandatory = new DataSet();

            if (objEOBA.GETEOMandatory(Convert.ToInt32(Request.QueryString["EOID"]), ref dsmandatory))
            {
                if (dsmandatory.Tables[0].Rows.Count != 0)
                {
                    if ((dsmandatory.Tables[0].Rows[0]["CoOriginator"]) != System.DBNull.Value)
                    {
                        strCoOrginator = dsmandatory.Tables[0].Rows[0]["CoOriginator"].ToString();
                    }
                    if ((dsmandatory.Tables[0].Rows[0]["Originator"]) != System.DBNull.Value)
                    {
                        strOrginator = dsmandatory.Tables[0].Rows[0]["Originator"].ToString();
                    }
                }
            }


            clsSecurity objSecurity = new clsSecurity();
            string strBudgetAppStrStatus = "N";
            if (objEOBA.GET_EO_Preliminary(Convert.ToInt32(ViewState["EOID"]), ref ds))
            {
                if (ds.Tables[12].Rows.Count != 0)
                {
                    for (int intRowCount = 0; intRowCount < ds.Tables[12].Rows.Count; intRowCount++)
                    {
                        if (ds.Tables[12].Rows[intRowCount]["Function_Name"] != System.DBNull.Value)
                        {
                            if (ds.Tables[12].Rows[intRowCount]["Function_Name"].ToString() == "Budget Center")
                            {
                                if (ds.Tables[12].Rows[intRowCount]["Approver_Name"] != System.DBNull.Value)
                                    strFUNAPPName = ds.Tables[12].Rows[intRowCount]["Approver_Name"].ToString();
                                else
                                    strFUNAPPName = String.Empty;

                                if (ds.Tables[12].Rows[intRowCount]["Backup_Approver_Name"] != System.DBNull.Value)
                                    strBackUpAppName = ds.Tables[12].Rows[intRowCount]["Backup_Approver_Name"].ToString();
                                else
                                    strBackUpAppName = String.Empty;


                                // 'GET_EO_Is_Approved: This function is used to Checking for current EO approved by Budget Owner or not.If not Approve,Decline,Commnets,Backup links will be visible.
                                SqlParameter[] paramOut = null;
                                //GET_EO_Is_Approved
                                if (objEOBA.GET_EO_Is_Approved(Convert.ToInt32(ViewState["EOID"].ToString().Trim()), ds.Tables[12].Rows[0]["Function_Name"].ToString(), strFUNAPPName.ToString().Trim(), "Preliminary", ref paramOut))
                                {
                                    if (paramOut[0].Value != DBNull.Value)
                                        strBudgetAppStrStatus = paramOut[0].Value.ToString();
                                    else
                                        strBudgetAppStrStatus = "N";

                                }


                                if ((strCoOrginator.ToUpper() == objSecurity.UserName.Trim().ToUpper()) ||
                                    (strOrginator.ToUpper() == objSecurity.UserName.Trim().ToUpper()) ||
                                        (ViewState["UserRole"].ToString().ToUpper() == "MUREO_Admin".ToUpper()))
                                {
                                    if (strBudgetAppStrStatus.ToUpper() != "Y")
                                    {
                                        lnkPreBOBackUp.Visible = true;

                                    }
                                    else
                                    {
                                        lnkPreBOBackUp.Visible = false;
                                        lnkPreBOPreComments.Visible = false;
                                        lnkBudgetApproved.Visible = false;
                                        lnkBudgetDeclined.Visible = false;
                                    }

                                }

                                if (strBackUpAppName.Trim().ToUpper() == objSecurity.UserName.Trim().ToUpper() || strFUNAPPName.Trim().ToUpper() == objSecurity.UserName.Trim().ToUpper())
                                {
                                    if (strBudgetAppStrStatus.ToUpper() != "Y")
                                    {
                                        lnkBudgetApproved.Visible = true;
                                        lnkBudgetDeclined.Visible = true;
                                        lnkPreBOPreComments.Visible = true;
                                        lnkPreBOBackUp.Visible = true;

                                    }
                                    else
                                    {
                                        lnkPreBOBackUp.Visible = false;
                                        lnkPreBOPreComments.Visible = false;
                                        lnkBudgetApproved.Visible = false;
                                        lnkBudgetDeclined.Visible = false;
                                    }

                                }

                            }
                        }

                        if (strBudgetAppStrStatus.ToUpper() == "Y")
                        {

                            if (ds.Tables[12].Rows[intRowCount]["Function_Name"] != System.DBNull.Value)
                            {
                                if (ds.Tables[12].Rows[intRowCount]["Function_Name"].ToString() == "Central Planning")
                                {
                                    if (ds.Tables[12].Rows[intRowCount]["Approver_Name"] != System.DBNull.Value)
                                        strFUNAPPName = ds.Tables[12].Rows[intRowCount]["Approver_Name"].ToString();
                                    else
                                        strFUNAPPName = String.Empty;

                                    if (ds.Tables[12].Rows[intRowCount]["Backup_Approver_Name"] != System.DBNull.Value)
                                        strBackUpAppName = ds.Tables[12].Rows[intRowCount]["Backup_Approver_Name"].ToString();
                                    else
                                        strBackUpAppName = String.Empty;


                                    SqlParameter[] paramOut = null;
                                    string strAppStrStatus = string.Empty;

                                    //GET_EO_Is_Approved
                                    if (objEOBA.GET_EO_Is_Approved(Convert.ToInt32(ViewState["EOID"]), ds.Tables[12].Rows[intRowCount]["Function_Name"].ToString(), objSecurity.UserName.Trim(), "Preliminary", ref paramOut))
                                    {
                                        if (paramOut[0].Value != DBNull.Value)
                                            strAppStrStatus = paramOut[0].Value.ToString();
                                        else
                                            strAppStrStatus = "N";

                                    }

                                    if ((strCoOrginator.ToUpper() == objSecurity.UserName.Trim().ToUpper()) ||
                                        (strOrginator.ToUpper() == objSecurity.UserName.Trim().ToUpper()) ||
                                            (ViewState["UserRole"].ToString().ToUpper() == "MUREO_Admin".ToUpper()))
                                    {
                                        if (strAppStrStatus.ToUpper() != "Y")
                                        {
                                            lnkPreCentralPlanBackU.Visible = true;

                                        }
                                        else
                                        {
                                            lnkPreCentralPlanBackU.Visible = false;
                                            lnkPreCentralPlanComments.Visible = false;
                                            lnkCentralPlanningApproved.Visible = false;
                                            lnkCentralPlanningDeclined.Visible = false;
                                        }

                                    }
                                    if (strBackUpAppName.Trim().ToUpper() == objSecurity.UserName.Trim().ToUpper() || strFUNAPPName.Trim().ToUpper() == objSecurity.UserName.Trim().ToUpper())
                                    {
                                        if (strAppStrStatus.ToUpper() != "Y")
                                        {
                                            lnkCentralPlanningApproved.Visible = true;
                                            lnkCentralPlanningDeclined.Visible = true;
                                            lnkPreCentralPlanComments.Visible = true;
                                            lnkPreCentralPlanBackU.Visible = true;

                                        }
                                        else
                                        {
                                            lnkPreCentralPlanBackU.Visible = false;
                                            lnkPreCentralPlanComments.Visible = false;
                                            lnkCentralPlanningApproved.Visible = false;
                                            lnkCentralPlanningDeclined.Visible = false;
                                        }

                                    }
                                }


                                if (ds.Tables[12].Rows[intRowCount]["Function_Name"].ToString() == "SAP Cost Center Coordinator")
                                {
                                    if (ds.Tables[12].Rows[intRowCount]["Approver_Name"] != System.DBNull.Value)
                                        strFUNAPPName = ds.Tables[12].Rows[intRowCount]["Approver_Name"].ToString();
                                    else
                                        strFUNAPPName = String.Empty;

                                    if (ds.Tables[12].Rows[intRowCount]["Backup_Approver_Name"] != System.DBNull.Value)
                                        strBackUpAppName = ds.Tables[12].Rows[intRowCount]["Backup_Approver_Name"].ToString();
                                    else
                                        strBackUpAppName = String.Empty;


                                    SqlParameter[] paramOut = null;
                                    string strAppStrStatus = string.Empty;
                                    //GET_EO_Is_Approved
                                    if (objEOBA.GET_EO_Is_Approved(Convert.ToInt32(ViewState["EOID"]), ds.Tables[12].Rows[intRowCount]["Function_Name"].ToString(), objSecurity.UserName.Trim(), "Preliminary", ref paramOut))
                                    {
                                        if (paramOut[0].Value != DBNull.Value)
                                            strAppStrStatus = paramOut[0].Value.ToString();
                                        else
                                            strAppStrStatus = "N";

                                    }

                                    if ((strCoOrginator.ToUpper() == objSecurity.UserName.Trim().ToUpper()) ||
                                        (strOrginator.ToUpper() == objSecurity.UserName.Trim().ToUpper()) ||
                                            (ViewState["UserRole"].ToString().ToUpper() == "MUREO_Admin".ToUpper()))
                                    {
                                        if (strAppStrStatus.ToUpper() != "Y")
                                        {
                                            lnkPreSAPBackU.Visible = true;
                                        }
                                        else
                                        {
                                            lnkPreSAPBackU.Visible = false;
                                            lnkPreSAPComments.Visible = false;
                                            lnkSAPCostCenterApproved.Visible = false;
                                            lnkSAPCostCenterDeclined.Visible = false;
                                        }
                                    }
                                    if (strBackUpAppName.Trim().ToUpper() == objSecurity.UserName.Trim().ToUpper() || strFUNAPPName.Trim().ToUpper() == objSecurity.UserName.Trim().ToUpper())
                                    {
                                        if (strAppStrStatus.ToUpper() != "Y")
                                        {
                                            lnkSAPCostCenterApproved.Visible = true;
                                            lnkSAPCostCenterDeclined.Visible = true;
                                            lnkPreSAPComments.Visible = true;
                                            lnkPreSAPBackU.Visible = true;

                                        }
                                        else
                                        {
                                            lnkPreSAPBackU.Visible = false;
                                            lnkPreSAPComments.Visible = false;
                                            lnkSAPCostCenterApproved.Visible = false;
                                            lnkSAPCostCenterDeclined.Visible = false;
                                        }

                                    }
                                }


                                if (ds.Tables[12].Rows[intRowCount]["Function_Name"].ToString() == "SMART Clearance")
                                {
                                    if (ds.Tables[12].Rows[intRowCount]["Approver_Name"] != System.DBNull.Value)
                                        strFUNAPPName = ds.Tables[12].Rows[intRowCount]["Approver_Name"].ToString();
                                    else
                                        strFUNAPPName = String.Empty;

                                    if (ds.Tables[12].Rows[intRowCount]["Backup_Approver_Name"] != System.DBNull.Value)
                                        strBackUpAppName = ds.Tables[12].Rows[intRowCount]["Backup_Approver_Name"].ToString();
                                    else
                                        strBackUpAppName = String.Empty;


                                    SqlParameter[] paramOut = null;
                                    string strAppStrStatus = string.Empty;
                                    //GET_EO_Is_Approved
                                    if (objEOBA.GET_EO_Is_Approved(Convert.ToInt32(ViewState["EOID"]), ds.Tables[12].Rows[intRowCount]["Function_Name"].ToString(), objSecurity.UserName.Trim(), "Preliminary", ref paramOut))
                                    {
                                        if (paramOut[0].Value != DBNull.Value)
                                            strAppStrStatus = paramOut[0].Value.ToString();
                                        else
                                            strAppStrStatus = "N";

                                    }

                                    if ((strCoOrginator.ToUpper() == objSecurity.UserName.Trim().ToUpper()) ||
                                        (strOrginator.ToUpper() == objSecurity.UserName.Trim().ToUpper()) ||
                                            (ViewState["UserRole"].ToString().ToUpper() == "MUREO_Admin".ToUpper()))
                                    {
                                        if (strAppStrStatus.ToUpper() != "Y")
                                        {
                                            lnkPreSmartClearanceBackU.Visible = true;
                                        }
                                        else
                                        {
                                            lnkPreSmartClearanceBackU.Visible = false;
                                        }
                                    }
                                    if (strBackUpAppName.Trim().ToUpper() == objSecurity.UserName.Trim().ToUpper() || strFUNAPPName.Trim().ToUpper() == objSecurity.UserName.Trim().ToUpper())
                                    {
                                        if (strAppStrStatus.ToUpper() != "Y")
                                        {
                                            lnkPreSmartClearanceBackU.Visible = true;

                                        }
                                        else
                                        {
                                            lnkPreSmartClearanceBackU.Visible = false;
                                        }

                                    }
                                }


                                if (ds.Tables[12].Rows[intRowCount]["Function_Name"].ToString() == "Timing Gate Exception")
                                {
                                    if (ds.Tables[12].Rows[intRowCount]["Approver_Name"] != System.DBNull.Value)
                                        strFUNAPPName = ds.Tables[12].Rows[intRowCount]["Approver_Name"].ToString();
                                    else
                                        strFUNAPPName = String.Empty;

                                    if (ds.Tables[12].Rows[intRowCount]["Backup_Approver_Name"] != System.DBNull.Value)
                                        strBackUpAppName = ds.Tables[12].Rows[intRowCount]["Backup_Approver_Name"].ToString();
                                    else
                                        strBackUpAppName = String.Empty;


                                    SqlParameter[] paramOut = null; string strAppStrStatus = string.Empty;
                                    //GET_EO_Is_Approved
                                    if (objEOBA.GET_EO_Is_Approved(Convert.ToInt32(ViewState["EOID"]), ds.Tables[12].Rows[intRowCount]["Function_Name"].ToString(), objSecurity.UserName.Trim(), "Preliminary", ref paramOut))
                                    {
                                        if (paramOut[0].Value != DBNull.Value)
                                            strAppStrStatus = paramOut[0].Value.ToString();
                                        else
                                            strAppStrStatus = "N";

                                    }


                                    if ((strCoOrginator.ToUpper() == objSecurity.UserName.Trim().ToUpper()) ||
                                        (strOrginator.ToUpper() == objSecurity.UserName.Trim().ToUpper()) ||
                                            (ViewState["UserRole"].ToString().ToUpper() == "MUREO_Admin".ToUpper()))
                                    {
                                        if (strAppStrStatus.ToUpper() != "Y")
                                        {
                                            lnkPreTimingGateUp.Visible = true;
                                        }
                                        else
                                        {
                                            lnkPreTimingGateUp.Visible = false;
                                            lnkPreTimeGateComments.Visible = false;
                                            lnkTimingGateApproved.Visible = false;
                                            lnkTimingGateDeclined.Visible = false;
                                        }
                                    }
                                    if (strBackUpAppName.Trim().ToUpper() == objSecurity.UserName.Trim().ToUpper() || strFUNAPPName.Trim().ToUpper() == objSecurity.UserName.Trim().ToUpper())
                                    {
                                        if (strAppStrStatus.ToUpper() != "Y")
                                        {
                                            lnkTimingGateApproved.Visible = true;
                                            lnkTimingGateDeclined.Visible = true;
                                            lnkPreTimeGateComments.Visible = true;
                                            lnkPreTimingGateUp.Visible = true;

                                        }
                                        else
                                        {
                                            lnkPreTimingGateUp.Visible = false;
                                            lnkPreTimeGateComments.Visible = false;
                                            lnkTimingGateApproved.Visible = false;
                                            lnkTimingGateDeclined.Visible = false;
                                        }

                                    }
                                }


                                if (ds.Tables[12].Rows[intRowCount]["Function_Name"].ToString() == "Standards Office")
                                {
                                    if (ds.Tables[12].Rows[intRowCount]["Approver_Name"] != System.DBNull.Value)
                                        strFUNAPPName = ds.Tables[12].Rows[intRowCount]["Approver_Name"].ToString();
                                    else
                                        strFUNAPPName = String.Empty;

                                    if (ds.Tables[12].Rows[intRowCount]["Backup_Approver_Name"] != System.DBNull.Value)
                                        strBackUpAppName = ds.Tables[12].Rows[intRowCount]["Backup_Approver_Name"].ToString();
                                    else
                                        strBackUpAppName = String.Empty;


                                    SqlParameter[] paramOut = null;
                                    string strAppStrStatus = string.Empty;
                                    //GET_EO_Is_Approved
                                    if (objEOBA.GET_EO_Is_Approved(Convert.ToInt32(ViewState["EOID"]), ds.Tables[12].Rows[intRowCount]["Function_Name"].ToString(), objSecurity.UserName.Trim().ToString(), "Preliminary", ref paramOut))
                                    {
                                        if (paramOut[0].Value != DBNull.Value)
                                            strAppStrStatus = paramOut[0].Value.ToString();
                                        else
                                            strAppStrStatus = "N";

                                    }

                                    if ((strCoOrginator.ToUpper() == objSecurity.UserName.Trim().ToUpper()) ||
                                        (strOrginator.ToUpper() == objSecurity.UserName.Trim().ToUpper()) ||
                                            (ViewState["UserRole"].ToString().ToUpper() == "MUREO_Admin".ToUpper()))
                                    {
                                        if (strAppStrStatus.ToUpper() != "Y")
                                        {
                                            lnkPreStandsOfficeUp.Visible = true;
                                        }
                                        else
                                        {
                                            lnkPreStandsOfficeUp.Visible = false;
                                            lnkPreStandsOfficeComments.Visible = false;
                                            lnkStandardOfficeApproved.Visible = false;
                                            lnkStandardOfficeDeclined.Visible = false;
                                        }
                                    }
                                    if (strBackUpAppName.Trim().ToUpper() == objSecurity.UserName.Trim().ToUpper() || strFUNAPPName.Trim().ToUpper() == objSecurity.UserName.Trim().ToUpper())
                                    {
                                        if (strAppStrStatus.ToUpper() != "Y")
                                        {
                                            lnkStandardOfficeApproved.Visible = true;
                                            lnkStandardOfficeDeclined.Visible = true;
                                            lnkPreStandsOfficeComments.Visible = true;
                                            lnkPreStandsOfficeUp.Visible = true;

                                        }
                                        else
                                        {
                                            lnkPreStandsOfficeUp.Visible = false;
                                            lnkPreStandsOfficeComments.Visible = false;
                                            lnkStandardOfficeApproved.Visible = false;
                                            lnkStandardOfficeDeclined.Visible = false;
                                        }
                                    }
                                }

                                // 'Added by David - MUREO PCR : 4 Additional Approvers - Date: 01/03/2012

                                if (ds.Tables[12].Rows[intRowCount]["Function_Name"].ToString() == "Additional approver #1")
                                {
                                    if (ds.Tables[12].Rows[intRowCount]["Approver_Name"] != System.DBNull.Value)
                                        strFUNAPPName = ds.Tables[12].Rows[intRowCount]["Approver_Name"].ToString();
                                    else
                                        strFUNAPPName = String.Empty;

                                    if (ds.Tables[12].Rows[intRowCount]["Backup_Approver_Name"] != System.DBNull.Value)
                                        strBackUpAppName = ds.Tables[12].Rows[intRowCount]["Backup_Approver_Name"].ToString();
                                    else
                                        strBackUpAppName = String.Empty;


                                    SqlParameter[] paramOut = null; string strAppStrStatus = string.Empty;
                                    //GET_EO_Is_Approved
                                    if (objEOBA.GET_EO_Is_Approved(Convert.ToInt32(ViewState["EOID"]), ds.Tables[12].Rows[intRowCount]["Function_Name"].ToString(), objSecurity.UserName.Trim(), "Preliminary", ref paramOut))
                                    {
                                        if (paramOut[0].Value != DBNull.Value)
                                            strAppStrStatus = paramOut[0].Value.ToString();
                                        else
                                            strAppStrStatus = "N";

                                    }

                                    if ((strCoOrginator.ToUpper() == objSecurity.UserName.Trim().ToUpper()) ||
                                        (strOrginator.ToUpper() == objSecurity.UserName.Trim().ToUpper()) ||
                                            (ViewState["UserRole"].ToString().ToUpper() == "MUREO_Admin".ToUpper()))
                                    {
                                        if (strAppStrStatus.ToUpper() != "Y")
                                        {

                                        }
                                        else
                                        {
                                            lnkAdditionalApprover1Up.Visible = false;
                                            lnkAdditionalApprover1Comments.Visible = false;
                                            lnkAdditionalApprover1Approved.Visible = false;
                                            lnkAdditionalApprover1Declined.Visible = false;
                                        }
                                    }
                                    if (strBackUpAppName.Trim().ToUpper() == objSecurity.UserName.Trim().ToUpper() || strFUNAPPName.Trim().ToUpper() == objSecurity.UserName.Trim().ToUpper())
                                    {
                                        if (strAppStrStatus.ToUpper() != "Y")
                                        {


                                        }
                                        else
                                        {
                                            lnkAdditionalApprover1Up.Visible = false;
                                            lnkAdditionalApprover1Comments.Visible = false;
                                            lnkAdditionalApprover1Approved.Visible = false;
                                            lnkAdditionalApprover1Declined.Visible = false;
                                        }
                                    }
                                }

                                if (ds.Tables[12].Rows[intRowCount]["Function_Name"].ToString() == "Additional approver #2")
                                {
                                    if (ds.Tables[12].Rows[intRowCount]["Approver_Name"] != System.DBNull.Value)
                                        strFUNAPPName = ds.Tables[12].Rows[intRowCount]["Approver_Name"].ToString();
                                    else
                                        strFUNAPPName = String.Empty;

                                    if (ds.Tables[12].Rows[intRowCount]["Backup_Approver_Name"] != System.DBNull.Value)
                                        strBackUpAppName = ds.Tables[12].Rows[intRowCount]["Backup_Approver_Name"].ToString();
                                    else
                                        strBackUpAppName = String.Empty;


                                    SqlParameter[] paramOut = null;
                                    string strAppStrStatus = string.Empty;
                                    //GET_EO_Is_Approved
                                    if (objEOBA.GET_EO_Is_Approved(Convert.ToInt32(ViewState["EOID"]), ds.Tables[12].Rows[intRowCount]["Function_Name"].ToString(), objSecurity.UserName.Trim(), "Preliminary", ref paramOut))
                                    {
                                        if (paramOut[0].Value != DBNull.Value)
                                            strAppStrStatus = paramOut[0].Value.ToString();
                                        else
                                            strAppStrStatus = "N";

                                    }

                                    if ((strCoOrginator.ToUpper() == objSecurity.UserName.Trim().ToUpper()) ||
                                        (strOrginator.ToUpper() == objSecurity.UserName.Trim().ToUpper()) ||
                                            (ViewState["UserRole"].ToString().ToUpper() == "MUREO_Admin".ToUpper()))
                                    {
                                        if (strAppStrStatus.ToUpper() != "Y")
                                        {

                                        }
                                        else
                                        {
                                            lnkAdditionalApprover2Up.Visible = false;
                                            lnkAdditionalApprover2Comments.Visible = false;
                                            lnkAdditionalApprover2Approved.Visible = false;
                                            lnkAdditionalApprover2Declined.Visible = false;
                                        }
                                    }
                                    if (strBackUpAppName.Trim().ToUpper() == objSecurity.UserName.Trim().ToUpper() || strFUNAPPName.Trim().ToUpper() == objSecurity.UserName.Trim().ToUpper())
                                    {
                                        if (strAppStrStatus.ToUpper() != "Y")
                                        {


                                        }
                                        else
                                        {
                                            lnkAdditionalApprover2Up.Visible = false;
                                            lnkAdditionalApprover2Comments.Visible = false;
                                            lnkAdditionalApprover2Approved.Visible = false;
                                            lnkAdditionalApprover2Declined.Visible = false;
                                        }
                                    }
                                }


                                if (ds.Tables[12].Rows[intRowCount]["Function_Name"].ToString() == "Additional approver #3")
                                {
                                    if (ds.Tables[12].Rows[intRowCount]["Approver_Name"] != System.DBNull.Value)
                                        strFUNAPPName = ds.Tables[12].Rows[intRowCount]["Approver_Name"].ToString();
                                    else
                                        strFUNAPPName = String.Empty;

                                    if (ds.Tables[12].Rows[intRowCount]["Backup_Approver_Name"] != System.DBNull.Value)
                                        strBackUpAppName = ds.Tables[12].Rows[intRowCount]["Backup_Approver_Name"].ToString();
                                    else
                                        strBackUpAppName = String.Empty;


                                    SqlParameter[] paramOut = null; string strAppStrStatus = string.Empty;
                                    //GET_EO_Is_Approved
                                    if (objEOBA.GET_EO_Is_Approved(Convert.ToInt32(ViewState["EOID"]), ds.Tables[12].Rows[intRowCount]["Function_Name"].ToString(), objSecurity.UserName.Trim(), "Preliminary", ref paramOut))
                                    {
                                        if (paramOut[0].Value != DBNull.Value)
                                            strAppStrStatus = paramOut[0].Value.ToString();
                                        else
                                            strAppStrStatus = "N";

                                    }

                                    if ((strCoOrginator.ToUpper() == objSecurity.UserName.Trim().ToUpper()) ||
                                        (strOrginator.ToUpper() == objSecurity.UserName.Trim().ToUpper()) ||
                                            (ViewState["UserRole"].ToString().ToUpper() == "MUREO_Admin".ToUpper()))
                                    {
                                        if (strAppStrStatus.ToUpper() != "Y")
                                        {

                                        }
                                        else
                                        {
                                            lnkAdditionalApprover3Up.Visible = false;
                                            lnkAdditionalApprover3Comments.Visible = false;
                                            lnkAdditionalApprover3Approved.Visible = false;
                                            lnkAdditionalApprover3Declined.Visible = false;
                                        }
                                    }
                                    if (strBackUpAppName.Trim().ToUpper() == objSecurity.UserName.Trim().ToUpper() || strFUNAPPName.Trim().ToUpper() == objSecurity.UserName.Trim().ToUpper())
                                    {
                                        if (strAppStrStatus.ToUpper() != "Y")
                                        {


                                        }
                                        else
                                        {
                                            lnkAdditionalApprover3Up.Visible = false;
                                            lnkAdditionalApprover3Comments.Visible = false;
                                            lnkAdditionalApprover3Approved.Visible = false;
                                            lnkAdditionalApprover3Declined.Visible = false;
                                        }
                                    }
                                }


                                if (ds.Tables[12].Rows[intRowCount]["Function_Name"].ToString() == "Additional approver #4")
                                {
                                    if (ds.Tables[12].Rows[intRowCount]["Approver_Name"] != System.DBNull.Value)
                                        strFUNAPPName = ds.Tables[12].Rows[intRowCount]["Approver_Name"].ToString();
                                    else
                                        strFUNAPPName = String.Empty;

                                    if (ds.Tables[12].Rows[intRowCount]["Backup_Approver_Name"] != System.DBNull.Value)

                                        strBackUpAppName = ds.Tables[12].Rows[intRowCount]["Backup_Approver_Name"].ToString();
                                    else
                                        strBackUpAppName = String.Empty;


                                    SqlParameter[] paramOut = null;
                                    string strAppStrStatus = string.Empty;
                                    //GET_EO_Is_Approved
                                    if (objEOBA.GET_EO_Is_Approved(Convert.ToInt32(ViewState["EOID"]), ds.Tables[12].Rows[intRowCount]["Function_Name"].ToString(), objSecurity.UserName.Trim(), "Preliminary", ref paramOut))
                                    {
                                        if (paramOut[0].Value != DBNull.Value)
                                            strAppStrStatus = paramOut[0].Value.ToString();
                                        else
                                            strAppStrStatus = "N";

                                    }

                                    if ((strCoOrginator.ToUpper() == objSecurity.UserName.Trim().ToUpper()) ||
                                        (strOrginator.ToUpper() == objSecurity.UserName.Trim().ToUpper()) ||
                                            (ViewState["UserRole"].ToString().ToUpper() == "MUREO_Admin".ToUpper()))
                                    {
                                        if (strAppStrStatus.ToUpper() != "Y")
                                        {
                                        }
                                        else
                                        {
                                            lnkAdditionalApprover4Up.Visible = false;
                                            lnkAdditionalApprover4Comments.Visible = false;
                                            lnkAdditionalApprover4Approved.Visible = false;
                                            lnkAdditionalApprover4Declined.Visible = false;
                                        }
                                    }
                                    if (strBackUpAppName.Trim().ToUpper() == objSecurity.UserName.Trim().ToUpper() || strFUNAPPName.Trim().ToUpper() == objSecurity.UserName.Trim().ToUpper())
                                    {
                                        if (strAppStrStatus.ToUpper() != "Y")
                                        {
                                        }
                                        else
                                        {
                                            lnkAdditionalApprover4Up.Visible = false;
                                            lnkAdditionalApprover4Comments.Visible = false;
                                            lnkAdditionalApprover4Approved.Visible = false;
                                            lnkAdditionalApprover4Declined.Visible = false;
                                        }
                                    }
                                }

                            }

                        }
                    }

                    for (int intRowCount = 0; intRowCount < ds.Tables[12].Rows.Count - 1; intRowCount++)
                    {
                        if (ds.Tables[12].Rows[intRowCount]["Function_Name"] != System.DBNull.Value)
                        {
                            if (ds.Tables[12].Rows[intRowCount]["Function_Name"].ToString() == "Budget Center")
                            {
                                // GET_EO_Is_Approved: This function is used to Checking for current EO approved by Budget Owner or not.If not Approve,Decline,Commnets,Backup links will be visible.
                                SqlParameter[] paramOut = null;
                                // GET_EO_Is_Approved
                                if (objEOBA.GET_EO_Is_Approved(Convert.ToInt32(ViewState["EOID"]), ds.Tables[12].Rows[0]["Function_Name"].ToString(), strFUNAPPName.ToString(), "Preliminary", ref paramOut))
                                {
                                    if (paramOut[0].Value != DBNull.Value)
                                        strBudgetAppStrStatus = paramOut[0].Value.ToString();
                                    else
                                        strBudgetAppStrStatus = "N";

                                    if ((strCoOrginator.ToUpper() == objSecurity.UserName.Trim().ToUpper()) ||
                                       (strOrginator.ToUpper() == objSecurity.UserName.Trim().ToUpper()) ||
                                           (ViewState["UserRole"].ToString().ToUpper() == "MUREO_Admin".ToUpper()))
                                    {
                                        if (strBudgetAppStrStatus != "Y")
                                            lnkPreBOBackUp.Visible = true;
                                    }
                                }
                            }

                            if (ds.Tables[12].Rows[intRowCount]["Function_Name"].ToString() == "Central Planning")
                            {
                                // GET_EO_Is_Approved: This function is used to Checking for current EO approved by Budget Owner or not.If not Approve,Decline,Commnets,Backup links will be visible.
                                SqlParameter[] paramOut = null;
                                string strAppStrStatus = string.Empty;
                                // GET_EO_Is_Approved
                                if (objEOBA.GET_EO_Is_Approved(Convert.ToInt32(ViewState["EOID"]), ds.Tables[12].Rows[0]["Function_Name"].ToString(), strFUNAPPName, "Preliminary", ref paramOut))
                                {
                                    if (paramOut[0].Value != DBNull.Value)
                                        strAppStrStatus = paramOut[0].Value.ToString();
                                    else
                                        strAppStrStatus = "N";

                                    if ((strCoOrginator.ToUpper() == objSecurity.UserName.Trim().ToUpper()) ||
                                       (strOrginator.ToUpper() == objSecurity.UserName.Trim().ToUpper()) ||
                                           (ViewState["UserRole"].ToString().ToUpper() == "MUREO_Admin".ToUpper()))
                                    {
                                        if (strBudgetAppStrStatus != "Y")
                                            lnkPreCentralPlanBackU.Visible = true;
                                    }
                                }
                            }

                            if (ds.Tables[12].Rows[intRowCount]["Function_Name"].ToString() == "SAP Cost Center Coordinator")
                            {
                                // GET_EO_Is_Approved: This function is used to Checking for current EO approved by Budget Owner or not.If not Approve,Decline,Commnets,Backup links will be visible.
                                SqlParameter[] paramOut = null;
                                string strAppStrStatus = string.Empty;
                                // GET_EO_Is_Approved
                                if (objEOBA.GET_EO_Is_Approved(Convert.ToInt32(ViewState["EOID"]), ds.Tables[12].Rows[0]["Function_Name"].ToString(), strFUNAPPName, "Preliminary", ref paramOut))
                                {
                                    if (paramOut[0].Value != DBNull.Value)
                                        strAppStrStatus = paramOut[0].Value.ToString();
                                    else
                                        strAppStrStatus = "N";

                                    if ((strCoOrginator.ToUpper() == objSecurity.UserName.Trim().ToUpper()) ||
                                       (strOrginator.ToUpper() == objSecurity.UserName.Trim().ToUpper()) ||
                                           (ViewState["UserRole"].ToString().ToUpper() == "MUREO_Admin".ToUpper()))
                                    {
                                        if (strBudgetAppStrStatus != "Y")
                                            lnkPreSAPBackU.Visible = true;
                                    }
                                }
                            }

                            //'Added on 01/20/2010 
                            //'For MUREO PCRs
                            //'By: David
                            if (ds.Tables[12].Rows[intRowCount]["Function_Name"].ToString() == "SMART Clearance")
                            {
                                // GET_EO_Is_Approved: This function is used to Checking for current EO approved by Budget Owner or not.If not Approve,Decline,Commnets,Backup links will be visible.
                                SqlParameter[] paramOut = null;
                                string strAppStrStatus = string.Empty;
                                // GET_EO_Is_Approved
                                if (objEOBA.GET_EO_Is_Approved(Convert.ToInt32(ViewState["EOID"]), ds.Tables[12].Rows[0]["Function_Name"].ToString(), strFUNAPPName, "Preliminary", ref paramOut))
                                {
                                    if (paramOut[0].Value != DBNull.Value)
                                        strAppStrStatus = paramOut[0].Value.ToString();
                                    else
                                        strAppStrStatus = "N";

                                    if ((strCoOrginator.ToUpper() == objSecurity.UserName.Trim().ToUpper()) ||
                                       (strOrginator.ToUpper() == objSecurity.UserName.Trim().ToUpper()) ||
                                           (ViewState["UserRole"].ToString().ToUpper() == "MUREO_Admin".ToUpper()))
                                    {
                                        if (strBudgetAppStrStatus != "Y")
                                            lnkPreSmartClearanceBackU.Visible = true;
                                    }
                                }
                            }

                            if (ds.Tables[12].Rows[intRowCount]["Function_Name"].ToString() == "Timing Gate Exception")
                            {
                                // GET_EO_Is_Approved: This function is used to Checking for current EO approved by Budget Owner or not.If not Approve,Decline,Commnets,Backup links will be visible.
                                SqlParameter[] paramOut = null;
                                string strAppStrStatus = string.Empty;
                                // GET_EO_Is_Approved
                                if (objEOBA.GET_EO_Is_Approved(Convert.ToInt32(ViewState["EOID"]), ds.Tables[12].Rows[0]["Function_Name"].ToString(), strFUNAPPName, "Preliminary", ref paramOut))
                                {
                                    if (paramOut[0].Value != DBNull.Value)
                                        strAppStrStatus = paramOut[0].Value.ToString();
                                    else
                                        strAppStrStatus = "N";

                                    if ((strCoOrginator.ToUpper() == objSecurity.UserName.Trim().ToUpper()) ||
                                       (strOrginator.ToUpper() == objSecurity.UserName.Trim().ToUpper()) ||
                                           (ViewState["UserRole"].ToString().ToUpper() == "MUREO_Admin".ToUpper()))
                                    {
                                        if (strBudgetAppStrStatus != "Y")
                                            lnkPreTimingGateUp.Visible = true;
                                    }
                                }
                            }

                            if (ds.Tables[12].Rows[intRowCount]["Function_Name"].ToString() == "Standards Office")
                            {
                                // GET_EO_Is_Approved: This function is used to Checking for current EO approved by Budget Owner or not.If not Approve,Decline,Commnets,Backup links will be visible.
                                SqlParameter[] paramOut = null;
                                string strAppStrStatus = string.Empty;
                                // GET_EO_Is_Approved
                                if (objEOBA.GET_EO_Is_Approved(Convert.ToInt32(ViewState["EOID"]), ds.Tables[12].Rows[0]["Function_Name"].ToString(), strFUNAPPName, "Preliminary", ref paramOut))
                                {
                                    if (paramOut[0].Value != DBNull.Value)
                                        strAppStrStatus = paramOut[0].Value.ToString();
                                    else
                                        strAppStrStatus = "N";

                                    if ((strCoOrginator.ToUpper() == objSecurity.UserName.Trim().ToUpper()) ||
                                       (strOrginator.ToUpper() == objSecurity.UserName.Trim().ToUpper()) ||
                                           (ViewState["UserRole"].ToString().ToUpper() == "MUREO_Admin".ToUpper()))
                                    {
                                        if (strBudgetAppStrStatus != "Y")
                                            lnkPreStandsOfficeUp.Visible = true;
                                    }
                                }
                            }

                            //'Added by David - MUREO PCR : 4 Additional Approvers - Date: 01/03/2012

                            //if (ds.Tables[12].Rows[intRowCount]["Function_Name"] == "Additional approver #1")
                            //{
                            //    // GET_EO_Is_Approved: This function is used to Checking for current EO approved by Budget Owner or not.If not Approve,Decline,Commnets,Backup links will be visible.
                            //    SqlParameter[] paramOut = null;
                            //    // GET_EO_Is_Approved
                            //    if (objEOBA.GET_EO_Is_Approved(Convert.ToInt32(ViewState["EOID"]), ds.Tables[12].Rows[0]["Function_Name"], strFUNAPPName, "Preliminary", ref paramOut))
                            //    {
                            //        if (paramOut[1].Value != DBNull.Value)
                            //            strAppStrStatus = paramOut[1].Value;
                            //        else
                            //            strAppStrStatus = "N";

                            //        if ((strCoOrginator.ToUpper() == objSecurity.UserName.Trim().ToUpper()) ||
                            //           (strOrginator.ToUpper() == objSecurity.UserName.Trim().ToUpper()) ||
                            //               (ViewState["UserRole"].ToString().ToUpper() == "MUREO_Admin".ToUpper()))
                            //        {
                            //            if (strBudgetAppStrStatus != "Y")
                            //            {
                            //                //lnkAdditionalApprover1Up.Visible = true;
                            //            }
                            //        }
                            //    }
                            //}

                            //if (ds.Tables[12].Rows[intRowCount]["Function_Name"] == "Additional approver #2")
                            //{
                            //    // GET_EO_Is_Approved: This function is used to Checking for current EO approved by Budget Owner or not.If not Approve,Decline,Commnets,Backup links will be visible.
                            //    SqlParameter[] paramOut = null;
                            //    // GET_EO_Is_Approved
                            //    if (objEOBA.GET_EO_Is_Approved(Convert.ToInt32(ViewState["EOID"]), ds.Tables[12].Rows[0]["Function_Name"], strFUNAPPName, "Preliminary", ref paramOut))
                            //    {
                            //        if (paramOut[1].Value != DBNull.Value)
                            //            strAppStrStatus = paramOut[1].Value;
                            //        else
                            //            strAppStrStatus = "N";

                            //        if ((strCoOrginator.ToUpper() == objSecurity.UserName.Trim().ToUpper()) ||
                            //           (strOrginator.ToUpper() == objSecurity.UserName.Trim().ToUpper()) ||
                            //               (ViewState["UserRole"].ToString().ToUpper() == "MUREO_Admin".ToUpper()))
                            //        {
                            //            if (strBudgetAppStrStatus != "Y")
                            //            {
                            //                //lnkAdditionalApprover2Up.Visible = true;
                            //            }
                            //        }
                            //    }
                            //}

                            //if (ds.Tables[12].Rows[intRowCount]["Function_Name"] == "Additional approver #3")
                            //{
                            //    // GET_EO_Is_Approved: This function is used to Checking for current EO approved by Budget Owner or not.If not Approve,Decline,Commnets,Backup links will be visible.
                            //    SqlParameter[] paramOut = null;
                            //    // GET_EO_Is_Approved
                            //    if (objEOBA.GET_EO_Is_Approved(Convert.ToInt32(ViewState["EOID"]), ds.Tables[12].Rows[0]["Function_Name"], strFUNAPPName, "Preliminary", ref paramOut))
                            //    {
                            //        if (paramOut[1].Value != DBNull.Value)
                            //            strAppStrStatus = paramOut[1].Value;
                            //        else
                            //            strAppStrStatus = "N";

                            //        if ((strCoOrginator.ToUpper() == objSecurity.UserName.Trim().ToUpper()) ||
                            //           (strOrginator.ToUpper() == objSecurity.UserName.Trim().ToUpper()) ||
                            //               (ViewState["UserRole"].ToString().ToUpper() == "MUREO_Admin".ToUpper()))
                            //        {
                            //            if (strBudgetAppStrStatus != "Y")
                            //            {
                            //                //lnkAdditionalApprover3Up.Visible = true;
                            //            }
                            //        }
                            //    }
                            //}

                            //if (ds.Tables[12].Rows[intRowCount]["Function_Name"] == "Additional approver #4")
                            //{
                            //    // GET_EO_Is_Approved: This function is used to Checking for current EO approved by Budget Owner or not.If not Approve,Decline,Commnets,Backup links will be visible.
                            //    SqlParameter[] paramOut = null;
                            //    // GET_EO_Is_Approved
                            //    if (objEOBA.GET_EO_Is_Approved(Convert.ToInt32(ViewState["EOID"]), ds.Tables[12].Rows[0]["Function_Name"], strFUNAPPName, "Preliminary", ref paramOut))
                            //    {
                            //        if (paramOut[1].Value != DBNull.Value)
                            //            strAppStrStatus = paramOut[1].Value;
                            //        else
                            //            strAppStrStatus = "N";

                            //        if ((strCoOrginator.ToUpper() == objSecurity.UserName.Trim().ToUpper()) ||
                            //           (strOrginator.ToUpper() == objSecurity.UserName.Trim().ToUpper()) ||
                            //               (ViewState["UserRole"].ToString().ToUpper() == "MUREO_Admin".ToUpper()))
                            //        {
                            //            if (strBudgetAppStrStatus != "Y")
                            //            {
                            //                //lnkAdditionalApprover4Up.Visible = true;
                            //            }
                            //        }
                            //    }
                            //}
                        }
                    }
                }
            }
        }

        public void FillListBoxData(int tabValue, string colNameText, string colNameID, string optionalValue, ListBox lbName)
        {
            DataSet objDS = null;

            if (objEOBA.FillDropDownSeedData(ref objDS))
            {
                if (objDS.Tables.Count > 0)
                {
                    lbName.DataSource = objDS.Tables[tabValue].DefaultView;
                    lbName.DataTextField = colNameText;
                    lbName.DataValueField = colNameID;
                    lbName.DataBind();
                    lbName.Items.Insert(0, optionalValue);
                }
            }
        }

        public void CloseApprovalGroupData()
        {
            DataSet ds = new DataSet();

            if (drpCloseApprovalGroup.SelectedItem.Value == "--Select Approver Group--")
            {
                if (objEOBA.GET_EO_Approval_Groups_Details(0, ref ds))
                {
                    txtCloseSiteFinance.Text = "";
                    return;
                }
            }
            else
            {
                if (objEOBA.GET_EO_Approval_Groups_Details(Convert.ToInt32(drpCloseApprovalGroup.SelectedItem.Value), ref ds))
                {
                    txtCloseSiteFinance.Text = "";
                }
            }
            for (int intGrp = 0; intGrp < ds.Tables[0].Rows.Count; intGrp++)
            {
                if (ds.Tables[0].Rows[intGrp][2].ToString() == "Site Finance")
                    txtCloseSiteFinance.Text = ds.Tables[0].Rows[intGrp][3].ToString();
            }
        }

        private void drpPrelimApprovalData()
        {
            DataSet ds = new DataSet();
            if (drpPrelimApproval.SelectedItem.Value == "--Select Approver Group--")
            {
                txtGBUHSE.Text = "";
                txtSiteHSE.Text = "";
                txtSiteContact.Text = "";
                txtSitePlanning.Text = "";
                txtQAPre.Text = "";
                txtCentralQAPre.Text = "";
                txtCentralPlanning.Text = "";
                txtTimingGate.Text = "";
                txtStandardOffice.Text = "";
                //Added by David - MUREO PCR : 4 Additional Approvers - Date: 01/03/2012
                txtAdditionalApp1.Text = "";
                txtAdditionalApp2.Text = "";
                txtAdditionalApp3.Text = "";
                txtAdditionalApp4.Text = "";
                return;
            }
            else
            {
                if (objEOBA.GET_EO_Approval_Groups_Details(Convert.ToInt32(drpPrelimApproval.SelectedItem.Value), ref ds))
                { }
                txtGBUHSE.Text = "";
                txtSiteHSE.Text = "";
                txtSiteContact.Text = "";
                txtSitePlanning.Text = "";
                txtCentralPlanning.Text = "";
                txtQAPre.Text = "";
                //Added for Central QA
                txtCentralQAPre.Text = "";
                txtTimingGate.Text = "";
                txtStandardOffice.Text = "";
                //Added by David - MUREO PCR : 4 Additional Approvers - Date: 01/03/2012
                txtAdditionalApp1.Text = "";
                txtAdditionalApp2.Text = "";
                txtAdditionalApp3.Text = "";
                txtAdditionalApp4.Text = "";
            }
            int intGrp = 0;
            for (intGrp = 0; intGrp <= ds.Tables[0].Rows.Count - 1; intGrp++)
            {
                if (ds.Tables[0].Rows[intGrp][2].ToString() == "Budget Center")
                {
                    //txtBudgetOwner.Text = ds.Tables[0).Rows(intGrp).Item(3).ToString
                }
                else if (ds.Tables[0].Rows[intGrp][2].ToString() == "GBU HS&E Resource")
                {
                    txtGBUHSE.Text = ds.Tables[0].Rows[intGrp][3].ToString();
                }
                else if (ds.Tables[0].Rows[intGrp][2].ToString() == "Site HS&E Resource")
                {
                    txtSiteHSE.Text = ds.Tables[0].Rows[intGrp][3].ToString();
                }
                else if (ds.Tables[0].Rows[intGrp][2].ToString() == "Site Contact")
                {
                    txtSiteContact.Text = ds.Tables[0].Rows[intGrp][3].ToString();
                }
                else if (ds.Tables[0].Rows[intGrp][2].ToString() == "Site Planning")
                {
                    txtSitePlanning.Text = ds.Tables[0].Rows[intGrp][3].ToString();
                }
                else if (ds.Tables[0].Rows[intGrp][2].ToString() == "QA")
                {
                    txtQAPre.Text = ds.Tables[0].Rows[intGrp][3].ToString();
                }
                else if (ds.Tables[0].Rows[intGrp][2].ToString() == "Central QA")
                {
                    txtCentralQAPre.Text = ds.Tables[0].Rows[intGrp][3].ToString();
                }
                else if (ds.Tables[0].Rows[intGrp][2].ToString() == "Central Planning")
                {
                    txtCentralPlanning.Text = ds.Tables[0].Rows[intGrp][3].ToString();
                }
                else if (ds.Tables[0].Rows[intGrp][2].ToString() == "SAP Cost Center Coordinator")
                {
                    // txtSAPCost.Text = ds.Tables[0).Rows(intGrp).Item(3).ToString
                }
                else if (ds.Tables[0].Rows[intGrp][2].ToString() == "Timing Gate Exception")
                {
                    txtTimingGate.Text = ds.Tables[0].Rows[intGrp][3].ToString();
                }
                else if (ds.Tables[0].Rows[intGrp][2].ToString() == "Standards Office")
                {
                    txtStandardOffice.Text = ds.Tables[0].Rows[intGrp][3].ToString();

                    //Added by David - MUREO PCR : 4 Additional Approvers - Date: 01/03/2012

                }
                else if (ds.Tables[0].Rows[intGrp][2].ToString() == "Additional approver #1")
                {
                    txtAdditionalApp1.Text = ds.Tables[0].Rows[intGrp][3].ToString();

                }
                else if (ds.Tables[0].Rows[intGrp][2].ToString() == "Additional approver #2")
                {
                    txtAdditionalApp2.Text = ds.Tables[0].Rows[intGrp][3].ToString();


                }
                else if (ds.Tables[0].Rows[intGrp][2].ToString() == "Additional approver #3")
                {
                    txtAdditionalApp3.Text = ds.Tables[0].Rows[intGrp][3].ToString();


                }
                else if (ds.Tables[0].Rows[intGrp][2].ToString() == "Additional approver #4")
                {
                    txtAdditionalApp4.Text = ds.Tables[0].Rows[intGrp][3].ToString();


                }
                else if (ds.Tables[0].Rows[intGrp][2].ToString() == "SMART Clearance")
                {
                    txtSmartClearance.Text = ds.Tables[0].Rows[intGrp][3].ToString();
                    ViewState["SmartClearVal"] = txtSmartClearance.Text.ToString().Trim();
                }
            }
        }




        public void fillSelectedAppDetailsFromMege()
        {
            DataSet ds = new DataSet();

            int intPalntID;
            if (drpPlant.SelectedItem.Text == "--Select a Plant--")

                intPalntID = 0;
            else
                intPalntID = Convert.ToInt32(drpPlant.SelectedItem.Value);
            if (objEOBA.GET_EO_Approval_Groups_By_Plant_Brand_EOMode(intPalntID, lblBrandIDList.Text, Convert.ToChar(rbEOType.SelectedItem.Value), ref ds))
            {

                //'added on 07-Feb-2011
                if (drpBudgetCenterDB.SelectedItem.Text == "--Select a Budget Center--")
                {
                    drpBudgetCenterDB.Items.Clear();
                    drpBudgetCenterDB.DataSource = ds.Tables[1].DefaultView;
                    drpBudgetCenterDB.DataTextField = "Budget_Center_Name";
                    drpBudgetCenterDB.DataValueField = "Budget_Center_ID";
                    drpBudgetCenterDB.DataBind();
                    drpBudgetCenterDB.Items.Insert(0, "--Select a Budget Center--");
                }

                drpPrelimApproval.DataSource = ds;
                drpPrelimApproval.DataTextField = "Approval_Group_Name";
                drpPrelimApproval.DataValueField = "Approval_Group_ID";
                drpPrelimApproval.DataBind();
                drpPrelimApproval.Items.Insert(0, "--Select Approver Group--");

                drpAppGrpFinal.DataSource = ds;
                drpAppGrpFinal.DataTextField = "Approval_Group_Name";
                drpAppGrpFinal.DataValueField = "Approval_Group_ID";
                drpAppGrpFinal.DataBind();
                drpAppGrpFinal.Items.Insert(0, "--Select Approver Group--");

                drpCloseApprovalGroup.DataSource = ds;
                drpCloseApprovalGroup.DataTextField = "Approval_Group_Name";
                drpCloseApprovalGroup.DataValueField = "Approval_Group_ID";
                drpCloseApprovalGroup.DataBind();
                drpCloseApprovalGroup.Items.Insert(0, "--Select Approver Group--");

                try
                {
                    if (ds.Tables[0].Rows.Count != 0)
                    {
                        drpPrelimApproval.SelectedValue = ds.Tables[0].Rows[0]["Approval_Group_ID"].ToString();
                        drpAppGrpFinal.SelectedValue = ds.Tables[0].Rows[0]["Approval_Group_ID"].ToString();
                        drpCloseApprovalGroup.SelectedValue = ds.Tables[0].Rows[0]["Approval_Group_ID"].ToString();

                        drpPrelimApprovalData();
                        FillAppGrpFinal();
                        CloseApprovalGroupData();
                    }
                    else
                    {
                        txtGBUHSE.Text = "";
                        txtQAPre.Text = "";
                        //'Added for Central QA
                        txtCentralQAPre.Text = "";
                        txtSiteHSE.Text = "";
                        txtSiteContact.Text = "";
                        txtSitePlanning.Text = "";
                        txtCentralPlanning.Text = "";
                        txtTimingGate.Text = "";
                        txtStandardOffice.Text = "";
                        //'Added by David - MUREO PCR : 4 Additional Approvers - Date: 01/03/2012
                        txtAdditionalApp1.Text = "";
                        txtAdditionalApp2.Text = "";
                        txtAdditionalApp3.Text = "";
                        txtAdditionalApp4.Text = "";
                        txtPSInitiative.Text = "";
                        txtProductsResearch.Text = "";
                        txtGBUHSEFinal.Text = "";
                        txtSiteHSEFinal.Text = "";
                        txtSitePlanFinal.Text = "";
                        txtSiteContactFinal.Text = "";
                        txtSiteFinance.Text = "";
                        txtSiteLeaderShip.Text = "";
                        txtPSRAFinal.Text = "";
                        txtFinalTimingGate.Text = "";
                        txtFinalQA.Text = "";
                        txtFinalCentralQA.Text = "";
                        txtFinalStandardsOffice.Text = "";
                        //'Added by David - MUREO PCR : 4 Additional Approvers - Date: 01/03/2012
                        txtFinalAdditionalApprover1.Text = "";
                        txtFinalAdditionalApprover2.Text = "";
                        txtFinalAdditionalApprover3.Text = "";
                        txtFinalAdditionalApprover4.Text = "";
                        txtCloseSiteFinance.Text = "";
                        //string script11 = string.Empty;
                        //script11 = "<script>alert('There is no approval group set up for this EO.' + '\n' + 'Please contact Julie Lovelace (513-634-4150) or Jeff Chan (513-634-0584) to have one created');</script>";
                        //Page.RegisterStartupScript("clientscript11", script11);
                        ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "alert('There is no approval group set up for this EO.' + '\n' + 'Please contact Jeff Chan (513-634-0584) or Rebecca Pagels (*292-2757) or Sharika Anderson (570-419-0596) to have one created');", true);
                    }
                }
                catch (Exception)
                {

                    throw;
                }
            }

        }

        public void fillDefaultAppDetailsFromMege()
        {
            DataSet ds = new DataSet();

            int intPalntID;
            if (drpPlant.SelectedItem.Text == "--Select a Plant--")

                intPalntID = 0;
            else
                intPalntID = Convert.ToInt32(drpPlant.SelectedItem.Value);


            if (objEOBA.GET_EO_Approval_Groups_By_Plant_Brand_EOMode(intPalntID, lblBrandIDList.Text, Convert.ToChar(rbEOType.SelectedItem.Value), ref ds))
            {
                //'added on 07-Feb-2011
                if (drpBudgetCenterDB.SelectedItem.Text == "--Select a Budget Center--")
                {
                    drpBudgetCenterDB.Items.Clear();
                    drpBudgetCenterDB.DataSource = ds.Tables[1].DefaultView;
                    drpBudgetCenterDB.DataTextField = "Budget_Center_Name";
                    drpBudgetCenterDB.DataValueField = "Budget_Center_ID";
                    drpBudgetCenterDB.DataBind();
                    drpBudgetCenterDB.Items.Insert(0, "--Select a Budget Center--");


                }
                drpAppGrpFinal.DataSource = ds;
                drpAppGrpFinal.DataTextField = "Approval_Group_Name";
                drpAppGrpFinal.DataValueField = "Approval_Group_ID";
                drpAppGrpFinal.DataBind();
                drpAppGrpFinal.Items.Insert(0, "--Select Approver Group--");

                drpCloseApprovalGroup.DataSource = ds;
                drpCloseApprovalGroup.DataTextField = "Approval_Group_Name";
                drpCloseApprovalGroup.DataValueField = "Approval_Group_ID";
                drpCloseApprovalGroup.DataBind();
                drpCloseApprovalGroup.Items.Insert(0, "--Select Approver Group--");

                if (ds.Tables[0].Rows.Count != 0)
                {
                    drpAppGrpFinal.SelectedValue = ds.Tables[0].Rows[0]["Approval_Group_ID"].ToString();
                    drpCloseApprovalGroup.SelectedValue = ds.Tables[0].Rows[0]["Approval_Group_ID"].ToString();
                    FillAppGrpFinal();
                    CloseApprovalGroupData();
                }
                else
                {
                    txtPSInitiative.Text = "";
                    txtProductsResearch.Text = "";
                    txtGBUHSEFinal.Text = "";
                    txtSiteHSEFinal.Text = "";
                    txtSitePlanFinal.Text = "";
                    txtSiteContactFinal.Text = "";
                    txtSiteFinance.Text = "";
                    txtSiteLeaderShip.Text = "";
                    txtPSRAFinal.Text = "";
                    txtFinalTimingGate.Text = "";
                    txtFinalQA.Text = "";
                    txtFinalCentralQA.Text = "";
                    txtFinalStandardsOffice.Text = "";

                    //'Added by David - MUREO PCR : 4 Additional Approvers - Date: 01/03/2012


                    txtFinalAdditionalApprover1.Text = "";
                    txtFinalAdditionalApprover2.Text = "";
                    txtFinalAdditionalApprover3.Text = "";
                    txtFinalAdditionalApprover4.Text = "";
                    txtCloseSiteFinance.Text = "";
                }
            }
        }

        private void FillAppGrpFinal()
        {
            DataSet ds = new DataSet();

            if (drpAppGrpFinal.SelectedItem.Value == "--Select Approver Group--")
            {
                if (objEOBA.GET_EO_Approval_Groups_Details(0, ref ds))
                {
                    txtPSInitiative.Text = "";
                    txtProductsResearch.Text = "";
                    txtGBUHSEFinal.Text = "";
                    txtSiteHSEFinal.Text = "";
                    txtSitePlanFinal.Text = "";
                    txtSiteContactFinal.Text = "";
                    txtSiteFinance.Text = "";
                    txtSiteLeaderShip.Text = "";
                    txtPSRAFinal.Text = "";
                    txtFinalTimingGate.Text = "";
                    txtFinalQA.Text = "";
                    txtFinalCentralQA.Text = "";
                    txtFinalStandardsOffice.Text = "";
                    //'Added by David - MUREO PCR : 4 Additional Approvers - Date: 01/03/2012
                    txtFinalAdditionalApprover1.Text = "";
                    txtFinalAdditionalApprover2.Text = "";
                    txtFinalAdditionalApprover3.Text = "";
                    txtFinalAdditionalApprover4.Text = "";
                    return;
                }
            }
            else
            {
                if (objEOBA.GET_EO_Approval_Groups_Details(Convert.ToInt32(drpAppGrpFinal.SelectedItem.Value), ref ds))
                {
                    txtPSInitiative.Text = "";
                    txtProductsResearch.Text = "";
                    txtGBUHSEFinal.Text = "";
                    txtSiteHSEFinal.Text = "";
                    txtSitePlanFinal.Text = "";
                    txtSiteContactFinal.Text = "";
                    txtSiteFinance.Text = "";
                    txtSiteLeaderShip.Text = "";
                    txtPSRAFinal.Text = "";
                    txtFinalTimingGate.Text = "";
                    txtFinalQA.Text = "";
                    txtFinalCentralQA.Text = "";
                    txtFinalStandardsOffice.Text = "";
                    //'Added by David - MUREO PCR : 4 Additional Approvers - Date: 01/03/2012
                    txtFinalAdditionalApprover1.Text = "";
                    txtFinalAdditionalApprover2.Text = "";
                    txtFinalAdditionalApprover3.Text = "";
                    txtFinalAdditionalApprover4.Text = "";

                }
            }

            for (int intGrp = 0; intGrp < ds.Tables[0].Rows.Count; intGrp++)
            {
                if (ds.Tables[0].Rows[intGrp][2].ToString() == "PS Initiative Manager")
                    txtPSInitiative.Text = ds.Tables[0].Rows[intGrp][3].ToString();
                else if (ds.Tables[0].Rows[intGrp][2].ToString() == "Products Research")
                    txtProductsResearch.Text = ds.Tables[0].Rows[intGrp][3].ToString();
                else if (ds.Tables[0].Rows[intGrp][2].ToString() == "GBU HS&E Resource")
                    txtGBUHSEFinal.Text = ds.Tables[0].Rows[intGrp][3].ToString();
                else if (ds.Tables[0].Rows[intGrp][2].ToString() == "Site HS&E Resource")
                    txtSiteHSEFinal.Text = ds.Tables[0].Rows[intGrp][3].ToString();
                else if (ds.Tables[0].Rows[intGrp][2].ToString() == "Site Planning")
                    txtSitePlanFinal.Text = ds.Tables[0].Rows[intGrp][3].ToString();
                else if (ds.Tables[0].Rows[intGrp][2].ToString() == "Site Contact")
                    txtSiteContactFinal.Text = ds.Tables[0].Rows[intGrp][3].ToString();
                else if (ds.Tables[0].Rows[intGrp][2].ToString() == "Site Finance")
                    txtSiteFinance.Text = ds.Tables[0].Rows[intGrp][3].ToString();
                else if (ds.Tables[0].Rows[intGrp][2].ToString() == "Site Leadership")
                    txtSiteLeaderShip.Text = ds.Tables[0].Rows[intGrp][3].ToString();
                else if (ds.Tables[0].Rows[intGrp][2].ToString() == "PS&RA")
                    txtPSRAFinal.Text = ds.Tables[0].Rows[intGrp][3].ToString();
                else if (ds.Tables[0].Rows[intGrp][2].ToString() == "Timing Gate Exception")
                    txtFinalTimingGate.Text = ds.Tables[0].Rows[intGrp][3].ToString();
                else if (ds.Tables[0].Rows[intGrp][2].ToString() == "QA")
                    txtFinalQA.Text = ds.Tables[0].Rows[intGrp][3].ToString();
                else if (ds.Tables[0].Rows[intGrp][2].ToString() == "Central QA")
                    txtFinalCentralQA.Text = ds.Tables[0].Rows[intGrp][3].ToString();
                else if (ds.Tables[0].Rows[intGrp][2].ToString() == "Standards Office")
                    txtFinalStandardsOffice.Text = ds.Tables[0].Rows[intGrp][3].ToString();
                else if (ds.Tables[0].Rows[intGrp][2].ToString() == "Additional approver #1")
                    txtFinalAdditionalApprover1.Text = ds.Tables[0].Rows[intGrp][3].ToString();
                else if (ds.Tables[0].Rows[intGrp][2].ToString() == "Additional approver #2")
                    txtFinalAdditionalApprover2.Text = ds.Tables[0].Rows[intGrp][3].ToString();
                else if (ds.Tables[0].Rows[intGrp][2].ToString() == "Additional approver #3")
                    txtFinalAdditionalApprover3.Text = ds.Tables[0].Rows[intGrp][3].ToString();
                else if (ds.Tables[0].Rows[intGrp][2].ToString() == "Additional approver #4")
                    txtFinalAdditionalApprover4.Text = ds.Tables[0].Rows[intGrp][3].ToString();
            }
        }

        private void Linkbutton47_Click(System.Object sender, System.EventArgs e)
        {
            int intFunctionID = 0;
            int PlantID = 0;
            //string script = null;
            string strFuncID = lblAPPBO.Text.Trim();
            string strPlantID = drpPlant.SelectedItem.Value;
            //script = "<script>window.open('ChangeApprover.aspx?FuncID=0&PlantID=0&From=CO','Approvers','height=200,width=400,status=yes,toolbar=no,menubar=no,location=no');</script>";
            //Page.RegisterStartupScript("clientscript", script);

            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "window.open('ChangeApprover.aspx?FuncID=0&PlantID=0&From=CO','Approvers','height=200,width=400,status=yes,toolbar=no,menubar=no,location=no);", true);
        }

        private void deletePSRANo(string pSRANo)
        {
            int intResult = 0;
            SqlParameter[] paramOut = null;
            DataSet dsPSRA = null;

            try
            {
                if (objEOBA.DeletePSRANo(Convert.ToInt32(pSRANo), ref paramOut))
                {
                    if (paramOut[0].Value != DBNull.Value)
                        intResult = Convert.ToInt32(paramOut[0].Value);
                }
                if (objEOBA.GETPSRAData(Convert.ToInt32(ViewState["EOID"]), ref dsPSRA))
                {
                    if ((dsPSRA != null))
                    {
                        if (!(dsPSRA.Tables.Count == 0))
                        {
                            if (!(dsPSRA.Tables[0].Rows.Count == 0))
                            {
                                dgdPSRAInfo.Visible = true;
                                dgdPSRAInfo.DataSource = dsPSRA.Tables[0];
                                dgdPSRAInfo.DataBind();
                            }
                            else
                            {
                                dgdPSRAInfo.Visible = false;
                            }
                        }
                        else
                        {
                            dgdPSRAInfo.Visible = false;
                        }
                    }
                    else
                    {
                        dgdPSRAInfo.Visible = false;
                    }
                }

            }
            catch (Exception ex)
            {
            }
            finally
            {
                paramOut = null;
                dsPSRA = null;
                objEOBA = null;
            }
        }

        private void deleteGCSANo(string gCASNo)
        {
            int intResult = 0;
            SqlParameter[] paramOut = null;
            DataSet dsGCAS = null;
            DataTable dtGCAS = null;

            try
            {
                if (objEOBA.DeleteGCSANo(Convert.ToInt32(gCASNo), ref paramOut))
                {
                    if (paramOut[0].Value != DBNull.Value)
                        intResult = Convert.ToInt32(paramOut[0].Value);
                }

                if (objEOBA.GETGSRAData(Convert.ToInt32(ViewState["EOID"]), ref dsGCAS))
                {
                    if (dsGCAS != null)
                    {
                        if (!(dsGCAS.Tables.Count == 0))
                        {
                            if (!(dsGCAS.Tables[0].Rows.Count == 0))
                            {
                                dgdGCASInfo.Visible = true;
                                dgdGCASInfo.DataSource = dsGCAS.Tables[0];
                                dgdGCASInfo.DataBind();
                                dtGCAS = dsGCAS.Tables[0];
                            }
                            else
                            {
                                dgdGCASInfo.Visible = false;
                            }
                        }
                        else
                        {
                            dgdGCASInfo.Visible = false;
                        }
                    }
                    else
                    {
                        dgdGCASInfo.Visible = false;
                    }
                }
            }
            catch (Exception ex)
            {
            }
            finally
            {
                paramOut = null;
                dsGCAS = null;
                objEOBA = null;
            }

        }

        private void drpAppGrpFinal_SelectedIndexChanged(System.Object sender, System.EventArgs e)
        {
            DataSet ds = new DataSet();
            if (drpAppGrpFinal.SelectedItem.Value == "--Select Approver Group--")
            {
                if (objEOBA.GET_EO_Approval_Groups_Details(0, ref ds))
                { }
                txtPSInitiative.Text = "";
                txtProductsResearch.Text = "";
                txtGBUHSEFinal.Text = "";
                txtSiteHSEFinal.Text = "";
                txtSitePlanFinal.Text = "";
                txtSiteContactFinal.Text = "";
                txtSiteFinance.Text = "";
                txtSiteLeaderShip.Text = "";
                txtPSRAFinal.Text = "";
                txtFinalTimingGate.Text = "";
                txtFinalQA.Text = "";
                txtFinalCentralQA.Text = "";
                txtFinalStandardsOffice.Text = "";
                txtFinalAdditionalApprover1.Text = "";
                txtFinalAdditionalApprover2.Text = "";
                txtFinalAdditionalApprover3.Text = "";
                txtFinalAdditionalApprover4.Text = "";
                return;
            }
            else
            {
                try
                {
                    drpCloseApprovalGroup.SelectedValue = drpPrelimApproval.SelectedItem.Value;
                }
                catch (Exception ex)
                {
                }
                if (objEOBA.GET_EO_Approval_Groups_Details(Convert.ToInt32(drpAppGrpFinal.SelectedItem.Value), ref ds))
                { }
                txtPSInitiative.Text = "";
                txtProductsResearch.Text = "";
                txtGBUHSEFinal.Text = "";
                txtSiteHSEFinal.Text = "";
                txtSitePlanFinal.Text = "";
                txtSiteContactFinal.Text = "";
                txtSiteFinance.Text = "";
                txtSiteLeaderShip.Text = "";
                txtPSRAFinal.Text = "";
                txtFinalTimingGate.Text = "";
                txtFinalQA.Text = "";
                txtFinalCentralQA.Text = "";
                txtFinalStandardsOffice.Text = "";
                txtFinalAdditionalApprover1.Text = "";
                txtFinalAdditionalApprover2.Text = "";
                txtFinalAdditionalApprover3.Text = "";
                txtFinalAdditionalApprover4.Text = "";
            }
            int intGrp = 0;
            for (intGrp = 0; intGrp <= ds.Tables[0].Rows.Count - 1; intGrp++)
            {
                if (ds.Tables[0].Rows[intGrp][2].ToString() == "PS Initiative Manager")
                {
                    txtPSInitiative.Text = ds.Tables[0].Rows[intGrp][3].ToString();
                }
                else if (ds.Tables[0].Rows[intGrp][2].ToString() == "Products Research")
                {
                    txtProductsResearch.Text = ds.Tables[0].Rows[intGrp][3].ToString();
                }
                else if (ds.Tables[0].Rows[intGrp][2].ToString() == "Budget Center")
                {
                    //txtBudgetOwnerFinal.Text = ds.Tables[0).Rows(intGrp).Item(3).ToString
                }
                else if (ds.Tables[0].Rows[intGrp][2].ToString() == "GBU HS&E Resource")
                {
                    txtGBUHSEFinal.Text = ds.Tables[0].Rows[intGrp][3].ToString();
                }
                else if (ds.Tables[0].Rows[intGrp][2].ToString() == "Site HS&E Resource")
                {
                    txtSiteHSEFinal.Text = ds.Tables[0].Rows[intGrp][3].ToString();
                }
                else if (ds.Tables[0].Rows[intGrp][2].ToString() == "SAP Cost Center Coordinator")
                {
                    //txtSAPCostCenter.Text = ds.Tables[0).Rows(intGrp).Item(3).ToString
                }
                else if (ds.Tables[0].Rows[intGrp][2].ToString() == "Site Planning")
                {
                    txtSitePlanFinal.Text = ds.Tables[0].Rows[intGrp][3].ToString();
                }
                else if (ds.Tables[0].Rows[intGrp][2].ToString() == "Site Contact")
                {
                    txtSiteContactFinal.Text = ds.Tables[0].Rows[intGrp][3].ToString();
                }
                else if (ds.Tables[0].Rows[intGrp][2].ToString() == "Site Finance")
                {
                    txtSiteFinance.Text = ds.Tables[0].Rows[intGrp][3].ToString();
                }
                else if (ds.Tables[0].Rows[intGrp][2].ToString() == "Site Leadership")
                {
                    txtSiteLeaderShip.Text = ds.Tables[0].Rows[intGrp][3].ToString();
                }
                else if (ds.Tables[0].Rows[intGrp][2].ToString() == "PS&RA")
                {
                    txtPSRAFinal.Text = ds.Tables[0].Rows[intGrp][3].ToString();
                }
                else if (ds.Tables[0].Rows[intGrp][2].ToString() == "Timing Gate Exception")
                {
                    txtFinalTimingGate.Text = ds.Tables[0].Rows[intGrp][3].ToString();
                }
                else if (ds.Tables[0].Rows[intGrp][2].ToString() == "QA")
                {
                    txtFinalQA.Text = ds.Tables[0].Rows[intGrp][3].ToString();
                }
                else if (ds.Tables[0].Rows[intGrp][2].ToString() == "Central QA")
                {
                    txtFinalCentralQA.Text = ds.Tables[0].Rows[intGrp][3].ToString();
                }
                else if (ds.Tables[0].Rows[intGrp][2].ToString() == "Standards Office")
                {
                    txtFinalStandardsOffice.Text = ds.Tables[0].Rows[intGrp][3].ToString();
                }
                else if (ds.Tables[0].Rows[intGrp][2].ToString() == "Additional approver #1")
                {
                    txtFinalAdditionalApprover1.Text = ds.Tables[0].Rows[intGrp][3].ToString();
                }
                else if (ds.Tables[0].Rows[intGrp][2].ToString() == "Additional approver #2")
                {
                    txtFinalAdditionalApprover2.Text = ds.Tables[0].Rows[intGrp][3].ToString();
                }
                else if (ds.Tables[0].Rows[intGrp][2].ToString() == "Additional approver #3")
                {
                    txtFinalAdditionalApprover3.Text = ds.Tables[0].Rows[intGrp][3].ToString();
                }
                else if (ds.Tables[0].Rows[intGrp][2].ToString() == "Additional approver #4")
                {
                    txtFinalAdditionalApprover4.Text = ds.Tables[0].Rows[intGrp][3].ToString();
                }
            }
        }

        private void lnkAdditionalApp1Final_Click(System.Object sender, System.EventArgs e)
        {
            //string script = null;
            string strFuncName = "Additional approver1";
            //lblFinalAdditionalApprover1.Text.Trim()
            string strPlantID = drpPlant.SelectedItem.Value;
            if (strPlantID == "--Select a Plant--")
            {
                strPlantID = "0";
            }
            //script = "<script>window.open('ChangeApprover.aspx?FuncName=" + strFuncName + "&PlantID=" + strPlantID + "&From=AdditionalApprover1Final','Approvers','height=200,width=400');</script>";
            //Page.RegisterStartupScript("clientscript", script);

            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "window.open('ChangeApprover.aspx?FuncName=" + strFuncName + "&PlantID=" + strPlantID + "&From=AdditionalApprover1Final','Approvers','height=200,width=400');", true);
        }

        private void lnkAdditionalApp2Final_Click(System.Object sender, System.EventArgs e)
        {
            //string script = null;
            string strFuncName = "Additional approver2";
            //lblFinalAdditionalApprover2.Text.Trim()
            string strPlantID = drpPlant.SelectedItem.Value;
            if (strPlantID == "--Select a Plant--")
            {
                strPlantID = "0";
            }
            //script = "<script>window.open('ChangeApprover.aspx?FuncName=" + strFuncName + "&PlantID=" + strPlantID + "&From=AdditionalApprover2Final','Approvers','height=200,width=400');</script>";
            //Page.RegisterStartupScript("clientscript", script);
            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "window.open('ChangeApprover.aspx?FuncName=" + strFuncName + "&PlantID=" + strPlantID + "&From=AdditionalApprover2Final','Approvers','height=200,width=400');", true);
        }

        private void lnkAdditionalApp3Final_Click(System.Object sender, System.EventArgs e)
        {
            //string script = null;
            string strFuncName = "Additional approver3";
            //lblFinalAdditionalApprover3.Text.Trim
            string strPlantID = drpPlant.SelectedItem.Value;
            if (strPlantID == "--Select a Plant--")
            {
                strPlantID = "0";
            }
            //script = "<script>window.open('ChangeApprover.aspx?FuncName=" + strFuncName + "&PlantID=" + strPlantID + "&From=AdditionalApprover3Final','Approvers','height=200,width=400');</script>";
            //Page.RegisterStartupScript("clientscript", script);

            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "window.open('ChangeApprover.aspx?FuncName=" + strFuncName + "&PlantID=" + strPlantID + "&From=AdditionalApprover3Final','Approvers','height=200,width=400');", true);

        }

        private void lnkAdditionalApp4Final_Click(System.Object sender, System.EventArgs e)
        {
            //string script = null;
            string strFuncName = "Additional approver4";
            //lblFinalAdditionalApprover4.Text.Trim
            string strPlantID = drpPlant.SelectedItem.Value;
            if (strPlantID == "--Select a Plant--")
            {
                strPlantID = "0";
            }
            //script = "<script>window.open('ChangeApprover.aspx?FuncName=" + strFuncName + "&PlantID=" + strPlantID + "&From=AdditionalApprover4Final','Approvers','height=200,width=400');</script>";
            //Page.RegisterStartupScript("clientscript", script);

            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "window.open('ChangeApprover.aspx?FuncName=" + strFuncName + "&PlantID=" + strPlantID + "&From=AdditionalApprover4Final','Approvers','height=200,width=400');", true);
        }



        //private int GET_EO_Lock_Status_Approve()
        //{
        //    try
        //    {
        //        int intResult;

        //        if (objEOBA.GET_EO_Lock_Status_Approve((Request.QueryString["EOID"]), ref paramOut))
        //        {
        //            if (Convert.ToInt32(paramOut[0].Value) == 5)
        //            {
        //                string script1 = null;
        //                script1 = "<script>alert('Document is already in edit mode. Please try again in a few minutes.');window.navigate('Home.aspx');</script> ";
        //                Page.RegisterStartupScript("clientscript", script1);
        //            }
        //            intResult = Convert.ToInt32(paramOut[0].Value);
        //        }

        //        return intResult;
        //    }
        //    catch (Exception ex)
        //    {
        //    }
        //}






        private void lnkSmartClearanceDeclined_Click(object sender, System.EventArgs e)
        {
            int intResult;
            intResult = GET_EO_Lock_Status_Approve();
            if (intResult == 5)
            {
                return;
            }

            //string script = null;
            //script = "<script>ApproverConfirm('" + ViewState["EOID"] + "','" + ViewState["stage"] + "','SMART Clearance','N');</script> ";
            //Page.RegisterStartupScript("db_error_message", script);

            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "ApproverConfirm('" + ViewState["EOID"] + "','" + ViewState["stage"] + "','SMART Clearance','N');", true);
        }



        public void Brand_Plant_EO_Mode_AppGrp()
        {
            if (!(ViewState["EOID"] == null))
            {
                DataSet dsMandataory = null;
                if (objEOBA.GETEOMandatory(Convert.ToInt32(ViewState["EOID"]), ref dsMandataory))
                {
                    if ((dsMandataory != null))
                    {
                        if (!(dsMandataory.Tables.Count == 0))
                        {
                            if (!(dsMandataory.Tables[2].Rows.Count == 0))
                            {
                                int intRowCount = 0;
                                for (intRowCount = 0; intRowCount <= dsMandataory.Tables[2].Rows.Count - 1; intRowCount++)
                                {
                                    if ((!object.ReferenceEquals(dsMandataory.Tables[2].Rows[intRowCount][0], System.DBNull.Value)))
                                    {
                                        //lbEOBrandsDB.Items[lbEOBrandsDB.Items.IndexOf(lbEOBrandsDB.Items.FindByValue(ds.Tables[2).Rows(intRowCount).Item(0)))].Selected  = true
                                        if (string.IsNullOrEmpty(lblBrandIDList.Text))
                                        {
                                            lblBrandIDList.Text = dsMandataory.Tables[2].Rows[intRowCount][0].ToString();
                                        }
                                        else
                                        {
                                            lblBrandIDList.Text = lblBrandIDList.Text + "," + dsMandataory.Tables[2].Rows[intRowCount][0];
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            DataSet ds = new DataSet();
            int intPalntID = 0;
            if (drpPlant.SelectedItem.Text == "--Select a Plant--")
                intPalntID = 0;
            else
                intPalntID = Convert.ToInt32(drpPlant.SelectedItem.Value);


            if (objEOBA.GET_EO_Approval_Groups_By_Plant_Brand_EOMode(intPalntID, lblBrandIDList.Text, Convert.ToChar(rbEOType.SelectedItem.Value), ref ds))
            {


                if (drpBudgetCenterDB.SelectedItem.Text == "--Select a Budget Center--")
                {
                    drpBudgetCenterDB.Items.Clear();
                    drpBudgetCenterDB.DataSource = ds.Tables[1].DefaultView;
                    drpBudgetCenterDB.DataTextField = "Budget_Center_Name";
                    drpBudgetCenterDB.DataValueField = "Budget_Center_ID";
                    drpBudgetCenterDB.DataBind();
                    drpBudgetCenterDB.Items.Insert(0, "--Select a Budget Center--");
                }

                drpPrelimApproval.DataSource = ds;
                drpPrelimApproval.DataTextField = "Approval_Group_Name";
                drpPrelimApproval.DataValueField = "Approval_Group_ID";
                drpPrelimApproval.DataBind();
                drpPrelimApproval.Items.Insert(0, "--Select Approver Group--");

                drpAppGrpFinal.DataSource = ds;
                drpAppGrpFinal.DataTextField = "Approval_Group_Name";
                drpAppGrpFinal.DataValueField = "Approval_Group_ID";
                drpAppGrpFinal.DataBind();
                drpAppGrpFinal.Items.Insert(0, "--Select Approver Group--");

                drpCloseApprovalGroup.DataSource = ds;
                drpCloseApprovalGroup.DataTextField = "Approval_Group_Name";
                drpCloseApprovalGroup.DataValueField = "Approval_Group_ID";
                drpCloseApprovalGroup.DataBind();
                drpCloseApprovalGroup.Items.Insert(0, "--Select Approver Group--");
            }
        }

        public void Brand_Plant_EO_Mode_AppGrp_final()
        {
            if (!(ViewState["EOID"] == null))
            {
                DataSet dsMandataory = null;


                if (objEOBA.GETEOMandatory(Convert.ToInt32(ViewState["EOID"]), ref dsMandataory))
                {
                    if ((dsMandataory != null))
                    {
                        if (!(dsMandataory.Tables.Count == 0))
                        {
                            if (!(dsMandataory.Tables[2].Rows.Count == 0))
                            {
                                int intRowCount = 0;
                                for (intRowCount = 0; intRowCount <= dsMandataory.Tables[2].Rows.Count - 1; intRowCount++)
                                {
                                    if ((!object.ReferenceEquals(dsMandataory.Tables[2].Rows[intRowCount][0], System.DBNull.Value)))
                                    {
                                        //lbEOBrandsDB.Items[lbEOBrandsDB.Items.IndexOf(lbEOBrandsDB.Items.FindByValue(ds.Tables[2).Rows(intRowCount).Item(0)))].Selected  = true
                                        if (string.IsNullOrEmpty(lblBrandIDList.Text))
                                        {
                                            lblBrandIDList.Text = dsMandataory.Tables[2].Rows[intRowCount][0].ToString();
                                        }
                                        else
                                        {
                                            lblBrandIDList.Text = lblBrandIDList.Text + "," + dsMandataory.Tables[2].Rows[intRowCount][0];
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }

            DataSet ds = new DataSet();
            //Added by David

            if (ViewState["stage"].ToString() == "Preliminary" & ViewState["Status"].ToString() == "Routed")
            {
                FillDropDownData(2, "Plant_Name", "Plant_ID", "--Select a Plant--", drpPlant);
                DataSet dsPlant = new DataSet();
                if (objEOBA.GETEOMandatory(Convert.ToInt32(ViewState["EOID"]), ref dsPlant))
                {
                    if ((!object.ReferenceEquals(dsPlant.Tables[0].Rows[0]["Plant_Name"], System.DBNull.Value)))
                    {
                        drpPlant.Items[drpPlant.Items.IndexOf(drpPlant.Items.FindByText(dsPlant.Tables[0].Rows[0]["Plant_Name"].ToString()))].Selected = true;
                    }
                    else
                    {
                        drpPlant.Items[drpPlant.Items.IndexOf(drpPlant.Items.FindByValue("0"))].Selected = true;
                    }
                }
            }

            if (ViewState["stage"].ToString() == "Final" & ViewState["Status"].ToString() == "Draft")
            {
                FillDropDownData(2, "Plant_Name", "Plant_ID", "--Select a Plant--", drpPlant);
                DataSet dsPlant = new DataSet();
                if (objEOBA.GETEOMandatory(Convert.ToInt32(ViewState["EOID"]), ref dsPlant))
                {
                    if ((!object.ReferenceEquals(dsPlant.Tables[0].Rows[0]["Plant_Name"], System.DBNull.Value)))
                    {
                        drpPlant.Items[drpPlant.Items.IndexOf(drpPlant.Items.FindByText(dsPlant.Tables[0].Rows[0]["Plant_Name"].ToString()))].Selected = true;
                    }
                    else
                    {
                        drpPlant.Items[drpPlant.Items.IndexOf(drpPlant.Items.FindByValue("0"))].Selected = true;
                    }
                }
            }

            if (ViewState["stage"].ToString() == "Final" && ViewState["Status"].ToString() == "Routed")
            {
                FillDropDownData(2, "Plant_Name", "Plant_ID", "--Select a Plant--", drpPlant);
                DataSet dsPlant = new DataSet();
                if (objEOBA.GETEOMandatory(Convert.ToInt32(ViewState["EOID"]), ref dsPlant))
                {
                    if ((!object.ReferenceEquals(dsPlant.Tables[0].Rows[0]["Plant_Name"], System.DBNull.Value)))
                    {
                        drpPlant.Items[drpPlant.Items.IndexOf(drpPlant.Items.FindByText(dsPlant.Tables[0].Rows[0]["Plant_Name"].ToString()))].Selected = true;
                    }
                    else
                    {
                        drpPlant.Items[drpPlant.Items.IndexOf(drpPlant.Items.FindByValue("0"))].Selected = true;
                    }
                }
            }

            int intPalntID = 0;
            if (drpPlant.SelectedItem.Text == "--Select a Plant--")
                intPalntID = 0;
            else
                intPalntID = Convert.ToInt32(drpPlant.SelectedItem.Value);


            if (objEOBA.GET_EO_Approval_Groups_By_Plant_Brand_EOMode(intPalntID, lblBrandIDList.Text, Convert.ToChar(rbEOType.SelectedItem.Value), ref ds))
            {


                drpAppGrpFinal.DataSource = ds;
                drpAppGrpFinal.DataTextField = "Approval_Group_Name";
                drpAppGrpFinal.DataValueField = "Approval_Group_ID";
                drpAppGrpFinal.DataBind();
                //If Not (Request.QueryString["From"] = "CopyNew" Or Request.QueryString["From"] = "ForEOEdit" Or Request.QueryString["From"] = "ForEOLock" Or Request.QueryString["From"] = "MailEdit") Then
                drpAppGrpFinal.Items.Insert(0, "--Select Approver Group--");
                //End If

                drpCloseApprovalGroup.DataSource = ds;
                drpCloseApprovalGroup.DataTextField = "Approval_Group_Name";
                drpCloseApprovalGroup.DataValueField = "Approval_Group_ID";
                drpCloseApprovalGroup.DataBind();
                //If Not (Request.QueryString["From"] = "CopyNew" Or Request.QueryString["From"] = "ForEOEdit" Or Request.QueryString["From"] = "ForEOLock" Or Request.QueryString["From"] = "MailEdit") Then
                drpCloseApprovalGroup.Items.Insert(0, "--Select Approver Group--");
            }

        }

        public void Brand_Plant_EO_Mode_AppGrp_CloseOut()
        {
            if (!(ViewState["EOID"] == null))
            {
                DataSet dsMandataory = null;

                if (objEOBA.GETEOMandatory(Convert.ToInt32(ViewState["EOID"]), ref dsMandataory))
                {
                    if ((dsMandataory != null))
                    {
                        if (!(dsMandataory.Tables.Count == 0))
                        {
                            if (!(dsMandataory.Tables[2].Rows.Count == 0))
                            {
                                int intRowCount = 0;
                                for (intRowCount = 0; intRowCount <= dsMandataory.Tables[2].Rows.Count - 1; intRowCount++)
                                {
                                    if ((!object.ReferenceEquals(dsMandataory.Tables[2].Rows[intRowCount][0], System.DBNull.Value)))
                                    {
                                        //lbEOBrandsDB.Items[lbEOBrandsDB.Items.IndexOf(lbEOBrandsDB.Items.FindByValue(ds.Tables[2).Rows(intRowCount).Item(0)))].Selected  = true
                                        if (string.IsNullOrEmpty(lblBrandIDList.Text))
                                        {
                                            lblBrandIDList.Text = dsMandataory.Tables[2].Rows[intRowCount][0].ToString();
                                        }
                                        else
                                        {
                                            lblBrandIDList.Text = lblBrandIDList.Text + "," + dsMandataory.Tables[2].Rows[intRowCount][0];
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            DataSet ds = new DataSet();
            int intPalntID = 0;
            if (drpPlant.SelectedItem.Text == "--Select a Plant--")
                intPalntID = 0;
            else
                intPalntID = Convert.ToInt32(drpPlant.SelectedItem.Value);
            if (objEOBA.GET_EO_Approval_Groups_By_Plant_Brand_EOMode(intPalntID, lblBrandIDList.Text, Convert.ToChar(rbEOType.SelectedItem.Value), ref ds))
            {
                drpCloseApprovalGroup.DataSource = ds;
                drpCloseApprovalGroup.DataTextField = "Approval_Group_Name";
                drpCloseApprovalGroup.DataValueField = "Approval_Group_ID";
                drpCloseApprovalGroup.DataBind();
                drpCloseApprovalGroup.Items.Insert(0, "--Select Approver Group--");
            }
        }

        private void lbEOTypeDB_SelectedIndexChanged(System.Object sender, System.EventArgs e)
        {
            //If lbEOTypeDB.SelectedItem.Text = "Other - Please specify below" Then
            //    txtEOTypeOther.Enabled = true
            //Else
            //    txtEOTypeOther.Enabled = False
            //End If
        }





        //private void FillConGroups(int PlantID, int ConGrpID)
        //{
        //    DataSet dsCGName = null;
        //    dsCGName = new DataSet();
        //    PlantID = Convert.ToInt32(drpPlant.SelectedValue);
        //    BusinessObject.MUREO.BusinessObject.SendConcurrence objConGrp = new BusinessObject.MUREO.BusinessObject.SendConcurrence();
        //    dsCGName = objConGrp.FillConGroups(PlantID, ConGrpID);
        //    if (dsCGName == null)
        //    {
        //    }
        //    else if (dsCGName.Tables.Count == 0)
        //    {
        //    }
        //    else if (dsCGName.Tables[0].Rows.Count == 0)
        //    {
        //    }
        //    else
        //    {
        //        dlstConcGrp.DataSource = dsCGName;
        //        dlstConcGrp.DataBind();
        //    }
        //    //Send mails to Approvers
        //    MailMessage objMail = new MailMessage();
        //    int rowCount = 0;
        //    string SendersList = null;
        //    //objMail.To = "sreevani.j@vertexcs.com"
        //    if (dsCGName == null)
        //    {
        //    }
        //    else if (dsCGName.Tables.Count == 0)
        //    {
        //    }
        //    else if (dsCGName.Tables[0].Rows.Count == 0)
        //    {
        //    }
        //    else
        //    {
        //        for (rowCount = 0; rowCount <= dsCGName.Tables[0].Rows.Count - 1; rowCount++)
        //        {
        //            SendersList = dsCGName.Tables[0].Rows[rowCount]["Concurrence_Approver_Name"].ToString();
        //            SendersList = SendersList + ";";
        //        }
        //    }

        //}

        public void GET_EO_Preliminary_Edit()
        {
            DataSet ds = null;
            if (objEOBA.GET_EO_Preliminary(Convert.ToInt32(ViewState["EOID"]), ref ds))
            {
                if ((ds != null))
                {
                    if (!(ds.Tables.Count == 0))
                    {
                        if (!(ds.Tables[0].Rows.Count == 0))
                        {
                            if ((!object.ReferenceEquals(ds.Tables[0].Rows[0]["New_EO_Type_Name"], System.DBNull.Value)))
                            {
                                txtEOTypeOther.Text = ds.Tables[0].Rows[0]["New_EO_Type_Name"].ToString();
                            }
                            else
                            {
                                txtEOTypeOther.Text = string.Empty;
                            }
                            try
                            {
                                if ((!object.ReferenceEquals(ds.Tables[0].Rows[0]["Scope_Project_Phase_ID"], System.DBNull.Value)))
                                {
                                    if (Convert.ToInt32(ds.Tables[0].Rows[0]["Scope_Project_Phase_ID"]) == 0)
                                    {
                                    }
                                    else
                                    {
                                        drpEOScopeDB.SelectedIndex = -1;
                                        drpEOScopeDB.Items[drpEOScopeDB.Items.IndexOf(drpEOScopeDB.Items.FindByValue(ds.Tables[0].Rows[0]["Scope_Project_Phase_ID"].ToString()))].Selected = true;
                                    }
                                }

                            }
                            catch (Exception ex)
                            {
                            }

                            if ((!object.ReferenceEquals(ds.Tables[0].Rows[0]["New_Scope_Project_Type_Name"], System.DBNull.Value)))
                            {
                                txtEOScopeOther.Text = ds.Tables[0].Rows[0]["New_Scope_Project_Type_Name"].ToString();
                            }
                            else
                            {
                                txtEOScopeOther.Text = string.Empty;
                            }

                            if ((!object.ReferenceEquals(ds.Tables[0].Rows[0]["Description"], System.DBNull.Value)))
                            {
                                txtBriefDescription.Text = ds.Tables[0].Rows[0]["Description"].ToString();
                            }
                            else
                            {
                                txtBriefDescription.Text = string.Empty;
                            }

                            if ((!object.ReferenceEquals(ds.Tables[0].Rows[0]["Paper_Making_Days"], System.DBNull.Value)))
                            {
                                txtPaperMaking.Text = ds.Tables[0].Rows[0]["Paper_Making_Days"].ToString();
                            }
                            else
                            {
                                txtPaperMaking.Text = string.Empty;
                            }

                            if ((!object.ReferenceEquals(ds.Tables[0].Rows[0]["Converting_Time_Days"], System.DBNull.Value)))
                            {
                                txtConvertingTime.Text = ds.Tables[0].Rows[0]["Converting_Time_Days"].ToString();
                            }
                            else
                            {
                                txtConvertingTime.Text = string.Empty;
                            }

                            if ((!object.ReferenceEquals(ds.Tables[0].Rows[0]["New_Material_Cost"], System.DBNull.Value)))
                            {
                                txtCostNewMaterials.Text = ds.Tables[0].Rows[0]["New_Material_Cost"].ToString();
                            }
                            else
                            {
                                txtCostNewMaterials.Text = string.Empty;
                            }

                            if ((!object.ReferenceEquals(ds.Tables[0].Rows[0]["EO_Specific_Cost"], System.DBNull.Value)))
                            {
                                txtEOEquipment.Text = ds.Tables[0].Rows[0]["EO_Specific_Cost"].ToString();
                            }
                            else
                            {
                                txtEOEquipment.Text = string.Empty;
                            }

                            if ((!object.ReferenceEquals(ds.Tables[0].Rows[0]["Total_Pre_Spending"], System.DBNull.Value)))
                            {
                                lbPreSpending.Text = ds.Tables[0].Rows[0]["Total_Pre_Spending"].ToString();
                            }
                            else
                            {
                                lbPreSpending.Text = string.Empty;
                            }

                            if ((!object.ReferenceEquals(ds.Tables[0].Rows[0]["EO_Executing_Cost"], System.DBNull.Value)))
                            {
                                txtExecutionCost.Text = ds.Tables[0].Rows[0]["EO_Executing_Cost"].ToString();
                            }
                            else
                            {
                                txtExecutionCost.Text = string.Empty;
                            }

                            if ((!object.ReferenceEquals(ds.Tables[0].Rows[0]["Total_Cost"], System.DBNull.Value)))
                            {
                                lbTotalCost.Text = ds.Tables[0].Rows[0]["Total_Cost"].ToString();
                            }
                            else
                            {
                                lbTotalCost.Text = string.Empty;
                            }
                            //To Fill BudgetCenter
                            fillSelectedPlantDetails1();
                            try
                            {
                                if ((!object.ReferenceEquals(ds.Tables[0].Rows[0]["Selected_Budget_Center_Name"], System.DBNull.Value)))
                                {
                                    if (!string.IsNullOrEmpty(ds.Tables[0].Rows[0]["Selected_Budget_Center_Name"].ToString()))
                                    {
                                        drpBudgetCenterDB.SelectedIndex = -1;
                                        drpBudgetCenterDB.Items[drpBudgetCenterDB.Items.IndexOf(drpBudgetCenterDB.Items.FindByText(ds.Tables[0].Rows[0]["Selected_Budget_Center_Name"].ToString()))].Selected = true;
                                        lblPreSelectedBudgetCenter.Text = ds.Tables[0].Rows[0]["Selected_Budget_Center_Name"].ToString();
                                        lblPreCOSelectedBudgetCenter.Text = ds.Tables[0].Rows[0]["Selected_Budget_Center_Name"].ToString();
                                        lblPreSelBudgetCenterLock.Text = ds.Tables[0].Rows[0]["Selected_Budget_Center_Name"].ToString();
                                        lblPreCOSelBudgetCenterLock.Text = ds.Tables[0].Rows[0]["Selected_Budget_Center_Name"].ToString();

                                    }
                                    else
                                    {
                                        lblPreSelectedBudgetCenter.Text = string.Empty;
                                        lblPreCOSelectedBudgetCenter.Text = string.Empty;
                                        lblPreSelBudgetCenterLock.Text = string.Empty;
                                        lblPreCOSelBudgetCenterLock.Text = string.Empty;
                                    }
                                }
                                else
                                {
                                    lblPreSelectedBudgetCenter.Text = string.Empty;
                                    lblPreCOSelectedBudgetCenter.Text = string.Empty;
                                    lblPreSelBudgetCenterLock.Text = string.Empty;
                                    lblPreCOSelBudgetCenterLock.Text = string.Empty;
                                }
                            }
                            catch (Exception ex)
                            {
                            }
                            if ((!object.ReferenceEquals(ds.Tables[0].Rows[0]["Other_Center_Department"], System.DBNull.Value)))
                            {
                                txtOtherBudgetCenter.Text = ds.Tables[0].Rows[0]["Other_Center_Department"].ToString();
                            }
                            else
                            {
                                txtOtherBudgetCenter.Text = string.Empty;
                            }
                            if ((!object.ReferenceEquals(ds.Tables[0].Rows[0]["Suggested_Budget_Center_Name"], System.DBNull.Value)))
                            {
                                if (!(ds.Tables[0].Rows[0]["Suggested_Budget_Center_Name"].ToString() == "--SELECT--"))
                                {
                                    txtSelectedBudgCenter.Text = ds.Tables[0].Rows[0]["Suggested_Budget_Center_Name"].ToString();
                                }
                                else
                                {
                                    txtSelectedBudgCenter.Text = string.Empty;
                                }
                            }
                            else
                            {
                                txtSelectedBudgCenter.Text = string.Empty;
                            }

                        }

                        try
                        {
                            if (!(ds.Tables[1].Rows.Count == 0))
                            {
                                int intRowCount = 0;
                                for (intRowCount = 0; intRowCount <= ds.Tables[1].Rows.Count - 1; intRowCount++)
                                {
                                    if ((!object.ReferenceEquals(ds.Tables[1].Rows[intRowCount][0], System.DBNull.Value)))
                                    {
                                        lbEOTypeDB.Items[lbEOTypeDB.Items.IndexOf(lbEOTypeDB.Items.FindByValue(ds.Tables[1].Rows[intRowCount][0].ToString()))].Selected = true;
                                    }
                                }
                            }
                        }
                        catch (Exception ex)
                        {
                        }
                        //NewMaterialandBrandsReadOnly

                        if (!(ds.Tables[2].Rows.Count == 0))
                        {
                            if ((!object.ReferenceEquals(ds.Tables[2].Rows[0]["EO_Raw_Packing_Material"], System.DBNull.Value)))
                            {
                                if (ds.Tables[2].Rows[0]["EO_Raw_Packing_Material"].ToString() == "Y")
                                {
                                    rbRawMaterial.Items[0].Selected = true;
                                    rbRawMaterial.Items[1].Selected = false;
                                }
                                else if (ds.Tables[2].Rows[0]["EO_Raw_Packing_Material"].ToString() == "N")
                                {
                                    rbRawMaterial.Items[0].Selected = false;
                                    rbRawMaterial.Items[1].Selected = true;
                                }
                                else
                                {
                                    rbRawMaterial.Items[0].Selected = false;
                                    rbRawMaterial.Items[1].Selected = false;
                                }
                            }
                            else
                            {
                                rbRawMaterial.Items[0].Selected = false;
                                rbRawMaterial.Items[1].Selected = false;
                            }

                            if ((!object.ReferenceEquals(ds.Tables[2].Rows[0]["EO_Parent_Rolls"], System.DBNull.Value)))
                            {
                                if (ds.Tables[2].Rows[0]["EO_Parent_Rolls"].ToString() == "Y")
                                {
                                    rbParentRolls.Items[0].Selected = true;
                                    rbParentRolls.Items[1].Selected = false;
                                }
                                else if (ds.Tables[2].Rows[0]["EO_Parent_Rolls"].ToString() == "N")
                                {
                                    rbParentRolls.Items[1].Selected = true;
                                    rbParentRolls.Items[0].Selected = false;
                                }
                                else
                                {
                                    rbParentRolls.Items[1].Selected = false;
                                    rbParentRolls.Items[0].Selected = false;
                                }
                            }
                            else
                            {
                                rbParentRolls.Items[1].Selected = false;
                                rbParentRolls.Items[0].Selected = false;
                            }

                            if ((!object.ReferenceEquals(ds.Tables[2].Rows[0]["EO_Intermediate_Material"], System.DBNull.Value)))
                            {
                                if (ds.Tables[2].Rows[0]["EO_Intermediate_Material"].ToString() == "Y")
                                {
                                    rbInterMaterials.Items[0].Selected = true;
                                    rbInterMaterials.Items[1].Selected = false;
                                }
                                else if (ds.Tables[2].Rows[0]["EO_Intermediate_Material"].ToString() == "N")
                                {
                                    rbInterMaterials.Items[0].Selected = false;
                                    rbInterMaterials.Items[1].Selected = true;
                                }
                                else
                                {
                                    rbInterMaterials.Items[0].Selected = false;
                                    rbInterMaterials.Items[1].Selected = false;
                                }
                            }
                            else
                            {
                                rbInterMaterials.Items[0].Selected = false;
                                rbInterMaterials.Items[1].Selected = false;
                            }

                            if ((!object.ReferenceEquals(ds.Tables[2].Rows[0]["EO_Regulated_Product"], System.DBNull.Value)))
                            {
                                if (ds.Tables[2].Rows[0]["EO_Regulated_Product"].ToString() == "Y")
                                {
                                    rbRegulatedProduct.Items[0].Selected = true;
                                    rbRegulatedProduct.Items[1].Selected = false;
                                }
                                else if (ds.Tables[2].Rows[0]["EO_Regulated_Product"].ToString() == "N")
                                {
                                    rbRegulatedProduct.Items[0].Selected = false;
                                    rbRegulatedProduct.Items[1].Selected = true;
                                }
                                else
                                {
                                    rbRegulatedProduct.Items[0].Selected = false;
                                    rbRegulatedProduct.Items[1].Selected = false;
                                }
                            }
                            else
                            {
                                rbRegulatedProduct.Items[0].Selected = false;
                                rbRegulatedProduct.Items[1].Selected = false;
                            }
                            if ((!object.ReferenceEquals(ds.Tables[2].Rows[0]["EO_GMP_Classification"], System.DBNull.Value)))
                            {
                                if (ds.Tables[2].Rows[0]["EO_GMP_Classification"].ToString() == "A")
                                {
                                    chkGMPClassify.Checked = true;
                                }
                                else if (ds.Tables[2].Rows[0]["EO_GMP_Classification"].ToString() == "B")
                                {
                                    chkGMPClassify.Checked = false;
                                }
                            }
                            else
                            {
                                chkGMPClassify.Checked = false;
                            }

                            if ((!object.ReferenceEquals(ds.Tables[2].Rows[0]["EO_Current_Brand"], System.DBNull.Value)))
                            {
                                if (ds.Tables[2].Rows[0]["EO_Current_Brand"].ToString() == "Y")
                                {
                                    rbShipped.Items[0].Selected = true;
                                    rbShipped.Items[1].Selected = false;
                                }
                                else if (ds.Tables[2].Rows[0]["EO_Current_Brand"].ToString() == "N")
                                {
                                    rbShipped.Items[0].Selected = false;
                                    rbShipped.Items[1].Selected = true;
                                }
                                else
                                {
                                    rbShipped.Items[0].Selected = false;
                                    rbShipped.Items[1].Selected = false;
                                }
                            }
                            else
                            {
                                rbShipped.Items[0].Selected = false;
                                rbShipped.Items[1].Selected = false;
                            }

                            if ((!object.ReferenceEquals(ds.Tables[2].Rows[0]["EO_Consumer_Lab_Evaluation"], System.DBNull.Value)))
                            {
                                if (ds.Tables[2].Rows[0]["EO_Consumer_Lab_Evaluation"].ToString() == "Y")
                                {
                                    rbTestProductedShipped.Items[0].Selected = true;
                                    rbTestProductedShipped.Items[1].Selected = false;
                                }
                                else if (ds.Tables[2].Rows[0]["EO_Consumer_Lab_Evaluation"].ToString() == "N")
                                {
                                    rbTestProductedShipped.Items[0].Selected = false;
                                    rbTestProductedShipped.Items[1].Selected = true;
                                }
                                else
                                {
                                    rbTestProductedShipped.Items[0].Selected = false;
                                    rbTestProductedShipped.Items[1].Selected = false;
                                }
                            }
                            else
                            {
                                rbTestProductedShipped.Items[0].Selected = false;
                                rbTestProductedShipped.Items[1].Selected = false;
                            }


                            //Added on 01/20/2010 
                            //For MUREO PCRs
                            //By: David

                            if ((!object.ReferenceEquals(ds.Tables[2].Rows[0]["Is_Understood_Policy_37"], DBNull.Value)))
                            {
                                if (Convert.ToInt32(ds.Tables[2].Rows[0]["Is_Understood_Policy_37"]) == 0)
                                {
                                    chkMaterialsBrands.Items[0].Selected = true;
                                    chkMaterialsBrands.Items[1].Selected = false;
                                    chkMaterialsBrands.Items[2].Selected = false;
                                    chkMaterialsBrandsReadOnly.Items[0].Selected = true;
                                    chkMaterialsBrandsReadOnly.Items[1].Selected = false;
                                    chkMaterialsBrandsReadOnly.Items[2].Selected = false;
                                    lblYesNoMat1.Text = "Yes";
                                    lblYesNoMat2.Text = "No";
                                    lblYesNoMat3.Text = "No";
                                }
                                else
                                {
                                    chkMaterialsBrands.Items[0].Selected = false;
                                    chkMaterialsBrandsReadOnly.Items[0].Selected = false;
                                }
                            }

                            if ((!object.ReferenceEquals(ds.Tables[2].Rows[0]["Is_Exception_Policy_37"], DBNull.Value)))
                            {
                                if (Convert.ToInt32(ds.Tables[2].Rows[0]["Is_Exception_Policy_37"]) == 0)
                                {
                                    chkMaterialsBrands.Items[0].Selected = false;
                                    chkMaterialsBrands.Items[1].Selected = true;
                                    chkMaterialsBrands.Items[2].Selected = false;
                                    chkMaterialsBrandsReadOnly.Items[0].Selected = false;
                                    chkMaterialsBrandsReadOnly.Items[1].Selected = true;
                                    chkMaterialsBrandsReadOnly.Items[2].Selected = false;
                                    lblYesNoMat2.Text = "Yes";
                                    lblYesNoMat1.Text = "No";
                                    lblYesNoMat3.Text = "No";
                                }
                                else
                                {
                                    chkMaterialsBrands.Items[1].Selected = false;
                                    chkMaterialsBrandsReadOnly.Items[1].Selected = false;
                                }
                            }

                            if ((!object.ReferenceEquals(ds.Tables[2].Rows[0]["Is_EO_Covered_Policy_37"], DBNull.Value)))
                            {
                                if (Convert.ToInt32(ds.Tables[2].Rows[0]["Is_EO_Covered_Policy_37"]) == 0)
                                {
                                    chkMaterialsBrands.Items[0].Selected = false;
                                    chkMaterialsBrands.Items[1].Selected = false;
                                    chkMaterialsBrands.Items[2].Selected = true;
                                    chkMaterialsBrandsReadOnly.Items[0].Selected = false;
                                    chkMaterialsBrandsReadOnly.Items[1].Selected = false;
                                    chkMaterialsBrandsReadOnly.Items[2].Selected = true;
                                    lblYesNoMat3.Text = "Yes";
                                    lblYesNoMat1.Text = "No";
                                    lblYesNoMat2.Text = "No";
                                }
                                else
                                {
                                    chkMaterialsBrands.Items[2].Selected = false;
                                    chkMaterialsBrandsReadOnly.Items[2].Selected = false;
                                }
                            }
                            for (int intchkMaterialsBrands = 0; intchkMaterialsBrands <= chkMaterialsBrands.Items.Count - 1; intchkMaterialsBrands++)
                            {
                                if (chkMaterialsBrands.Items[intchkMaterialsBrands].Selected == true)
                                {
                                    // Page.RegisterStartupScript("js", "<script>HandleOnCheck();</script>");
                                    ScriptManager.RegisterStartupScript(Page, Page.GetType(), Guid.NewGuid().ToString(), "HandleOnCheck();", true);
                                    break; // TODO: might not be correct. Was : Exit For

                                }
                                else
                                {
                                }
                            }
                            if ((!object.ReferenceEquals(ds.Tables[2].Rows[0]["EO_GCAS"], System.DBNull.Value)))
                            {
                                if (ds.Tables[2].Rows[0]["EO_GCAS"].ToString() == "Y")
                                {
                                    rbGCASNumber.Items[0].Selected = true;
                                    rbGCASNumber.Items[1].Selected = false;
                                }
                                else if (ds.Tables[2].Rows[0]["EO_GCAS"].ToString() == "N")
                                {
                                    rbGCASNumber.Items[0].Selected = false;
                                    rbGCASNumber.Items[1].Selected = true;
                                }
                                else
                                {
                                    rbGCASNumber.Items[0].Selected = false;
                                    rbGCASNumber.Items[1].Selected = false;
                                }
                            }
                            else
                            {
                                rbGCASNumber.Items[0].Selected = false;
                                rbGCASNumber.Items[1].Selected = false;
                            }
                        }

                        if (!(ds.Tables[3].Rows.Count == 0))
                        {
                            try
                            {
                                DataTable dtGCAS = new DataTable();
                                dgdGCASInfo.Visible = true;
                                dgdGCASInfo.DataSource = ds.Tables[3];
                                dgdGCASInfo.DataBind();
                                //dgdGCASInfo.Columns(8).Visible = False
                                dtGCAS = ds.Tables[3];

                            }
                            catch (Exception ex)
                            {
                            }

                            // Session("DT") = dtGCAS
                        }
                        //HSandSEReadOnly
                        if (!(ds.Tables[4].Rows.Count == 0))
                        {
                            if ((!object.ReferenceEquals(ds.Tables[4].Rows[0]["New_Chemical_Change"], System.DBNull.Value)))
                            {
                                if (ds.Tables[4].Rows[0]["New_Chemical_Change"].ToString() == "Y")
                                {
                                    rbChemical.Items[0].Selected = true;
                                    rbChemical.Items[1].Selected = false;
                                }
                                else if (ds.Tables[4].Rows[0]["New_Chemical_Change"].ToString() == "N")
                                {
                                    rbChemical.Items[0].Selected = false;
                                    rbChemical.Items[1].Selected = true;
                                }
                                else
                                {
                                    rbChemical.Items[0].Selected = false;
                                    rbChemical.Items[1].Selected = false;
                                }
                            }
                            else
                            {
                                rbChemical.Items[0].Selected = false;
                                rbChemical.Items[1].Selected = false;
                            }

                            if ((!object.ReferenceEquals(ds.Tables[4].Rows[0]["New_Raw_Material_Change"], System.DBNull.Value)))
                            {
                                if (ds.Tables[4].Rows[0]["New_Raw_Material_Change"].ToString() == "Y")
                                {
                                    rbNewRawMaterial.Items[0].Selected = true;
                                    rbNewRawMaterial.Items[1].Selected = false;
                                }
                                else if (ds.Tables[4].Rows[0]["New_Raw_Material_Change"].ToString() == "N")
                                {
                                    rbNewRawMaterial.Items[1].Selected = true;
                                    rbNewRawMaterial.Items[0].Selected = false;
                                }
                                else
                                {
                                    rbNewRawMaterial.Items[1].Selected = false;
                                    rbNewRawMaterial.Items[0].Selected = false;
                                }
                            }
                            else
                            {
                                rbNewRawMaterial.Items[1].Selected = false;
                                rbNewRawMaterial.Items[0].Selected = false;
                            }

                            if ((!object.ReferenceEquals(ds.Tables[4].Rows[0]["New_Equipment_Change"], System.DBNull.Value)))
                            {
                                if (ds.Tables[4].Rows[0]["New_Equipment_Change"].ToString() == "Y")
                                {
                                    rbNewEquipment.Items[0].Selected = true;
                                    rbNewEquipment.Items[1].Selected = false;
                                }
                                else if (ds.Tables[4].Rows[0]["New_Equipment_Change"].ToString() == "N")
                                {
                                    rbNewEquipment.Items[0].Selected = false;
                                    rbNewEquipment.Items[1].Selected = true;
                                }
                                else
                                {
                                    rbNewEquipment.Items[0].Selected = false;
                                    rbNewEquipment.Items[1].Selected = false;
                                }
                            }
                            else
                            {
                                rbNewEquipment.Items[0].Selected = false;
                                rbNewEquipment.Items[1].Selected = false;
                            }

                            if ((!object.ReferenceEquals(ds.Tables[4].Rows[0]["New_Job_Task_Change"], System.DBNull.Value)))
                            {
                                if (ds.Tables[4].Rows[0]["New_Job_Task_Change"].ToString() == "Y")
                                {
                                    rbNewJobTask.Items[0].Selected = true;
                                    rbNewJobTask.Items[1].Selected = false;
                                }
                                else if (ds.Tables[4].Rows[0]["New_Job_Task_Change"].ToString() == "N")
                                {
                                    rbNewJobTask.Items[0].Selected = false;
                                    rbNewJobTask.Items[1].Selected = true;
                                }
                                else
                                {
                                    rbNewJobTask.Items[0].Selected = false;
                                    rbNewJobTask.Items[1].Selected = false;
                                }
                            }
                            else
                            {
                                rbNewJobTask.Items[0].Selected = false;
                                rbNewJobTask.Items[1].Selected = false;
                            }
                        }
                        //PSandRAReadOnly
                        try
                        {
                            if (!(ds.Tables[6].Rows.Count == 0))
                            {
                                int intRowCount = 0;
                                for (intRowCount = 0; intRowCount <= ds.Tables[6].Rows.Count - 1; intRowCount++)
                                {
                                    if ((!object.ReferenceEquals(ds.Tables[6].Rows[intRowCount]["EO_PSRA_ID"], System.DBNull.Value)))
                                    {
                                        lbPSRADB.Items[lbPSRADB.Items.IndexOf(lbPSRADB.Items.FindByValue(ds.Tables[6].Rows[intRowCount]["EO_PSRA_ID"].ToString()))].Selected = true;
                                    }
                                }
                            }

                            if ((!object.ReferenceEquals(ds.Tables[6].Rows[0]["Additional_Info"], System.DBNull.Value)))
                            {
                                txtPSRAOther.Text = ds.Tables[6].Rows[0]["Additional_Info"].ToString();
                            }
                            else
                            {
                                txtPSRAOther.Text = "";
                            }

                        }
                        catch (Exception ex)
                        {
                        }

                        //PSRA Datagrid RaedOnly
                        if (!(ds.Tables[5].Rows.Count == 0))
                        {
                            dgdPSRAInfo.DataSource = ds.Tables[5];
                            dgdPSRAInfo.DataBind();
                            dtPSRA = ds.Tables[5];
                        }

                        //PlanningandBudgetInfoReadOnly
                        if (!(ds.Tables[7].Rows.Count == 0))
                        {
                            if ((!object.ReferenceEquals(ds.Tables[7].Rows[0]["Lines_Machines"], System.DBNull.Value)))
                            {
                                txtMachine.Text = ds.Tables[7].Rows[0]["Lines_Machines"].ToString();
                            }
                            else
                            {
                                txtMachine.Text = string.Empty;
                            }
                            if ((!object.ReferenceEquals(ds.Tables[7].Rows[0]["Planned_Start_Date"], System.DBNull.Value)))
                            {
                                txtStartDate.Text = ds.Tables[7].Rows[0]["Planned_Start_Date"].ToString();
                            }
                            else
                            {
                                txtStartDate.Text = string.Empty;
                            }
                            if ((!object.ReferenceEquals(ds.Tables[7].Rows[0]["Formula_Card_Number"], System.DBNull.Value)))
                            {
                                txtFormulaCardNumber.Text = ds.Tables[7].Rows[0]["Formula_Card_Number"].ToString();
                            }
                            else
                            {
                                txtFormulaCardNumber.Text = string.Empty;
                            }
                            if ((!object.ReferenceEquals(ds.Tables[7].Rows[0]["IGCAS_Number"], System.DBNull.Value)))
                            {
                                txtIPSGCAS.Text = ds.Tables[7].Rows[0]["IGCAS_Number"].ToString();
                            }
                            else
                            {
                                txtIPSGCAS.Text = string.Empty;
                            }
                        }
                        //ProductionandPackagingReadOnly

                        if (!(ds.Tables[8].Rows.Count == 0))
                        {
                            if ((!object.ReferenceEquals(ds.Tables[8].Rows[0]["PP_Format"], System.DBNull.Value)))
                            {
                                txtFormat.Text = ds.Tables[8].Rows[0]["PP_Format"].ToString();
                            }
                            else
                            {
                                txtFormat.Text = string.Empty;
                            }
                        }

                        //Packaging / Disposition Information REadOnly
                        try
                        {
                            if (!(ds.Tables[13].Rows.Count == 0))
                            {
                                int intRowCount = 0;
                                for (intRowCount = 0; intRowCount <= ds.Tables[13].Rows.Count - 1; intRowCount++)
                                {
                                    if ((!object.ReferenceEquals(ds.Tables[13].Rows[intRowCount]["Prod_Pack_ID"], System.DBNull.Value)))
                                    {
                                        if (!string.IsNullOrEmpty(Convert.ToString(ds.Tables[13].Rows[intRowCount]["Prod_Pack_ID"])))
                                        {
                                            lbProductPackedDB.Items[lbProductPackedDB.Items.IndexOf(lbProductPackedDB.Items.FindByValue(ds.Tables[13].Rows[intRowCount]["Prod_Pack_ID"].ToString()))].Selected = true;
                                        }
                                        else
                                        {
                                            lbProductPackedDB.SelectedIndex = 0;
                                        }
                                    }
                                }
                            }
                        }
                        catch (Exception ex)
                        {
                        }
                        if (!(ds.Tables[10].Rows.Count == 0))
                        {
                            if ((!object.ReferenceEquals(ds.Tables[10].Rows[0]["Current_Packaging"], System.DBNull.Value)))
                            {
                                if (ds.Tables[10].Rows[0]["Current_Packaging"].ToString() == "Y")
                                {
                                    chkCurrentPackaging.Checked = true;
                                }
                                else
                                {
                                    chkCurrentPackaging.Checked = false;
                                }
                            }

                            if ((!object.ReferenceEquals(ds.Tables[10].Rows[0]["Experimental_Packaging"], System.DBNull.Value)))
                            {
                                if (ds.Tables[10].Rows[0]["Experimental_Packaging"].ToString() == "Y")
                                {
                                    chkExperimentalPackaging.Checked = true;
                                }
                                else
                                {
                                    chkExperimentalPackaging.Checked = false;
                                }
                            }

                            if ((!object.ReferenceEquals(ds.Tables[10].Rows[0]["Exp_Pack_Clear_Poly"], System.DBNull.Value)))
                            {
                                if (ds.Tables[10].Rows[0]["Exp_Pack_Clear_Poly"].ToString() == "Y")
                                {
                                    chkClearPoly.Checked = true;
                                }
                                else
                                {
                                    chkClearPoly.Checked = false;
                                }
                            }

                            if ((!object.ReferenceEquals(ds.Tables[10].Rows[0]["Exp_Pack_Blank_KDF"], System.DBNull.Value)))
                            {
                                if (ds.Tables[10].Rows[0]["Exp_Pack_Blank_KDF"].ToString() == "Y")
                                {
                                    chkBlankKDF.Checked = true;
                                }
                                else
                                {
                                    chkBlankKDF.Checked = false;
                                }
                            }

                            //If Not ds.Tables[10).Rows(0).Item("Prod_Disp_ID") Is System.DBNull.Value Or Not ds.Tables[10).Rows(0).Item("Prod_Disp_ID") = "" Then
                            try
                            {
                                if ((!object.ReferenceEquals(ds.Tables[10].Rows[0]["Prod_Disp_ID"], System.DBNull.Value)))
                                {
                                    if (!(Convert.ToInt32(ds.Tables[10].Rows[0]["Prod_Disp_ID"]) == 0))
                                    {
                                        drpProductDispositionDB.SelectedIndex = -1;
                                        drpProductDispositionDB.Items[drpProductDispositionDB.Items.IndexOf(drpProductDispositionDB.Items.FindByValue(ds.Tables[10].Rows[0]["Prod_Disp_ID"].ToString()))].Selected = true;
                                    }
                                }
                            }
                            catch (Exception ex)
                            {
                            }

                            if ((!object.ReferenceEquals(ds.Tables[10].Rows[0]["Prod_Disp_Add_Comments"], System.DBNull.Value)))
                            {
                                txtAdditionalComments.Text = ds.Tables[10].Rows[0]["Prod_Disp_Add_Comments"].ToString();
                            }
                            else
                            {
                                txtAdditionalComments.Text = string.Empty;
                            }

                            if ((!object.ReferenceEquals(ds.Tables[10].Rows[0]["Pallet_Patter_SKU"], System.DBNull.Value)))
                            {
                                if (ds.Tables[10].Rows[0]["Pallet_Patter_SKU"].ToString() == "Y")
                                {
                                    rbPalletPattern.Items[0].Selected = true;
                                    rbPalletPattern.Items[1].Selected = false;
                                }
                                else if (ds.Tables[10].Rows[0]["Pallet_Patter_SKU"].ToString() == "N")
                                {
                                    rbPalletPattern.Items[0].Selected = false;
                                    rbPalletPattern.Items[1].Selected = true;
                                }
                                else
                                {
                                    rbPalletPattern.Items[0].Selected = false;
                                    rbPalletPattern.Items[1].Selected = false;
                                }
                            }
                            else
                            {
                                rbPalletPattern.Items[0].Selected = false;
                                rbPalletPattern.Items[1].Selected = false;
                            }

                            if ((!object.ReferenceEquals(ds.Tables[10].Rows[0]["Stack_Testing"], System.DBNull.Value)))
                            {
                                if (ds.Tables[10].Rows[0]["Stack_Testing"].ToString() == "Y")
                                {
                                    chkStackShipTesting.Items[0].Selected = true;
                                }
                                else
                                {
                                    chkStackShipTesting.Items[0].Selected = false;
                                }
                            }

                            if ((!object.ReferenceEquals(ds.Tables[10].Rows[0]["Ship_Testing"], System.DBNull.Value)))
                            {
                                if (ds.Tables[10].Rows[0]["Ship_Testing"].ToString() == "Y")
                                {
                                    chkStackShipTesting.Items[1].Selected = true;
                                }
                                else
                                {
                                    chkStackShipTesting.Items[1].Selected = false;
                                }
                            }

                            try
                            {
                                if ((!object.ReferenceEquals(ds.Tables[10].Rows[0]["Material_Disposition_ID"], System.DBNull.Value)))
                                {
                                    if (Convert.ToInt32(ds.Tables[10].Rows[0]["Material_Disposition_ID"]) != 0)
                                    {
                                        drpMaterialDispositionDB.SelectedIndex = -1;
                                        drpMaterialDispositionDB.Items[drpMaterialDispositionDB.Items.IndexOf(drpMaterialDispositionDB.Items.FindByValue(ds.Tables[10].Rows[0]["Material_Disposition_ID"].ToString()))].Selected = true;
                                    }
                                }
                            }
                            catch (Exception ex)
                            {
                            }

                            if ((!object.ReferenceEquals(ds.Tables[10].Rows[0]["Mat_Disp_Add_Comments"], System.DBNull.Value)))
                            {
                                txtMaterialComments.Text = ds.Tables[10].Rows[0]["Mat_Disp_Add_Comments"].ToString();
                            }
                            else
                            {
                                txtMaterialComments.Text = string.Empty;
                            }

                            if ((!object.ReferenceEquals(ds.Tables[10].Rows[0]["Broke_Disp_Normal"], System.DBNull.Value)))
                            {
                                if (ds.Tables[10].Rows[0]["Broke_Disp_Normal"].ToString() == "Y")
                                {
                                    rbBroke.Items[0].Selected = true;
                                    rbBroke.Items[1].Selected = false;
                                }
                                else if (ds.Tables[10].Rows[0]["Broke_Disp_Normal"].ToString() == "N")
                                {
                                    rbBroke.Items[0].Selected = false;
                                    rbBroke.Items[1].Selected = true;
                                }
                                else
                                {
                                    rbBroke.Items[0].Selected = false;
                                    rbBroke.Items[1].Selected = false;
                                }
                            }
                            else
                            {
                                rbBroke.Items[0].Selected = false;
                                rbBroke.Items[1].Selected = false;
                            }

                            if ((!object.ReferenceEquals(ds.Tables[10].Rows[0]["Printer_Broke"], System.DBNull.Value)))
                            {
                                if (ds.Tables[10].Rows[0]["Printer_Broke"].ToString() == "Y")
                                {
                                    rbPrintedBroke.Items[0].Selected = true;
                                    rbPrintedBroke.Items[1].Selected = false;
                                }
                                else if (ds.Tables[10].Rows[0]["Printer_Broke"].ToString() == "N")
                                {
                                    rbPrintedBroke.Items[0].Selected = false;
                                    rbPrintedBroke.Items[1].Selected = true;
                                }
                                else
                                {
                                    rbPrintedBroke.Items[0].Selected = false;
                                    rbPrintedBroke.Items[1].Selected = false;
                                }
                            }
                            else
                            {
                                rbPrintedBroke.Items[0].Selected = false;
                                rbPrintedBroke.Items[1].Selected = false;
                            }

                            if ((!object.ReferenceEquals(ds.Tables[10].Rows[0]["Ink_Coverage"], System.DBNull.Value)))
                            {
                                if (ds.Tables[10].Rows[0]["Ink_Coverage"].ToString() == "Y")
                                {
                                    rbInkCoverage.Items[0].Selected = true;
                                    rbInkCoverage.Items[1].Selected = false;
                                }
                                else if (ds.Tables[10].Rows[0]["Ink_Coverage"].ToString() == "N")
                                {
                                    rbInkCoverage.Items[0].Selected = false;
                                    rbInkCoverage.Items[1].Selected = true;
                                }
                                else
                                {
                                    rbInkCoverage.Items[0].Selected = false;
                                    rbInkCoverage.Items[1].Selected = false;
                                }
                            }
                            else
                            {
                                rbInkCoverage.Items[0].Selected = false;
                                rbInkCoverage.Items[1].Selected = false;
                            }

                            if ((!object.ReferenceEquals(ds.Tables[10].Rows[0]["Lab_Notebook_Number"], System.DBNull.Value)))
                            {
                                txtLabNoteBook.Text = ds.Tables[10].Rows[0]["Lab_Notebook_Number"].ToString();
                            }
                            else
                            {
                                txtLabNoteBook.Text = string.Empty;
                            }

                            if ((!object.ReferenceEquals(ds.Tables[10].Rows[0]["Comments"], System.DBNull.Value)))
                            {
                                txtPackagingComments.Text = ds.Tables[10].Rows[0]["Comments"].ToString();
                            }
                            else
                            {
                                txtPackagingComments.Text = string.Empty;
                            }

                            //Preliminary-Approval Section Read Only
                        }


                        if (!(ds.Tables[11].Rows.Count == 0))
                        {
                        }
                        //For attachments saved in db for preliminary

                        //'00
                        if (!(ds.Tables[19].Rows.Count == 0))
                        {
                            lbAddItemsEO.DataSource = ds.Tables[19].DefaultView;
                            lbAddItemsEO.DataTextField = "PDI_Attachment_File_Name";
                            lbAddItemsEO.DataValueField = "PDI_Attach_ID";
                            lbAddItemsEO.DataBind();

                            dgrdAttachment.DataSource = ds.Tables[19].DefaultView;
                            dgrdAttachment.DataBind();
                        }

                        Brand_Plant_EO_Mode_AppGrp();
                        try
                        {
                            if (!(ds.Tables[12].Rows.Count == 0))
                            {
                                if ((!object.ReferenceEquals(ds.Tables[12].Rows[0]["Approval_Group_ID"], System.DBNull.Value)))
                                {
                                    drpPrelimApproval.SelectedIndex = -1;
                                    drpPrelimApproval.Items[drpPrelimApproval.Items.IndexOf(drpPrelimApproval.Items.FindByValue(ds.Tables[12].Rows[0]["Approval_Group_ID"].ToString()))].Selected = true;
                                }
                                else
                                {
                                }
                            }
                            else
                            {
                            }

                        }
                        catch (Exception ex)
                        {
                        }

                        //Preliminary-Approval Section Edit
                        if (!(ds.Tables[12].Rows.Count == 0))
                        {
                            int intRowCount = 0;
                            for (intRowCount = 0; intRowCount <= ds.Tables[12].Rows.Count - 1; intRowCount++)
                            {
                                //If ds.Tables[12).Rows(intRowCount).Item("Function_Name") Is System.DBNull.Value Or Not ds.Tables[12).Rows(intRowCount).Item("Function_Name") = "" Then
                                if ((!object.ReferenceEquals(ds.Tables[12].Rows[intRowCount]["Function_Name"], System.DBNull.Value)))
                                {
                                    if (ds.Tables[12].Rows[intRowCount]["Function_Name"].ToString() == "Budget Center")
                                    {
                                        //If Not ds.Tables[12).Rows(intRowCount).Item("Approver_Name") Is System.DBNull.Value Or Not ds.Tables[12).Rows(intRowCount).Item("Approver_Name") = "" Then
                                        if ((!object.ReferenceEquals(ds.Tables[12].Rows[intRowCount]["Approver_Name"], System.DBNull.Value)))
                                        {
                                            txtBudgetOwner.Text = ds.Tables[12].Rows[intRowCount]["Approver_Name"].ToString();
                                        }
                                        else
                                        {
                                            txtBudgetOwner.Text = string.Empty;
                                        }
                                    }

                                    if (ds.Tables[12].Rows[intRowCount]["Function_Name"].ToString() == "GBU HS&E Resource")
                                    {
                                        //If Not ds.Tables[12).Rows(intRowCount).Item("Approver_Name") Is System.DBNull.Value Or Not ds.Tables[12).Rows(intRowCount).Item("Approver_Name") = "" Then
                                        if ((!object.ReferenceEquals(ds.Tables[12].Rows[intRowCount]["Approver_Name"], System.DBNull.Value)))
                                        {
                                            txtGBUHSE.Text = ds.Tables[12].Rows[intRowCount]["Approver_Name"].ToString();
                                        }
                                        else
                                        {
                                            txtGBUHSE.Text = string.Empty;
                                        }
                                    }

                                    if (ds.Tables[12].Rows[intRowCount]["Function_Name"].ToString() == "Site HS&E Resource")
                                    {
                                        //If Not ds.Tables[12).Rows(intRowCount).Item("Approver_Name") Is System.DBNull.Value Or Not ds.Tables[12).Rows(intRowCount).Item("Approver_Name") = "" Then
                                        if ((!object.ReferenceEquals(ds.Tables[12].Rows[intRowCount]["Approver_Name"], System.DBNull.Value)))
                                        {
                                            txtSiteHSE.Text = ds.Tables[12].Rows[intRowCount]["Approver_Name"].ToString();
                                        }
                                        else
                                        {
                                            txtSiteHSE.Text = string.Empty;
                                        }
                                    }

                                    if (ds.Tables[12].Rows[intRowCount]["Function_Name"].ToString() == "Site Contact")
                                    {
                                        //If Not ds.Tables[12).Rows(intRowCount).Item("Approver_Name") Is System.DBNull.Value Or Not ds.Tables[12).Rows(intRowCount).Item("Approver_Name") = "" Then
                                        if ((!object.ReferenceEquals(ds.Tables[12].Rows[intRowCount]["Approver_Name"], System.DBNull.Value)))
                                        {
                                            txtSiteContact.Text = ds.Tables[12].Rows[intRowCount]["Approver_Name"].ToString();
                                        }
                                        else
                                        {
                                            txtSiteContact.Text = string.Empty;
                                        }
                                    }

                                    if (ds.Tables[12].Rows[intRowCount]["Function_Name"].ToString() == "Site Planning")
                                    {
                                        //If Not ds.Tables[12).Rows(intRowCount).Item("Approver_Name") Is System.DBNull.Value Or Not ds.Tables[12).Rows(intRowCount).Item("Approver_Name") = "" Then
                                        if ((!object.ReferenceEquals(ds.Tables[12].Rows[intRowCount]["Approver_Name"], System.DBNull.Value)))
                                        {
                                            txtSitePlanning.Text = ds.Tables[12].Rows[intRowCount]["Approver_Name"].ToString();
                                        }
                                        else
                                        {
                                            txtSitePlanning.Text = string.Empty;
                                        }
                                    }

                                    if (ds.Tables[12].Rows[intRowCount]["Function_Name"].ToString() == "QA")
                                    {
                                        //If Not ds.Tables[12).Rows(intRowCount).Item("Approver_Name") Is System.DBNull.Value Or Not ds.Tables[12).Rows(intRowCount).Item("Approver_Name") = "" Then
                                        if ((!object.ReferenceEquals(ds.Tables[12].Rows[intRowCount]["Approver_Name"], System.DBNull.Value)))
                                        {
                                            txtQAPre.Text = ds.Tables[12].Rows[intRowCount]["Approver_Name"].ToString();
                                        }
                                        else
                                        {
                                            txtQAPre.Text = string.Empty;
                                        }
                                    }

                                    if (ds.Tables[12].Rows[intRowCount]["Function_Name"].ToString() == "Central QA")
                                    {
                                        //If Not ds.Tables[12).Rows(intRowCount).Item("Approver_Name") Is System.DBNull.Value Or Not ds.Tables[12).Rows(intRowCount).Item("Approver_Name") = "" Then
                                        if ((!object.ReferenceEquals(ds.Tables[12].Rows[intRowCount]["Approver_Name"], System.DBNull.Value)))
                                        {
                                            txtCentralQAPre.Text = ds.Tables[12].Rows[intRowCount]["Approver_Name"].ToString();
                                        }
                                        else
                                        {
                                            txtCentralQAPre.Text = string.Empty;
                                        }
                                    }

                                    if (ds.Tables[12].Rows[intRowCount]["Function_Name"].ToString() == "Central Planning")
                                    {
                                        //If Not ds.Tables[12).Rows(intRowCount).Item("Approver_Name") Is System.DBNull.Value Or Not ds.Tables[12).Rows(intRowCount).Item("Approver_Name") = "" Then
                                        if ((!object.ReferenceEquals(ds.Tables[12].Rows[intRowCount]["Approver_Name"], System.DBNull.Value)))
                                        {
                                            txtCentralPlanning.Text = ds.Tables[12].Rows[intRowCount]["Approver_Name"].ToString();
                                        }
                                        else
                                        {
                                            txtCentralPlanning.Text = string.Empty;
                                        }
                                    }

                                    if (ds.Tables[12].Rows[intRowCount]["Function_Name"].ToString() == "SAP Cost Center Coordinator")
                                    {
                                        //If Not ds.Tables[12).Rows(intRowCount).Item("Approver_Name") Is System.DBNull.Value Or Not ds.Tables[12).Rows(intRowCount).Item("Approver_Name") = "" Then
                                        if ((!object.ReferenceEquals(ds.Tables[12].Rows[intRowCount]["Approver_Name"], System.DBNull.Value)))
                                        {
                                            txtSAPCost.Text = ds.Tables[12].Rows[intRowCount]["Approver_Name"].ToString();
                                        }
                                        else
                                        {
                                            txtSAPCost.Text = string.Empty;
                                        }
                                    }

                                    if (ds.Tables[12].Rows[intRowCount]["Function_Name"].ToString() == "SMART Clearance")
                                    {
                                        //If Not ds.Tables[12).Rows(intRowCount).Item("Approver_Name") Is System.DBNull.Value Or Not ds.Tables[12).Rows(intRowCount).Item("Approver_Name") = "" Then
                                        if ((!object.ReferenceEquals(ds.Tables[12].Rows[intRowCount]["Approver_Name"], DBNull.Value)))
                                        {
                                            txtSmartClearance.Text = ds.Tables[12].Rows[intRowCount]["Approver_Name"].ToString();
                                            ViewState["SmartClearVal"] = txtSmartClearance.Text.ToString().Trim();
                                        }
                                        else
                                        {
                                            txtSmartClearance.Text = string.Empty;
                                            ViewState["SmartClearVal"] = "";
                                        }
                                    }

                                    if (ds.Tables[12].Rows[intRowCount]["Function_Name"].ToString() == "Timing Gate Exception")
                                    {
                                        //If Not ds.Tables[12).Rows(intRowCount).Item("Approver_Name") Is System.DBNull.Value Or Not ds.Tables[12).Rows(intRowCount).Item("Approver_Name") = "" Then
                                        if ((!object.ReferenceEquals(ds.Tables[12].Rows[intRowCount]["Approver_Name"], System.DBNull.Value)))
                                        {
                                            txtTimingGate.Text = ds.Tables[12].Rows[intRowCount]["Approver_Name"].ToString();
                                        }
                                        else
                                        {
                                            txtTimingGate.Text = string.Empty;
                                        }
                                    }

                                    if (ds.Tables[12].Rows[intRowCount]["Function_Name"].ToString() == "Standards Office")
                                    {
                                        //If Not ds.Tables[12).Rows(intRowCount).Item("Approver_Name") Is System.DBNull.Value Or Not ds.Tables[12).Rows(intRowCount).Item("Approver_Name") = "" Then
                                        if ((!object.ReferenceEquals(ds.Tables[12].Rows[intRowCount]["Approver_Name"], System.DBNull.Value)))
                                        {
                                            txtStandardOffice.Text = ds.Tables[12].Rows[intRowCount]["Approver_Name"].ToString();
                                        }
                                        else
                                        {
                                            txtStandardOffice.Text = string.Empty;
                                        }
                                    }


                                    //Added by David - MUREO PCR : 4 Additional Approvers - Date: 01/03/2012


                                    if (ds.Tables[12].Rows[intRowCount]["Function_Name"].ToString() == "Additional approver #1")
                                    {
                                        if ((!object.ReferenceEquals(ds.Tables[12].Rows[intRowCount]["Approver_Name"], System.DBNull.Value)))
                                        {
                                            txtAdditionalApp1.Text = ds.Tables[12].Rows[intRowCount]["Approver_Name"].ToString();
                                        }
                                        else
                                        {
                                            txtAdditionalApp1.Text = string.Empty;
                                        }
                                    }

                                    if (ds.Tables[12].Rows[intRowCount]["Function_Name"].ToString() == "Additional approver #2")
                                    {
                                        if ((!object.ReferenceEquals(ds.Tables[12].Rows[intRowCount]["Approver_Name"], System.DBNull.Value)))
                                        {
                                            txtAdditionalApp2.Text = ds.Tables[12].Rows[intRowCount]["Approver_Name"].ToString();
                                        }
                                        else
                                        {
                                            txtAdditionalApp2.Text = string.Empty;
                                        }
                                    }

                                    if (ds.Tables[12].Rows[intRowCount]["Function_Name"].ToString() == "Additional approver #3")
                                    {
                                        if ((!object.ReferenceEquals(ds.Tables[12].Rows[intRowCount]["Approver_Name"], System.DBNull.Value)))
                                        {
                                            txtAdditionalApp3.Text = ds.Tables[12].Rows[intRowCount]["Approver_Name"].ToString();
                                        }
                                        else
                                        {
                                            txtAdditionalApp3.Text = string.Empty;
                                        }
                                    }

                                    if (ds.Tables[12].Rows[intRowCount]["Function_Name"].ToString() == "Additional approver #4")
                                    {
                                        if ((!object.ReferenceEquals(ds.Tables[12].Rows[intRowCount]["Approver_Name"], System.DBNull.Value)))
                                        {
                                            txtAdditionalApp4.Text = ds.Tables[12].Rows[intRowCount]["Approver_Name"].ToString();
                                        }
                                        else
                                        {
                                            txtAdditionalApp4.Text = string.Empty;
                                        }
                                    }

                                }
                            }
                        }
                        else
                        {
                            txtBudgetOwner.Text = string.Empty;
                            txtGBUHSE.Text = string.Empty;
                            txtSiteHSE.Text = string.Empty;
                            txtSiteContact.Text = string.Empty;
                            txtSitePlanning.Text = string.Empty;
                            txtCentralPlanning.Text = string.Empty;
                            txtSAPCost.Text = string.Empty;
                            txtSmartClearance.Text = string.Empty;
                            ViewState["SmartClearVal"] = "";
                            txtTimingGate.Text = string.Empty;
                            txtQAPre.Text = string.Empty;
                            txtCentralQAPre.Text = string.Empty;
                            txtStandardOffice.Text = string.Empty;
                            txtAdditionalApp1.Text = string.Empty;
                            txtAdditionalApp2.Text = string.Empty;
                            txtAdditionalApp3.Text = string.Empty;
                            txtAdditionalApp4.Text = string.Empty;
                        }

                        try
                        {
                            if (!(ds.Tables[12].Rows.Count == 0))
                            {

                                if ((!object.ReferenceEquals(ds.Tables[12].Rows[0]["Approval_Group_ID"], System.DBNull.Value)))
                                {
                                    if (Convert.ToInt32(ds.Tables[12].Rows[0]["Approval_Group_ID"]) == 0)
                                    {
                                        fillSelectedAppDetailsFromMege();
                                    }
                                }
                                else
                                {
                                    fillSelectedAppDetailsFromMege();
                                }
                            }
                            else
                            {
                                fillSelectedAppDetailsFromMege();
                            }

                        }
                        catch (Exception ex)
                        {
                        }

                        if (!(ds.Tables[16].Rows.Count == 0))
                        {
                            dgrdRevHistory.DataSource = ds.Tables[16];
                            dgrdRevHistory.DataBind();
                        }
                        if (!(ds.Tables[17].Rows.Count == 0))
                        {
                            dgrdAppHistory.DataSource = ds.Tables[17];
                            dgrdAppHistory.DataBind();
                        }
                        try
                        {
                            if (!(ds.Tables[18].Rows.Count == 0))
                            {
                                int intRowCount = 0;
                                for (intRowCount = 0; intRowCount <= ds.Tables[18].Rows.Count - 1; intRowCount++)
                                {
                                    if ((!object.ReferenceEquals(ds.Tables[18].Rows[intRowCount]["PDI_Packaging_Type"], System.DBNull.Value)))
                                    {
                                        if (!string.IsNullOrEmpty(ds.Tables[18].Rows[intRowCount]["PDI_Packaging_Type"].ToString()))
                                        {
                                            lbPackaging.Items[lbPackaging.Items.IndexOf(lbPackaging.Items.FindByValue(ds.Tables[18].Rows[intRowCount]["PDI_Packaging_Type"].ToString()))].Selected = true;
                                        }
                                        else
                                        {
                                            lbPackaging.SelectedIndex = 0;
                                        }
                                    }
                                }
                            }
                        }
                        catch (Exception ex)
                        {
                        }
                    }
                }
            }
        }

        public void GET_EO_Final_Lock()
        {
            DataSet ds = null;

            if (objEOBA.GET_EO_Final(Convert.ToInt32(ViewState["EOID"]), ref ds))
            {

                if ((ds != null))
                {

                    if (!(ds.Tables.Count == 0))
                    {
                        if (!(ds.Tables[26].Rows.Count == 0))
                        {
                            dgrdTestMatrix_Readonly.DataSource = ds.Tables[26].DefaultView;
                            dgrdTestMatrix_Readonly.DataBind();
                        }

                        if (!(ds.Tables[27].Rows.Count == 0))
                        {
                            dgrdOtherDocFinal_Readonly.DataSource = ds.Tables[27].DefaultView;
                            dgrdOtherDocFinal_Readonly.DataBind();
                        }

                        if (!(ds.Tables[25].Rows.Count == 0))
                        {
                            dgrdLabSamp_Readonly.DataSource = ds.Tables[25].DefaultView;
                            dgrdLabSamp_Readonly.DataBind();
                        }

                        //TestPlan
                        if (!(ds.Tables[24].Rows.Count == 0))
                        {
                            dgrdTestPlansFinal_Readonly.DataSource = ds.Tables[24].DefaultView;
                            dgrdTestPlansFinal_Readonly.DataBind();
                        }

                        if (!(ds.Tables[23].Rows.Count == 0))
                        {
                            dgrdFormulaCard_Readonly.DataSource = ds.Tables[23].DefaultView;
                            dgrdFormulaCard_Readonly.DataBind();
                        }

                        if (!(ds.Tables[22].Rows.Count == 0))
                        {
                            dgrdQAFinalTabAttachment_Readonly.DataSource = ds.Tables[22].DefaultView;
                            dgrdQAFinalTabAttachment_Readonly.DataBind();
                        }

                        if (!(ds.Tables[21].Rows.Count == 0))
                        {
                            dgrdCostSheetFinal_ReadOnly.DataSource = ds.Tables[21].DefaultView;
                            dgrdCostSheetFinal_ReadOnly.DataBind();
                        }

                        if (!(ds.Tables[1].Rows.Count == 0))
                        {
                            if ((!object.ReferenceEquals(ds.Tables[1].Rows[0]["Current_Packaging"], System.DBNull.Value)))
                            {
                                if (ds.Tables[1].Rows[0]["Current_Packaging"].ToString() == "Y")
                                {
                                    lblCurPackageFinalRO.Text = "Yes";
                                }
                                else
                                {
                                    lblCurPackageFinalRO.Text = "No";
                                }
                            }
                            else
                            {
                                lblCurPackageFinalRO.Text = string.Empty;
                            }
                            if ((!object.ReferenceEquals(ds.Tables[1].Rows[0]["Experimental_Packaging"], System.DBNull.Value)))
                            {
                                if (ds.Tables[1].Rows[0]["Experimental_Packaging"].ToString() == "Y")
                                {
                                    lblExpPackFinalRO.Text = "Yes";
                                }
                                else
                                {
                                    lblExpPackFinalRO.Text = "No";
                                }
                            }
                            else
                            {
                                lblExpPackFinalRO.Text = string.Empty;
                            }
                            if ((!object.ReferenceEquals(ds.Tables[1].Rows[0]["Exp_Pack_Clear_Poly"], System.DBNull.Value)))
                            {
                                if (ds.Tables[1].Rows[0]["Exp_Pack_Clear_Poly"].ToString() == "Y")
                                {
                                    lblCurPolyFinalRO.Text = "Yes";
                                }
                                else
                                {
                                    lblCurPolyFinalRO.Text = "No";
                                }
                            }
                            else
                            {
                                lblCurPolyFinalRO.Text = string.Empty;
                            }

                            if ((!object.ReferenceEquals(ds.Tables[1].Rows[0]["Exp_Pack_Blank_KDF"], System.DBNull.Value)))
                            {
                                if (ds.Tables[1].Rows[0]["Exp_Pack_Blank_KDF"].ToString() == "Y")
                                {
                                    lblBlankKDFFinalRO.Text = "Yes";
                                }
                                else
                                {
                                    lblBlankKDFFinalRO.Text = "No";
                                }
                            }
                            else
                            {
                                lblBlankKDFFinalRO.Text = string.Empty;
                            }

                            if ((!object.ReferenceEquals(ds.Tables[1].Rows[0]["Prod_Disposition_Name"], System.DBNull.Value)))
                            {
                                if (!(ds.Tables[1].Rows[0]["Prod_Disposition_Name"].ToString() == "--SELECT--"))
                                {
                                    lblProDispositionFinalRO.Text = ds.Tables[1].Rows[0]["Prod_Disposition_Name"].ToString();
                                }
                                else
                                {
                                    lblProDispositionFinalRO.Text = string.Empty;
                                }
                            }
                            else
                            {
                                lblProDispositionFinalRO.Text = string.Empty;
                            }
                            if ((!object.ReferenceEquals(ds.Tables[1].Rows[0]["Prod_Disp_Add_Comments"], System.DBNull.Value)))
                            {
                                lblProDispositionFinalAddCommRO.Text = ds.Tables[1].Rows[0]["Prod_Disp_Add_Comments"].ToString();
                            }
                            else
                            {
                                lblProDispositionFinalAddCommRO.Text = string.Empty;
                            }
                            if ((!object.ReferenceEquals(ds.Tables[1].Rows[0]["Pallet_Patter_SKU"], System.DBNull.Value)))
                            {
                                if (ds.Tables[1].Rows[0]["Pallet_Patter_SKU"].ToString() == "Y")
                                {
                                    lblPalletFinalRO.Text = "Yes";
                                }
                                else
                                {
                                    lblPalletFinalRO.Text = "No";
                                }
                            }
                            else
                            {
                                lblPalletFinalRO.Text = string.Empty;
                            }

                            try
                            {
                                if ((!object.ReferenceEquals(ds.Tables[1].Rows[0]["Stack_Testing"], System.DBNull.Value)))
                                {
                                    if (ds.Tables[1].Rows[0]["Stack_Testing"].ToString() == "Y")
                                    {
                                        lblStockShipTesting.Text = "Stack Testing";
                                    }
                                    else if (ds.Tables[1].Rows[0]["Ship_Testing"].ToString() == "Y")
                                    {
                                        lblStockShipTesting.Text = "Ship Testing";
                                    }
                                    else
                                    {
                                        lblStockShipTesting.Text = string.Empty;
                                    }
                                }
                                else
                                {
                                    lblStockShipTesting.Text = string.Empty;
                                }
                            }
                            catch (Exception ex)
                            {
                            }

                            if ((!object.ReferenceEquals(ds.Tables[1].Rows[0]["Material_Disposition_Name"], System.DBNull.Value)))
                            {
                                if (!(ds.Tables[1].Rows[0]["Material_Disposition_Name"].ToString() == "--SELECT--"))
                                {
                                    lblMaterialDispositionreadonly.Text = ds.Tables[1].Rows[0]["Material_Disposition_Name"].ToString();
                                }
                                else
                                {
                                    lblMaterialDispositionreadonly.Text = string.Empty;
                                }
                            }
                            else
                            {
                                lblMaterialDispositionreadonly.Text = string.Empty;
                            }
                            if ((!object.ReferenceEquals(ds.Tables[1].Rows[0]["Mat_Disp_Add_Comments"], System.DBNull.Value)))
                            {
                                lblMaterialDispositionComments.Text = ds.Tables[1].Rows[0]["Mat_Disp_Add_Comments"].ToString();
                            }
                            else
                            {
                                lblMaterialDispositionComments.Text = string.Empty;
                            }
                            if ((!object.ReferenceEquals(ds.Tables[1].Rows[0]["Broke_Disp_Normal"], System.DBNull.Value)))
                            {
                                if (ds.Tables[1].Rows[0]["Broke_Disp_Normal"].ToString() == "Y")
                                {
                                    lblEOGraterThanNormalBroke.Text = "Yes";
                                }
                                else
                                {
                                    lblEOGraterThanNormalBroke.Text = "No";
                                }
                            }
                            else
                            {
                                lblEOGraterThanNormalBroke.Text = "No";
                            }
                            if ((!object.ReferenceEquals(ds.Tables[1].Rows[0]["Printer_Broke"], System.DBNull.Value)))
                            {
                                if (ds.Tables[1].Rows[0]["Printer_Broke"].ToString() == "Y")
                                {
                                    lblPrintBroke.Text = "Yes";
                                }
                                else
                                {
                                    lblPrintBroke.Text = "No";
                                }
                            }
                            else
                            {
                                lblPrintBroke.Text = string.Empty;
                            }
                            if ((!object.ReferenceEquals(ds.Tables[1].Rows[0]["Ink_Coverage"], System.DBNull.Value)))
                            {
                                if (ds.Tables[1].Rows[0]["Ink_Coverage"].ToString() == "Y")
                                {
                                    lblinkConerage.Text = "Yes";
                                }
                                else
                                {
                                    lblinkConerage.Text = "No";
                                }
                            }
                            else
                            {
                                lblinkConerage.Text = string.Empty;
                            }
                        }
                        if (!(ds.Tables[3].Rows.Count == 0))
                        {
                            if ((!object.ReferenceEquals(ds.Tables[3].Rows[0]["Amount_Preliminary_Stage"], System.DBNull.Value)))
                            {
                                lblEstimateAmount.Text = ds.Tables[3].Rows[0]["Amount_Preliminary_Stage"].ToString();
                            }
                            else
                            {
                                lblEstimateAmount.Text = string.Empty;
                            }
                            if ((!object.ReferenceEquals(ds.Tables[3].Rows[0]["Total_Cost_Diff"], System.DBNull.Value)))
                            {
                                if (ds.Tables[3].Rows[0]["Total_Cost_Diff"].ToString() == "Y")
                                {
                                    lblTotCostsheet.Text = "Yes";
                                }
                                else
                                {
                                    lblTotCostsheet.Text = "No";
                                }

                            }
                            else
                            {
                                lblTotCostsheet.Text = string.Empty;
                            }
                            if ((!object.ReferenceEquals(ds.Tables[3].Rows[0]["Cost_Cost_Sheet"], System.DBNull.Value)))
                            {
                                lblYesOptionTotCostsheet.Text = ds.Tables[3].Rows[0]["Cost_Cost_Sheet"].ToString();
                            }
                            else
                            {
                                lblYesOptionTotCostsheet.Text = string.Empty;
                            }
                            if ((!object.ReferenceEquals(ds.Tables[3].Rows[0]["Comments"], System.DBNull.Value)))
                            {
                                lblCostSheetAddCommentsFinalRO.Text = ds.Tables[3].Rows[0]["Comments"].ToString();
                            }
                            else
                            {
                                lblCostSheetAddCommentsFinalRO.Text = string.Empty;
                            }
                        }

                        //Lab Sampling Plans
                        if (!(ds.Tables[8].Rows.Count == 0))
                        {
                            //If Not ds.Tables[8).Rows(0).Item("Central_Analytical_Lab") Is System.DBNull.Value Or Not ds.Tables[8).Rows(0).Item("Central_Analytical_Lab") = "" Then
                            if ((!object.ReferenceEquals(ds.Tables[8].Rows[0]["Central_Analytical_Lab"], System.DBNull.Value)))
                            {
                                if (ds.Tables[8].Rows[0]["Central_Analytical_Lab"].ToString() == "Y")
                                {
                                    lblCentralAnalyticalLab.Text = "Yes";
                                }
                                else
                                {
                                    lblCentralAnalyticalLab.Text = "No";
                                }
                            }
                            else
                            {
                                lblCentralAnalyticalLab.Text = string.Empty;
                            }
                            //If Not ds.Tables[8).Rows(0).Item("Site_Testing_Lab") Is System.DBNull.Value Or Not ds.Tables[8).Rows(0).Item("Site_Testing_Lab") = "" Then
                            if ((!object.ReferenceEquals(ds.Tables[8].Rows[0]["Site_Testing_Lab"], System.DBNull.Value)))
                            {
                                if (ds.Tables[8].Rows[0]["Site_Testing_Lab"].ToString() == "Y")
                                {
                                    lblSiteTestingLabs.Text = "Yes";
                                }
                                else
                                {
                                    lblSiteTestingLabs.Text = "No";
                                }
                            }
                            else
                            {
                                lblSiteTestingLabs.Text = string.Empty;
                            }
                        }

                        //lblSupDocCommnets()
                        if (!(ds.Tables[11].Rows.Count == 0))
                        {
                            if ((!object.ReferenceEquals(ds.Tables[11].Rows[0]["Comments_Approvers"], System.DBNull.Value)))
                            {
                                lblSupDocCommnets.Text = ds.Tables[11].Rows[0]["Comments_Approvers"].ToString();
                            }
                            else
                            {
                                lblSupDocCommnets.Text = string.Empty;
                            }
                        }


                        if (!(ds.Tables[29].Rows.Count == 0))
                        {
                            if ((!object.ReferenceEquals(ds.Tables[29].Rows[0]["EO_Raw_Packing_Material"], System.DBNull.Value)))
                            {
                                if (ds.Tables[29].Rows[0]["EO_Raw_Packing_Material"].ToString() == "Y")
                                {
                                    lblNewRawPackMaterialsFinal.Text = "Yes";
                                }
                                else if (ds.Tables[29].Rows[0]["EO_Raw_Packing_Material"].ToString() == "N")
                                {
                                    lblNewRawPackMaterialsFinal.Text = "No";
                                }
                            }

                            if ((!object.ReferenceEquals(ds.Tables[29].Rows[0]["EO_Parent_Rolls"], System.DBNull.Value)))
                            {
                                if (ds.Tables[29].Rows[0]["EO_Parent_Rolls"].ToString() == "Y")
                                {
                                    lblParentRollsFinal.Text = "Yes";
                                }
                                else if (ds.Tables[29].Rows[0]["EO_Parent_Rolls"].ToString() == "N")
                                {
                                    lblParentRollsFinal.Text = "No";
                                }
                            }

                            if ((!object.ReferenceEquals(ds.Tables[29].Rows[0]["EO_Intermediate_Material"], System.DBNull.Value)))
                            {
                                if (ds.Tables[29].Rows[0]["EO_Intermediate_Material"].ToString() == "Y")
                                {
                                    lblEOProduceOrInvolveFinal.Text = "Yes";
                                }
                                else if (ds.Tables[29].Rows[0]["EO_Intermediate_Material"].ToString() == "N")
                                {
                                    lblEOProduceOrInvolveFinal.Text = "No";
                                }
                            }


                            if ((!object.ReferenceEquals(ds.Tables[29].Rows[0]["EO_Current_Brand"], System.DBNull.Value)))
                            {
                                if (ds.Tables[29].Rows[0]["EO_Current_Brand"].ToString() == "Y")
                                {
                                    lblCurrentBrandFinal.Text = "Yes";
                                }
                                else if (ds.Tables[29].Rows[0]["EO_Current_Brand"].ToString() == "N")
                                {
                                    lblCurrentBrandFinal.Text = "No";
                                }
                            }

                            if ((!object.ReferenceEquals(ds.Tables[29].Rows[0]["EO_Consumer_Lab_Evaluation"], System.DBNull.Value)))
                            {
                                if (ds.Tables[29].Rows[0]["EO_Consumer_Lab_Evaluation"].ToString() == "Y")
                                {
                                    lblLabEvaluationFinal.Text = "Yes";
                                }
                                else if (ds.Tables[29].Rows[0]["EO_Consumer_Lab_Evaluation"].ToString() == "N")
                                {
                                    lblLabEvaluationFinal.Text = "No";
                                }
                            }

                            if ((!object.ReferenceEquals(ds.Tables[29].Rows[0]["EO_GCAS"], System.DBNull.Value)))
                            {
                                if (ds.Tables[29].Rows[0]["EO_GCAS"].ToString() == "Y")
                                {
                                    lblUMOFFinal.Text = "Yes";
                                }
                                else if (ds.Tables[29].Rows[0]["EO_GCAS"].ToString() == "N")
                                {
                                    lblUMOFFinal.Text = "No";
                                }
                            }

                            if ((!object.ReferenceEquals(ds.Tables[29].Rows[0]["Is_Understood_Policy_37"], DBNull.Value)))
                            {
                                if (Convert.ToBoolean(ds.Tables[29].Rows[0]["Is_Understood_Policy_37"]) == false)
                                {
                                    lblYesNoMat1Final.Text = "Yes";
                                    lblYesNoMat2Final.Text = "No";
                                    lblYesNoMat3Final.Text = "No";
                                }
                            }
                            else
                            {
                                lblYesNoMat1Final.Text = "";
                                lblYesNoMat2Final.Text = "";
                                lblYesNoMat3Final.Text = "";
                            }

                            if ((!object.ReferenceEquals(ds.Tables[29].Rows[0]["Is_Exception_Policy_37"], DBNull.Value)))
                            {
                                if (Convert.ToBoolean(ds.Tables[29].Rows[0]["Is_Exception_Policy_37"]) == false)
                                {
                                    lblYesNoMat2Final.Text = "Yes";
                                    lblYesNoMat1Final.Text = "No";
                                    lblYesNoMat3Final.Text = "No";
                                }
                            }
                            else
                            {
                                lblYesNoMat1Final.Text = "";
                                lblYesNoMat2Final.Text = "";
                                lblYesNoMat3Final.Text = "";
                            }

                            if ((!object.ReferenceEquals(ds.Tables[29].Rows[0]["Is_EO_Covered_Policy_37"], DBNull.Value)))
                            {
                                if (Convert.ToBoolean(ds.Tables[29].Rows[0]["Is_EO_Covered_Policy_37"]) == false)
                                {
                                    lblYesNoMat3Final.Text = "Yes";
                                    lblYesNoMat1Final.Text = "No";
                                    lblYesNoMat2Final.Text = "No";
                                }
                            }
                            else
                            {
                                lblYesNoMat1Final.Text = "";
                                lblYesNoMat2Final.Text = "";
                                lblYesNoMat3Final.Text = "";
                            }

                        }


                        if (!(ds.Tables[30].Rows.Count == 0))
                        {
                            if ((!object.ReferenceEquals(ds.Tables[30].Rows[0]["Is_Product_Go_To_Customers"], System.DBNull.Value)))
                            {
                                if (Convert.ToBoolean(ds.Tables[30].Rows[0]["Is_Product_Go_To_Customers"]) == true)
                                {
                                    lblReadonlyPSR1Final.Text = "Yes";
                                }
                                else if (Convert.ToBoolean(ds.Tables[30].Rows[0]["Is_Product_Go_To_Customers"]) == false)
                                {
                                    lblReadonlyPSR1Final.Text = "No";
                                }
                            }

                            if ((!object.ReferenceEquals(ds.Tables[30].Rows[0]["Is_Using_Approved_FC_R_ATS"], System.DBNull.Value)))
                            {
                                if (Convert.ToBoolean(ds.Tables[30].Rows[0]["Is_Using_Approved_FC_R_ATS"]) == true)
                                {
                                    lblReadonlyPSR2Final.Text = "Yes";
                                }
                                else if (Convert.ToBoolean(ds.Tables[30].Rows[0]["Is_Using_Approved_FC_R_ATS"]) == false)
                                {
                                    lblReadonlyPSR2Final.Text = "No";
                                }
                            }


                            if ((!object.ReferenceEquals(ds.Tables[30].Rows[0]["Is_Approved_At_Level"], System.DBNull.Value)))
                            {
                                if (Convert.ToBoolean(ds.Tables[30].Rows[0]["Is_Approved_At_Level"]) == true)
                                {
                                    lblReadonlyPSR3Final.Text = "Yes";
                                }
                                else if (Convert.ToBoolean(ds.Tables[30].Rows[0]["Is_Approved_At_Level"]) == false)
                                {
                                    lblReadonlyPSR3Final.Text = "No";
                                }
                            }


                            if ((!object.ReferenceEquals(ds.Tables[30].Rows[0]["Is_Approved_For_Region"], System.DBNull.Value)))
                            {
                                if (Convert.ToBoolean(ds.Tables[30].Rows[0]["Is_Approved_For_Region"]) == true)
                                {
                                    lblReadonlyPSR4Final.Text = "Yes";
                                }
                                else if (Convert.ToBoolean(ds.Tables[30].Rows[0]["Is_Approved_For_Region"]) == false)
                                {
                                    lblReadonlyPSR4Final.Text = "No";
                                }
                            }


                            if ((!object.ReferenceEquals(ds.Tables[30].Rows[0]["Is_Approved_For_Application"], System.DBNull.Value)))
                            {
                                if (Convert.ToBoolean(ds.Tables[30].Rows[0]["Is_Approved_For_Application"]) == true)
                                {
                                    lblReadonlyPSR5Final.Text = "Yes";
                                }
                                else if (Convert.ToBoolean(ds.Tables[30].Rows[0]["Is_Approved_For_Application"]) == false)
                                {
                                    lblReadonlyPSR5Final.Text = "No";
                                }
                            }

                            if ((!object.ReferenceEquals(ds.Tables[30].Rows[0]["Is_Approved_At_Prev_Application_Rate"], System.DBNull.Value)))
                            {
                                if (Convert.ToBoolean(ds.Tables[30].Rows[0]["Is_Approved_At_Prev_Application_Rate"]) == true)
                                {
                                    lblReadonlyPSR6Final.Text = "Yes";
                                }
                                else if (Convert.ToBoolean(ds.Tables[30].Rows[0]["Is_Approved_At_Prev_Application_Rate"]) == false)
                                {
                                    lblReadonlyPSR6Final.Text = "No";
                                }
                            }


                        }

                        //Approvals
                        if (!(ds.Tables[13].Rows.Count == 0))
                        {
                            int intRowCount = 0;
                            for (intRowCount = 0; intRowCount <= ds.Tables[13].Rows.Count - 1; intRowCount++)
                            {
                                //If ds.Tables[13).Rows(intRowCount).Item("Function_Name") Is System.DBNull.Value Or Not ds.Tables[13).Rows(intRowCount).Item("Function_Name") = "" Then
                                if ((!object.ReferenceEquals(ds.Tables[13].Rows[intRowCount]["Function_Name"], System.DBNull.Value)))
                                {
                                    if (ds.Tables[13].Rows[intRowCount]["Function_Name"].ToString() == "PS Initiative Manager")
                                    {
                                        //If Not ds.Tables[13).Rows(intRowCount).Item("Approver_Name") Is System.DBNull.Value Or Not ds.Tables[13).Rows(intRowCount).Item("Approver_Name") = "" Then
                                        if ((!object.ReferenceEquals(ds.Tables[13].Rows[intRowCount]["Approver_Name"], System.DBNull.Value)))
                                        {
                                            lblPSInitiativeAppGrp.Text = ds.Tables[13].Rows[intRowCount]["Approver_Name"].ToString();
                                            if ((!object.ReferenceEquals(ds.Tables[13].Rows[intRowCount]["Is_Approved"], System.DBNull.Value)))
                                            {
                                                if (ds.Tables[13].Rows[intRowCount]["Is_Approved"].ToString().ToUpper() == "Y")
                                                {
                                                    imgFinalPSIniYes.Visible = true;
                                                    imgFinalPSIniNo.Visible = false;
                                                }
                                                else if (ds.Tables[13].Rows[intRowCount]["Is_Approved"].ToString().ToUpper() == "N")
                                                {
                                                    imgFinalPSIniYes.Visible = false;
                                                    imgFinalPSIniNo.Visible = true;
                                                }
                                            }
                                        }
                                        else
                                        {
                                            lblPSInitiativeAppGrp.Text = string.Empty;
                                        }
                                    }
                                }
                                if (ds.Tables[13].Rows[intRowCount]["Function_Name"].ToString() == "Products Research")
                                {
                                    //If Not ds.Tables[13).Rows(intRowCount).Item("Approver_Name") Is System.DBNull.Value Or Not ds.Tables[13).Rows(intRowCount).Item("Approver_Name") = "" Then
                                    if ((!object.ReferenceEquals(ds.Tables[13].Rows[intRowCount]["Approver_Name"], System.DBNull.Value)))
                                    {
                                        lblProdResearchAppGrp.Text = ds.Tables[13].Rows[intRowCount]["Approver_Name"].ToString();
                                        if ((!object.ReferenceEquals(ds.Tables[13].Rows[intRowCount]["Is_Approved"], System.DBNull.Value)))
                                        {
                                            if (ds.Tables[13].Rows[intRowCount]["Is_Approved"].ToString().ToUpper() == "Y")
                                            {
                                                imgFinalProdResYes.Visible = true;
                                                imgFinalProdResNo.Visible = false;
                                            }
                                            else if (ds.Tables[13].Rows[intRowCount]["Is_Approved"].ToString().ToUpper() == "N")
                                            {
                                                imgFinalProdResYes.Visible = false;
                                                imgFinalProdResNo.Visible = true;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        lblProdResearchAppGrp.Text = string.Empty;
                                    }
                                }
                                if (ds.Tables[13].Rows[intRowCount]["Function_Name"].ToString() == "Budget Center")
                                {
                                    //If Not ds.Tables[13).Rows(intRowCount).Item("Approver_Name") Is System.DBNull.Value Or Not ds.Tables[13).Rows(intRowCount).Item("Approver_Name") = "" Then
                                    if ((!object.ReferenceEquals(ds.Tables[13].Rows[intRowCount]["Approver_Name"], System.DBNull.Value)))
                                    {
                                        lblBOFinalAppGrp.Text = ds.Tables[13].Rows[intRowCount]["Approver_Name"].ToString();
                                        if ((!object.ReferenceEquals(ds.Tables[13].Rows[intRowCount]["Is_Approved"], System.DBNull.Value)))
                                        {
                                            if (ds.Tables[13].Rows[intRowCount]["Is_Approved"].ToString().ToUpper() == "Y")
                                            {
                                                imgFinalBOYes.Visible = true;
                                                imgFinalBONo.Visible = false;
                                            }
                                            else if (ds.Tables[13].Rows[intRowCount]["Is_Approved"].ToString().ToUpper() == "N")
                                            {
                                                imgFinalBOYes.Visible = false;
                                                imgFinalBONo.Visible = true;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        lblBOFinalAppGrp.Text = string.Empty;
                                    }
                                }
                                if (ds.Tables[13].Rows[intRowCount]["Function_Name"].ToString() == "GBU HS&E Resource")
                                {
                                    //If Not ds.Tables[13).Rows(intRowCount).Item("Approver_Name") Is System.DBNull.Value Or Not ds.Tables[13).Rows(intRowCount).Item("Approver_Name") = "" Then
                                    if ((!object.ReferenceEquals(ds.Tables[13].Rows[intRowCount]["Approver_Name"], System.DBNull.Value)))
                                    {
                                        lblGBUHSEFinalAppGrp.Text = ds.Tables[13].Rows[intRowCount]["Approver_Name"].ToString();
                                        if ((!object.ReferenceEquals(ds.Tables[13].Rows[intRowCount]["Is_Approved"], System.DBNull.Value)))
                                        {
                                            if (ds.Tables[13].Rows[intRowCount]["Is_Approved"].ToString().ToUpper() == "Y")
                                            {
                                                imgFinalGBUHSEYes.Visible = true;
                                                imgFinalGBUHSENo.Visible = false;
                                            }
                                            else if (ds.Tables[13].Rows[intRowCount]["Is_Approved"].ToString().ToUpper() == "N")
                                            {
                                                imgFinalGBUHSEYes.Visible = false;
                                                imgFinalGBUHSENo.Visible = true;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        lblGBUHSEFinalAppGrp.Text = string.Empty;
                                    }
                                }
                                if (ds.Tables[13].Rows[intRowCount]["Function_Name"].ToString() == "Site HS&E Resource")
                                {
                                    //If Not ds.Tables[13).Rows(intRowCount).Item("Approver_Name") Is System.DBNull.Value Or Not ds.Tables[13).Rows(intRowCount).Item("Approver_Name") = "" Then
                                    if ((!object.ReferenceEquals(ds.Tables[13].Rows[intRowCount]["Approver_Name"], System.DBNull.Value)))
                                    {
                                        lblSiteHSEFinalAppGrp.Text = ds.Tables[13].Rows[intRowCount]["Approver_Name"].ToString();
                                        if ((!object.ReferenceEquals(ds.Tables[13].Rows[intRowCount]["Is_Approved"], System.DBNull.Value)))
                                        {
                                            if (ds.Tables[13].Rows[intRowCount]["Is_Approved"].ToString().ToUpper() == "Y")
                                            {
                                                imgFinalSiteHSEYes.Visible = true;
                                                imgFinalSiteHSENo.Visible = false;
                                            }
                                            else if (ds.Tables[13].Rows[intRowCount]["Is_Approved"].ToString().ToUpper() == "N")
                                            {
                                                imgFinalSiteHSEYes.Visible = false;
                                                imgFinalSiteHSENo.Visible = true;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        lblSiteHSEFinalAppGrp.Text = string.Empty;
                                    }
                                }
                                if (ds.Tables[13].Rows[intRowCount]["Function_Name"].ToString() == "SAP Cost Center Coordinator")
                                {
                                    //If Not ds.Tables[13).Rows(intRowCount).Item("Approver_Name") Is System.DBNull.Value Or Not ds.Tables[13).Rows(intRowCount).Item("Approver_Name") = "" Then
                                    if ((!object.ReferenceEquals(ds.Tables[13].Rows[intRowCount]["Approver_Name"], System.DBNull.Value)))
                                    {
                                        lblSAPCostCenterFinalAppGrp.Text = ds.Tables[13].Rows[intRowCount]["Approver_Name"].ToString();
                                        if ((!object.ReferenceEquals(ds.Tables[13].Rows[intRowCount]["Is_Approved"], System.DBNull.Value)))
                                        {
                                            if (ds.Tables[13].Rows[intRowCount]["Is_Approved"].ToString().ToUpper() == "Y")
                                            {
                                                imgFinalSAPYes.Visible = true;
                                                imgFinalSAPNo.Visible = false;
                                            }
                                            else if (ds.Tables[13].Rows[intRowCount]["Is_Approved"].ToString().ToUpper() == "N")
                                            {
                                                imgFinalSAPYes.Visible = false;
                                                imgFinalSAPNo.Visible = true;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        lblSAPCostCenterFinalAppGrp.Text = string.Empty;
                                    }
                                }


                                //Added by David
                                //Date: 07/16/2010
                                if (ds.Tables[13].Rows[intRowCount]["Function_Name"].ToString() == "SMART Clearance")
                                {
                                    //If Not ds.Tables[13).Rows(intRowCount).Item("Approver_Name") Is System.DBNull.Value Or Not ds.Tables[13).Rows(intRowCount).Item("Approver_Name") = "" Then
                                    if ((!object.ReferenceEquals(ds.Tables[13].Rows[intRowCount]["Approver_Name"], System.DBNull.Value)))
                                    {
                                        lblSMARTClearanceFinalAppGrp.Text = ds.Tables[13].Rows[intRowCount]["Approver_Name"].ToString();
                                        if ((!object.ReferenceEquals(ds.Tables[13].Rows[intRowCount]["Is_Approved"], System.DBNull.Value)))
                                        {
                                            if (ds.Tables[13].Rows[intRowCount]["Is_Approved"].ToString().ToUpper() == "Y")
                                            {
                                                imgFinalSMARTClearanceYes.Visible = true;
                                                imgFinalSMARTClearanceNo.Visible = false;
                                            }
                                            else if (ds.Tables[13].Rows[intRowCount]["Is_Approved"].ToString().ToUpper() == "N")
                                            {
                                                imgFinalSMARTClearanceYes.Visible = false;
                                                imgFinalSMARTClearanceNo.Visible = true;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        lblSMARTClearanceFinalAppGrp.Text = string.Empty;
                                    }
                                }

                                if (ds.Tables[13].Rows[intRowCount]["Function_Name"].ToString() == "Site Planning")
                                {
                                    //If Not ds.Tables[13).Rows(intRowCount).Item("Approver_Name") Is System.DBNull.Value Or Not ds.Tables[13).Rows(intRowCount).Item("Approver_Name") = "" Then
                                    if ((!object.ReferenceEquals(ds.Tables[13].Rows[intRowCount]["Approver_Name"], System.DBNull.Value)))
                                    {
                                        lblSiteplanningFinalAppGrp.Text = ds.Tables[13].Rows[intRowCount]["Approver_Name"].ToString();
                                        if ((!object.ReferenceEquals(ds.Tables[13].Rows[intRowCount]["Is_Approved"], System.DBNull.Value)))
                                        {
                                            if (ds.Tables[13].Rows[intRowCount]["Is_Approved"].ToString().ToUpper() == "Y")
                                            {
                                                imgFinalSitePlanYes.Visible = true;
                                                imgFinalSitePlanNo.Visible = false;
                                            }
                                            else if (ds.Tables[13].Rows[intRowCount]["Is_Approved"].ToString().ToUpper() == "N")
                                            {
                                                imgFinalSitePlanYes.Visible = false;
                                                imgFinalSitePlanNo.Visible = true;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        lblSiteplanningFinalAppGrp.Text = string.Empty;
                                    }
                                }
                                if (ds.Tables[13].Rows[intRowCount]["Function_Name"].ToString() == "Site Contact")
                                {
                                    //If Not ds.Tables[13).Rows(intRowCount).Item("Approver_Name") Is System.DBNull.Value Or Not ds.Tables[13).Rows(intRowCount).Item("Approver_Name") = "" Then
                                    if ((!object.ReferenceEquals(ds.Tables[13].Rows[intRowCount]["Approver_Name"], System.DBNull.Value)))
                                    {
                                        lblSiteContactFinalAppGrp.Text = ds.Tables[13].Rows[intRowCount]["Approver_Name"].ToString();
                                        if ((!object.ReferenceEquals(ds.Tables[13].Rows[intRowCount]["Is_Approved"], System.DBNull.Value)))
                                        {
                                            if (ds.Tables[13].Rows[intRowCount]["Is_Approved"].ToString().ToUpper() == "Y")
                                            {
                                                imgSiteConYes.Visible = true;
                                                imgSiteConNo.Visible = false;
                                            }
                                            else if (ds.Tables[13].Rows[intRowCount]["Is_Approved"].ToString().ToUpper() == "N")
                                            {
                                                imgSiteConYes.Visible = false;
                                                imgSiteConNo.Visible = true;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        lblSiteContactFinalAppGrp.Text = string.Empty;
                                    }
                                }
                                if (ds.Tables[13].Rows[intRowCount]["Function_Name"].ToString() == "Site Finance")
                                {
                                    //If Not ds.Tables[13).Rows(intRowCount).Item("Approver_Name") Is System.DBNull.Value Or Not ds.Tables[13).Rows(intRowCount).Item("Approver_Name") = "" Then
                                    if ((!object.ReferenceEquals(ds.Tables[13].Rows[intRowCount]["Approver_Name"], System.DBNull.Value)))
                                    {
                                        lblSiteFinanceFinalAppGrp.Text = ds.Tables[13].Rows[intRowCount]["Approver_Name"].ToString();
                                        if ((!object.ReferenceEquals(ds.Tables[13].Rows[intRowCount]["Is_Approved"], System.DBNull.Value)))
                                        {
                                            if (ds.Tables[13].Rows[intRowCount]["Is_Approved"].ToString().ToUpper() == "Y")
                                            {
                                                imgFinalSiteFinanceYes.Visible = true;
                                                imgFinalSiteFinanceNo.Visible = false;
                                            }
                                            else if (ds.Tables[13].Rows[intRowCount]["Is_Approved"].ToString().ToUpper() == "N")
                                            {
                                                imgFinalSiteFinanceYes.Visible = false;
                                                imgFinalSiteFinanceNo.Visible = true;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        lblSiteFinanceFinalAppGrp.Text = string.Empty;
                                    }
                                }
                                if (ds.Tables[13].Rows[intRowCount]["Function_Name"].ToString() == "Site Leadership")
                                {
                                    //If Not ds.Tables[13).Rows(intRowCount).Item("Approver_Name") Is System.DBNull.Value Or Not ds.Tables[13).Rows(intRowCount).Item("Approver_Name") = "" Then
                                    if ((!object.ReferenceEquals(ds.Tables[13].Rows[intRowCount]["Approver_Name"], System.DBNull.Value)))
                                    {
                                        lblSiteLeadeshipFinalAppGrp.Text = ds.Tables[13].Rows[intRowCount]["Approver_Name"].ToString();
                                        if ((!object.ReferenceEquals(ds.Tables[13].Rows[intRowCount]["Is_Approved"], System.DBNull.Value)))
                                        {
                                            if (ds.Tables[13].Rows[intRowCount]["Is_Approved"].ToString().ToUpper() == "Y")
                                            {
                                                imgFinalSiteLeaderYes.Visible = true;
                                                imgFinalSiteLeaderNo.Visible = false;
                                            }
                                            else if (ds.Tables[13].Rows[intRowCount]["Is_Approved"].ToString().ToUpper() == "N")
                                            {
                                                imgFinalSiteLeaderYes.Visible = false;
                                                imgFinalSiteLeaderNo.Visible = true;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        lblSiteLeadeshipFinalAppGrp.Text = string.Empty;
                                    }
                                }

                                if (ds.Tables[13].Rows[intRowCount]["Function_Name"].ToString() == "PS&RA")
                                {
                                    //If Not ds.Tables[13).Rows(intRowCount).Item("Approver_Name") Is System.DBNull.Value Or Not ds.Tables[13).Rows(intRowCount).Item("Approver_Name") = "" Then
                                    if ((!object.ReferenceEquals(ds.Tables[13].Rows[intRowCount]["Approver_Name"], System.DBNull.Value)))
                                    {
                                        lblPSRAFinalAppGrp.Text = ds.Tables[13].Rows[intRowCount]["Approver_Name"].ToString();
                                        if ((!object.ReferenceEquals(ds.Tables[13].Rows[intRowCount]["Is_Approved"], System.DBNull.Value)))
                                        {
                                            if (ds.Tables[13].Rows[intRowCount]["Is_Approved"].ToString().ToUpper() == "Y")
                                            {
                                                imgFinalPSRAYes.Visible = true;
                                                imgFinalPSRANo.Visible = false;
                                            }
                                            else if (ds.Tables[13].Rows[intRowCount]["Is_Approved"].ToString().ToUpper() == "N")
                                            {
                                                imgFinalPSRAYes.Visible = false;
                                                imgFinalPSRANo.Visible = true;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        lblPSRAFinalAppGrp.Text = string.Empty;
                                    }
                                }
                                if (ds.Tables[13].Rows[intRowCount]["Function_Name"].ToString() == "Timing Gate Exception")
                                {
                                    //If Not ds.Tables[13).Rows(intRowCount).Item("Approver_Name") Is System.DBNull.Value Or Not ds.Tables[13).Rows(intRowCount).Item("Approver_Name") = "" Then
                                    if ((!object.ReferenceEquals(ds.Tables[13].Rows[intRowCount]["Approver_Name"], System.DBNull.Value)))
                                    {
                                        lblTimingGateFinalAppGrp.Text = ds.Tables[13].Rows[intRowCount]["Approver_Name"].ToString();
                                        if ((!object.ReferenceEquals(ds.Tables[13].Rows[intRowCount]["Is_Approved"], System.DBNull.Value)))
                                        {
                                            if (ds.Tables[13].Rows[intRowCount]["Is_Approved"].ToString().ToUpper() == "Y")
                                            {
                                                imgFinalTimingGateYes.Visible = true;
                                                imgFinalTimingGateNo.Visible = false;
                                            }
                                            else if (ds.Tables[13].Rows[intRowCount]["Is_Approved"].ToString().ToUpper() == "N")
                                            {
                                                imgFinalTimingGateYes.Visible = false;
                                                imgFinalTimingGateNo.Visible = true;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        lblTimingGateFinalAppGrp.Text = string.Empty;
                                    }
                                }
                                if (ds.Tables[13].Rows[intRowCount]["Function_Name"].ToString() == "QA")
                                {
                                    //If Not ds.Tables[13).Rows(intRowCount).Item("Approver_Name") Is System.DBNull.Value Or Not ds.Tables[13).Rows(intRowCount).Item("Approver_Name") = "" Then
                                    if ((!object.ReferenceEquals(ds.Tables[13].Rows[intRowCount]["Approver_Name"], System.DBNull.Value)))
                                    {
                                        lblQAFinalAppGrp.Text = ds.Tables[13].Rows[intRowCount]["Approver_Name"].ToString();
                                        if ((!object.ReferenceEquals(ds.Tables[13].Rows[intRowCount]["Is_Approved"], System.DBNull.Value)))
                                        {
                                            if (ds.Tables[13].Rows[intRowCount]["Is_Approved"].ToString().ToUpper() == "Y")
                                            {
                                                imgFinalQAYes.Visible = true;
                                                imgFinalQANo.Visible = false;
                                            }
                                            else if (ds.Tables[13].Rows[intRowCount]["Is_Approved"].ToString().ToUpper() == "N")
                                            {
                                                imgFinalQAYes.Visible = false;
                                                imgFinalQANo.Visible = true;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        lblQAFinalAppGrp.Text = string.Empty;
                                    }
                                }

                                if (ds.Tables[13].Rows[intRowCount]["Function_Name"].ToString() == "Central QA")
                                {
                                    //If Not ds.Tables[13).Rows(intRowCount).Item("Approver_Name") Is System.DBNull.Value Or Not ds.Tables[13).Rows(intRowCount).Item("Approver_Name") = "" Then
                                    if ((!object.ReferenceEquals(ds.Tables[13].Rows[intRowCount]["Approver_Name"], System.DBNull.Value)))
                                    {
                                        lblCentralQAFinalAppGrp.Text = ds.Tables[13].Rows[intRowCount]["Approver_Name"].ToString();
                                        if ((!object.ReferenceEquals(ds.Tables[13].Rows[intRowCount]["Is_Approved"], System.DBNull.Value)))
                                        {
                                            if (ds.Tables[13].Rows[intRowCount]["Is_Approved"].ToString().ToUpper() == "Y")
                                            {
                                                imgFinalCentralQAYes.Visible = true;
                                                imgFinalCentralQANo.Visible = false;
                                            }
                                            else if (ds.Tables[13].Rows[intRowCount]["Is_Approved"].ToString().ToUpper() == "N")
                                            {
                                                imgFinalCentralQAYes.Visible = false;
                                                imgFinalCentralQANo.Visible = true;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        lblCentralQAFinalAppGrp.Text = string.Empty;
                                    }
                                }


                                if (ds.Tables[13].Rows[intRowCount]["Function_Name"].ToString() == "Standards Office")
                                {
                                    //If Not ds.Tables[13).Rows(intRowCount).Item("Approver_Name") Is System.DBNull.Value Or Not ds.Tables[13).Rows(intRowCount).Item("Approver_Name") = "" Then
                                    if ((!object.ReferenceEquals(ds.Tables[13].Rows[intRowCount]["Approver_Name"], System.DBNull.Value)))
                                    {
                                        lblStandsOfficeFinalAppGrp.Text = ds.Tables[13].Rows[intRowCount]["Approver_Name"].ToString();
                                        if ((!object.ReferenceEquals(ds.Tables[13].Rows[intRowCount]["Is_Approved"], System.DBNull.Value)))
                                        {
                                            if (ds.Tables[13].Rows[intRowCount]["Is_Approved"].ToString().ToUpper() == "Y")
                                            {
                                                imgFinalStandsYes.Visible = true;
                                                imgFinalStandsNo.Visible = false;
                                            }
                                            else if (ds.Tables[13].Rows[intRowCount]["Is_Approved"].ToString().ToUpper() == "N")
                                            {
                                                imgFinalStandsYes.Visible = false;
                                                imgFinalStandsNo.Visible = true;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        lblStandsOfficeFinalAppGrp.Text = string.Empty;
                                    }
                                }


                                //Added by David - MUREO PCR : 4 Additional Approvers - Date: 01/03/2012

                                if (ds.Tables[13].Rows[intRowCount]["Function_Name"].ToString() == "Additional approver #1")
                                {
                                    if ((!object.ReferenceEquals(ds.Tables[13].Rows[intRowCount]["Approver_Name"], System.DBNull.Value)))
                                    {
                                        lblAdditionalApprover1FinalAppGrp.Text = ds.Tables[13].Rows[intRowCount]["Approver_Name"].ToString();
                                        if ((!object.ReferenceEquals(ds.Tables[13].Rows[intRowCount]["Is_Approved"], System.DBNull.Value)))
                                        {
                                            if (ds.Tables[13].Rows[intRowCount]["Is_Approved"].ToString().ToUpper() == "Y")
                                            {
                                                imgFinalAdditionalApprover1Yes.Visible = true;
                                                imgFinalAdditionalApprover1No.Visible = false;
                                            }
                                            else if (ds.Tables[13].Rows[intRowCount]["Is_Approved"].ToString().ToUpper() == "N")
                                            {
                                                imgFinalAdditionalApprover1Yes.Visible = false;
                                                imgFinalAdditionalApprover1No.Visible = true;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        lblAdditionalApprover1FinalAppGrp.Text = string.Empty;
                                    }
                                }

                                if (ds.Tables[13].Rows[intRowCount]["Function_Name"].ToString() == "Additional approver #2")
                                {
                                    if ((!object.ReferenceEquals(ds.Tables[13].Rows[intRowCount]["Approver_Name"], System.DBNull.Value)))
                                    {
                                        lblAdditionalApprover2FinalAppGrp.Text = ds.Tables[13].Rows[intRowCount]["Approver_Name"].ToString();
                                        if ((!object.ReferenceEquals(ds.Tables[13].Rows[intRowCount]["Is_Approved"], System.DBNull.Value)))
                                        {
                                            if (ds.Tables[13].Rows[intRowCount]["Is_Approved"].ToString().ToUpper() == "Y")
                                            {
                                                imgFinalAdditionalApprover2Yes.Visible = true;
                                                imgFinalAdditionalApprover2No.Visible = false;
                                            }
                                            else if (ds.Tables[13].Rows[intRowCount]["Is_Approved"].ToString().ToUpper() == "N")
                                            {
                                                imgFinalAdditionalApprover2Yes.Visible = false;
                                                imgFinalAdditionalApprover2No.Visible = true;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        lblAdditionalApprover2FinalAppGrp.Text = string.Empty;
                                    }
                                }


                                if (ds.Tables[13].Rows[intRowCount]["Function_Name"].ToString() == "Additional approver #3")
                                {
                                    if ((!object.ReferenceEquals(ds.Tables[13].Rows[intRowCount]["Approver_Name"], System.DBNull.Value)))
                                    {
                                        lblAdditionalApprover3FinalAppGrp.Text = ds.Tables[13].Rows[intRowCount]["Approver_Name"].ToString();
                                        if ((!object.ReferenceEquals(ds.Tables[13].Rows[intRowCount]["Is_Approved"], System.DBNull.Value)))
                                        {
                                            if (ds.Tables[13].Rows[intRowCount]["Is_Approved"].ToString().ToUpper() == "Y")
                                            {
                                                imgFinalAdditionalApprover3Yes.Visible = true;
                                                imgFinalAdditionalApprover3No.Visible = false;
                                            }
                                            else if (ds.Tables[13].Rows[intRowCount]["Is_Approved"].ToString().ToUpper() == "N")
                                            {
                                                imgFinalAdditionalApprover3Yes.Visible = false;
                                                imgFinalAdditionalApprover3No.Visible = true;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        lblAdditionalApprover3FinalAppGrp.Text = string.Empty;
                                    }
                                }


                                if (ds.Tables[13].Rows[intRowCount]["Function_Name"].ToString() == "Additional approver #4")
                                {
                                    if ((!object.ReferenceEquals(ds.Tables[13].Rows[intRowCount]["Approver_Name"], System.DBNull.Value)))
                                    {
                                        lblAdditionalApprover4FinalAppGrp.Text = ds.Tables[13].Rows[intRowCount]["Approver_Name"].ToString();
                                        if ((!object.ReferenceEquals(ds.Tables[13].Rows[intRowCount]["Is_Approved"], System.DBNull.Value)))
                                        {
                                            if (ds.Tables[13].Rows[intRowCount]["Is_Approved"].ToString().ToUpper() == "Y")
                                            {
                                                imgFinalAdditionalApprover4Yes.Visible = true;
                                                imgFinalAdditionalApprover4No.Visible = false;
                                            }
                                            else if (ds.Tables[13].Rows[intRowCount]["Is_Approved"].ToString().ToUpper() == "N")
                                            {
                                                imgFinalAdditionalApprover4Yes.Visible = false;
                                                imgFinalAdditionalApprover4No.Visible = true;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        lblAdditionalApprover4FinalAppGrp.Text = string.Empty;
                                    }
                                }




                            }
                        }
                        else
                        {
                            lblPSInitiativeAppGrp.Text = string.Empty;
                            lblProdResearchAppGrp.Text = string.Empty;
                            lblBOFinalAppGrp.Text = string.Empty;
                            lblGBUHSEFinalAppGrp.Text = string.Empty;
                            lblSiteHSEFinalAppGrp.Text = string.Empty;
                            lblSAPCostCenterFinalAppGrp.Text = string.Empty;
                            //Added by David
                            //Date: 07/16/2010
                            lblSMARTClearanceFinalAppGrp.Text = string.Empty;

                            lblSiteplanningFinalAppGrp.Text = string.Empty;
                            lblSiteContactFinalAppGrp.Text = string.Empty;
                            lblSiteFinanceFinalAppGrp.Text = string.Empty;
                            lblSiteLeadeshipFinalAppGrp.Text = string.Empty;
                            lblPSRAFinalAppGrp.Text = string.Empty;
                            lblTimingGateFinalAppGrp.Text = string.Empty;
                            lblQAFinalAppGrp.Text = string.Empty;
                            lblStandsOfficeFinalAppGrp.Text = string.Empty;
                        }
                    }

                    try
                    {
                        if (!(ds.Tables[14].Rows.Count == 0))
                        {
                            int intRowCount = 0;
                            for (intRowCount = 0; intRowCount <= ds.Tables[14].Rows.Count - 1; intRowCount++)
                            {
                                if ((!object.ReferenceEquals(ds.Tables[14].Rows[intRowCount]["Prod_Pack_Name"], System.DBNull.Value)))
                                {
                                    if (!string.IsNullOrEmpty(ds.Tables[14].Rows[intRowCount]["Prod_Pack_Name"].ToString()))
                                    {
                                        if (string.IsNullOrEmpty(lblProdPackFinal.Text))
                                        {
                                            lblProdPackFinal.Text = ds.Tables[14].Rows[intRowCount]["Prod_Pack_Name"].ToString();
                                        }
                                        else
                                        {
                                            lblProdPackFinal.Text = lblProdPackFinal.Text + "," + ds.Tables[14].Rows[intRowCount]["Prod_Pack_Name"];
                                        }
                                    }

                                }
                            }
                        }

                    }
                    catch (Exception ex)
                    {
                    }

                    try
                    {
                        if (!(ds.Tables[19].Rows.Count == 0))
                        {
                            int intRowCount = 0;
                            for (intRowCount = 0; intRowCount <= ds.Tables[19].Rows.Count - 1; intRowCount++)
                            {
                                if ((!object.ReferenceEquals(ds.Tables[19].Rows[intRowCount]["PDI_Packaging_Type"], System.DBNull.Value)))
                                {
                                    if (!string.IsNullOrEmpty(ds.Tables[19].Rows[intRowCount]["PDI_Packaging_Type"].ToString()))
                                    {
                                        if (ds.Tables[19].Rows[intRowCount]["PDI_Packaging_Type"].ToString() == "1")
                                        {
                                            if (string.IsNullOrEmpty(lblProdTypeFinalRo.Text))
                                            {
                                                lblProdTypeFinalRo.Text = "Brown Box";
                                            }
                                            else
                                            {
                                                lblProdTypeFinalRo.Text = lblProdTypeFinalRo.Text + "," + "Brown Box";
                                            }
                                        }
                                        else if (ds.Tables[19].Rows[intRowCount]["PDI_Packaging_Type"].ToString() == "2")
                                        {
                                            if (string.IsNullOrEmpty(lblProdTypeFinalRo.Text))
                                            {
                                                lblProdTypeFinalRo.Text = "LCP";
                                            }
                                            else
                                            {
                                                lblProdTypeFinalRo.Text = lblProdTypeFinalRo.Text + "," + "LCP";
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                    }
                }
            }

        }

        public void GET_EO_CloseOut_Lock()
        {
            DataSet ds = null;

            if (objEOBA.GET_EO_Closeout(Convert.ToInt32(ViewState["EOID"]), ref ds))
            {

                if ((ds != null))
                {
                    if (!(ds.Tables.Count == 0))
                    {
                        if (!(ds.Tables[11].Rows.Count == 0))
                        {
                            dgrdActualCostCloseOut_Readonly.DataSource = ds.Tables[11].DefaultView;
                            dgrdActualCostCloseOut_Readonly.DataBind();
                        }
                        if (!(ds.Tables[12].Rows.Count == 0))
                        {
                            dgrdILR_Readonly.DataSource = ds.Tables[12].DefaultView;
                            dgrdILR_Readonly.DataBind();
                        }
                        if (!(ds.Tables[13].Rows.Count == 0))
                        {
                            dgrdTestPlansCloseOut_Readonly.DataSource = ds.Tables[13].DefaultView;
                            dgrdTestPlansCloseOut_Readonly.DataBind();
                        }
                        if (!(ds.Tables[14].Rows.Count == 0))
                        {
                            dgrdCOReport_Readonly.DataSource = ds.Tables[14].DefaultView;
                            dgrdCOReport_Readonly.DataBind();
                        }
                        if (!(ds.Tables[0].Rows.Count == 0))
                        {
                            if ((!object.ReferenceEquals(ds.Tables[0].Rows[0]["Lab_NoteBook_Number"], System.DBNull.Value)))
                            {
                                lblLabNoteBookNumberFinal.Text = ds.Tables[0].Rows[0]["Lab_NoteBook_Number"].ToString();
                            }
                            else
                            {
                                lblLabNoteBookNumberFinal.Text = string.Empty;
                            }
                            if ((!object.ReferenceEquals(ds.Tables[0].Rows[0]["Completion_Date"], System.DBNull.Value)))
                            {
                                lblComplateionDate.Text = ds.Tables[0].Rows[0]["Completion_Date"].ToString();
                            }
                            else
                            {
                                lblComplateionDate.Text = string.Empty;
                            }
                        }
                        //Actual Cost Sheet
                        if (!(ds.Tables[1].Rows.Count == 0))
                        {
                            if ((!object.ReferenceEquals(ds.Tables[1].Rows[0]["Total_CostSheet"], System.DBNull.Value)))
                            {
                                lblAttchFinalCost.Text = ds.Tables[1].Rows[0]["Total_CostSheet"].ToString();
                            }
                            else
                            {
                                lblAttchFinalCost.Text = string.Empty;
                            }
                        }

                        //Close Out Report
                        if (!(ds.Tables[4].Rows.Count == 0))
                        {
                            if ((!object.ReferenceEquals(ds.Tables[4].Rows[0]["Keyword_1"], System.DBNull.Value)))
                            {
                                lblCloseKeyword1.Text = ds.Tables[4].Rows[0]["Keyword_1"].ToString();
                            }
                            else
                            {
                                lblCloseKeyword1.Text = string.Empty;
                            }
                            if ((!object.ReferenceEquals(ds.Tables[4].Rows[0]["Keyword_2"], System.DBNull.Value)))
                            {
                                lblCloseKeyword2.Text = ds.Tables[4].Rows[0]["Keyword_2"].ToString();
                            }
                            else
                            {
                                lblCloseKeyword2.Text = string.Empty;
                            }
                            if ((!object.ReferenceEquals(ds.Tables[4].Rows[0]["Keyword_3"], System.DBNull.Value)))
                            {
                                lblCloseKeyword3.Text = ds.Tables[4].Rows[0]["Keyword_3"].ToString();
                            }
                            else
                            {
                                lblCloseKeyword3.Text = string.Empty;
                            }
                            if ((!object.ReferenceEquals(ds.Tables[4].Rows[0]["Keyword_4"], System.DBNull.Value)))
                            {
                                lblCloseKeyword4.Text = ds.Tables[4].Rows[0]["Keyword_4"].ToString();
                            }
                            else
                            {
                                lblCloseKeyword4.Text = string.Empty;
                            }
                            if ((!object.ReferenceEquals(ds.Tables[4].Rows[0]["Keyword_5"], System.DBNull.Value)))
                            {
                                lblCloseKeyword5.Text = ds.Tables[4].Rows[0]["Keyword_5"].ToString();
                            }
                            else
                            {
                                lblCloseKeyword5.Text = string.Empty;
                            }
                            if ((!object.ReferenceEquals(ds.Tables[4].Rows[0]["Keyword_6"], System.DBNull.Value)))
                            {
                                lblCloseKeyword6.Text = ds.Tables[4].Rows[0]["Keyword_6"].ToString();
                            }
                            else
                            {
                                lblCloseKeyword6.Text = string.Empty;
                            }

                        }
                        //Approvals GroupID
                        if (!(ds.Tables[5].Rows.Count == 0))
                        {
                            if ((!object.ReferenceEquals(ds.Tables[5].Rows[0]["Approval_Group_Name"], System.DBNull.Value)))
                            {
                                lblAppgrpCO.Text = ds.Tables[5].Rows[0]["Approval_Group_Name"].ToString();
                            }
                            else
                            {
                                lblAppgrpCO.Text = string.Empty;
                            }
                        }
                        //Close Out Approvals
                        if (!(ds.Tables[5].Rows.Count == 0))
                        {
                            if ((!object.ReferenceEquals(ds.Tables[5].Rows[0]["Approval_Group_Name"], System.DBNull.Value)))
                            {
                                lblAppgrpCO.Text = ds.Tables[5].Rows[0]["Approval_Group_Name"].ToString();
                            }
                            else
                            {
                                lblAppgrpCO.Text = string.Empty;
                            }
                            int intRowCount = 0;
                            for (intRowCount = 0; intRowCount <= ds.Tables[5].Rows.Count - 1; intRowCount++)
                            {
                                //If ds.Tables[5).Rows(intRowCount).Item("Function_Name") Is System.DBNull.Value Or Not ds.Tables[5).Rows(intRowCount).Item("Function_Name") = "" Then
                                if ((!object.ReferenceEquals(ds.Tables[5].Rows[intRowCount]["Function_Name"], System.DBNull.Value)))
                                {
                                    if (ds.Tables[5].Rows[intRowCount]["Function_Name"].ToString() == "Site Finance")
                                    {
                                        //If Not ds.Tables[5).Rows(intRowCount).Item("Approver_Name") Is System.DBNull.Value Or Not ds.Tables[5).Rows(intRowCount).Item("Approver_Name") = "" Then
                                        if ((!object.ReferenceEquals(ds.Tables[5].Rows[intRowCount]["Approver_Name"], System.DBNull.Value)))
                                        {
                                            lblSiteFinanceAppCO.Text = ds.Tables[5].Rows[intRowCount]["Approver_Name"].ToString();
                                            if ((!object.ReferenceEquals(ds.Tables[5].Rows[intRowCount]["Is_Approved"], System.DBNull.Value)))
                                            {
                                                if (ds.Tables[5].Rows[intRowCount]["Is_Approved"].ToString().ToUpper() == "Y")
                                                {
                                                    imgCloseOutSiteFinanceYes.Visible = true;
                                                    imgCloseOutSiteFinanceNo.Visible = false;
                                                }
                                                else if (ds.Tables[5].Rows[intRowCount]["Is_Approved"].ToString().ToUpper() == "N")
                                                {
                                                    imgCloseOutSiteFinanceYes.Visible = false;
                                                    imgCloseOutSiteFinanceNo.Visible = true;
                                                }
                                            }
                                        }
                                        else
                                        {
                                            lblSiteFinanceAppCO.Text = string.Empty;
                                        }
                                    }
                                    if (ds.Tables[5].Rows[intRowCount]["Function_Name"].ToString() == "Budget Center")
                                    {
                                        //If Not ds.Tables[5).Rows(intRowCount).Item("Approver_Name") Is System.DBNull.Value Or Not ds.Tables[5).Rows(intRowCount).Item("Approver_Name") = "" Then
                                        if ((!object.ReferenceEquals(ds.Tables[5].Rows[intRowCount]["Approver_Name"], System.DBNull.Value)))
                                        {
                                            lblBOAppCO.Text = ds.Tables[5].Rows[intRowCount]["Approver_Name"].ToString();
                                            if ((!object.ReferenceEquals(ds.Tables[5].Rows[intRowCount]["Is_Approved"], System.DBNull.Value)))
                                            {
                                                if (ds.Tables[5].Rows[intRowCount]["Is_Approved"].ToString().ToUpper() == "Y")
                                                {
                                                    imgCloseOutBudgetOwnerYes.Visible = true;
                                                    imgCloseOutBudgetOwnerNo.Visible = false;
                                                }
                                                else if (ds.Tables[5].Rows[intRowCount]["Is_Approved"].ToString().ToUpper() == "N")
                                                {
                                                    imgCloseOutBudgetOwnerYes.Visible = false;
                                                    imgCloseOutBudgetOwnerNo.Visible = true;
                                                }
                                            }
                                        }
                                        else
                                        {
                                            lblBOAppCO.Text = string.Empty;
                                        }
                                    }
                                }
                            }
                        }
                        else
                        {
                            lblAppgrpCO.Text = string.Empty;
                            lblSiteFinanceAppCO.Text = string.Empty;
                            lblBOAppCO.Text = string.Empty;
                        }
                    }
                }
            }
        }


        public void FillAppYesNo(string strfunctionName)
        {
            if (TxtAppYes.Text == "Yes")
            {
                //ClsEO objEO = new ClsEO();
                EOBA objEOBA = new EOBA();
                int intResult = 0;
                int intRow = 0;
                DataSet dsAppList = null;
                string strNames = null;
                if (objEOBA.SetApprovarStatus(Convert.ToInt32(ViewState["EOID"]), ViewState["stage"].ToString(), strfunctionName, objSecurity.UserName, 'Y', "", ref dsAppList, ref paramOut))
                {
                    //To get all remaining Approvers.
                    for (intRow = 0; intRow <= dsAppList.Tables[0].Rows.Count - 1; intRow++)
                    {
                        if (string.IsNullOrEmpty(strNames))
                        {
                            strNames = dsAppList.Tables[0].Rows[intRow][1].ToString();
                        }
                        else
                        {
                            strNames = strNames + ";" + dsAppList.Tables[0].Rows[intRow][1];
                        }
                    }
                }
                int intPlantID = 0;
                string strCurrentStage = null;
                string strStatus = null;
                DataSet ds = null;

                if (objEOBA.GETEOMandatory(Convert.ToInt32(ViewState["EOID"]), ref ds))
                {
                    if ((ds != null))
                    {
                        if (!(ds.Tables.Count == 0))
                        {
                            if (!(ds.Tables[0].Rows.Count == 0))
                            {
                                if ((!object.ReferenceEquals(ds.Tables[0].Rows[0]["Current_Stage"], System.DBNull.Value)))
                                {
                                    strCurrentStage = ds.Tables[0].Rows[0]["Current_Stage"].ToString();
                                    ViewState["stage"] = ds.Tables[0].Rows[0]["Current_Stage"];
                                }
                                else
                                {
                                    strCurrentStage = string.Empty;
                                    ViewState["stage"] = string.Empty;
                                }
                                if ((!object.ReferenceEquals(ds.Tables[0].Rows[0]["Plant_ID"], System.DBNull.Value)))
                                {
                                    intPlantID = Convert.ToInt32(ds.Tables[0].Rows[0]["Plant_ID"]);
                                    ViewState["PlantID"] = ds.Tables[0].Rows[0]["Plant_ID"];
                                }
                                else
                                {
                                    intPlantID = 0;
                                    ViewState["PlantID"] = string.Empty;
                                }
                                if ((!object.ReferenceEquals(ds.Tables[0].Rows[0]["Stage_Status"], System.DBNull.Value)))
                                {
                                    if (Session["Status"] == null)
                                    {
                                        strStatus = ds.Tables[0].Rows[0]["Stage_Status"].ToString();
                                        ViewState["Status"] = ds.Tables[0].Rows[0]["Stage_Status"];
                                    }
                                    else
                                    {
                                        strStatus = Session["Status"].ToString();
                                        ViewState["Status"] = Session["Status"];
                                    }
                                }
                                else
                                {
                                    strStatus = string.Empty;
                                    ViewState["Status"] = string.Empty;
                                }
                            }
                        }
                    }
                }

                lnkCloseBudgetApproved.Visible = false;
                lnkCloseBudgetDeclined.Visible = false;
                lnkCOBOComments.Visible = true;
                lnkCOBOBackUp.Visible = false;

                if (!string.IsNullOrEmpty(strNames))
                {
                    try
                    {
                        SendMail(strNames, "REMINDER - Your approval is needed for EO Number - " + ViewState["EOID"] + " - Test document from Vertex - Kindly ignore ", "Dear Budget Approver," + "<br>" + "<br>" + "You are listed as an approver for this EO.  Please follow the link to see this EO." + "<br>" + "<br>" + "NOTE:  Use this link to open the EO in 'Read Only' Mode." + "<br>" + Request.Url.ToString() + "?From=ForEOLock&EOID=" + ViewState["EOID"] + "<br>" + "<br>" + "NOTE:  Use this link to open the EO in 'Edit' Mode." + "<br>" + "<br>" + Request.Url.ToString() + "?From=ForEOLock&EOID=" + ViewState["EOID"] + "<br>" + "<br>" + "EO Number is :" + "<br>" + "SAP IO Number :" + "<br>" + "EO Title is  :" + txtTitle.Text + "<br>" + "EO Location :" + drpPlant.SelectedItem.Text + "<br>" + "Budget Center :" + ViewState["BudgetCenter"] + "<br>" + "Expected Cost :" + lbTotalCost.Text + "<br>" + "Current Stage  :" + "<br>" + "Proposed Testing Start Date :" + "<br>" + "Thank you," + "<br>" + "MUREO.");
                    }
                    catch (Exception ex)
                    {
                    }
                }
                if (!(ViewState["EOID"] == null))
                {

                    if (objEOBA.SET_EO_Lock_Release_User(Convert.ToInt32(ViewState["EOID"]), objSecurity.UserName))
                    { }
                }
                //string script1 = null;
                //script1 = "<script>alert('Close Out approval is successfully completed');window.navigate('Home.aspx');</script> ";
                //Page.RegisterStartupScript("clientscript", script1);

                ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "alert('Close Out approval is successfully completed.');window.location='Home.aspx';", true);
            }
        }

        public void FillAppYesNoDecline()
        {
            if (TxtAppYes.Text == "Yes")
            {

                int intResult = 0;
                int intRow = 0;
                DataSet dsAppList = null;
                string strNames = null;
                SqlParameter[] paramOut = null;
                //dsAppList = objEO.SetApprovarStatus(ViewState["EOID"], ViewState["stage"], "Budget Center", objSecurity.UserName, "N", "");
                if (objEOBA.SetApprovarStatus(Convert.ToInt32(ViewState["EOID"]), ViewState["stage"].ToString(), "Budget Center", objSecurity.UserName, 'N', "", ref dsAppList, ref paramOut))
                { }
                lnkCOBOBackUp.Visible = false;
                lnkCOBOComments.Visible = false;
                lnkCloseBudgetApproved.Visible = false;
                lnkCloseBudgetDeclined.Visible = false;
                string script = null;

                if (!(ViewState["EOID"] == null))
                {

                    if (objEOBA.SET_EO_Lock_Release_User(Convert.ToInt32(ViewState["EOID"]), objSecurity.UserName.ToString()))
                    { }
                }
                //script = "<script>alert('Declined Successfully');window.navigate('Home.aspx');</script> ";
                //Page.RegisterStartupScript("clientscript", script);

                ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "alert('Declined Successfully.');window.location='Home.aspx';", true);
            }
        }



        private void lnkViewSelection_Click(System.Object sender, System.EventArgs e)
        {
            string strSelPSRA = null;
            int intSelPSRA = 0;
            for (intSelPSRA = 0; intSelPSRA <= lbPSRADB.Items.Count - 1; intSelPSRA++)
            {
                if (lbPSRADB.Items[intSelPSRA].Selected == true)
                {
                    if (string.IsNullOrEmpty(strSelPSRA))
                    {
                        strSelPSRA = lbPSRADB.Items[intSelPSRA].Text;
                    }
                    else
                    {
                        strSelPSRA = strSelPSRA + "," + lbPSRADB.Items[intSelPSRA].Text;
                    }
                }
            }
            lblSelectedPSRA.Text = strSelPSRA;
        }




        //  ************************************************
        //Developed by   :	Vertex Computer Systems, Inc.,
        //Name   	    :	dgdPSRAInfo_ItemDataBound
        //Written BY	    :	chary
        //parameters     :	source,DataGridCommandEventArgs
        //Purpose	    :   To Open the attachments when user clicks on the attachment link in edit mode
        //Returns        :   to GUI
        //Program Change History:
        //<Date>			         <Editor>	      	<Rev>		<Description>
        //                         chary             1.0           created
        //***************************************************
        private void dgdPSRAInfo_ItemDataBound(object sender, System.Web.UI.WebControls.DataGridItemEventArgs e)
        {
            if (e.Item.ItemType == ListItemType.Item | e.Item.ItemType == ListItemType.AlternatingItem)
            {
                LinkButton imgbDelete = (LinkButton)e.Item.FindControl("lnkPSRADel");
                imgbDelete.Attributes.Add("OnClick", "javascript:return confirmDelete();");
            }
            switch (e.Item.ItemType)
            {
                case ListItemType.Header:
                    e.Item.Cells[7].Visible = false;
                    e.Item.Cells[8].Visible = false;
                    break;
                case ListItemType.AlternatingItem:
                case ListItemType.Item:
                    e.Item.Cells[7].Visible = false;
                    e.Item.Cells[8].Visible = false;
                    break;
            }
        }




        public DataTable ExecuteDataSet(string spName)
        {
            DataTable dtEO = new DataTable();
            SqlConnection con = new SqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString);
            SqlCommand cmd = new SqlCommand(spName, con);
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.CommandTimeout = 240;
            try
            {
                SqlDataAdapter da = new SqlDataAdapter(cmd);
                da.Fill(dtEO);
            }
            catch (Exception ex)
            {
                return null;
            }

            return dtEO;
        }
        private void CreateExcel(string sFileName, DataTable table, int intRowIndex, string sFilepath)
        {
            DataRow dr = null;
            //int colNum = 0;
            int intColLoop = 0;
            int RowCount = 0;
            int ColCount = 0;
            // string endCount = null;
            //object[,] args = null;

            int rowIndex = intRowIndex;
            //Make sure cell row index is after the template header
            int colIndex = 0;
            //Set cell column index = 0 


            if (table == null)
            {
                NoRecords();
                return;
            }

            string sFile = null;
            sFile = sFilepath;

            //sFile = "http://" & Request.Url.Host() & "/WebApplication1/MUR-Template/PPM - PCL Time.xls"
            //sFile = "http://bdc-intra528.internal.pg.com/MUREO/MURDATA/GetMURDataTemplate-r04.xls" 'Set the server path of the residing template file


            string appstr = "Excel.Application";
            StringBuilder str = new StringBuilder();
            str.Append("<SCRIPT language=VBScript>");

            str.Append("\r\n");
            str.Append("On Error Resume Next");
            str.Append("\r\n");
            // Set up constants
            str.Append("Const ForReading = 1");
            str.Append("\r\n");
            str.Append("Const Create = False");
            str.Append("\r\n");
            // Declare local variables
            str.Append("Dim objFSO");
            // FileSystemObject
            str.Append("\r\n");
            str.Append("Dim TS");
            // TextStreamObject
            str.Append("\r\n");
            str.Append("Dim strLine");
            // local variable to store Line
            str.Append("\r\n");
            str.Append("Dim strFileName");
            // local variable to store fileName
            str.Append("\r\n");
            // Instantiate the FileSystemObject
            str.Append("set objFSO = CreateObject(\"Scripting.FileSystemObject\")");
            str.Append("\r\n");

            str.Append("Dim tempLoc");
            str.Append("\r\n");
            str.Append("set tempLoc = objFSO.getSpecialFolder(2)");
            str.Append("\r\n");

            str.Append("Dim strPath");
            str.Append("\r\n");

            str.Append("strPath = tempLoc + \"\\" + sFileName + "\"");
            //""\PPM - PCL Time.xls"""
            str.Append("\r\n");

            str.Append("Dim objApp");
            str.Append("\r\n");
            //// Create excel application object
            str.Append("set objApp = CreateObject(\"" + appstr + "\")");
            str.Append("\r\n");

            str.Append("if objApp = NULL or err.Number > 0 then");
            str.Append("\r\n");

            str.Append("msgBox(\"Unable to create ActiveX object!! Please change security settings in your browser to run the export!\"+chr(13)+chr(13)+\"Follow the steps below to change the security settings:\"+chr(13)+chr(9)+\"(1) Click Tools->Internet Options\" +chr(13)+chr(9)+\"(2) Click on Security tab and click Custom Level button \" +chr(13)+chr(9)+\"(3) Navigate to 'ActiveX Controls and Plugins' Settings\"+chr(13)+chr(9)+\"(4) Change 'Download unsigned ActiveX controls' setting to 'Prompt'\"+chr(13)+chr(9)+\"      Change 'Initialize and script ActiveX Controls not marked as safe as scripting' setting to 'Prompt'\"+chr(13)+chr(9)+\"(5) Click OK to save the settings and click YES when prompted with a warning dialog \")");
            str.Append("\r\n");

            str.Append("else");
            str.Append("\r\n");


            // Make it visible 
            // Add a new workbook
            str.Append("Dim objBook");
            str.Append("\r\n");

            str.Append("objApp.DisplayAlerts =False");
            str.Append("\r\n");

            //// Open the workbook (.xls) file
            str.Append("objApp.Visible = true");
            str.Append("\r\n");


            str.Append("set objbook = objApp.workbooks.open(\"" + sFile + "\")");
            str.Append("\r\n");

            str.Append("objbook.saveas(strPath)");
            str.Append("\r\n");

            str.Append("if err.Number = 424 then");
            str.Append("\r\n");

            str.Append("msgBox(\"Export Failed: Could not open the template file !!\"+chr(13)+chr(13)+\" Possible Reason(s): Template file is missing \"+chr(13)+chr(9)+chr(9)+\"  User credentials is invalid!!\"+chr(13)+chr(9)+chr(9)+\"  Username/password not provided \" )");
            str.Append("\r\n");

            str.Append("objApp.quit");
            str.Append("\r\n");

            str.Append("else");
            str.Append("\r\n");

            str.Append("set projSheet=objbook.worksheets(\"PPM - PCL Time\")");
            str.Append("\r\n");

            str.Append("projSheet.activate()");
            str.Append("\r\n");

            str.Append("dim colIndex");
            str.Append("\r\n");

            str.Append("colIndex=0");
            str.Append("\r\n");

            str.Append("dim rowIndex");
            str.Append("\r\n");

            str.Append("rowIndex=7");
            str.Append("\r\n");

            ColCount = table.Columns.Count;
            RowCount = table.Rows.Count + 2;

            foreach (DataRow dr_loopVariable in table.Rows)
            {
                dr = dr_loopVariable;
                colIndex = 1;

                for (intColLoop = 0; intColLoop <= ColCount - 1; intColLoop++)
                {
                    //If colIndex >= 4 And colIndex < 10 Then
                    //    colIndex = colIndex + 1
                    //End If
                    str.Append("projSheet.cells(" + rowIndex + "," + colIndex + ") = \"" + dr[intColLoop].ToString() + "\"");
                    str.Append("\r\n");
                    colIndex = colIndex + 1;
                }
                rowIndex = rowIndex + 1;
            }
            str.Append("projSheet.Range(projSheet.Cells(3, 1), projSheet.Cells(" + RowCount + ", 3)).Cells.Interior.ColorIndex = 36");
            str.Append("\r\n");

            str.Append("objBook.save");
            str.Append("\r\n");

            str.Append("msgBox(\"Data Export Completed Successfully!!\")");
            str.Append("\r\n");
            str.Append("end if");
            str.Append("\r\n");
            str.Append("end if");
            str.Append("\r\n");
            str.Append("</script>");
            //Page.RegisterStartupScript("clientscript", str.ToString());
            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), str.ToString(), true);
        }
        private void NoRecords()
        {
            //script = "<script>alert('" + ConfigurationSettings.AppSettings["NoRecords"] + "');</script> ";
            //Page.RegisterStartupScript("error_message", script);

            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "alert('" + ConfigurationSettings.AppSettings["NoRecords"] + "');", true);
        }

        private void mandataroinfoforEmail()
        {
            string strCurrentStage = null;
            string strStatus = null;
            int intPlantID = 0;
            string strEOnum = null;
            string strSAPIO = null;
            string strSmartClearance = null;
            DataSet ds = new DataSet();

            try
            {
                //For mail date to add 2 business days to current date
                System.DateTime currentDate = DateTime.Now.Date;
                System.DateTime nextTwoDate = DateTime.Now.Date;
                if (DateTime.Now.DayOfWeek == 0)
                {
                    nextTwoDate = currentDate.AddDays(2);
                }
                else if (Convert.ToInt32(DateTime.Now.DayOfWeek) == 6)
                {
                    nextTwoDate = currentDate.AddDays(3);
                }
                else if (Convert.ToInt32(DateTime.Now.DayOfWeek) == 5)
                {
                    nextTwoDate = currentDate.AddDays(4);
                }
                else if (Convert.ToInt32(DateTime.Now.DayOfWeek) == 4)
                {
                    nextTwoDate = currentDate.AddDays(4);
                }
                else
                {
                    nextTwoDate = currentDate.AddDays(2);
                }

                try
                {
                    ViewState["nextTwoDate"] = nextTwoDate;
                }
                catch (Exception ex)
                {
                }

                if (objEOBA.GETEOMandatory(Convert.ToInt32(ViewState["EOID"]), ref ds))
                {

                    if ((ds != null))
                    {
                        if (!(ds.Tables.Count == 0))
                        {
                            if (!(ds.Tables[0].Rows.Count == 0))
                            {
                                if ((!object.ReferenceEquals(ds.Tables[0].Rows[0]["EO_Number"], System.DBNull.Value)))
                                {
                                    strEOnum = ds.Tables[0].Rows[0]["EO_Number"].ToString();
                                    ViewState["EONum"] = ds.Tables[0].Rows[0]["EO_Number"];
                                }
                                else
                                {
                                    strEOnum = "New EO";
                                    ViewState["EONum"] = "New EO";
                                }

                                if ((!object.ReferenceEquals(ds.Tables[0].Rows[0]["Originator"], System.DBNull.Value)))
                                {
                                    ViewState["Originator"] = ds.Tables[0].Rows[0]["Originator"];
                                }
                                else
                                {
                                    ViewState["Originator"] = string.Empty;
                                }

                                //CoOriginator
                                if ((!object.ReferenceEquals(ds.Tables[0].Rows[0]["CoOriginator"], System.DBNull.Value)))
                                {
                                    ViewState["CoOriginator"] = ds.Tables[0].Rows[0]["CoOriginator"];
                                }
                                else
                                {
                                    ViewState["CoOriginator"] = string.Empty;
                                }

                                if ((!object.ReferenceEquals(ds.Tables[0].Rows[0]["SAP_IO_Number"], System.DBNull.Value)))
                                {
                                    strSAPIO = ds.Tables[0].Rows[0]["SAP_IO_Number"].ToString();
                                    ViewState["SAPIONum"] = ds.Tables[0].Rows[0]["SAP_IO_Number"];
                                }
                                else
                                {
                                    strSAPIO = "Not Assigned";
                                    ViewState["SAPIONum"] = "Not Assigned";
                                }

                                if ((!object.ReferenceEquals(ds.Tables[0].Rows[0]["SMART_Clearance_Number"], DBNull.Value)))
                                {
                                    strSmartClearance = ds.Tables[0].Rows[0]["SMART_Clearance_Number"].ToString();
                                    ViewState["SmartClearanceNum"] = ds.Tables[0].Rows[0]["SMART_Clearance_Number"];
                                }
                                else
                                {
                                    strSmartClearance = "Not Assigned";
                                    ViewState["SmartClearanceNum"] = "Not Assigned";
                                }

                                if ((!object.ReferenceEquals(ds.Tables[0].Rows[0]["Plant_Name"], System.DBNull.Value)))
                                {
                                    ViewState["PlantName"] = ds.Tables[0].Rows[0]["Plant_Name"];
                                }
                                else
                                {
                                    ViewState["PlantName"] = string.Empty;
                                }

                                if ((!object.ReferenceEquals(ds.Tables[0].Rows[0]["Current_Stage"], System.DBNull.Value)))
                                {
                                    strCurrentStage = ds.Tables[0].Rows[0]["Current_Stage"].ToString();
                                    ViewState["stage"] = ds.Tables[0].Rows[0]["Current_Stage"];
                                }
                                else
                                {
                                    strCurrentStage = string.Empty;
                                    ViewState["stage"] = string.Empty;
                                }

                                if ((!object.ReferenceEquals(ds.Tables[0].Rows[0]["EO_Title"], System.DBNull.Value)))
                                {
                                    ViewState["EOTitle"] = ds.Tables[0].Rows[0]["EO_Title"];
                                }
                                else
                                {
                                    ViewState["EOTitle"] = string.Empty;
                                }
                                if ((!object.ReferenceEquals(ds.Tables[0].Rows[0]["Stage_Status"], System.DBNull.Value)))
                                {
                                    if (Session["Status"] == null)
                                    {
                                        strStatus = ds.Tables[0].Rows[0]["Stage_Status"].ToString();
                                        ViewState["Status"] = ds.Tables[0].Rows[0]["Stage_Status"];
                                    }
                                    else
                                    {
                                        strStatus = Session["Status"].ToString();
                                        ViewState["Status"] = Session["Status"];
                                    }
                                }
                                else
                                {
                                    strStatus = string.Empty;
                                    ViewState["Status"] = string.Empty;
                                }
                            }
                        }
                    }
                }

            }
            catch (Exception ex)
            {
            }

            if (objEOBA.GET_EO_Preliminary(Convert.ToInt32(ViewState["EOID"]), ref ds))
            {

                if ((ds != null))
                {
                    if (!(ds.Tables.Count == 0))
                    {
                        //jagan 06/01/08
                        try
                        {
                            if (ds.Tables[0].Rows[0]["Selected_Budget_Center_Name"] != System.DBNull.Value)
                            {
                                if (ds.Tables[0].Rows[0]["Selected_Budget_Center_Name"].ToString() == "-- Select Budget Center --")
                                {
                                    ViewState["BudgetCenter"] = string.Empty;
                                }
                                else
                                {
                                    ViewState["BudgetCenter"] = ds.Tables[0].Rows[0]["Selected_Budget_Center_Name"];
                                }
                            }
                            else
                            {
                                ViewState["BudgetCenter"] = string.Empty;
                            }

                        }
                        catch (Exception ex)
                        {
                        }
                        //for total cost
                        try
                        {
                            if (ds.Tables[0].Rows[0]["Total_Cost"] != System.DBNull.Value)
                            {
                                ViewState["TotCost"] = ds.Tables[0].Rows[0]["Total_Cost"];
                            }
                            else
                            {
                                ViewState["TotCost"] = 0.0;
                            }
                        }
                        catch (Exception ex)
                        {
                        }
                        //end 06/01/08

                        if (!(ds.Tables[7].Rows.Count == 0))
                        {
                            if ((!object.ReferenceEquals(ds.Tables[7].Rows[0]["Planned_Start_Date"], System.DBNull.Value)))
                            {
                                ViewState["PlannedStartDate"] = ds.Tables[7].Rows[0]["Planned_Start_Date"];
                            }
                            else
                            {
                                ViewState["PlannedStartDate"] = string.Empty;
                            }
                        }

                        if (!(ds.Tables[12].Rows.Count == 0))
                        {
                            int intRowCount = 0;
                            for (intRowCount = 0; intRowCount <= ds.Tables[12].Rows.Count - 1; intRowCount++)
                            {
                                if ((!object.ReferenceEquals(ds.Tables[12].Rows[intRowCount]["Function_Name"], System.DBNull.Value)))
                                {
                                    if (ds.Tables[12].Rows[intRowCount]["Function_Name"] == "Site Planning")
                                    {
                                        if ((!object.ReferenceEquals(ds.Tables[12].Rows[intRowCount]["Approver_Name"], System.DBNull.Value)))
                                        {
                                            ViewState["SitePlanning"] = ds.Tables[12].Rows[intRowCount]["Approver_Name"];
                                        }
                                        else
                                        {
                                            ViewState["SitePlanning"] = string.Empty;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        private void dgdGCASInfoRO_TwoTbRte_ItemDataBound(object sender, System.Web.UI.WebControls.DataGridItemEventArgs e)
        {
            try
            {
                switch (e.Item.ItemType)
                {
                    case ListItemType.Header:
                        e.Item.Cells[6].Visible = false;
                        break;
                    case ListItemType.AlternatingItem:
                    case ListItemType.Item:
                        e.Item.Cells[6].Visible = false;
                        break;
                }
            }
            catch (Exception ex)
            {
            }
        }

        private void dgdPSRAInfoRO_TwoTbRte_ItemDataBound(object sender, System.Web.UI.WebControls.DataGridItemEventArgs e)
        {
            try
            {
                switch (e.Item.ItemType)
                {
                    case ListItemType.Header:
                        e.Item.Cells[5].Visible = false;
                        e.Item.Cells[6].Visible = false;
                        break;
                    case ListItemType.AlternatingItem:
                    case ListItemType.Item:
                        e.Item.Cells[5].Visible = false;
                        e.Item.Cells[6].Visible = false;
                        break;
                }

            }
            catch (Exception ex)
            {
            }

        }

        private void SendMail(string strApprName, string strSubject, string strBody)
        {
            int intPosition = 0;
            int i = 0;
            int intPosOriginator = 0;
            string appName = null;
            string senderName = null;
            string PosOriginator = null;
            string strOriginator = null;
            string[] strMailIDs = null;
            appName = strApprName;
            try
            {
                intPosition = appName.IndexOf(" ");
                appName = appName.Substring(intPosition);
                appName = appName.Replace("-", ".");
            }
            catch (Exception ex)
            {
            }
            senderName = appName;
            senderName = senderName + "@pg.com";
            try
            {
                if ((ViewState["Originator"] != null))
                {
                    PosOriginator = ViewState["Originator"].ToString();
                    intPosOriginator = PosOriginator.IndexOf(" ");
                    PosOriginator = PosOriginator.Substring(intPosOriginator);
                    PosOriginator = PosOriginator.Replace("-", ".");
                }

            }
            catch (Exception ex)
            {
            }

            try
            {
                clsSendMail objSendMail = new clsSendMail();
                objSendMail.SendTo = senderName;
                objSendMail.SendFrom = PosOriginator + "@pg.com";
                objSendMail.MailSubject = strSubject;
                objSendMail.MailBody = strBody;
                bool IsMailSend = false;
                string IsMailSendex = string.Empty;
                IsMailSend = clsSendMail.fnSendMail(objSendMail);
            }
            catch (Exception ex)
            {
            }
        }
        private void dgdPSRAInfoRO_ItemDataBound(object sender, System.Web.UI.WebControls.DataGridItemEventArgs e)
        {
            switch (e.Item.ItemType)
            {
                case ListItemType.Header:
                    e.Item.Cells[5].Visible = false;
                    e.Item.Cells[6].Visible = false;
                    break;
                case ListItemType.AlternatingItem:
                case ListItemType.Item:
                    e.Item.Cells[5].Visible = false;
                    e.Item.Cells[6].Visible = false;
                    break;
            }
        }

        private void dgdGCASInfoRO_ItemDataBound1(object sender, System.Web.UI.WebControls.DataGridItemEventArgs e)
        {
            switch (e.Item.ItemType)
            {
                case ListItemType.Header:
                    e.Item.Cells[6].Visible = false;
                    break;
                case ListItemType.AlternatingItem:
                case ListItemType.Item:
                    e.Item.Cells[6].Visible = false;
                    break;
            }
        }

        private void btnExportPilotLine_Click(System.Object sender, System.Web.UI.ImageClickEventArgs e)
        {
            DataTable dt = new DataTable();
            dt = ExecuteDataSet("GET_EO_Export_To_Excel_ST_Data");
            if (dt == null | dt.Rows.Count == 0)
            {
                NoRecords();
                return;
            }
            //CreateExcel()
            CreateExcel("PPM - PCL Time.xls", dt, 3, "http://bdc-intra528.internal.pg.com/MUREO/Common/Templates/PPM - PCL Time.xls");
            //CreateExcel("PPM - PCL Time.xls", dt, 3, "http://" & Request.Url.Host() & "/MUREO/Common/Templates/PPM - PCL Time.xls")

            //CreateExcel("PPM - PCL Time.xls", dt, 3, "http://" & Request.Url.Host() & "/WebApplication1/MUR-Template/PPM - PCL Time.xls")
        }


        private void closeOutApprovalCheck()
        {
            string strFUNAPPName = null;
            string strBackUpAppName = null;
            DataSet ds = null;
            string strCloseOutAppStatus = null;
            DataSet dsMandatory = null;
            string strCoOrginator = "";
            string strOrginator = null;
            // To get CoOriginator,Originator info to check whether the logged in user in Budget Owner or Originator or Co Originator 6/12/07

            if (objEOBA.GETEOMandatory(Convert.ToInt32(ViewState["EOID"]), ref dsMandatory))
            {
                if ((dsMandatory != null))
                {
                    if (!(dsMandatory.Tables.Count == 0))
                    {
                        if (!(dsMandatory.Tables[0].Rows.Count == 0))
                        {
                            if ((!object.ReferenceEquals(dsMandatory.Tables[0].Rows[0]["CoOriginator"], System.DBNull.Value)))
                            {
                                strCoOrginator = dsMandatory.Tables[0].Rows[0]["CoOriginator"].ToString();
                            }
                            if ((!object.ReferenceEquals(dsMandatory.Tables[0].Rows[0]["Originator"], System.DBNull.Value)))
                            {
                                strOrginator = dsMandatory.Tables[0].Rows[0]["Originator"].ToString();
                            }
                        }
                    }
                }
            }

            if (objEOBA.GET_EO_Closeout(Convert.ToInt32(ViewState["EOID"]), ref ds))
            {

                if (!(ds.Tables[5].Rows.Count == 0))
                {
                    int intRowCount = 0;
                    for (intRowCount = 0; intRowCount <= ds.Tables[5].Rows.Count - 1; intRowCount++)
                    {
                        if (ds.Tables[5].Rows[intRowCount]["Function_Name"].ToString() == "Budget Center")
                        {
                            if ((!object.ReferenceEquals(ds.Tables[5].Rows[intRowCount]["Approver_Name"], System.DBNull.Value)))
                            {
                                strFUNAPPName = ds.Tables[5].Rows[intRowCount]["Approver_Name"].ToString();
                            }
                            else
                            {
                                strFUNAPPName = string.Empty;
                            }
                            if ((!object.ReferenceEquals(ds.Tables[5].Rows[intRowCount]["Backup_Approver_Name"], System.DBNull.Value)))
                            {
                                strBackUpAppName = ds.Tables[5].Rows[intRowCount]["Backup_Approver_Name"].ToString();
                            }
                            else
                            {
                                strBackUpAppName = string.Empty;
                            }

                            if (objEOBA.GET_EO_Is_Approved(Convert.ToInt32(ViewState["EOID"]), ds.Tables[5].Rows[intRowCount]["Function_Name"].ToString(), strFUNAPPName.ToString(), "Closeout", ref paramOut))
                                strCloseOutAppStatus = paramOut[0].Value.ToString();

                            //If UCase(strCoOrginator) = UCase(objSecurity.UserName.Trim) Or UCase(strOrginator) = UCase(objSecurity.UserName.Trim) Then
                            if ((strCoOrginator.ToUpper() == objSecurity.UserName.Trim().ToUpper()) | (strOrginator.ToUpper() == objSecurity.UserName.Trim().ToUpper()) | (ViewState["UserRole"].ToString().ToUpper() == "MUREO_Admin".ToUpper()))
                            {
                                if (!(strCloseOutAppStatus.ToUpper() == "Y"))
                                {
                                    lnkCOBOBackUp.Visible = true;
                                }
                                else
                                {
                                    lnkCOBOBackUp.Visible = false;
                                    lnkCOBOComments.Visible = false;
                                    lnkCloseBudgetApproved.Visible = false;
                                    lnkCloseBudgetDeclined.Visible = false;
                                }
                                //Exit For
                            }
                            if (strBackUpAppName.Trim().ToUpper() == objSecurity.UserName.Trim().ToUpper() | strFUNAPPName.Trim().ToUpper() == objSecurity.UserName.Trim().ToUpper())
                            {
                                if (!(strCloseOutAppStatus.ToUpper() == "Y"))
                                {
                                    lnkCloseBudgetApproved.Visible = true;
                                    lnkCloseBudgetDeclined.Visible = true;
                                    lnkCOBOComments.Visible = true;
                                    lnkCOBOBackUp.Visible = true;
                                }
                                else
                                {
                                    lnkCOBOBackUp.Visible = false;
                                    lnkCOBOComments.Visible = false;
                                    lnkCloseBudgetApproved.Visible = false;
                                    lnkCloseBudgetDeclined.Visible = false;
                                }
                                //Exit For
                            }
                        }
                    }
                    for (intRowCount = 0; intRowCount <= ds.Tables[5].Rows.Count - 1; intRowCount++)
                    {
                        //If strCloseOutAppStatus = "Y" Then
                        if (ds.Tables[5].Rows[intRowCount]["Function_Name"].ToString() == "Site Finance")
                        {
                            if ((!object.ReferenceEquals(ds.Tables[5].Rows[intRowCount]["Approver_Name"], System.DBNull.Value)))
                            {
                                strFUNAPPName = ds.Tables[5].Rows[intRowCount]["Approver_Name"].ToString();
                            }
                            else
                            {
                                strFUNAPPName = string.Empty;
                            }
                            if ((!object.ReferenceEquals(ds.Tables[5].Rows[intRowCount]["Backup_Approver_Name"], System.DBNull.Value)))
                            {
                                strBackUpAppName = ds.Tables[5].Rows[intRowCount]["Backup_Approver_Name"].ToString();
                            }
                            else
                            {
                                strBackUpAppName = string.Empty;
                            }

                            //strCloseOutAppStatus = objclsEO.GET_EO_Is_Approved(Convert.ToInt32(ViewState["EOID"]), ds.Tables[5].Rows[intRowCount]["Function_Name"], objSecurity.UserName, "Closeout");
                            if (objEOBA.GET_EO_Is_Approved(Convert.ToInt32(ViewState["EOID"]), ds.Tables[5].Rows[intRowCount]["Function_Name"].ToString(), objSecurity.UserName, "Closeout", ref paramOut))
                                strCloseOutAppStatus = paramOut[0].Value.ToString();
                            if ((strCoOrginator.ToUpper() == objSecurity.UserName.Trim().ToUpper()) | (strOrginator.ToUpper() == objSecurity.UserName.Trim().ToUpper()) | (ViewState["UserRole"].ToString().ToUpper() == "MUREO_Admin".ToUpper()))
                            {
                                if (!(strCloseOutAppStatus.ToUpper() == "Y"))
                                {
                                    lnkCOSiteFinaBackUp.Visible = true;
                                }
                                else
                                {
                                    lnkCOSiteFinaBackUp.Visible = false;
                                    lnkCOSiteFinanceComments.Visible = false;
                                    lnkCloseSiteFinanceApproved.Visible = false;
                                    lnkCloseSiteFinanceDeclined.Visible = false;
                                }
                                //Exit For
                            }
                            if (strBackUpAppName.Trim().ToUpper() == objSecurity.UserName.Trim().ToUpper() | strFUNAPPName.Trim().ToUpper() == objSecurity.UserName.Trim().ToUpper())
                            {
                                if (!(strCloseOutAppStatus.ToUpper() == "Y"))
                                {
                                    lnkCloseSiteFinanceApproved.Visible = true;
                                    lnkCloseSiteFinanceDeclined.Visible = true;
                                    lnkCOSiteFinanceComments.Visible = true;
                                    lnkCOSiteFinaBackUp.Visible = true;
                                }
                                else
                                {
                                    lnkCOSiteFinaBackUp.Visible = false;
                                    lnkCOSiteFinanceComments.Visible = false;
                                    lnkCloseSiteFinanceApproved.Visible = false;
                                    lnkCloseSiteFinanceDeclined.Visible = false;
                                }
                            }
                        }
                        //End If
                    }
                }


                //-------------------------------------------
                if (!(ds.Tables[5].Rows.Count == 0))
                {
                    int intRowCount = 0;
                    for (intRowCount = 0; intRowCount <= ds.Tables[5].Rows.Count - 1; intRowCount++)
                    {
                        if (ds.Tables[5].Rows[intRowCount]["Function_Name"].ToString() == "Budget Center")
                        {

                            //strCloseOutAppStatus = objclsEO.GET_EO_Is_Approved(Convert.ToInt32(ViewState["EOID"]), ds.Tables[5].Rows[intRowCount]["Function_Name"], strFUNAPPName, "Closeout");
                            if (objEOBA.GET_EO_Is_Approved(Convert.ToInt32(ViewState["EOID"]), ds.Tables[5].Rows[intRowCount]["Function_Name"].ToString(), strFUNAPPName, "Closeout", ref paramOut))
                                strCloseOutAppStatus = paramOut[0].Value.ToString();
                            if ((strCoOrginator.ToUpper() == objSecurity.UserName.Trim().ToUpper()) | (strOrginator.ToUpper() == objSecurity.UserName.Trim().ToUpper()) | (ViewState["UserRole"].ToString().ToUpper() == "MUREO_Admin".ToUpper()))
                            {
                                if (!(strCloseOutAppStatus.ToUpper() == "Y"))
                                {
                                    lnkCOBOBackUp.Visible = true;
                                }
                            }

                        }
                        if (ds.Tables[5].Rows[intRowCount]["Function_Name"].ToString() == "Site Finance")
                        {

                            //strCloseOutAppStatus = objclsEO.GET_EO_Is_Approved(Convert.ToInt32(ViewState["EOID"]), ds.Tables[5].Rows[intRowCount]["Function_Name"], objSecurity.UserName, "Closeout");
                            if (objEOBA.GET_EO_Is_Approved(Convert.ToInt32(ViewState["EOID"]), ds.Tables[5].Rows[intRowCount]["Function_Name"].ToString(), objSecurity.UserName.ToString(), "Closeout", ref paramOut))
                                strCloseOutAppStatus = paramOut[0].Value.ToString();
                            if ((strCoOrginator.ToUpper() == objSecurity.UserName.Trim().ToUpper()) | (strOrginator.ToUpper() == objSecurity.UserName.Trim().ToUpper()) | (ViewState["UserRole"].ToString().ToUpper() == "MUREO_Admin".ToUpper()))
                            {
                                if (!(strCloseOutAppStatus.ToUpper() == "Y"))
                                {
                                    lnkCOSiteFinaBackUp.Visible = true;
                                }
                            }
                        }
                    }
                }
            }
        }

        public void Mandatory_AllTabs_lock()
        {
            btnTabFinal.ImageUrl = "../Images/final-nor.gif";
            btnTabPreliminary.ImageUrl = "../Images/preliminary-nor.gif";
            btnTabCloseOut.ImageUrl = "../Images/close-out-over.gif";
            tblTop.Visible = false;
            tblTopReadonly.Visible = true;
            FirstSectionPreliminary.Visible = false;
            TrGeneralPreliminaryRO.Visible = false;
            NewMaterialandBrands.Visible = false;
            NewMaterialandBrandsReadOnly.Visible = false;
            HSandSE.Visible = false;
            HSandSEReadOnly.Visible = false;
            PSandRA.Visible = false;
            PSandRAReadOnly.Visible = false;
            PlanningandBudgetInfo.Visible = false;
            PlanningandBudgetInfoReadOnly.Visible = false;
            ProductionandPackaging.Visible = false;
            ProductionandPackagingReadOnly.Visible = false;
            PackagingandDispositionPreliminary.Visible = false;
            PackagingandDispositionPreliminaryReadOnly.Visible = false;
            PreliminaryApprovals.Visible = false;
            PreliminaryApprovalsReadOnly.Visible = false;

            FinalPackagingandDisposition.Visible = false;
            FinalPackagingandDispositionReadOnly.Visible = false;
            FinalCostSheet.Visible = false;
            FinalCostSheetReadOnly.Visible = false;
            TrFinalQA.Visible = false;
            TrFinalQARO.Visible = false;
            FinalFormulaCardInformation.Visible = false;
            FinalFormulaCardInformationReadOnly.Visible = false;
            FinalTestPlans.Visible = false;
            FinalTestPlansReadOnly.Visible = false;
            LabSamplingPlans.Visible = false;
            LabSamplingPlansReadOnly.Visible = false;
            FinalProductTestFlowMatrix.Visible = false;
            FinalProductTestFlowMatrixReadonly.Visible = false;
            FinalOtherSupportingDoc.Visible = false;
            FinalOtherSupportingDocReadonly.Visible = false;
            FinalApprovals.Visible = false;
            FinalApprovalsReadOnly.Visible = false;

            //For PCRs
            trFinalMaterialsBrandsRadioBefore.Visible = false;
            trFinalMaterialsBrands.Visible = false;
            trFinalMaterialsBrandsRadioAfter.Visible = false;
            trFinalPSRA.Visible = false;
            trFinalMaterialsBrandshead.Visible = false;
            trFinalPSRAhead.Visible = false;

            NewMaterialandBrandsReadOnlyFinal.Visible = false;
            trProdRegulatedProductRAQ2Final.Visible = false;
            PSandRAReadOnlyFinal.Visible = false;

            CloseFirstSection.Visible = false;
            CloseActualCostSheet.Visible = false;
            CloseInitialLearningReport.Visible = false;
            CloseTestPlansUsed.Visible = false;
            CloseOutReport.Visible = false;
            CloseApprovals.Visible = false;
            CloseRevision.Visible = false;

            CloseFirstSectionReadonly.Visible = true;
            CloseActualCostSheetReadonly.Visible = true;
            CloseInitialLearningReportReadOnly.Visible = true;
            CloseTestPlansUsedReadonly.Visible = true;
            CloseoutReportRO.Visible = true;
            CloseApprovalsReadonly.Visible = true;
            ViewState["Mandatory_AllTabs_lock"] = "Lock";
        }

        private void drpCloseApprovalGroup_SelectedIndexChanged(System.Object sender, System.EventArgs e)
        {
            DataSet ds = new DataSet();
            if (drpCloseApprovalGroup.SelectedItem.Value == "--Select Approver Group--")
            {
                //ds = objClsEO.GET_EO_Approval_Groups_Details(0);
                if (objEOBA.GET_EO_Approval_Groups_Details(0, ref ds))
                { }
                txtCloseSiteFinance.Text = "";

                return;
            }
            else
            {
                //ds = objClsEO.GET_EO_Approval_Groups_Details(drpCloseApprovalGroup.SelectedItem.Value);
                if (objEOBA.GET_EO_Approval_Groups_Details(Convert.ToInt32(drpCloseApprovalGroup.SelectedItem.Value), ref ds))
                { }
                txtCloseSiteFinance.Text = "";

            }
            //ds = objClsEO.GET_EO_Approval_Groups_Details(72)
            int intGrp = 0;
            for (intGrp = 0; intGrp <= ds.Tables[0].Rows.Count - 1; intGrp++)
            {
                if (ds.Tables[0].Rows[intGrp][2].ToString() == "Site Finance")
                {
                    txtCloseSiteFinance.Text = ds.Tables[0].Rows[intGrp][3].ToString();
                }
                else if (ds.Tables[0].Rows[intGrp][2].ToString() == "Budget Center")
                {
                    //txtCloseBudgetOwner.Text = ds.Tables[0).Rows(intGrp).Item(3).ToString
                }
            }
        }

        private void CleartxtBoxForPreRoute()
        {
            t11.Text = "";
        }

        private void lockforapproverscloseouttabclick()
        {
            if ((ViewState["stage"] != null))
            {
                string strOriginatorcheck = null;
                string strCooriginatorcheck = null;
                DataSet ds = null;

                if (objEOBA.GETEOMandatory(Convert.ToInt32(ViewState["EOID"]), ref ds))
                {
                    if (ds.Tables[0].Rows[0]["Originator"] != System.DBNull.Value)
                    {
                        strOriginatorcheck = ds.Tables[0].Rows[0]["Originator"].ToString();
                    }
                    else
                    {
                        strOriginatorcheck = string.Empty;
                    }
                    if (ds.Tables[0].Rows[0]["CoOriginator"] != System.DBNull.Value)
                    {
                        strCooriginatorcheck = ds.Tables[0].Rows[0]["CoOriginator"].ToString();
                    }
                    else
                    {
                        strCooriginatorcheck = string.Empty;
                    }
                }
                if ((ViewState["stage"].ToString().ToUpper() == "Preliminary".ToUpper() && ViewState["Status"].ToString().ToUpper() == "Routed".ToUpper()))
                {
                    if (strOriginatorcheck.ToUpper() == objSecurity.UserName.Trim().ToUpper())
                    {
                        CloseActualCostSheet.Visible = true;
                        CloseInitialLearningReport.Visible = true;
                        CloseTestPlansUsed.Visible = true;
                        CloseOutReport.Visible = true;
                        CloseApprovals.Visible = true;
                        CloseRevision.Visible = true;
                        CloseFirstSectionReadonly.Visible = false;
                        CloseActualCostSheetReadonly.Visible = false;
                        CloseInitialLearningReportReadOnly.Visible = false;
                        CloseTestPlansUsedReadonly.Visible = false;
                        CloseoutReportRO.Visible = false;
                        CloseApprovalsReadonly.Visible = false;
                    }
                    else if (strCooriginatorcheck.ToUpper() == objSecurity.UserName.Trim().ToUpper())
                    {
                        CloseActualCostSheet.Visible = true;
                        CloseInitialLearningReport.Visible = true;
                        CloseTestPlansUsed.Visible = true;
                        CloseOutReport.Visible = true;
                        CloseApprovals.Visible = true;
                        CloseRevision.Visible = true;
                        CloseFirstSectionReadonly.Visible = false;
                        CloseActualCostSheetReadonly.Visible = false;
                        CloseInitialLearningReportReadOnly.Visible = false;
                        CloseTestPlansUsedReadonly.Visible = false;
                        CloseoutReportRO.Visible = false;
                        CloseApprovalsReadonly.Visible = false;
                    }
                    else
                    {
                        GET_EO_Final_Lock();
                        Mandatory_final_lock();
                        FirstSectionPreliminary.Visible = false;
                        TrGeneralPreliminaryRO.Visible = false;
                        NewMaterialandBrands.Visible = false;
                        NewMaterialandBrandsReadOnly.Visible = false;
                        HSandSE.Visible = false;
                        HSandSEReadOnly.Visible = false;
                        PSandRA.Visible = false;
                        PSandRAReadOnly.Visible = false;
                        PlanningandBudgetInfo.Visible = false;
                        PlanningandBudgetInfoReadOnly.Visible = false;
                        ProductionandPackaging.Visible = false;
                        ProductionandPackagingReadOnly.Visible = false;
                        PackagingandDispositionPreliminary.Visible = false;
                        PackagingandDispositionPreliminaryReadOnly.Visible = false;
                        PreliminaryApprovals.Visible = false;
                        PreliminaryApprovalsReadOnly.Visible = false;
                        PreliminaryRevision.Visible = false;
                        FinalPackagingandDisposition.Visible = false;
                        FinalPackagingandDispositionReadOnly.Visible = false;
                        FinalCostSheet.Visible = false;
                        FinalCostSheetReadOnly.Visible = false;
                        TrFinalQA.Visible = false;
                        TrFinalQARO.Visible = false;
                        FinalFormulaCardInformation.Visible = false;
                        FinalFormulaCardInformationReadOnly.Visible = false;
                        FinalTestPlans.Visible = false;
                        FinalTestPlansReadOnly.Visible = false;
                        LabSamplingPlans.Visible = false;
                        LabSamplingPlansReadOnly.Visible = false;
                        FinalProductTestFlowMatrix.Visible = false;
                        FinalProductTestFlowMatrixReadonly.Visible = false;
                        FinalOtherSupportingDoc.Visible = false;
                        FinalOtherSupportingDocReadonly.Visible = false;
                        FinalApprovals.Visible = false;
                        FinalApprovalsReadOnly.Visible = false;
                        //For PCRs
                        trFinalMaterialsBrandsRadioBefore.Visible = false;
                        trFinalMaterialsBrands.Visible = false;
                        trFinalMaterialsBrandsRadioAfter.Visible = false;
                        trFinalPSRA.Visible = false;
                        trFinalMaterialsBrandshead.Visible = false;
                        trFinalPSRAhead.Visible = false;
                        NewMaterialandBrandsReadOnlyFinal.Visible = false;
                        trProdRegulatedProductRAQ2Final.Visible = false;
                        PSandRAReadOnlyFinal.Visible = false;
                        CloseFirstSection.Visible = false;
                        CloseActualCostSheet.Visible = false;
                        CloseInitialLearningReport.Visible = false;
                        CloseTestPlansUsed.Visible = false;
                        CloseOutReport.Visible = false;
                        CloseApprovals.Visible = false;
                        CloseRevision.Visible = false;
                        CloseFirstSectionReadonly.Visible = true;
                        CloseActualCostSheetReadonly.Visible = true;
                        CloseInitialLearningReportReadOnly.Visible = true;
                        CloseTestPlansUsedReadonly.Visible = true;
                        CloseoutReportRO.Visible = true;
                        CloseApprovalsReadonly.Visible = true;
                        imgSaveResume.Visible = false;
                        btnSave.Visible = false;
                        btnSaveandExit.Visible = false;
                    }
                }


                if ((ViewState["stage"].ToString().ToUpper() == "Final" && ViewState["Status"].ToString().ToUpper() == "Routed".ToUpper()))
                {
                    if (strOriginatorcheck.ToUpper() == objSecurity.UserName.Trim().ToUpper())
                    {
                        CloseActualCostSheet.Visible = true;
                        CloseInitialLearningReport.Visible = true;
                        CloseTestPlansUsed.Visible = true;
                        CloseOutReport.Visible = true;
                        CloseApprovals.Visible = true;
                        CloseRevision.Visible = true;
                        CloseFirstSectionReadonly.Visible = false;
                        CloseActualCostSheetReadonly.Visible = false;
                        CloseInitialLearningReportReadOnly.Visible = false;
                        CloseTestPlansUsedReadonly.Visible = false;
                        CloseoutReportRO.Visible = false;
                        CloseApprovalsReadonly.Visible = false;
                    }
                    else if (strCooriginatorcheck.ToUpper() == objSecurity.UserName.Trim().ToUpper())
                    {
                        CloseActualCostSheet.Visible = true;
                        CloseInitialLearningReport.Visible = true;
                        CloseTestPlansUsed.Visible = true;
                        CloseOutReport.Visible = true;
                        CloseApprovals.Visible = true;
                        CloseRevision.Visible = true;
                        CloseFirstSectionReadonly.Visible = false;
                        CloseActualCostSheetReadonly.Visible = false;
                        CloseInitialLearningReportReadOnly.Visible = false;
                        CloseTestPlansUsedReadonly.Visible = false;
                        CloseoutReportRO.Visible = false;
                        CloseApprovalsReadonly.Visible = false;

                    }
                    else
                    {
                        GET_EO_Final_Lock();
                        Mandatory_final_lock();
                        FirstSectionPreliminary.Visible = false;
                        TrGeneralPreliminaryRO.Visible = false;
                        NewMaterialandBrands.Visible = false;
                        NewMaterialandBrandsReadOnly.Visible = false;
                        HSandSE.Visible = false;
                        HSandSEReadOnly.Visible = false;
                        PSandRA.Visible = false;
                        PSandRAReadOnly.Visible = false;
                        PlanningandBudgetInfo.Visible = false;
                        PlanningandBudgetInfoReadOnly.Visible = false;
                        ProductionandPackaging.Visible = false;
                        ProductionandPackagingReadOnly.Visible = false;
                        PackagingandDispositionPreliminary.Visible = false;
                        PackagingandDispositionPreliminaryReadOnly.Visible = false;
                        PreliminaryApprovals.Visible = false;
                        PreliminaryApprovalsReadOnly.Visible = false;
                        PreliminaryRevision.Visible = false;
                        FinalPackagingandDisposition.Visible = false;
                        FinalPackagingandDispositionReadOnly.Visible = false;
                        FinalCostSheet.Visible = false;
                        FinalCostSheetReadOnly.Visible = false;
                        TrFinalQA.Visible = false;
                        TrFinalQARO.Visible = false;
                        FinalFormulaCardInformation.Visible = false;
                        FinalFormulaCardInformationReadOnly.Visible = false;
                        FinalTestPlans.Visible = false;
                        FinalTestPlansReadOnly.Visible = false;
                        LabSamplingPlans.Visible = false;
                        LabSamplingPlansReadOnly.Visible = false;
                        FinalProductTestFlowMatrix.Visible = false;
                        FinalProductTestFlowMatrixReadonly.Visible = false;
                        FinalOtherSupportingDoc.Visible = false;
                        FinalOtherSupportingDocReadonly.Visible = false;
                        FinalApprovals.Visible = false;
                        FinalApprovalsReadOnly.Visible = false;

                        //For PCRs
                        trFinalMaterialsBrandsRadioBefore.Visible = false;
                        trFinalMaterialsBrands.Visible = false;
                        trFinalMaterialsBrandsRadioAfter.Visible = false;
                        trFinalPSRA.Visible = false;
                        trFinalMaterialsBrandshead.Visible = false;
                        trFinalPSRAhead.Visible = false;

                        NewMaterialandBrandsReadOnlyFinal.Visible = false;
                        trProdRegulatedProductRAQ2Final.Visible = false;
                        PSandRAReadOnlyFinal.Visible = false;

                        CloseFirstSection.Visible = false;
                        CloseActualCostSheet.Visible = false;
                        CloseInitialLearningReport.Visible = false;
                        CloseTestPlansUsed.Visible = false;
                        CloseOutReport.Visible = false;
                        CloseApprovals.Visible = false;
                        CloseRevision.Visible = false;
                        CloseFirstSectionReadonly.Visible = true;
                        CloseActualCostSheetReadonly.Visible = true;
                        CloseInitialLearningReportReadOnly.Visible = true;
                        CloseTestPlansUsedReadonly.Visible = true;
                        CloseoutReportRO.Visible = true;
                        CloseApprovalsReadonly.Visible = true;
                        imgSaveResume.Visible = false;
                        btnSave.Visible = false;
                        btnSaveandExit.Visible = false;
                    }
                }

                if ((ViewState["stage"].ToString().ToUpper() == "CloseOut".ToUpper() && ViewState["Status"].ToString().ToUpper() == "Routed".ToUpper()))
                {
                    if (strOriginatorcheck.ToUpper() == objSecurity.UserName.Trim().ToUpper())
                    {
                        CloseActualCostSheet.Visible = true;
                        CloseInitialLearningReport.Visible = true;
                        CloseTestPlansUsed.Visible = true;
                        CloseOutReport.Visible = true;
                        CloseApprovals.Visible = true;
                        CloseRevision.Visible = true;
                        CloseFirstSectionReadonly.Visible = false;
                        CloseActualCostSheetReadonly.Visible = false;
                        CloseInitialLearningReportReadOnly.Visible = false;
                        CloseTestPlansUsedReadonly.Visible = false;
                        CloseoutReportRO.Visible = false;
                        CloseApprovalsReadonly.Visible = false;


                    }
                    else if (strCooriginatorcheck.ToUpper() == objSecurity.UserName.Trim().ToUpper())
                    {
                        CloseActualCostSheet.Visible = true;
                        CloseInitialLearningReport.Visible = true;
                        CloseTestPlansUsed.Visible = true;
                        CloseOutReport.Visible = true;
                        CloseApprovals.Visible = true;
                        CloseRevision.Visible = true;

                        CloseFirstSectionReadonly.Visible = false;
                        CloseActualCostSheetReadonly.Visible = false;
                        CloseInitialLearningReportReadOnly.Visible = false;
                        CloseTestPlansUsedReadonly.Visible = false;
                        CloseoutReportRO.Visible = false;
                        CloseApprovalsReadonly.Visible = false;



                    }
                    else
                    {
                        FirstSectionPreliminary.Visible = false;
                        TrGeneralPreliminaryRO.Visible = false;
                        NewMaterialandBrands.Visible = false;
                        NewMaterialandBrandsReadOnly.Visible = false;
                        HSandSE.Visible = false;
                        HSandSEReadOnly.Visible = false;
                        PSandRA.Visible = false;
                        PSandRAReadOnly.Visible = false;
                        PlanningandBudgetInfo.Visible = false;
                        PlanningandBudgetInfoReadOnly.Visible = false;
                        ProductionandPackaging.Visible = false;
                        ProductionandPackagingReadOnly.Visible = false;
                        PackagingandDispositionPreliminary.Visible = false;
                        PackagingandDispositionPreliminaryReadOnly.Visible = false;
                        PreliminaryApprovals.Visible = false;
                        PreliminaryApprovalsReadOnly.Visible = false;
                        PreliminaryRevision.Visible = false;

                        FinalPackagingandDisposition.Visible = false;
                        FinalPackagingandDispositionReadOnly.Visible = false;
                        FinalCostSheet.Visible = false;
                        FinalCostSheetReadOnly.Visible = false;
                        TrFinalQA.Visible = false;
                        TrFinalQARO.Visible = false;
                        FinalFormulaCardInformation.Visible = false;
                        FinalFormulaCardInformationReadOnly.Visible = false;
                        FinalTestPlans.Visible = false;
                        FinalTestPlansReadOnly.Visible = false;
                        LabSamplingPlans.Visible = false;
                        LabSamplingPlansReadOnly.Visible = false;
                        FinalProductTestFlowMatrix.Visible = false;
                        FinalProductTestFlowMatrixReadonly.Visible = false;
                        FinalOtherSupportingDoc.Visible = false;
                        FinalOtherSupportingDocReadonly.Visible = false;
                        FinalApprovals.Visible = false;
                        FinalApprovalsReadOnly.Visible = false;

                        //For PCRs
                        trFinalMaterialsBrandsRadioBefore.Visible = false;
                        trFinalMaterialsBrands.Visible = false;
                        trFinalMaterialsBrandsRadioAfter.Visible = false;
                        trFinalPSRA.Visible = false;
                        trFinalMaterialsBrandshead.Visible = false;
                        trFinalPSRAhead.Visible = false;

                        CloseActualCostSheet.Visible = false;
                        CloseInitialLearningReport.Visible = false;
                        CloseTestPlansUsed.Visible = false;
                        CloseOutReport.Visible = false;
                        CloseApprovals.Visible = false;
                        CloseRevision.Visible = false;

                        CloseFirstSectionReadonly.Visible = true;
                        CloseActualCostSheetReadonly.Visible = true;
                        CloseInitialLearningReportReadOnly.Visible = true;
                        CloseTestPlansUsedReadonly.Visible = true;
                        CloseoutReportRO.Visible = true;
                        CloseApprovalsReadonly.Visible = true;
                        imgSaveResume.Visible = false;
                        btnSave.Visible = false;
                        btnSaveandExit.Visible = false;

                    }

                }

            }
            lblStageLevel.Text = ViewState["stage"].ToString();
            lblStatusType.Text = ViewState["Status"].ToString();

        }

        public void lockforapproversfinaltabclick()
        {
            if ((ViewState["stage"] != null))
            {
                DataSet ds = new DataSet();
                string strOriginatorcheck = null;
                string strCooriginatorcheck = null;
                if (objEOBA.GETEOMandatory(Convert.ToInt32(ViewState["EOID"]), ref ds))
                {

                    if (ds.Tables[0].Rows[0]["Originator"] != System.DBNull.Value)
                    {
                        strOriginatorcheck = ds.Tables[0].Rows[0]["Originator"].ToString();
                    }
                    else
                    {
                        strOriginatorcheck = string.Empty;
                    }
                    if (ds.Tables[0].Rows[0]["CoOriginator"] != System.DBNull.Value)
                    {
                        strCooriginatorcheck = ds.Tables[0].Rows[0]["CoOriginator"].ToString();
                    }
                    else
                    {
                        strCooriginatorcheck = string.Empty;
                    }
                }
                if ((ViewState["stage"].ToString().ToUpper() == "Preliminary".ToUpper() && ViewState["Status"].ToString().ToUpper() == "Routed".ToUpper()))
                {
                    if (strOriginatorcheck.ToUpper() == objSecurity.UserName.Trim().ToUpper())
                    {
                    }
                    else if (strCooriginatorcheck.ToUpper() == objSecurity.UserName.Trim().ToUpper())
                    {
                    }
                    else
                    {
                        GET_EO_Final_Lock();
                        Mandatory_final_lock();
                        CloseActualCostSheet.Visible = false;
                        CloseInitialLearningReport.Visible = false;
                        CloseTestPlansUsed.Visible = false;
                        CloseOutReport.Visible = false;
                        CloseApprovals.Visible = false;
                        CloseRevision.Visible = false;
                        CloseFirstSectionReadonly.Visible = false;
                        CloseActualCostSheetReadonly.Visible = false;
                        CloseInitialLearningReportReadOnly.Visible = false;
                        CloseTestPlansUsedReadonly.Visible = false;
                        CloseoutReportRO.Visible = false;
                        CloseApprovalsReadonly.Visible = false;
                        NewMaterialandBrandsReadOnlyFinal.Visible = false;
                        trProdRegulatedProductRAQ2Final.Visible = false;
                        PSandRAReadOnlyFinal.Visible = false;
                        CloseFirstSection.Visible = false;
                        CloseActualCostSheet.Visible = false;
                        CloseInitialLearningReport.Visible = false;
                        CloseTestPlansUsed.Visible = false;
                        CloseOutReport.Visible = false;
                        CloseApprovals.Visible = false;
                        CloseRevision.Visible = false;
                        CloseFirstSectionReadonly.Visible = false;
                        CloseActualCostSheetReadonly.Visible = false;
                        CloseInitialLearningReportReadOnly.Visible = false;
                        CloseTestPlansUsedReadonly.Visible = false;
                        CloseoutReportRO.Visible = false;
                        CloseApprovalsReadonly.Visible = false;
                        imgSaveResume.Visible = false;
                        btnSave.Visible = false;
                        btnSaveandExit.Visible = false;
                    }
                }

                if ((ViewState["stage"].ToString().ToUpper() == "Final".ToUpper() && ViewState["Status"].ToString().ToUpper() == "Routed".ToUpper()))
                {
                    if (strOriginatorcheck.ToUpper() == objSecurity.UserName.Trim().ToUpper())
                    {
                    }
                    else if (strCooriginatorcheck.ToUpper() == objSecurity.UserName.Trim().ToUpper())
                    {
                    }
                    else
                    {
                        GET_EO_Preliminary_Lock();
                        Mandatory_Pre_lock();
                        GET_EO_Final_Lock();
                        Mandatory_final_lock();
                        FirstSectionPreliminary.Visible = false;
                        TrGeneralPreliminaryRO.Visible = false;
                        NewMaterialandBrands.Visible = false;
                        NewMaterialandBrandsReadOnly.Visible = false;
                        HSandSE.Visible = false;
                        HSandSEReadOnly.Visible = false;
                        PSandRA.Visible = false;
                        PSandRAReadOnly.Visible = false;
                        PlanningandBudgetInfo.Visible = false;
                        PlanningandBudgetInfoReadOnly.Visible = false;
                        ProductionandPackaging.Visible = false;
                        ProductionandPackagingReadOnly.Visible = false;
                        PackagingandDispositionPreliminary.Visible = false;
                        PackagingandDispositionPreliminaryReadOnly.Visible = false;
                        PreliminaryApprovals.Visible = false;
                        PreliminaryApprovalsReadOnly.Visible = false;
                        PreliminaryRevision.Visible = false;
                        FinalPackagingandDisposition.Visible = false;
                        FinalPackagingandDispositionReadOnly.Visible = true;
                        FinalCostSheet.Visible = false;
                        FinalCostSheetReadOnly.Visible = true;
                        TrFinalQA.Visible = false;
                        TrFinalQARO.Visible = true;
                        FinalFormulaCardInformation.Visible = false;
                        FinalFormulaCardInformationReadOnly.Visible = true;
                        FinalTestPlans.Visible = false;
                        FinalTestPlansReadOnly.Visible = true;
                        LabSamplingPlans.Visible = false;
                        LabSamplingPlansReadOnly.Visible = true;
                        FinalProductTestFlowMatrix.Visible = false;
                        FinalProductTestFlowMatrixReadonly.Visible = true;
                        FinalOtherSupportingDoc.Visible = false;
                        FinalOtherSupportingDocReadonly.Visible = true;
                        FinalApprovals.Visible = false;
                        FinalApprovalsReadOnly.Visible = true;
                        CloseActualCostSheet.Visible = false;
                        CloseInitialLearningReport.Visible = false;
                        CloseTestPlansUsed.Visible = false;
                        CloseOutReport.Visible = false;
                        CloseApprovals.Visible = false;
                        CloseRevision.Visible = false;
                        CloseFirstSectionReadonly.Visible = false;
                        CloseActualCostSheetReadonly.Visible = false;
                        CloseInitialLearningReportReadOnly.Visible = false;
                        CloseTestPlansUsedReadonly.Visible = false;
                        CloseoutReportRO.Visible = false;
                        CloseApprovalsReadonly.Visible = false;
                        btnTabFinal.ImageUrl = "../Images/final-over.gif";
                        btnTabPreliminary.ImageUrl = "../Images/preliminary-nor.gif";
                        btnTabCloseOut.ImageUrl = "../Images/close-out-nor.gif";
                        imgSaveResume.Visible = false;
                        btnSave.Visible = false;
                        btnSaveandExit.Visible = false;
                    }
                }

                if (ViewState["stage"].ToString().ToUpper() == "CloseOut".ToUpper() && ViewState["Status"].ToString() == "Routed".ToUpper())
                {
                    if (strOriginatorcheck.ToUpper() == objSecurity.UserName.Trim().ToUpper())
                    {
                    }
                    else if (strCooriginatorcheck.ToUpper() == objSecurity.UserName.Trim().ToUpper())
                    {

                    }
                    else
                    {
                        Mandatory_AllTabs_lock();
                        FirstSectionPreliminary.Visible = false;
                        TrGeneralPreliminaryRO.Visible = false;
                        NewMaterialandBrands.Visible = false;
                        NewMaterialandBrandsReadOnly.Visible = false;
                        HSandSE.Visible = false;
                        HSandSEReadOnly.Visible = false;
                        PSandRA.Visible = false;
                        PSandRAReadOnly.Visible = false;
                        PlanningandBudgetInfo.Visible = false;
                        PlanningandBudgetInfoReadOnly.Visible = false;
                        ProductionandPackaging.Visible = false;
                        ProductionandPackagingReadOnly.Visible = false;
                        PackagingandDispositionPreliminary.Visible = false;
                        PackagingandDispositionPreliminaryReadOnly.Visible = false;
                        PreliminaryApprovals.Visible = false;
                        PreliminaryApprovalsReadOnly.Visible = false;
                        PreliminaryRevision.Visible = false;
                        FinalPackagingandDisposition.Visible = false;
                        FinalPackagingandDispositionReadOnly.Visible = false;
                        FinalCostSheet.Visible = false;
                        FinalCostSheetReadOnly.Visible = false;
                        TrFinalQA.Visible = false;
                        TrFinalQARO.Visible = false;
                        FinalFormulaCardInformation.Visible = false;
                        FinalFormulaCardInformationReadOnly.Visible = false;
                        FinalTestPlans.Visible = false;
                        FinalTestPlansReadOnly.Visible = false;
                        LabSamplingPlans.Visible = false;
                        LabSamplingPlansReadOnly.Visible = false;
                        FinalProductTestFlowMatrix.Visible = false;
                        FinalProductTestFlowMatrixReadonly.Visible = false;
                        FinalOtherSupportingDoc.Visible = false;
                        FinalOtherSupportingDocReadonly.Visible = false;
                        FinalApprovals.Visible = false;
                        FinalApprovalsReadOnly.Visible = false;
                        //For PCRs
                        trFinalMaterialsBrandsRadioBefore.Visible = false;
                        trFinalMaterialsBrands.Visible = false;
                        trFinalMaterialsBrandsRadioAfter.Visible = false;
                        trFinalPSRA.Visible = false;
                        trFinalMaterialsBrandshead.Visible = false;
                        trFinalPSRAhead.Visible = false;
                        CloseActualCostSheet.Visible = false;
                        CloseInitialLearningReport.Visible = false;
                        CloseTestPlansUsed.Visible = false;
                        CloseOutReport.Visible = false;
                        CloseApprovals.Visible = false;
                        CloseRevision.Visible = false;
                        CloseFirstSectionReadonly.Visible = true;
                        CloseActualCostSheetReadonly.Visible = true;
                        CloseInitialLearningReportReadOnly.Visible = true;
                        CloseTestPlansUsedReadonly.Visible = true;
                        CloseoutReportRO.Visible = true;
                        CloseApprovalsReadonly.Visible = true;
                        imgSaveResume.Visible = false;
                        btnSave.Visible = false;
                        btnSaveandExit.Visible = false;
                    }
                }
            }
            if (ViewState["stage"] != null)
                lblStageLevel.Text = ViewState["stage"].ToString();
            if (ViewState["Status"] != null)
                lblStatusType.Text = ViewState["Status"].ToString();
        }

        private void fillSelectedPlantDetails1()
        {
            try
            {
                DataSet ds = new DataSet();
                int intPalntID = 0;
                if (drpPlant.SelectedItem.Text == "--Select a Plant--")
                    intPalntID = 0;
                else
                    intPalntID = Convert.ToInt32(drpPlant.SelectedItem.Value);


                if (objEOBA.GET_EO_Approval_Groups_By_Plant_Brand_EOMode(intPalntID, lblBrandIDList.Text, Convert.ToChar(rbEOType.SelectedItem.Value), ref ds))
                {
                    if ((ds != null))
                    {
                        if (!(ds.Tables.Count == 0))
                        {
                            if (!(ds.Tables[1].Rows.Count == 0))
                            {
                                drpBudgetCenterDB.Items.Clear();
                                drpBudgetCenterDB.DataSource = ds.Tables[1];
                                drpBudgetCenterDB.DataBind();
                                drpBudgetCenterDB.Items.Insert(0, "--Select a Budget Center--");
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
            }
        }

        private void rbEOType_SelectedIndexChanged(System.Object sender, System.EventArgs e)
        {
            DataSet ds = new DataSet();
            int intPalntID = 0;
            if (drpPlant.SelectedItem.Text == "--Select a Plant--")
                intPalntID = 0;
            else
                intPalntID = Convert.ToInt32(drpPlant.SelectedItem.Value);


            if (objEOBA.GET_EO_Approval_Groups_By_Plant_Brand_EOMode(intPalntID, lblBrandIDList.Text, Convert.ToChar(rbEOType.SelectedItem.Value), ref ds))
            {

                //added on 07-Feb-2011
                if (drpBudgetCenterDB.SelectedItem.Text == "--Select a Budget Center--")
                {
                    drpBudgetCenterDB.Items.Clear();
                    drpBudgetCenterDB.DataSource = ds.Tables[1].DefaultView;
                    drpBudgetCenterDB.DataTextField = "Budget_Center_Name";
                    drpBudgetCenterDB.DataValueField = "Budget_Center_ID";
                    drpBudgetCenterDB.DataBind();
                    drpBudgetCenterDB.Items.Insert(0, "--Select a Budget Center--");
                }

                drpPrelimApproval.DataSource = ds;
                drpPrelimApproval.DataTextField = "Approval_Group_Name";
                drpPrelimApproval.DataValueField = "Approval_Group_ID";
                drpPrelimApproval.DataBind();
                drpPrelimApproval.Items.Insert(0, "--Select Approver Group--");

                drpAppGrpFinal.DataSource = ds;
                drpAppGrpFinal.DataTextField = "Approval_Group_Name";
                drpAppGrpFinal.DataValueField = "Approval_Group_ID";
                drpAppGrpFinal.DataBind();
                drpAppGrpFinal.Items.Insert(0, "--Select Approver Group--");

                drpCloseApprovalGroup.DataSource = ds;
                drpCloseApprovalGroup.DataTextField = "Approval_Group_Name";
                drpCloseApprovalGroup.DataValueField = "Approval_Group_ID";
                drpCloseApprovalGroup.DataBind();
                drpCloseApprovalGroup.Items.Insert(0, "--Select Approver Group--");

            }

            if (rbEOType.Items[1].Selected == true)
            {
                if (Request.QueryString["From"] == "ForEOEdit")
                {
                    //objClsEO.SET_EO_DELETE_Upon_EDIT(Request.QueryString["EOID"]);

                    SqlParameter[] paramOut = null;

                    if (objEOBA.SET_EO_DELETE_Upon_EDIT(Convert.ToInt32(Request.QueryString["EOID"]), ref paramOut))
                    {
                    }
                }
                objEOSiteTest objEOSiteTest = new objEOSiteTest();
                if (!string.IsNullOrEmpty(txtTitle.Text))
                {
                    objEOSiteTest.Title = txtTitle.Text;
                }
                else
                {
                    objEOSiteTest.Title = DBNull.Value.ToString();
                }
                int intEvents = 0;
                string EventID = null;
                for (intEvents = 0; intEvents <= lbEOEventsDB.Items.Count - 1; intEvents++)
                {
                    if (lbEOEventsDB.Items[intEvents].Selected == true)
                    {
                        if (string.IsNullOrEmpty(EventID))
                        {
                            EventID = lbEOEventsDB.Items[intEvents].Value;
                            //lbEOEventsDB.SelectedItem.Value
                        }
                        else
                        {
                            EventID = EventID + "," + lbEOEventsDB.Items[intEvents].Value;
                            //lbEOEventsDB.SelectedItem.Value
                        }
                    }
                }
                if (!string.IsNullOrEmpty(EventID))
                {
                    objEOSiteTest.EventIDs = EventID;
                }
                else
                {
                    objEOSiteTest.EventIDs = DBNull.Value.ToString();
                }
                //Project dropdown
                if (!(drpEOProjectsDB.SelectedIndex == -1))
                {
                    if (!(drpEOProjectsDB.SelectedItem.Value == "--Select a Project--"))
                    {
                        objEOSiteTest.ProjectID = Convert.ToInt32(drpEOProjectsDB.SelectedItem.Value);
                    }
                    else
                    {
                        objEOSiteTest.ProjectID = 0;
                    }
                }
                else
                {
                    objEOSiteTest.ProjectID = 0;
                }

                //Plant dropdown
                if (!(drpPlant.SelectedIndex == -1))
                {
                    if (!(drpPlant.SelectedItem.Value == "--Select a Plant--"))
                    {
                        objEOSiteTest.PlantID = Convert.ToInt32(drpPlant.SelectedItem.Value);
                    }
                    else
                    {
                        objEOSiteTest.PlantID = 0;
                    }
                }
                else
                {
                    objEOSiteTest.PlantID = 0;
                }

                //Category dropdown
                if (!(drpCategoryDB.SelectedIndex == -1))
                {
                    if (!(drpCategoryDB.SelectedItem.Value == "--Select a Category--"))
                    {
                        objEOSiteTest.CategoryID = Convert.ToInt32(drpCategoryDB.SelectedItem.Value);
                    }
                    else
                    {
                        objEOSiteTest.CategoryID = 0;
                    }
                }
                else
                {
                    objEOSiteTest.CategoryID = 0;
                }

                //Office Number
                if (!string.IsNullOrEmpty(txtOfficeNumber.Text))
                {
                    objEOSiteTest.OfficeNumber = txtOfficeNumber.Text;
                }
                else
                {
                    objEOSiteTest.OfficeNumber = DBNull.Value.ToString();
                }

                //PhNumber
                if (!string.IsNullOrEmpty(txtPhoneNumberDB.Text))
                {
                    objEOSiteTest.PhoneNumber = txtPhoneNumberDB.Text;
                }
                else
                {
                    objEOSiteTest.PhoneNumber = DBNull.Value.ToString();
                }

                //Brand Segment list

                string strBrands = null;
                int intBrandlist = 0;
                for (intBrandlist = 0; intBrandlist <= lbEOBrandsDB.Items.Count - 1; intBrandlist++)
                {
                    if (lbEOBrandsDB.Items[intBrandlist].Selected == true)
                    {
                        if (string.IsNullOrEmpty(strBrands))
                        {
                            strBrands = lbEOBrandsDB.Items[intBrandlist].Value;
                        }
                        else
                        {
                            strBrands = strBrands + "," + lbEOBrandsDB.Items[intBrandlist].Value;
                        }
                    }

                }
                if (!string.IsNullOrEmpty(strBrands))
                {
                    objEOSiteTest.Brands = strBrands;
                }
                else
                {
                    objEOSiteTest.Brands = DBNull.Value.ToString();
                }

                //Coorginator
                if (!string.IsNullOrEmpty(txtCooriginator.Text))
                {
                    objEOSiteTest.CoOrginator = txtCooriginator.Text;
                }
                else
                {
                    objEOSiteTest.CoOrginator = DBNull.Value.ToString();
                }

                //EO number
                if (!string.IsNullOrEmpty(lbEONumberDB.Text))
                {
                    objEOSiteTest.EONumber = lbEONumberDB.Text;
                }
                else
                {
                    objEOSiteTest.EONumber = DBNull.Value.ToString();
                }

                //EffectedMachineInfo
                if (!string.IsNullOrEmpty(txtMachine.Text.Trim()))
                {
                    objEOSiteTest.EffectedMachineInfo = txtMachine.Text.Trim();
                }
                else
                {
                    objEOSiteTest.EffectedMachineInfo = DBNull.Value.ToString();
                }
                Session["objEOSiteTest"] = objEOSiteTest;

                if (ViewState["EOID"] == null)
                {
                    Response.Redirect("SiteTest.aspx?From=EO&EOID=0");
                }
                else
                {
                    Response.Redirect("SiteTest.aspx?From=EO&EOID=" + ViewState["EOID"]);
                }
            }
        }

        private void fillSelectedPlantDetails()
        {
            DataSet ds = new DataSet();
            int intPalntID = 0;
            if (drpPlant.SelectedItem.Text == "--Select a Plant--")
                intPalntID = 0;
            else
                intPalntID = Convert.ToInt32(drpPlant.SelectedItem.Value);
            if (objEOBA.GET_EO_Approval_Groups_By_Plant_Brand_EOMode(intPalntID, lblBrandIDList.Text, Convert.ToChar(rbEOType.SelectedItem.Value), ref ds))
            {

                drpPrelimApproval.DataSource = ds;
                drpPrelimApproval.DataTextField = "Approval_Group_Name";
                drpPrelimApproval.DataValueField = "Approval_Group_ID";
                drpPrelimApproval.DataBind();
                drpPrelimApproval.Items.Insert(0, "--Select Approver Group--");

                drpAppGrpFinal.DataSource = ds;
                drpAppGrpFinal.DataTextField = "Approval_Group_Name";
                drpAppGrpFinal.DataValueField = "Approval_Group_ID";
                drpAppGrpFinal.DataBind();
                drpAppGrpFinal.Items.Insert(0, "--Select Approver Group--");

                drpCloseApprovalGroup.DataSource = ds;
                drpCloseApprovalGroup.DataTextField = "Approval_Group_Name";
                drpCloseApprovalGroup.DataValueField = "Approval_Group_ID";
                drpCloseApprovalGroup.DataBind();
                drpCloseApprovalGroup.Items.Insert(0, "--Select Approver Group--");
                try
                {
                    if (!(ds.Tables[0].Rows.Count == 0))
                    {
                        drpPrelimApproval.SelectedValue = ds.Tables[0].Rows[0]["Approval_Group_ID"].ToString();
                        drpAppGrpFinal.SelectedValue = ds.Tables[0].Rows[0]["Approval_Group_ID"].ToString();
                        drpCloseApprovalGroup.SelectedValue = ds.Tables[0].Rows[0]["Approval_Group_ID"].ToString();
                        drpPrelimApprovalData();
                        FillAppGrpFinal();
                        CloseApprovalGroupData();
                    }
                    else
                    {
                        txtGBUHSE.Text = "";
                        txtSiteHSE.Text = "";
                        txtSiteContact.Text = "";
                        txtSitePlanning.Text = "";
                        txtQAPre.Text = "";
                        //Added for Central QA
                        txtCentralQAPre.Text = "";
                        txtCentralPlanning.Text = "";
                        txtTimingGate.Text = "";
                        txtStandardOffice.Text = "";
                        txtAdditionalApp1.Text = "";
                        txtAdditionalApp2.Text = "";
                        txtAdditionalApp3.Text = "";
                        txtAdditionalApp4.Text = "";
                        txtPSInitiative.Text = "";
                        txtProductsResearch.Text = "";
                        txtGBUHSEFinal.Text = "";
                        txtSiteHSEFinal.Text = "";
                        txtSitePlanFinal.Text = "";
                        txtSiteContactFinal.Text = "";
                        txtSiteFinance.Text = "";
                        txtSiteLeaderShip.Text = "";
                        txtPSRAFinal.Text = "";
                        txtFinalTimingGate.Text = "";
                        txtFinalQA.Text = "";
                        txtFinalCentralQA.Text = "";
                        txtFinalStandardsOffice.Text = "";
                        //Added by David - MUREO PCR : 4 Additional Approvers - Date: 01/03/2012
                        txtFinalAdditionalApprover1.Text = "";
                        txtFinalAdditionalApprover2.Text = "";
                        txtFinalAdditionalApprover3.Text = "";
                        txtFinalAdditionalApprover4.Text = "";
                        txtCloseSiteFinance.Text = "";
                        //string script = null;
                        //script = "<script>alert('There is no approval group set up for this EO.' + '\\n' + 'Please contact Julie Lovelace (513-634-4150) or Jeff Chan (513-634-0584) to have one created');</script> ";
                        //Page.RegisterStartupScript("clientscript", script);

                        ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "alert('There is no approval group set up for this EO.' + '\n' + 'Please contact Jeff Chan (513-634-0584) or Rebecca Pagels (*292-2757) or Sharika Anderson (570-419-0596) to have one created');", true);
                    }
                }
                catch (Exception ex)
                {
                }
                if (!(ds.Tables[1].Rows.Count == 0))
                {
                    if (drpBudgetCenterDB.SelectedItem.Text == "--Select a Budget Center--")
                    {
                        drpBudgetCenterDB.Items.Clear();
                        drpBudgetCenterDB.DataSource = ds.Tables[1];
                        drpBudgetCenterDB.DataBind();
                        drpBudgetCenterDB.Items.Insert(0, "--Select a Budget Center--");
                        txtBudgetOwner.Text = "";
                        txtBudgetOwnerFinal.Text = "";
                        txtCloseBudgetOwner.Text = "";
                        txtSAPCost.Text = "";
                        txtSAPCostCenter.Text = "";
                        txtSMARTClearanceFinal.Text = "";
                    }
                }
            }
        }

        public void carryapp()
        {
            if (string.IsNullOrEmpty(txtBudgetOwnerFinal.Text))
            {
                txtBudgetOwnerFinal.Text = txtBudgetOwner.Text;
            }
            if (string.IsNullOrEmpty(txtGBUHSEFinal.Text))
            {
                txtGBUHSEFinal.Text = txtGBUHSE.Text;
            }
            if (string.IsNullOrEmpty(txtSiteHSEFinal.Text))
            {
                txtSiteHSEFinal.Text = txtSiteHSE.Text;
            }
            if (string.IsNullOrEmpty(txtSAPCostCenter.Text))
            {
                txtSAPCostCenter.Text = txtSAPCost.Text;
            }

            //Added by David
            //Date: 07/16/2010

            if (string.IsNullOrEmpty(txtSMARTClearanceFinal.Text))
            {
                txtSMARTClearanceFinal.Text = txtSmartClearance.Text;
            }

            if (string.IsNullOrEmpty(txtFinalQA.Text))
            {
                txtFinalQA.Text = txtQAPre.Text;
            }

            if (string.IsNullOrEmpty(txtFinalCentralQA.Text))
            {
                txtFinalCentralQA.Text = txtCentralQAPre.Text;
            }

            if (string.IsNullOrEmpty(txtSitePlanFinal.Text))
            {
                txtSitePlanFinal.Text = txtSitePlanning.Text;
            }
            if (string.IsNullOrEmpty(txtSiteContactFinal.Text))
            {
                txtSiteContactFinal.Text = txtSiteContact.Text;
            }
            if (string.IsNullOrEmpty(txtFinalTimingGate.Text))
            {
                txtFinalTimingGate.Text = txtTimingGate.Text;
            }
            if (string.IsNullOrEmpty(txtFinalStandardsOffice.Text))
            {
                txtFinalStandardsOffice.Text = txtStandardOffice.Text;
            }

        }

        public void carryappfinalco()
        {
            if (string.IsNullOrEmpty(txtCloseBudgetOwner.Text))
            {
                txtCloseBudgetOwner.Text = txtBudgetOwner.Text;
            }
        }

        public void test()
        {
            if (chkCurrentPackaging.Checked)
            {
                chkCurPack.Checked = true;
            }
            if (chkExperimentalPackaging.Checked)
            {
                chkExpPack.Checked = true;
            }
            if (chkClearPoly.Checked)
            {
                chkCurrentPoly.Checked = true;
            }
            if (chkBlankKDF.Checked)
            {
                chkBlankKGF.Checked = true;
            }
            txtProductDisposition.Text = txtAdditionalComments.Text;
            if (rbPalletPattern.Items[0].Selected)
            {
                rbUniqPallet.Items[0].Selected = true;
            }
            else if (rbPalletPattern.Items[1].Selected)
            {
                rbUniqPallet.Items[1].Selected = true;
            }
            txtMaterialDisposition.Text = txtMaterialComments.Text;
            if (rbBroke.Items[0].Selected)
            {
                rbBrokeDisposition.Items[0].Selected = true;
            }
            else if (rbBroke.Items[1].Selected)
            {
                rbBrokeDisposition.Items[1].Selected = true;
            }

            if (rbPrintedBroke.Items[0].Selected)
            {
                rbPrintBrokeFinal.Items[0].Selected = true;
            }
            else if (rbPrintedBroke.Items[1].Selected)
            {
                rbPrintBrokeFinal.Items[1].Selected = true;
            }

            if (rbInkCoverage.Items[0].Selected)
            {
                rbPrintedBrokeInk.Items[0].Selected = true;
            }
            else if (rbInkCoverage.Items[1].Selected)
            {
                rbPrintedBrokeInk.Items[1].Selected = true;
            }


            //changed for making stack/ship radio button to check box on 12/03/08
            if (chkStackShipTesting.Items[0].Selected)
            {
                chkFinalStackShip.Items[0].Selected = true;
            }
            else
            {
                chkFinalStackShip.Items[0].Selected = false;
            }

            if (chkStackShipTesting.Items[1].Selected)
            {
                chkFinalStackShip.Items[1].Selected = true;
            }
            else
            {
                chkFinalStackShip.Items[1].Selected = false;
            }


            try
            {
                drpFinalProductDispositionDB.SelectedIndex = -1;
                drpFinalProductDispositionDB.Items[drpFinalProductDispositionDB.Items.IndexOf(drpFinalProductDispositionDB.Items.FindByText(drpProductDispositionDB.SelectedItem.Text))].Selected = true;
            }
            catch (Exception ex)
            {
            }

            try
            {
                drpFinalMaterialDispositionDBFinal.SelectedIndex = -1;
                drpFinalMaterialDispositionDBFinal.Items[drpFinalMaterialDispositionDBFinal.Items.IndexOf(drpFinalMaterialDispositionDBFinal.Items.FindByText(drpMaterialDispositionDB.SelectedItem.Text))].Selected = true;

            }
            catch (Exception ex)
            {
            }

            int intProductPacked = 0;
            try
            {
                lbFinalPackagingInfoDB.SelectedIndex = -1;
                for (intProductPacked = 0; intProductPacked <= lbProductPackedDB.Items.Count - 1; intProductPacked++)
                {
                    if (lbProductPackedDB.Items[intProductPacked].Selected)
                    {
                        lbFinalPackagingInfoDB.Items[intProductPacked].Selected = true;
                    }
                }

            }
            catch (Exception ex)
            {
            }

            int intPackaging = 0;
            try
            {
                lbFinalPackage.SelectedIndex = -1;
                for (intPackaging = 0; intPackaging <= lbPackaging.Items.Count - 1; intPackaging++)
                {
                    if (lbPackaging.Items[intPackaging].Selected)
                    {
                        lbFinalPackage.Items[intPackaging].Selected = true;
                    }
                }
            }
            catch (Exception ex)
            {
            }

            //Added Code for the new items PCR

            if (chkMaterialsBrands.Items[0].Selected)
            {
                chkFinalMaterialsBrands.Items[0].Selected = true;
            }
            else if (chkMaterialsBrands.Items[1].Selected)
            {
                chkFinalMaterialsBrands.Items[1].Selected = true;
            }
            else if (chkMaterialsBrands.Items[2].Selected)
            {
                chkFinalMaterialsBrands.Items[2].Selected = true;
            }


            if (rbRawMaterial.Items[0].Selected)
            {
                rbRawMaterialFinal.Items[0].Selected = true;
            }
            else if (rbRawMaterial.Items[1].Selected)
            {
                rbRawMaterialFinal.Items[1].Selected = true;
            }


            if (rbParentRolls.Items[0].Selected)
            {
                rbParentRollsFinal.Items[0].Selected = true;
            }
            else if (rbParentRolls.Items[1].Selected)
            {
                rbParentRollsFinal.Items[1].Selected = true;
            }


            if (rbInterMaterials.Items[0].Selected)
            {
                rbInterMaterialsFinal.Items[0].Selected = true;
            }
            else if (rbInterMaterials.Items[1].Selected)
            {
                rbInterMaterialsFinal.Items[1].Selected = true;
            }

            if (rbShipped.Items[0].Selected)
            {
                rbShippedFinal.Items[0].Selected = true;
            }
            else if (rbShipped.Items[1].Selected)
            {
                rbShippedFinal.Items[1].Selected = true;
            }

            if (rbTestProductedShipped.Items[0].Selected)
            {
                rbTestProductedShippedFinal.Items[0].Selected = true;
            }
            else if (rbTestProductedShipped.Items[1].Selected)
            {
                rbTestProductedShippedFinal.Items[1].Selected = true;
            }

            if (rbGCASNumber.Items[0].Selected)
            {
                rbGCASNumberFinal.Items[0].Selected = true;
            }
            else if (rbGCASNumber.Items[1].Selected)
            {
                rbGCASNumberFinal.Items[1].Selected = true;
            }

            if (rblProductConsumers.Items[0].Selected)
            {
                rblFinalProductConsumerOption.Items[0].Selected = true;
            }
            else if (rblProductConsumers.Items[1].Selected)
            {
                rblFinalProductConsumerOption.Items[1].Selected = true;
            }

            if (rblProductApproved.Items[0].Selected)
            {
                rblFinalProductApprovedOption.Items[0].Selected = true;
            }
            else if (rblProductApproved.Items[1].Selected)
            {
                rblFinalProductApprovedOption.Items[1].Selected = true;
            }



            if (((rblFinalProductConsumerOption.Items[0].Selected == true) & (rblFinalProductApprovedOption.Items[1].Selected == true)))
            {
                tblPSRAFinal2.Style.Add("display", "block");

            }
            else
            {
                rblFinalRawMaterialsQ1.ClearSelection();
                rblFinalRawMaterialsQ2.ClearSelection();
                rblFinalRawMaterialsQ3.ClearSelection();
                rblFinalRawMaterialsQ4.ClearSelection();
                tblPSRAFinal2.Style.Add("display", "none");

            }

            if (rblRawMaterialsQ1.Items[0].Selected)
            {
                rblFinalRawMaterialsQ1.Items[0].Selected = true;
            }
            else if (rblRawMaterialsQ1.Items[1].Selected)
            {
                rblFinalRawMaterialsQ1.Items[1].Selected = true;
            }

            if (rblRawMaterialsQ2.Items[0].Selected)
            {
                rblFinalRawMaterialsQ2.Items[0].Selected = true;
            }
            else if (rblRawMaterialsQ2.Items[1].Selected)
            {
                rblFinalRawMaterialsQ2.Items[1].Selected = true;
            }

            if (rblRawMaterialsQ3.Items[0].Selected)
            {
                rblFinalRawMaterialsQ3.Items[0].Selected = true;
            }
            else if (rblRawMaterialsQ3.Items[1].Selected)
            {
                rblFinalRawMaterialsQ3.Items[1].Selected = true;
            }

            if (rblRawMaterialsQ4.Items[0].Selected)
            {
                rblFinalRawMaterialsQ4.Items[0].Selected = true;
            }
            else if (rblRawMaterialsQ4.Items[1].Selected)
            {
                rblFinalRawMaterialsQ4.Items[1].Selected = true;
            }


            txtSMARTClearanceFinal.Text = txtSmartClearance.Text;


            if (lblSmartClearancePRO.Text == "Approval Not Needed" || string.IsNullOrEmpty(lblSmartClearancePRO.Text))
            {
            }
            else
            {
                txtSMARTClearanceFinal.Text = lblSmartClearancePRO.Text;

            }
            CarryPrelToFinal();

        }

        public void fillFinalCloseOutAttachments()
        {
            DataSet ds = new DataSet();
            if (objEOBA.GET_EO_Final(Convert.ToInt32(ViewState["EOID"]), ref ds))
            {
                if ((ds != null))
                {
                    if (!(ds.Tables.Count == 0))
                    {
                        try
                        {
                            if (!(ds.Tables[21].Rows.Count == 0))
                            {
                                lbCostSheetAttach.DataSource = ds.Tables[21].DefaultView;
                                lbCostSheetAttach.DataTextField = "Cost_Sheet_Attachment_File_Name";
                                lbCostSheetAttach.DataValueField = "Cost_Sheet_Attach_ID";
                                lbCostSheetAttach.DataBind();
                            }

                        }
                        catch (Exception ex)
                        {
                        }


                        try
                        {
                            dgrdCostSheetFinal.DataSource = null;
                            dgrdCostSheetFinal.DataBind();

                        }
                        catch (Exception ex)
                        {
                        }

                        if (!(ds.Tables[21].Rows.Count == 0))
                        {
                            dgrdCostSheetFinal.DataSource = ds.Tables[21].DefaultView;
                            dgrdCostSheetFinal.DataBind();
                        }
                        //lbFormulaCardAttach.Items.Clear()

                        try
                        {
                            if (!(ds.Tables[23].Rows.Count == 0))
                            {
                                lbFormulaCardAttach.DataSource = ds.Tables[23].DefaultView;
                                lbFormulaCardAttach.DataTextField = "Formula_Cards_Attachment_File_Name";
                                lbFormulaCardAttach.DataValueField = "Formula_Cards_Attach_ID";
                                lbFormulaCardAttach.DataBind();
                            }


                        }
                        catch (Exception ex)
                        {
                        }


                        try
                        {
                            dgrdFormulaCard.DataSource = null;
                            dgrdFormulaCard.DataBind();

                        }
                        catch (Exception ex)
                        {
                        }

                        if (!(ds.Tables[23].Rows.Count == 0))
                        {
                            dgrdFormulaCard.DataSource = ds.Tables[23].DefaultView;
                            dgrdFormulaCard.DataBind();
                        }

                        try
                        {
                            if (!(ds.Tables[24].Rows.Count == 0))
                            {
                                lbTestPlansAttach.DataSource = ds.Tables[24].DefaultView;
                                lbTestPlansAttach.DataTextField = "Test_Plans_Attachment_File_Name";
                                lbTestPlansAttach.DataValueField = "Test_Plans_Attach_ID";
                                lbTestPlansAttach.DataBind();
                            }
                        }
                        catch (Exception ex)
                        {
                        }
                        try
                        {
                            dgrdTestPlansFinal.DataSource = null;
                            dgrdTestPlansFinal.DataBind();
                        }
                        catch (Exception ex)
                        {
                        }

                        if (!(ds.Tables[24].Rows.Count == 0))
                        {
                            dgrdTestPlansFinal.DataSource = ds.Tables[24].DefaultView;
                            dgrdTestPlansFinal.DataBind();
                        }

                        try
                        {
                            if (!(ds.Tables[25].Rows.Count == 0))
                            {
                                lbLabSampleAttach.DataSource = ds.Tables[25].DefaultView;
                                lbLabSampleAttach.DataTextField = "Lab_Sampling_Attachment_File_Name";
                                lbLabSampleAttach.DataValueField = "Lab_Sampling_Attach_ID";
                                lbLabSampleAttach.DataBind();
                            }

                        }
                        catch (Exception ex)
                        {
                        }
                        try
                        {
                            dgrdLabSamp.DataSource = null;
                            dgrdLabSamp.DataBind();

                        }
                        catch (Exception ex)
                        {
                        }
                        if (!(ds.Tables[25].Rows.Count == 0))
                        {
                            dgrdLabSamp.DataSource = ds.Tables[25].DefaultView;
                            dgrdLabSamp.DataBind();
                        }


                        try
                        {
                            if (!(ds.Tables[26].Rows.Count == 0))
                            {
                                lbFlowMatrixAttach.DataSource = ds.Tables[26].DefaultView;
                                lbFlowMatrixAttach.DataTextField = "Matrix_Attachment_File_Name";
                                lbFlowMatrixAttach.DataValueField = "Matrix_Attach_ID";
                                lbFlowMatrixAttach.DataBind();

                            }


                        }
                        catch (Exception ex)
                        {
                        }

                        //'Product or Detailed Test Flow Matrix
                        try
                        {
                            dgrdTestMatrix.DataSource = null;
                            dgrdTestMatrix.DataBind();

                        }
                        catch (Exception ex)
                        {
                        }
                        if (!(ds.Tables[26].Rows.Count == 0))
                        {
                            dgrdTestMatrix.DataSource = ds.Tables[26].DefaultView;
                            dgrdTestMatrix.DataBind();
                        }

                        //'Other Supporting Documentation
                        try
                        {
                            if (!(ds.Tables[27].Rows.Count == 0))
                            {
                                lbSupDocAttach.DataSource = ds.Tables[27].DefaultView;
                                lbSupDocAttach.DataTextField = "Other_Docs_Attachment_File_Name";
                                lbSupDocAttach.DataValueField = "Others_Attach_ID";
                                lbSupDocAttach.DataBind();
                            }
                        }
                        catch (Exception ex)
                        {
                        }

                        try
                        {
                            dgrdOtherDocFinal.DataSource = null;
                            dgrdOtherDocFinal.DataBind();

                        }
                        catch (Exception ex)
                        {
                        }

                        if (!(ds.Tables[27].Rows.Count == 0))
                        {
                            dgrdOtherDocFinal.DataSource = ds.Tables[27].DefaultView;
                            dgrdOtherDocFinal.DataBind();
                        }

                        try
                        {
                            if (!(ds.Tables[22].Rows.Count == 0))
                            {
                                lbFinalQAAttach.DataSource = ds.Tables[22].DefaultView;
                                lbFinalQAAttach.DataTextField = "QA_Info_Attachment_File_Name";
                                lbFinalQAAttach.DataValueField = "QA_Info_Attach_ID";
                                lbFinalQAAttach.DataBind();
                            }

                        }
                        catch (Exception ex)
                        {
                        }

                        try
                        {
                            dgrdQAFinalTabAttachment.DataSource = null;
                            dgrdQAFinalTabAttachment.DataBind();

                        }
                        catch (Exception ex)
                        {
                        }
                        if (!(ds.Tables[22].Rows.Count == 0))
                        {
                            dgrdQAFinalTabAttachment.DataSource = ds.Tables[22].DefaultView;
                            dgrdQAFinalTabAttachment.DataBind();
                        }
                    }
                }
            }

            if (objEOBA.GET_EO_Closeout(Convert.ToInt32(ViewState["EOID"]), ref ds))
            {

                if ((ds != null))
                {
                    if (!(ds.Tables.Count == 0))
                    {
                        //Actual Cost Sheet

                        try
                        {
                            if (!(ds.Tables[11].Rows.Count == 0))
                            {
                                lbFinalCostAttach.DataSource = ds.Tables[11].DefaultView;
                                lbFinalCostAttach.DataTextField = "Actual_Cost_Sheet_Attachment_File_Name";
                                lbFinalCostAttach.DataValueField = "Actual_Cost_Sheet_Attach_ID";
                                lbFinalCostAttach.DataBind();
                            }
                        }
                        catch (Exception ex)
                        {
                        }

                        try
                        {
                            dgrdActualCostCloseOut.DataSource = null;
                            dgrdActualCostCloseOut.DataBind();

                        }
                        catch (Exception ex)
                        {
                        }

                        if (!(ds.Tables[11].Rows.Count == 0))
                        {
                            dgrdActualCostCloseOut.DataSource = ds.Tables[11].DefaultView;
                            dgrdActualCostCloseOut.DataBind();
                        }

                        //Test Plans Used
                        try
                        {
                            if (!(ds.Tables[13].Rows.Count == 0))
                            {
                                lbTestPlanUsedAttach.DataSource = ds.Tables[13].DefaultView;
                                lbTestPlanUsedAttach.DataTextField = "Plans_Used_Attachment_File_Name";
                                lbTestPlanUsedAttach.DataValueField = "Plans_Used_Attach_ID";
                                lbTestPlanUsedAttach.DataBind();
                            }


                        }
                        catch (Exception ex)
                        {
                        }
                        try
                        {
                            dgrdTestPlansCloseOut.DataSource = null;
                            dgrdTestPlansCloseOut.DataBind();

                        }
                        catch (Exception ex)
                        {
                        }
                        if (!(ds.Tables[13].Rows.Count == 0))
                        {
                            dgrdTestPlansCloseOut.DataSource = ds.Tables[13].DefaultView;
                            dgrdTestPlansCloseOut.DataBind();
                        }

                        //ILR
                        try
                        {
                            if (!(ds.Tables[12].Rows.Count == 0))
                            {
                                lbILR.DataSource = ds.Tables[12].DefaultView;
                                lbILR.DataTextField = "Initial_Learning_Attachment_File_Name";
                                lbILR.DataValueField = "Initial_Learning_Attach_ID";
                                lbILR.DataBind();
                            }

                        }
                        catch (Exception ex)
                        {
                        }
                        try
                        {
                            dgrdILR.DataSource = null;
                            dgrdILR.DataBind();
                        }
                        catch (Exception ex)
                        {
                        }

                        if (!(ds.Tables[12].Rows.Count == 0))
                        {
                            dgrdILR.DataSource = ds.Tables[12].DefaultView;
                            dgrdILR.DataBind();
                        }


                        //Closeout Report Attachment
                        try
                        {
                            if (!(ds.Tables[14].Rows.Count == 0))
                            {
                                lbCOReport.DataSource = ds.Tables[14].DefaultView;
                                lbCOReport.DataTextField = "Closeout_Report_Attachment_File_Name";
                                lbCOReport.DataValueField = "Closeout_Report_Attach_ID";
                                lbCOReport.DataBind();
                            }

                        }
                        catch (Exception ex)
                        {
                        }
                        try
                        {
                            dgrdCOReport.DataSource = null;
                            dgrdCOReport.DataBind();

                        }
                        catch (Exception ex)
                        {
                        }
                        if (!(ds.Tables[14].Rows.Count == 0))
                        {
                            dgrdCOReport.DataSource = ds.Tables[14].DefaultView;
                            dgrdCOReport.DataBind();
                        }
                    }
                }
            }
        }

        private void imgbtnCopyNew_Click(System.Object sender, System.Web.UI.ImageClickEventArgs e)
        {
            Response.Redirect("NewEO.aspx?From=CopyNew&EOID=" + ViewState["EOID"]);
        }

        private void imgbtnCopyToAnalyse_Click(System.Object sender, System.Web.UI.ImageClickEventArgs e)
        {
            Response.Redirect("NewEO.aspx?From=CopyNew&EOID=" + ViewState["EOID"]);
        }

        private void CloseOutTabSave(string strCurrentStage, string strStageStatus, string strresumeExit)
        {
            objEO objEO = new objEO();
            SqlParameter[] paramOut = null;


            objEO.EOID = ViewState["EOID"].ToString();
            objEO.CloseOutCurrentStage = strCurrentStage;
            objEO.CloseOutStageStatus = strStageStatus;

            //@p_Lab_NoteBook_Num
            if (!string.IsNullOrEmpty(txtCloseLabNoteBook.Text.Trim()))
            {
                objEO.LabNoteBookCO = txtCloseLabNoteBook.Text.Trim();
            }
            else
            {
                objEO.LabNoteBookCO = DBNull.Value.ToString();
            }

            //@p_Completion_Date
            if (!string.IsNullOrEmpty(txtCloseCompletionDate.Text.Trim()))
            {
                objEO.CompletionDate = Convert.ToDateTime(txtCloseCompletionDate.Text.Trim());
            }
            else
            {
                objEO.CompletionDate = System.DateTime.MinValue;
            }

            //@p_AC_Attachment 
            if (!string.IsNullOrEmpty(txtACAttachment.Value))
            {
                objEO.AttFinalCostSheetCO = txtACAttachment.Value;
            }
            else
            {
                objEO.AttFinalCostSheetCO = DBNull.Value.ToString();
            }

            //@p_Total_CostSheet 
            if (!string.IsNullOrEmpty(txtTotalCostSheetAttach.Text.Trim()))
            {
                objEO.TotCostSheetCO = Convert.ToDecimal(txtTotalCostSheetAttach.Text.Trim());
            }
            else
            {
                objEO.TotCostSheetCO = Convert.ToDecimal(0.0);
                //DBNull.Value.ToString
            }
            //-- Initial Learning Report
            //@p_ILR_Attachment	

            objEO.ILRAttachment = DBNull.Value.ToString();

            //Test Plans Used tbl_EO_Test_Plans_Used 

            //@p_TP_Attachment	
            if (!string.IsNullOrEmpty(txtTPAttach.Value))
            {
                objEO.AttchTestPlanTepmpalteCO = txtTPAttach.Value;
            }
            else
            {
                objEO.AttchTestPlanTepmpalteCO = DBNull.Value.ToString();
            }

            //@p_Keyword1
            if (!string.IsNullOrEmpty(txtCloseKeyworkd1.Text.Trim()))
            {
                objEO.KeyWords1CO = txtCloseKeyworkd1.Text.Trim();
            }
            else
            {
                objEO.KeyWords1CO = DBNull.Value.ToString();
            }

            //@p_Keyword2			
            if (!string.IsNullOrEmpty(txtCloseKeyworkd2.Text.Trim()))
            {
                objEO.KeyWords2CO = txtCloseKeyworkd2.Text.Trim();
            }
            else
            {
                objEO.KeyWords2CO = DBNull.Value.ToString();
            }
            //@p_Keyword3			
            if (!string.IsNullOrEmpty(txtCloseKeyworkd3.Text.Trim()))
            {
                objEO.KeyWords3CO = txtCloseKeyworkd3.Text.Trim();
            }
            else
            {
                objEO.KeyWords3CO = DBNull.Value.ToString();
            }
            //@p_Keyword4			
            if (!string.IsNullOrEmpty(txtCloseKeyworkd4.Text.Trim()))
            {
                objEO.KeyWords4CO = txtCloseKeyworkd4.Text.Trim();
            }
            else
            {
                objEO.KeyWords4CO = DBNull.Value.ToString();
            }
            //@p_Keyword5			
            if (!string.IsNullOrEmpty(txtCloseKeyworkd5.Text.Trim()))
            {
                objEO.KeyWords5CO = txtCloseKeyworkd5.Text.Trim();
            }
            else
            {
                objEO.KeyWords5CO = DBNull.Value.ToString();
            }
            //@p_Keyword6			VARCHAR(50)=NULL,
            if (!string.IsNullOrEmpty(txtCloseKeyworkd6.Text.Trim()))
            {
                objEO.KeyWords6CO = txtCloseKeyworkd6.Text.Trim();
            }
            else
            {
                objEO.KeyWords6CO = DBNull.Value.ToString();
            }
            //@p_Comments_Approver
            if (!string.IsNullOrEmpty(txtCloseApproverComments.Text.Trim()))
            {
                objEO.CommentsApproverCO = txtCloseApproverComments.Text.Trim();
            }
            else
            {
                objEO.CommentsApproverCO = DBNull.Value.ToString();
            }

            //@p_Approval_Group_ID
            if (!(drpCloseApprovalGroup.SelectedIndex == -1 | drpCloseApprovalGroup.SelectedIndex == 0))
            {
                objEO.AppGroupCloseOut = Convert.ToInt32(drpCloseApprovalGroup.SelectedItem.Value);
            }
            else
            {
                objEO.AppGroupCloseOut = 0;
            }

            string strFuncNameAppNameCO = null;

            if (!string.IsNullOrEmpty(txtCloseSiteFinance.Text))
            {
                if (string.IsNullOrEmpty(strFuncNameAppNameCO))
                {
                    strFuncNameAppNameCO = lblCOAppgrpSiteFinance.Text + ":" + txtCloseSiteFinance.Text;
                }
                else
                {
                    strFuncNameAppNameCO = strFuncNameAppNameCO + "," + lblCOAppgrpSiteFinance.Text + ":" + txtCloseSiteFinance.Text;
                }
            }

            if (!string.IsNullOrEmpty(txtCloseBudgetOwner.Text))
            {
                if (string.IsNullOrEmpty(strFuncNameAppNameCO))
                {
                    strFuncNameAppNameCO = lblCOAppgrpBO.Text + ":" + txtCloseBudgetOwner.Text;
                }
                else
                {
                    strFuncNameAppNameCO = strFuncNameAppNameCO + "," + lblCOAppgrpBO.Text + ":" + txtCloseBudgetOwner.Text;
                }
            }

            if (!string.IsNullOrEmpty(strFuncNameAppNameCO))
            {
                objEO.FuncIDAppNameListCloseOut = strFuncNameAppNameCO;
            }
            else
            {
                objEO.FuncIDAppNameListCloseOut = DBNull.Value.ToString();
            }

            int intresSetEOMandatory = 0;
            int intresSETEOPreliminary = 0;
            int intresSETEOFinal = 0;
            int intresSETEOCloseout = 0;

            //CloseOut Actual Cost Sheet Attachments
            string strCOActualCostPath = Server.MapPath("..") + "\\Common\\UpLoad\\CloseOut\\ActualCostSheet\\";
            //999
            FilesUpload(strCOActualCostPath, lbFinalCostAttach, arActualCostSheet, "Actual", "SET_EO_CloseOut_Attachment");
            arActualCostSheet.Clear();
            int intFinalCostAttach = 0;
            string strCOActualCostfilesPath = null;
            for (intFinalCostAttach = 0; intFinalCostAttach <= lbFinalCostAttach.Items.Count - 1; intFinalCostAttach++)
            {
                if (string.IsNullOrEmpty(strCOActualCostfilesPath))
                {
                    strCOActualCostfilesPath = "UpLoad\\CloseOut\\ActualCostSheet\\" + objEO.EOID + "_" + strDateTime + "_" + lbFinalCostAttach.Items[intFinalCostAttach].Text;
                }
                else
                {
                    strCOActualCostfilesPath = strCOActualCostfilesPath + "|" + "UpLoad\\CloseOut\\ActualCostSheet\\" + objEO.EOID + "_" + strDateTime + "_" + lbFinalCostAttach.Items[intFinalCostAttach].Text;
                }
            }
            if (string.IsNullOrEmpty(strCOActualCostfilesPath))
            {
                objEO.AttFinalCostSheetCO = DBNull.Value.ToString();
            }
            else
            {
                objEO.AttFinalCostSheetCO = strCOActualCostfilesPath;
            }



            //CloseOut Intial Learning Report Attachments
            string strCOILR = Server.MapPath("..") + "\\Common\\UpLoad\\CloseOut\\IntialLearningReport\\";
            //9999
            FilesUpload(strCOILR, lbILR, arIntialLearningCloseOut, "Learning", "SET_EO_CloseOut_Attachment");
            arIntialLearningCloseOut.Clear();
            int intILR = 0;
            string strCOILRPath = null;
            for (intILR = 0; intILR <= lbILR.Items.Count - 1; intILR++)
            {
                if (string.IsNullOrEmpty(strCOILRPath))
                {
                    strCOILRPath = "UpLoad\\CloseOut\\IntialLearningReport\\" + objEO.EOID + "_" + strDateTime + "_" + lbILR.Items[intILR].Text;
                }
                else
                {
                    strCOILRPath = strCOILRPath + "|" + "UpLoad\\CloseOut\\IntialLearningReport\\" + objEO.EOID + "_" + strDateTime + "_" + lbILR.Items[intILR].Text;
                }
            }
            if (string.IsNullOrEmpty(strCOILRPath))
            {
                objEO.AttCOILR = DBNull.Value.ToString();
            }
            else
            {
                objEO.AttCOILR = strCOILRPath;
            }



            //CloseOut TestPlans Used Attachments
            string strCOTestPlansUsedPath = Server.MapPath("..") + "\\Common\\UpLoad\\CloseOut\\TestPlansUsed\\";
            //9999
            FilesUpload(strCOTestPlansUsedPath, lbTestPlanUsedAttach, arTestPlaneedused, "Plans_Used", "SET_EO_CloseOut_Attachment");
            arTestPlaneedused.Clear();
            int intTestPlanUsedAttach = 0;
            string strCOTestPlansUsedfilesPath = null;
            for (intTestPlanUsedAttach = 0; intTestPlanUsedAttach <= lbTestPlanUsedAttach.Items.Count - 1; intTestPlanUsedAttach++)
            {
                if (string.IsNullOrEmpty(strCOTestPlansUsedfilesPath))
                {
                    strCOTestPlansUsedfilesPath = "UpLoad\\CloseOut\\TestPlansUsed\\" + objEO.EOID + "_" + strDateTime + "_" + lbTestPlanUsedAttach.Items[intTestPlanUsedAttach].Text;
                }
                else
                {
                    strCOTestPlansUsedfilesPath = strCOTestPlansUsedfilesPath + "|" + "UpLoad\\CloseOut\\TestPlansUsed\\" + objEO.EOID + "_" + strDateTime + "_" + lbTestPlanUsedAttach.Items[intTestPlanUsedAttach].Text;
                }
            }

            if (string.IsNullOrEmpty(strCOTestPlansUsedfilesPath))
            {
                objEO.AttchTestPlanTepmpalteCO = DBNull.Value.ToString();
            }
            else
            {
                objEO.AttchTestPlanTepmpalteCO = strCOTestPlansUsedfilesPath;
            }



            //CloseOut  Report Attachments
            string strCOReport = Server.MapPath("..") + "\\Common\\UpLoad\\CloseOut\\CloseOutReport\\";
            //9999
            FilesUpload(strCOReport, lbCOReport, arCloseOutReportCloseOut, "Report", "SET_EO_CloseOut_Attachment");
            arCloseOutReportCloseOut.Clear();
            int intCOReport = 0;
            string strCOPathReport = null;
            for (intCOReport = 0; intCOReport <= lbCOReport.Items.Count - 1; intCOReport++)
            {
                if (string.IsNullOrEmpty(strCOPathReport))
                {
                    strCOPathReport = "UpLoad\\CloseOut\\CloseOutReport\\" + objEO.EOID + "_" + strDateTime + "_" + lbCOReport.Items[intCOReport].Text;
                }
                else
                {
                    strCOPathReport = strCOPathReport + "|" + "UpLoad\\CloseOut\\CloseOutReport\\" + objEO.EOID + "_" + strDateTime + "_" + lbCOReport.Items[intCOReport].Text;
                }
            }
            if (string.IsNullOrEmpty(strCOPathReport))
            {
                objEO.AttCOReport = DBNull.Value.ToString();
            }
            else
            {
                objEO.AttCOReport = strCOPathReport;
            }

            objEO.UserName = objSecurity.UserName;
            if (objEOBA.SET_EO_Closeout(objEO, ref paramOut))
            {
                if (paramOut[0].Value != DBNull.Value)
                    intresSETEOCloseout = Convert.ToInt32(paramOut[0].Value);
                else
                    intresSETEOCloseout = -1;
            }

            if (intresSETEOFinal == 0 & intresSETEOCloseout == 0)
            {
                if (strStageStatus == "Approved")
                {
                    if (!string.IsNullOrEmpty(txtCloseBudgetOwner.Text))
                    {
                        try
                        {
                            //jagan code start
                            //ViewState["CoOriginator"]
                            mandataroinfoforEmail();

                            string strURLLockMode = null;
                            strURLLockMode = "http://" + ViewState["servername"] + "/Common/NewEO.aspx?From=ForEOLock&EOID=" + ViewState["EOID"];

                            string strURLEditMode = null;
                            strURLEditMode = "http://" + ViewState["servername"] + "/Common/NewEO.aspx?From=MailEdit&EOID=" + ViewState["EOID"];

                            if ((ViewState["CoOriginator"] != null))
                            {
                                if ((ViewState["EOIDFlag"] != null) && (ViewState["EOIDFlag"].ToString() == "1"))
                                {
                                    SendMail(ViewState["CoOriginator"].ToString(), "The Close-Out stage for the following EO Request has been approved. EO Number - " + ViewState["EONum"] + " - " + ViewState["EOTitle"], "Dear " + ViewState["SitePlanning"] + " ," + "<br>" + "<br>" + "The Close-Out stage for the following EO Request has been approved.  Please follow the link to see this EO." + "<br>" + "<br>" + "NOTE:  This link will open the EO in 'Read Only' Mode." + "<br><a href='" + strURLLockMode + "'>" + strURLLockMode + "</a><br>" + "<br>" + "EO Number is :" + ViewState["EONum"] + "<br>" + "SAP IO Number :" + ViewState["SAPIONum"] + "<br>" + "Smart Clearance Number :" + ViewState["SmartClearanceNum"] + "<br>" + "EO Title is  :" + ViewState["EOTitle"] + "<br>" + "<br>" + "EO Location :" + ViewState["PlantName"] + "<br>" + "Budget Center :" + ViewState["BudgetCenter"] + "<br>" + "Expected Cost : $" + ViewState["TotCost"] + "<br>" + "Current Stage  :" + ViewState["stage"] + "<br><font color=red><b>" + "Proposed Testing Start Date :" + ViewState["PlannedStartDate"] + "</b></font><br>" + "<br>" + "Thank you," + "<br>" + objSecurity.UserName + ".");
                                }
                                else
                                {
                                    SendMail(ViewState["CoOriginator"].ToString(), "Tghe Close-Out stage for the following EO Request has been approved. EO Number - " + ViewState["EONum"] + " - " + ViewState["EOTitle"], "Dear " + ViewState["SitePlanning"] + " ," + "<br>" + "<br>" + "The Close-Out stage for the following EO Request has been approved.  Please follow the link to see this EO." + "<br>" + "<br>" + "NOTE:  This link will open the EO in 'Read Only' Mode." + "<br><a href='" + strURLLockMode + "'>" + strURLLockMode + "</a><br>" + "<br>" + "EO Number is :" + ViewState["EONum"] + "<br>" + "SAP IO Number :" + ViewState["SAPIONum"] + "<br>" + "EO Title is  :" + ViewState["EOTitle"] + "<br>" + "<br>" + "EO Location :" + ViewState["PlantName"] + "<br>" + "Budget Center :" + ViewState["BudgetCenter"] + "<br>" + "Expected Cost : $" + ViewState["TotCost"] + "<br>" + "Current Stage  :" + ViewState["stage"] + "<br><font color=red><b>" + "Proposed Testing Start Date :" + ViewState["PlannedStartDate"] + "</b></font><br>" + "<br>" + "Thank you," + "<br>" + objSecurity.UserName + ".");
                                }

                            }

                            if ((ViewState["Originator"] != null))
                            {
                                if ((ViewState["EOIDFlag"] != null) && (ViewState["EOIDFlag"].ToString() == "1"))
                                {
                                    SendMail(ViewState["Originator"].ToString(), "The Close-Out stage for the following EO Request has been approved. EO Number - " + ViewState["EONum"] + " - " + ViewState["EOTitle"], "Dear " + ViewState["SitePlanning"] + " ," + "<br>" + "<br>" + "The Close-Out stage for the following EO Request has been approved.  Please follow the link to see this EO." + "<br>" + "<br>" + "NOTE:  This link will open the EO in 'Read Only' Mode." + "<br><a href='" + strURLLockMode + "'>" + strURLLockMode + "</a><br>" + "<br>" + "EO Number is :" + ViewState["EONum"] + "<br>" + "SAP IO Number :" + ViewState["SAPIONum"] + "<br>" + "Smart Clearance Number :" + ViewState["SmartClearanceNum"] + "<br>" + "EO Title is  :" + ViewState["EOTitle"] + "<br>" + "<br>" + "EO Location :" + ViewState["PlantName"] + "<br>" + "Budget Center :" + ViewState["BudgetCenter"] + "<br>" + "Expected Cost : $" + ViewState["TotCost"] + "<br>" + "Current Stage  :" + ViewState["stage"] + "<br><font color=red><b>" + "Proposed Testing Start Date :" + ViewState["PlannedStartDate"] + "</b></font><br>" + "<br>" + "Thank you," + "<br>" + objSecurity.UserName + ".");
                                }
                                else
                                {
                                    SendMail(ViewState["Originator"].ToString(), "The Close-Out stage for the following EO Request has been approved. EO Number - " + ViewState["EONum"] + " - " + ViewState["EOTitle"], "Dear " + ViewState["SitePlanning"] + " ," + "<br>" + "<br>" + "The Close-Out stage for the following EO Request has been approved.  Please follow the link to see this EO." + "<br>" + "<br>" + "NOTE:  This link will open the EO in 'Read Only' Mode." + "<br><a href='" + strURLLockMode + "'>" + strURLLockMode + "</a><br>" + "<br>" + "EO Number is :" + ViewState["EONum"] + "<br>" + "SAP IO Number :" + ViewState["SAPIONum"] + "<br>" + "EO Title is  :" + ViewState["EOTitle"] + "<br>" + "<br>" + "EO Location :" + ViewState["PlantName"] + "<br>" + "Budget Center :" + ViewState["BudgetCenter"] + "<br>" + "Expected Cost : $" + ViewState["TotCost"] + "<br>" + "Current Stage  :" + ViewState["stage"] + "<br><font color=red><b>" + "Proposed Testing Start Date :" + ViewState["PlannedStartDate"] + "</b></font><br>" + "<br>" + "Thank you," + "<br>" + objSecurity.UserName + ".");
                                }

                            }

                            //Done
                            if ((ViewState["SitePlanning"] != null))
                            {
                                if ((ViewState["EOIDFlag"] != null) && (ViewState["EOIDFlag"].ToString() == "1"))
                                {
                                    SendMail(ViewState["SitePlanning"].ToString(), "The Close-Out stage for the following EO Request has been approved. EO Number - " + ViewState["EONum"] + " - " + ViewState["EOTitle"], "Dear " + ViewState["SitePlanning"] + " ," + "<br>" + "<br>" + "The Close-Out stage for the following EO Request has been approved.  Please follow the link to see this EO." + "<br>" + "<br>" + "NOTE:  This link will open the EO in 'Read Only' Mode." + "<br><a href='" + strURLLockMode + "'>" + strURLLockMode + "</a><br>" + "<br>" + "EO Number is :" + ViewState["EONum"] + "<br>" + "SAP IO Number :" + ViewState["SAPIONum"] + "<br>" + "Smart Clearance Number :" + ViewState["SmartClearanceNum"] + "<br>" + "EO Title is  :" + ViewState["EOTitle"] + "<br>" + "<br>" + "EO Location :" + ViewState["PlantName"] + "<br>" + "Budget Center :" + ViewState["BudgetCenter"] + "<br>" + "Expected Cost :" + ViewState["TotCost"] + "<br>" + "Current Stage  :" + ViewState["stage"] + "<br><font color=red><b>" + "Proposed Testing Start Date :" + ViewState["PlannedStartDate"] + "</b></font><br>" + "<br>" + "Thank you," + "<br>" + objSecurity.UserName + ".");
                                }
                                else
                                {
                                    SendMail(ViewState["SitePlanning"].ToString(), "The Close-Out stage for the following EO Request has been approved. EO Number - " + ViewState["EONum"] + " - " + ViewState["EOTitle"], "Dear " + ViewState["SitePlanning"] + " ," + "<br>" + "<br>" + "The Close-Out stage for the following EO Request has been approved.  Please follow the link to see this EO." + "<br>" + "<br>" + "NOTE:  This link will open the EO in 'Read Only' Mode." + "<br><a href='" + strURLLockMode + "'>" + strURLLockMode + "</a><br>" + "<br>" + "EO Number is :" + ViewState["EONum"] + "<br>" + "SAP IO Number :" + ViewState["SAPIONum"] + "<br>" + "EO Title is  :" + ViewState["EOTitle"] + "<br>" + "<br>" + "EO Location :" + ViewState["PlantName"] + "<br>" + "Budget Center :" + ViewState["BudgetCenter"] + "<br>" + "Expected Cost :" + ViewState["TotCost"] + "<br>" + "Current Stage  :" + ViewState["stage"] + "<br><font color=red><b>" + "Proposed Testing Start Date :" + ViewState["PlannedStartDate"] + "</b></font><br>" + "<br>" + "Thank you," + "<br>" + objSecurity.UserName + ".");
                                }


                            }

                            //SendMail("Debra Peddenpohl-DR", "SAP IO Number has been assigned for EO Number - " & ViewState["EONum"] & " - " & ViewState["EOTitle"], "Dear Budget Tracker," & "<br>" & "<br>" & "The SAP IO Number has been assigned for this EO.  Please follow the link to see this EO." & "<br>" & "<br>" & "NOTE:  This link will open the EO in 'Read Only' Mode." & "<br><a href='" & strURLLockMode & "'>" & strURLLockMode & "</a><br>" & "<br>" & "EO Number is :" & ViewState["EONum"] & "<br>" & "SAP IO Number :" & ViewState["SAPIONum"] & "<br>" & "EO Title is  :" & ViewState["EOTitle"] & "<br>" & "<br>" & "EO Location :" & ViewState["PlantName"] & "<br>" & "Budget Center :" & ViewState["BudgetCenter"] & "<br>" & "Expected Cost :" & ViewState["TotCost"] & "<br>" & "Current Stage  :" & ViewState["stage"] & "<br><font color=red><b>" & "Proposed Testing Start Date :" & ViewState["PlannedStartDate"] & "</b></font><br>" & "<br>" & "Thank you," & "<br>" & objSecurity.UserName & ".")
                            if ((ViewState["EOIDFlag"] != null) && (ViewState["EOIDFlag"].ToString() == "1"))
                            {
                                SendMail(ConfigurationSettings.AppSettings["CloseOutCompleteEO"], "SAP IO Number has been assigned for EO Number - " + ViewState["EONum"] + " - " + ViewState["EOTitle"], "Dear Budget Tracker," + "<br>" + "<br>" + "The SAP IO Number has been assigned for this EO.  Please follow the link to see this EO." + "<br>" + "<br>" + "NOTE:  This link will open the EO in 'Read Only' Mode." + "<br><a href='" + strURLLockMode + "'>" + strURLLockMode + "</a><br>" + "<br>" + "EO Number is :" + ViewState["EONum"] + "<br>" + "SAP IO Number :" + ViewState["SAPIONum"] + "<br>" + "Smart Clearance Number :" + ViewState["SmartClearanceNum"] + "EO Title is  :" + ViewState["EOTitle"] + "<br>" + "<br>" + "EO Location :" + ViewState["PlantName"] + "<br>" + "Budget Center :" + ViewState["BudgetCenter"] + "<br>" + "Expected Cost :" + ViewState["TotCost"] + "<br>" + "Current Stage  :" + ViewState["stage"] + "<br><font color=red><b>" + "Proposed Testing Start Date :" + ViewState["PlannedStartDate"] + "</b></font><br>" + "<br>" + "Thank you," + "<br>" + objSecurity.UserName + ".");
                            }
                            else
                            {
                                SendMail(ConfigurationSettings.AppSettings["CloseOutCompleteEO"], "SAP IO Number has been assigned for EO Number - " + ViewState["EONum"] + " - " + ViewState["EOTitle"], "Dear Budget Tracker," + "<br>" + "<br>" + "The SAP IO Number has been assigned for this EO.  Please follow the link to see this EO." + "<br>" + "<br>" + "NOTE:  This link will open the EO in 'Read Only' Mode." + "<br><a href='" + strURLLockMode + "'>" + strURLLockMode + "</a><br>" + "<br>" + "EO Number is :" + ViewState["EONum"] + "<br>" + "SAP IO Number :" + ViewState["SAPIONum"] + "<br>" + "EO Title is  :" + ViewState["EOTitle"] + "<br>" + "<br>" + "EO Location :" + ViewState["PlantName"] + "<br>" + "Budget Center :" + ViewState["BudgetCenter"] + "<br>" + "Expected Cost :" + ViewState["TotCost"] + "<br>" + "Current Stage  :" + ViewState["stage"] + "<br><font color=red><b>" + "Proposed Testing Start Date :" + ViewState["PlannedStartDate"] + "</b></font><br>" + "<br>" + "Thank you," + "<br>" + objSecurity.UserName + ".");
                            }

                        }
                        catch (Exception ex)
                        {
                        }
                    }
                }
                if (strStageStatus == "Routed")
                {
                    if (strCurrentStage == "Preliminary")
                    {
                        if (txtBudgetOwner.Text != "")
                        {
                            try
                            {
                                string strURLLockMode = null;
                                strURLLockMode = "http://" + ViewState["servername"] + "/Common/NewEO.aspx?From=ForEOLock&EOID=" + ViewState["EOID"];

                                string strURLEditMode = null;
                                strURLEditMode = "http://" + ViewState["servername"] + "/Common/NewEO.aspx?From=MailEdit&EOID=" + ViewState["EOID"];

                                if ((ViewState["EOIDFlag"] != null) && (ViewState["EOIDFlag"].ToString() == "1"))
                                {
                                    SendMail(txtBudgetOwner.Text.Trim(), "REMINDER - Your approval is needed for EO Number - " + ViewState["EOID"] + " - Test document from Vertex - Kindly ignore ", "Dear Budget Approver," + "<br>" + "<br>" + "You are listed as an approver for this EO.  Please follow the link to see this EO." + "<br>" + "<br>" + "NOTE:  Use this link to open the EO in 'Read Only' Mode." + "<br>" + "<br><a href='" + strURLLockMode + "'>" + strURLLockMode + "</a><br>" + "<br>" + "NOTE:  Use this link to open the EO in 'Edit' Mode." + "<br>" + "<br><a href='" + strURLEditMode + "'>" + strURLEditMode + "</a><br>" + "<br>" + "EO Number is :" + "<br>" + "SAP IO Number :" + "<br>" + "EO Title is  :" + txtTitle.Text + "<br>" + "EO Location :" + drpPlant.SelectedItem.Text + "<br>" + "Budget Center :" + ViewState["BudgetCenter"] + "<br>" + "Expected Cost :" + lbTotalCost.Text + "<br>" + "Current Stage  :" + "<br><font color=red><b>" + "Proposed Testing Start Date :" + ViewState["PlannedStartDate"] + "</b></font><br>" + "Thank you," + "<br>" + "MUREO.");
                                }
                                else
                                {
                                    SendMail(txtBudgetOwner.Text.Trim(), "REMINDER - Your approval is needed for EO Number - " + ViewState["EOID"] + " - Test document from Vertex - Kindly ignore ", "Dear Budget Approver," + "<br>" + "<br>" + "You are listed as an approver for this EO.  Please follow the link to see this EO." + "<br>" + "<br>" + "NOTE:  Use this link to open the EO in 'Read Only' Mode." + "<br>" + "<br><a href='" + strURLLockMode + "'>" + strURLLockMode + "</a><br>" + "<br>" + "NOTE:  Use this link to open the EO in 'Edit' Mode." + "<br>" + "<br><a href='" + strURLEditMode + "'>" + strURLEditMode + "</a><br>" + "<br>" + "EO Number is :" + "<br>" + "SAP IO Number :" + "<br>" + "EO Title is  :" + txtTitle.Text + "<br>" + "EO Location :" + drpPlant.SelectedItem.Text + "<br>" + "Budget Center :" + ViewState["BudgetCenter"] + "<br>" + "Expected Cost :" + lbTotalCost.Text + "<br>" + "Current Stage  :" + "<br><font color=red><b>" + "Proposed Testing Start Date :" + ViewState["PlannedStartDate"] + "</b></font><br>" + "Thank you," + "<br>" + "MUREO.");
                                }

                            }
                            catch (Exception ex)
                            {
                            }
                        }
                    }
                    else if (strCurrentStage == "Final")
                    {
                        if (!string.IsNullOrEmpty(txtBudgetOwnerFinal.Text))
                        {
                            try
                            {
                                //jagan code start
                                mandataroinfoforEmail();
                                string strURLLockMode = null;
                                strURLLockMode = "http://" + ViewState["servername"] + "/Common/NewEO.aspx?From=ForEOLock&EOID=" + ViewState["EOID"];

                                string strURLEditMode = null;
                                strURLEditMode = "http://" + ViewState["servername"] + "/Common/NewEO.aspx?From=MailEdit&EOID=" + ViewState["EOID"];


                                SendMail(txtBudgetOwnerFinal.Text.Trim(), "REMINDER - Your approval is needed for EO Number - " + ViewState["EOID"] + " - Test document from Vertex - Kindly ignore ", "Dear Budget Approver," + "<br>" + "<br>" + "You are listed as an approver for this EO.  Please follow the link to see this EO." + "<br>" + "<br>" + "NOTE:  Use this link to open the EO in 'Read Only' Mode." + "<br>" + "<br><a href='" + strURLLockMode + "'>" + strURLLockMode + "</a><br>" + "<br>" + "NOTE:  Use this link to open the EO in 'Edit' Mode." + "<br>" + "<br><a href='" + strURLEditMode + "'>" + strURLEditMode + "</a><br>" + "<br>" + "EO Number is :" + "<br>" + "SAP IO Number :" + "<br>" + "EO Title is  :" + txtTitle.Text + "<br>" + "EO Location :" + drpPlant.SelectedItem.Text + "<br>" + "Budget Center :" + ViewState["BudgetCenter"] + "<br>" + "Expected Cost :" + lbTotalCost.Text + "<br>" + "Current Stage  :" + "<br><font color=red><b>" + "Proposed Testing Start Date :" + ViewState["PlannedStartDate"] + "</b></font><br>" + "Thank you," + "<br>" + objSecurity.UserName);
                                //jagan code end
                            }
                            catch (Exception ex)
                            {
                            }
                        }
                    }
                    else if (strCurrentStage == "CloseOut")
                    {
                        if (!string.IsNullOrEmpty(txtCloseBudgetOwner.Text))
                        {
                            try
                            {
                                //jagan code start
                                mandataroinfoforEmail();

                                DataSet dsCloseOutAppList = null;


                                int intCloseOutAppList = 0;
                                if (objEOBA.GET_EO_Closeout(Convert.ToInt32(ViewState["EOID"]), ref dsCloseOutAppList))
                                {
                                    try
                                    {
                                        if ((dsCloseOutAppList != null))
                                        {
                                            if (!(dsCloseOutAppList.Tables.Count == 0))
                                            {
                                                if (!(dsCloseOutAppList.Tables[5].Rows.Count == 0))
                                                {
                                                    for (intCloseOutAppList = 0; intCloseOutAppList <= dsCloseOutAppList.Tables[5].Rows.Count - 1; intCloseOutAppList++)
                                                    {
                                                        string strURLLockMode = null;
                                                        strURLLockMode = "http://" + ViewState["servername"] + "/Common/NewEO.aspx?From=ForEOLock&EOID=" + ViewState["EOID"];

                                                        string strURLEditMode = null;
                                                        strURLEditMode = "http://" + ViewState["servername"] + "/Common/NewEO.aspx?From=MailEdit&EOID=" + ViewState["EOID"];


                                                        if (dsCloseOutAppList.Tables[5].Rows[intCloseOutAppList]["Function_Name"].ToString() == "Budget Center")
                                                        {
                                                            SendMail(dsCloseOutAppList.Tables[5].Rows[intCloseOutAppList]["Approver_Name"].ToString(), "Please Review by " + ViewState["nextTwoDate"] + ". EO Number - " + ViewState["EONum"] + " - " + ViewState["EOTitle"], "Dear Budget Approver," + "<br>" + "<br>" + "You are listed as an approver for this EO.  Please follow the link to see this EO." + "<br>" + "<br>" + "NOTE:  Use this link to open the EO in 'Read Only' Mode." + "<br><a href='" + strURLLockMode + "'>" + strURLLockMode + "</a><br>" + "<br>" + "NOTE:  Use this link to open the EO in 'Edit' Mode." + "<br>" + "<br><a href='" + strURLEditMode + "'>" + strURLEditMode + "</a><br>" + "<br>" + "EO Number is :" + ViewState["EONum"] + "<br>" + "SAP IO Number :" + ViewState["SAPIONum"] + "<br>" + "Smart Clearance Number :" + ViewState["SmartClearanceNum"] + "<br>" + "EO Title is  :" + ViewState["EOTitle"] + "<br>" + "<br>" + "EO Location :" + ViewState["PlantName"] + "<br>" + "Budget Center :" + ViewState["BudgetCenter"] + "<br>" + "Expected Cost :" + ViewState["TotCost"] + "<br>" + "Current Stage  :" + ViewState["stage"] + "<br><font color=red><b>" + "Proposed Testing Start Date :" + ViewState["PlannedStartDate"] + "</b></font><br>" + "<br>" + "Thank you," + "<br>" + objSecurity.UserName + ".");

                                                        }
                                                        else
                                                        {
                                                            SendMail(dsCloseOutAppList.Tables[5].Rows[intCloseOutAppList]["Approver_Name"].ToString(), "Please Review by " + ViewState["nextTwoDate"] + ". EO Number - " + ViewState["EONum"] + " - " + ViewState["EOTitle"], "Dear " + dsCloseOutAppList.Tables[5].Rows[intCloseOutAppList]["Function_Name"] + " Approver," + "<br>" + "<br>" + "You are listed as an approver for this EO.  Please follow the link to see this EO." + "<br>" + "<br>" + "NOTE:  Use this link to open the EO in 'Read Only' Mode." + "<br><a href='" + strURLLockMode + "'>" + strURLLockMode + "</a><br>" + "<br>" + "NOTE:  Use this link to open the EO in 'Edit' Mode." + "<br>" + "<br><a href='" + strURLEditMode + "'>" + strURLEditMode + "</a><br>" + "<br>" + "EO Number is :" + ViewState["EONum"] + "<br>" + "SAP IO Number :" + ViewState["SAPIONum"] + "<br>" + "Smart Clearance Number :" + ViewState["SmartClearanceNum"] + "<br>" + "EO Title is  :" + ViewState["EOTitle"] + "<br>" + "<br>" + "EO Location :" + ViewState["PlantName"] + "<br>" + "Budget Center :" + ViewState["BudgetCenter"] + "<br>" + "Expected Cost :" + ViewState["TotCost"] + "<br>" + "Current Stage  :" + ViewState["stage"] + "<br><font color=red><b>" + "Proposed Testing Start Date :" + ViewState["PlannedStartDate"] + "</b></font><br>" + "<br>" + "Thank you," + "<br>" + objSecurity.UserName + ".");
                                                        }

                                                    }
                                                }
                                            }
                                        }

                                    }
                                    catch (Exception ex)
                                    {
                                    }
                                }



                                //Dim strURLLockMode As String
                                //strURLLockMode = "http://" & ViewState["servername"] & "/MUREO/Common/NewEO.aspx?From=ForEOLock&EOID=" & ViewState["EOID"]

                                //Dim strURLEditMode As String
                                //strURLEditMode = "http://" & ViewState["servername"] & "/MUREO/Common/NewEO.aspx?From=MailEdit&EOID=" & ViewState["EOID"]

                                //'SendMail(txtCloseBudgetOwner.Text.Trim(), "REMINDER - Your approval is needed for EO Number - " & ViewState["EOID"] & " - Test document from Vertex - Kindly ignore ", "Dear Budget Approver :" & "<br>" & "<br>" & "You are listed as an approver for this EO.  Please follow the link to see this EO." & "<br>" & "<br>" & "NOTE:  Use this link to open the EO in 'Read Only' Mode." & "<br>" & "<br>" & strURLLockMode & "<br>" & "<br>" & "NOTE:  Use this link will open the EO in 'Edit' Mode." & "<br>" & "<br>" & strURLEditMode & "<br>" & "<br>" & "EO Number is :" & "<br>" & "SAP IO Number :" & "<br>" & "EO Title is  :" & txtTitle.Text & "<br>" & "EO Location :" & drpPlant.SelectedItem.Text & "<br>" & "Budget Center :" & "<br>" & "Expected Cost :" & lbTotalCost.Text & "<br>" & "Current Stage  :" & "<br>" & "Proposed Testing Start Date :" & "<br>" & "Thank you," & "<br>" & objSecurity.UserName)
                                //SendMail(txtCloseBudgetOwner.Text, "Please Review by" & Date.Now & ". EO Number - " & ViewState["EONum"] & " - " & ViewState["EOTitle"], "Dear Budget Approver," & "<br>" & "<br>" & "You are listed as an approver for this EO.  Please follow the link to see this EO." & "<br>" & "<br>" & "NOTE:  Use this link to open the EO in 'Read Only' Mode." & "<br>" & strURLLockMode & "<br>" & "<br>" & "NOTE:  Use this link to open the EO in 'Edit' Mode." & "<br>" & "<br>" & strURLEditMode & "<br>" & "<br>" & "EO Number is :" & ViewState["EONum"] & "<br>" & "SAP IO Number :" & ViewState["SAPIONum"] & "<br>" & "EO Title is  :" & ViewState["EOTitle"] & "<br>" & "EO Location :" & ViewState["PlantName"] & "<br>" & "Budget Center :" & ViewState["BudgetCenter"] & "<br>" & "Expected Cost :" & ViewState["TotCost"] & "<br>" & "Current Stage  :" & ViewState["stage"] & "<br>" & "Proposed Testing Start Date :" & ViewState["PlannedStartDate"] & "<br>" & "<br>" & "Thank you," & "<br>" & objSecurity.UserName & ".")
                            }
                            catch (Exception ex)
                            {
                            }
                        }
                    }
                }
                if (strCurrentStage == "CloseOut" & strStageStatus == "Routed")
                {
                    if (!(ViewState["EOID"] == null))
                    {
                        if (objEOBA.SET_EO_Lock_Release_User(Convert.ToInt32(ViewState["EOID"]), objSecurity.UserName))
                        { }
                    }
                    //string script = null;
                    //script = "<script>alert('CloseOut Route Completed Successfully');window.navigate('../Reports/MYEOs.aspx');</script> ";
                    //Page.RegisterStartupScript("clientscript", script);

                    ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "alert('CloseOut Route Completed Successfully.');window.location='../Reports/MYEOs.aspx';", true);
                }
                else if (strresumeExit.ToUpper() == "Resume".ToUpper())
                {
                    //txtCloseApproverComments.Text = "";
                    //string script = null;
                    //script = "<script>alert('Record updated successfully');</script>";
                    //Page.RegisterStartupScript("clientscript", script);
                    //August
                    ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "alert('Record updated successfully.');", true);
                    DataSet ds = null;
                    if (objEOBA.GET_EO_Closeout(Convert.ToInt32(ViewState["EOID"]), ref ds))
                    {
                        if ((ds != null))
                        {
                            if (!(ds.Tables.Count == 0))
                            {
                                //Actual Cost Sheet

                                try
                                {
                                    if (!(ds.Tables[11].Rows.Count == 0))
                                    {
                                        lbFinalCostAttach.DataSource = ds.Tables[11].DefaultView;
                                        lbFinalCostAttach.DataTextField = "Actual_Cost_Sheet_Attachment_File_Name";
                                        lbFinalCostAttach.DataValueField = "Actual_Cost_Sheet_Attach_ID";
                                        lbFinalCostAttach.DataBind();
                                    }
                                }
                                catch (Exception ex)
                                {
                                }

                                try
                                {
                                    dgrdActualCostCloseOut.DataSource = null;
                                    dgrdActualCostCloseOut.DataBind();

                                }
                                catch (Exception ex)
                                {
                                }

                                if (!(ds.Tables[11].Rows.Count == 0))
                                {
                                    dgrdActualCostCloseOut.DataSource = ds.Tables[11].DefaultView;
                                    dgrdActualCostCloseOut.DataBind();
                                }

                                //Test Plans Used
                                try
                                {
                                    if (!(ds.Tables[13].Rows.Count == 0))
                                    {
                                        lbTestPlanUsedAttach.DataSource = ds.Tables[13].DefaultView;
                                        lbTestPlanUsedAttach.DataTextField = "Plans_Used_Attachment_File_Name";
                                        lbTestPlanUsedAttach.DataValueField = "Plans_Used_Attach_ID";
                                        lbTestPlanUsedAttach.DataBind();
                                    }


                                }
                                catch (Exception ex)
                                {
                                }
                                try
                                {
                                    dgrdTestPlansCloseOut.DataSource = null;
                                    dgrdTestPlansCloseOut.DataBind();

                                }
                                catch (Exception ex)
                                {
                                }
                                if (!(ds.Tables[13].Rows.Count == 0))
                                {
                                    dgrdTestPlansCloseOut.DataSource = ds.Tables[13].DefaultView;
                                    dgrdTestPlansCloseOut.DataBind();
                                }

                                //ILR
                                try
                                {
                                    if (!(ds.Tables[12].Rows.Count == 0))
                                    {
                                        lbILR.DataSource = ds.Tables[12].DefaultView;
                                        lbILR.DataTextField = "Initial_Learning_Attachment_File_Name";
                                        lbILR.DataValueField = "Initial_Learning_Attach_ID";
                                        lbILR.DataBind();
                                    }

                                }
                                catch (Exception ex)
                                {
                                }
                                try
                                {
                                    dgrdILR.DataSource = null;
                                    dgrdILR.DataBind();
                                }
                                catch (Exception ex)
                                {
                                }

                                if (!(ds.Tables[12].Rows.Count == 0))
                                {
                                    dgrdILR.DataSource = ds.Tables[12].DefaultView;
                                    dgrdILR.DataBind();
                                }


                                //Closeout Report Attachment
                                try
                                {
                                    if (!(ds.Tables[14].Rows.Count == 0))
                                    {
                                        lbCOReport.DataSource = ds.Tables[14].DefaultView;
                                        lbCOReport.DataTextField = "Closeout_Report_Attachment_File_Name";
                                        lbCOReport.DataValueField = "Closeout_Report_Attach_ID";
                                        lbCOReport.DataBind();
                                    }

                                }
                                catch (Exception ex)
                                {
                                }
                                try
                                {
                                    dgrdCOReport.DataSource = null;
                                    dgrdCOReport.DataBind();

                                }
                                catch (Exception ex)
                                {
                                }
                                if (!(ds.Tables[14].Rows.Count == 0))
                                {
                                    dgrdCOReport.DataSource = ds.Tables[14].DefaultView;
                                    dgrdCOReport.DataBind();
                                }
                            }
                        }
                    }
                }
                else if (strStageStatus.ToUpper() == "Approved".ToUpper())
                {
                    if (!(ViewState["EOID"] == null))
                    {
                        if (objEOBA.SET_EO_Lock_Release_User(Convert.ToInt32(ViewState["EOID"]), objSecurity.UserName))
                        { }
                    }
                    //string script = null;
                    //script = "<script>alert('EO completed successfully');window.navigate('Home.aspx');</script> ";
                    //Page.RegisterStartupScript("clientscript", script);

                    ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "alert('EO completed successfully.');window.location='Home.aspx';", true);
                }
                else
                {
                    if (!(ViewState["EOID"] == null))
                    {
                        if (objEOBA.SET_EO_Lock_Release_User(Convert.ToInt32(ViewState["EOID"]), objSecurity.UserName))
                        { }
                    }
                    //string script = null;
                    //script = "<script>alert('Record updated successfully');window.navigate('Home.aspx');</script> ";
                    //Page.RegisterStartupScript("clientscript", script);
                    if (ViewState["Closeout"] != null)
                    {
                        if (ViewState["Closeout"].ToString() == "Yes")
                        {
                            ViewState["Closeout"] = null;
                        }
                        else
                        {
                            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "alert('Record updated successfully.');window.location='Home.aspx';", true);
                        }
                    }
                    else
                    {
                        ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "alert('Record updated successfully.');window.location='Home.aspx';", true);
                    }

                }
            }
            else if (intresSETEOCloseout == 5)
            {
                //string script = null;
                //script = "<script>alert('Document is already in edit mode. Please try again in a few minutes..');window.navigate('Home.aspx');</script> ";
                //Page.RegisterStartupScript("clientscript", script);

                ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "alert('Document is already in edit mode. Please try again in a few minutes...');window.location='Home.aspx';", true);
            }
            else
            {
                int intResult = 0;
                if (objEOBA.SET_EO_Delete_Upon_Error(Convert.ToInt32(objEO.EOID), Convert.ToChar(rbEOType.SelectedItem.Value), ref paramOut))
                {
                    if (paramOut[0].Value != DBNull.Value)
                        intresSETEOCloseout = Convert.ToInt32(paramOut[0].Value);
                    else
                        intresSETEOCloseout = -1;
                }

                if (!(ViewState["EOID"] == null))
                {
                    if (objEOBA.SET_EO_Lock_Release_User(Convert.ToInt32(ViewState["EOID"]), objSecurity.UserName))
                    { }
                }
                //string script = null;
                //script = "<script>alert('Record Creation Failed');window.navigate('Home.aspx');</script> ";
                //Page.RegisterStartupScript("clientscript", script);

                ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "alert('Record Creation Failed.');window.location='Home.aspx';", true);
                //Dim script As String
                //script = "<script>alert('Record Creation Failed');</script> "
                //Page.RegisterStartupScript("clientscript", script)
            }

        }

        private void FinalCloseOutTabSave(string strCurrentStage, string strStageStatus, string strresumeExit)
        {
            objEO objEO = new objEO();

            SqlParameter[] paramOut = null;
            objEO.EOID = ViewState["EOID"].ToString();
            objEO.FinalCurrentStagePre = strCurrentStage;
            objEO.FinalStageStatus = strStageStatus;
            objEO.CloseOutCurrentStage = strCurrentStage;
            objEO.CloseOutStageStatus = strStageStatus;
            if (!string.IsNullOrEmpty(lblBudgetCenterFinalDB.Text.Trim()))
            {
                objEO.BudgetCenterFinal = lblBudgetCenterFinalDB.Text.Trim();
            }
            else
            {
                //objEO.BudgetCenterFinal = DBNull.Value.ToString
                objEO.BudgetCenterFinal = "0";
            }
            //@p_New_Chemical_Change
            objEO.NewChemicalChange = "N";
            //@p_New_RawMaterial_Change
            objEO.NewRawMaterialChange = "N";

            //-- Packaging Disposition Information Section
            //@p_Prod_Pack_ID_List
            int intProdPackIdList = 0;
            string strProdPackIdList = null;
            for (intProdPackIdList = 1; intProdPackIdList <= lbFinalPackagingInfoDB.Items.Count - 1; intProdPackIdList++)
            {
                if (lbFinalPackagingInfoDB.Items[intProdPackIdList].Selected == true)
                {
                    if (string.IsNullOrEmpty(strProdPackIdList))
                    {
                        strProdPackIdList = lbFinalPackagingInfoDB.Items[intProdPackIdList].Value;
                    }
                    else
                    {
                        strProdPackIdList = strProdPackIdList + "," + lbFinalPackagingInfoDB.Items[intProdPackIdList].Value;
                    }
                }
            }
            if (!string.IsNullOrEmpty(strProdPackIdList))
            {
                objEO.ProductPack = strProdPackIdList;
            }
            else
            {
                objEO.ProductPack = DBNull.Value.ToString();
            }
            //@p_Current_Packaging		
            if (chkCurPack.Checked == true)
            {
                objEO.CurrentPackage = "Y";
            }
            else
            {
                objEO.CurrentPackage = "N";
            }
            //@p_Current_Packaging_Type

            //@p_Current_Packaging_Type --changed to @p_Packaging_Type

            int intCurFinalPakType = 0;
            string strCurFinalPakType = null;
            for (intCurFinalPakType = 0; intCurFinalPakType <= lbFinalPackage.Items.Count - 1; intCurFinalPakType++)
            {
                if (lbFinalPackage.Items[intCurFinalPakType].Selected == true)
                {
                    if (string.IsNullOrEmpty(strCurFinalPakType))
                    {
                        strCurFinalPakType = lbFinalPackage.Items[intCurFinalPakType].Value;
                        //lbPackaging.SelectedItem.Value
                    }
                    else
                    {
                        strCurFinalPakType = strCurFinalPakType + "," + lbFinalPackage.Items[intCurFinalPakType].Value;
                    }
                }
            }

            if (!string.IsNullOrEmpty(strCurFinalPakType))
            {
                objEO.CurrentPackagingType = strCurFinalPakType;
            }
            else
            {
                objEO.CurrentPackagingType = DBNull.Value.ToString();
            }

            //objEO.CurrentPackagingType = DBNull.Value.ToString
            //@p_Experimental_Packaging		
            if (chkExpPack.Checked == true)
            {
                objEO.ExperimentPackage = "Y";
            }
            else
            {
                objEO.ExperimentPackage = "N";
            }

            //@p_Exp_Pack_Clear_Poly	
            if (chkCurrentPoly.Checked == true)
            {
                objEO.ClearPolyFinal = "Y";
            }
            else
            {
                objEO.ClearPolyFinal = "N";
            }

            //@p_Exp_Pack_Blank_KDF
            if (chkBlankKGF.Checked == true)
            {
                objEO.BlankKDFFinal = "Y";
            }
            else
            {
                objEO.BlankKDFFinal = "N";
            }

            //@p_Prod_Disp_ID
            if (!(drpFinalProductDispositionDB.SelectedIndex == -1 | drpFinalProductDispositionDB.SelectedIndex == 0))
            {
                objEO.ProdDispoID = Convert.ToInt32(drpFinalProductDispositionDB.SelectedItem.Value);
            }
            else
            {
                objEO.ProdDispoID = 0;
            }

            //@p_Prod_Disp_Add_Comments	
            if (!string.IsNullOrEmpty(txtProductDisposition.Text.Trim()))
            {
                objEO.OtherProdDispo = txtProductDisposition.Text.Trim();
            }
            else
            {
                objEO.OtherProdDispo = DBNull.Value.ToString();
            }

            //@p_Pallet_Patter_SKU	
            if (rbUniqPallet.Items[0].Selected)
            {
                objEO.EOUniquePalletPaerns = "Y";
            }
            else if (rbUniqPallet.Items[1].Selected)
            {
                objEO.EOUniquePalletPaerns = "N";
            }
            else
            {
                objEO.EOUniquePalletPaerns = "";
            }

            //changed for making stack/ship radio button to check box on 12/03/08
            //@p_Stack_Testing	
            if (chkFinalStackShip.Items[0].Selected == false)
            {
                objEO.EOUniqPaletPatStackTesing = "N";
            }
            else if (chkFinalStackShip.Items[0].Selected == true)
            {
                objEO.EOUniqPaletPatStackTesing = "Y";
            }
            else
            {
                objEO.EOUniqPaletPatStackTesing = "";
            }

            //@p_Ship_Testing	
            if (chkFinalStackShip.Items[1].Selected == false)
            {
                objEO.EOUniqPaletPatShipTesing = "N";
            }
            else if (chkFinalStackShip.Items[1].Selected == true)
            {
                objEO.EOUniqPaletPatShipTesing = "Y";
            }
            else
            {
                objEO.EOUniqPaletPatShipTesing = "";
            }


            //@p_Material_Disposition_ID
            if (!(drpFinalMaterialDispositionDBFinal.SelectedIndex == -1 | drpFinalMaterialDispositionDBFinal.SelectedIndex == 0))
            {
                objEO.MaterialDispostion = Convert.ToInt32(drpFinalMaterialDispositionDBFinal.SelectedItem.Value);
            }
            else
            {
                objEO.MaterialDispostion = 0;
            }

            //@p_Mat_Disp_Add_Comments
            //
            if (!string.IsNullOrEmpty(txtMaterialDisposition.Text.Trim()))
            {
                objEO.MaterialDispoAddCommnets = txtMaterialDisposition.Text.Trim();
            }
            else
            {
                objEO.MaterialDispoAddCommnets = DBNull.Value.ToString();
            }

            //@p_Broke_Disp_Normal
            if (rbBrokeDisposition.Items[0].Selected)
            {
                objEO.EOGraterNormalBroke = "Y";
            }
            else if (rbBrokeDisposition.Items[1].Selected)
            {
                objEO.EOGraterNormalBroke = "N";
            }
            else
            {
                objEO.EOGraterNormalBroke = "";
            }

            //@p_Printer_Broke
            if (rbPrintBrokeFinal.Items[0].Selected)
            {
                objEO.EOPrintedBroke = "Y";
            }
            else if (rbPrintBrokeFinal.Items[1].Selected)
            {
                objEO.EOPrintedBroke = "N";
            }
            else
            {
                objEO.EOPrintedBroke = "";
            }

            //@p_Ink_Coverage	
            if (rbPrintedBrokeInk.Items[0].Selected)
            {
                objEO.EOPrintedBrokeIncCov = "Y";
            }
            else if (rbPrintedBrokeInk.Items[1].Selected)
            {
                objEO.EOPrintedBrokeIncCov = "N";
            }
            else
            {
                objEO.EOPrintedBrokeIncCov = "";
            }

            //@p_PDI_Lab_Notebook_Number	
            if (!string.IsNullOrEmpty(txtLabNoteBook.Text.Trim()))
            {
                objEO.PDILabNotebookNumber = txtLabNoteBook.Text.Trim();
            }
            else
            {
                objEO.PDILabNotebookNumber = DBNull.Value.ToString();
            }

            //@p_PDI_Attachment			
            if (!string.IsNullOrEmpty(txtAddPertaingEO.Value))
            {
                objEO.PDIAttachment = txtAddPertaingEO.Value;
            }
            else
            {
                objEO.PDIAttachment = DBNull.Value.ToString();
            }

            objEO.EstmAmtCostSheet = Convert.ToDecimal(objEO.TotCost);

            //@p_Total_Cost_Diff		
            if (rbCostSheetDiff.Items[0].Selected)
            {
                objEO.TotDiffCostSheet = "Y";
            }
            else if (rbCostSheetDiff.Items[1].Selected)
            {
                objEO.TotDiffCostSheet = "N";
            }
            else
            {
                objEO.TotDiffCostSheet = "";
            }

            //@p_Cost_Cost_Sheet		
            if (!string.IsNullOrEmpty(txtCostSheetDiff.Text.Trim()))
            {
                objEO.TotDiffCostSheetYesOpt = Convert.ToDecimal(txtCostSheetDiff.Text.Trim());
            }
            else
            {
                objEO.TotDiffCostSheetYesOpt = Convert.ToDecimal(0.0);
                //DBNull.Value.ToString
            }

            //@p_CS_Comments		
            if (!string.IsNullOrEmpty(txtCostSheetComments.Text.Trim()))
            {
                objEO.AddCommnetsCostSheet = txtCostSheetComments.Text.Trim();
            }
            else
            {
                objEO.AddCommnetsCostSheet = DBNull.Value.ToString();
            }

            //@p_CS_Attachments		
            if (!string.IsNullOrEmpty(CSAttachments.Value))
            {
                objEO.AttaCostSheet = CSAttachments.Value;
            }
            else
            {
                objEO.AttaCostSheet = DBNull.Value.ToString();
            }

            //@p_Formula_Card_Info	 Note : intially it was dropdown now its changed to textbox.
            if (!(txtFinal.Text.Trim() == string.Empty))
            {
                objEO.EOFormulaCardInformation = txtFinal.Text.Trim();
            }
            else
            {
                objEO.EOFormulaCardInformation = DBNull.Value.ToString();
            }

            //@p_FC_Attachment		
            if (!string.IsNullOrEmpty(txtFCAttachment.Value))
            {
                objEO.AttachFormulaCard = txtFCAttachment.Value;
            }
            else
            {
                //objEO.AttachFormulaCard = DBNull.Value.ToString
                objEO.AttachFormulaCard = "0";
            }

            // -- Test Plans 
            //@p_TP_Attachment		
            if (!string.IsNullOrEmpty(txtTPAttachment.Value))
            {
                objEO.TestPlantAttachments = txtTPAttachment.Value;
            }
            else
            {
                objEO.TestPlantAttachments = DBNull.Value.ToString();
            }

            //-- Lab Samplings Plans 
            //@p_Central_Analytical_Lab	
            if (chkCenAnaLab.Checked == true)
            {
                objEO.CentralAnalyticalLab = "Y";
            }
            else
            {
                objEO.CentralAnalyticalLab = "N";
            }

            //@p_Site_Testing_Lab
            if (chkSiteTestLab.Checked == true)
            {
                objEO.SiteTestingLab = "Y";
            }
            else
            {
                objEO.SiteTestingLab = "N";
            }

            //@p_LS_Attachment	
            if (!string.IsNullOrEmpty(txtLSAttachment.Value))
            {
                objEO.AttchLabforTesting = txtLSAttachment.Value;
            }
            else
            {
                objEO.AttchLabforTesting = DBNull.Value.ToString();
            }

            //-- Product or Detailed Test Flow Matrix 
            //@p_PTF_Attachment		
            if (!string.IsNullOrEmpty(txtPTFAttachment.Value))
            {
                objEO.ProdDetailTest = txtPTFAttachment.Value;
            }
            else
            {
                objEO.ProdDetailTest = DBNull.Value.ToString();
            }

            //-- Other Supporting Documents 
            //@p_Comments_Approvers		VARCHAR(1000)=NULL,

            if (!string.IsNullOrEmpty(txtApproverComments.Text.Trim()))
            {
                objEO.Comments = txtApproverComments.Text.Trim();
            }
            else
            {
                objEO.Comments = DBNull.Value.ToString();
            }

            //@p_OD_Attachment		VARCHAR(4000)=NULL, 
            if (!string.IsNullOrEmpty(txtODAttachment.Value))
            {
                objEO.OtherSupAttach = txtODAttachment.Value;
            }
            else
            {
                objEO.OtherSupAttach = DBNull.Value.ToString();
            }

            //-- Final Approval 
            //@p_Approval_Group_ID
            if (!(drpAppGrpFinal.SelectedIndex == -1 | drpAppGrpFinal.SelectedIndex == 0))
            {
                objEO.AppGrp = Convert.ToInt32(drpAppGrpFinal.SelectedItem.Value);
            }
            else
            {
                objEO.AppGrp = 0;
            }
            string strFuncNameAppNamefinal = null;

            if (!string.IsNullOrEmpty(txtPSInitiative.Text))
            {
                if (string.IsNullOrEmpty(strFuncNameAppNamefinal))
                {
                    strFuncNameAppNamefinal = lblPSIntiativeFinalAppgrp.Text + ":" + txtPSInitiative.Text;
                }
                else
                {
                    strFuncNameAppNamefinal = strFuncNameAppNamefinal + "," + lblPSIntiativeFinalAppgrp.Text + ":" + txtPSInitiative.Text;
                }
            }

            if (!string.IsNullOrEmpty(txtProductsResearch.Text))
            {
                if (string.IsNullOrEmpty(strFuncNameAppNamefinal))
                {
                    strFuncNameAppNamefinal = lblFinalAppgrpprodResearch.Text + ":" + txtProductsResearch.Text;
                }
                else
                {
                    strFuncNameAppNamefinal = strFuncNameAppNamefinal + "," + lblFinalAppgrpprodResearch.Text + ":" + txtProductsResearch.Text;
                }
            }


            if (!string.IsNullOrEmpty(txtBudgetOwnerFinal.Text))
            {
                if (string.IsNullOrEmpty(strFuncNameAppNamefinal))
                {
                    strFuncNameAppNamefinal = lblFinalAppgrpBO.Text + ":" + txtBudgetOwnerFinal.Text;
                }
                else
                {
                    strFuncNameAppNamefinal = strFuncNameAppNamefinal + "," + lblFinalAppgrpBO.Text + ":" + txtBudgetOwnerFinal.Text;
                }
            }

            if (!string.IsNullOrEmpty(txtGBUHSEFinal.Text))
            {
                if (string.IsNullOrEmpty(strFuncNameAppNamefinal))
                {
                    strFuncNameAppNamefinal = lblFinalAppgrpGBUHSE.Text + ":" + txtGBUHSEFinal.Text;
                }
                else
                {
                    strFuncNameAppNamefinal = strFuncNameAppNamefinal + "," + lblFinalAppgrpGBUHSE.Text + ":" + txtGBUHSEFinal.Text;
                }
            }

            if (!string.IsNullOrEmpty(txtSiteHSEFinal.Text))
            {
                if (string.IsNullOrEmpty(strFuncNameAppNamefinal))
                {
                    strFuncNameAppNamefinal = lblFinalAppgrpSiteHSE.Text + ":" + txtSiteHSEFinal.Text;
                }
                else
                {
                    strFuncNameAppNamefinal = strFuncNameAppNamefinal + "," + lblFinalAppgrpSiteHSE.Text + ":" + txtSiteHSEFinal.Text;
                }
            }

            if (!string.IsNullOrEmpty(txtSAPCostCenter.Text))
            {
                if (string.IsNullOrEmpty(strFuncNameAppNamefinal))
                {
                    strFuncNameAppNamefinal = lblFinalAppgrpSAP.Text + ":" + txtSAPCostCenter.Text;
                }
                else
                {
                    strFuncNameAppNamefinal = strFuncNameAppNamefinal + "," + lblFinalAppgrpSAP.Text + ":" + txtSAPCostCenter.Text;
                }
            }

            //Added by David
            //Date: 07/16/2010
            if (!string.IsNullOrEmpty(txtSMARTClearanceFinal.Text))
            {
                if (string.IsNullOrEmpty(strFuncNameAppNamefinal))
                {
                    strFuncNameAppNamefinal = lblFinalAppgrpSMARTClearance.Text + ":" + txtSMARTClearanceFinal.Text;
                }
                else
                {
                    strFuncNameAppNamefinal = strFuncNameAppNamefinal + "," + lblFinalAppgrpSMARTClearance.Text + ":" + txtSMARTClearanceFinal.Text;
                }
            }


            if (!string.IsNullOrEmpty(txtSitePlanFinal.Text))
            {
                if (string.IsNullOrEmpty(strFuncNameAppNamefinal))
                {
                    strFuncNameAppNamefinal = lblFinalAppgrpSitePlan.Text + ":" + txtSitePlanFinal.Text;
                }
                else
                {
                    strFuncNameAppNamefinal = strFuncNameAppNamefinal + "," + lblFinalAppgrpSitePlan.Text + ":" + txtSitePlanFinal.Text;
                }
            }

            if (!string.IsNullOrEmpty(txtSiteContactFinal.Text))
            {
                if (string.IsNullOrEmpty(strFuncNameAppNamefinal))
                {
                    strFuncNameAppNamefinal = lblFinalAppgrpSiteContact.Text + ":" + txtSiteContactFinal.Text;
                }
                else
                {
                    strFuncNameAppNamefinal = strFuncNameAppNamefinal + "," + lblFinalAppgrpSiteContact.Text + ":" + txtSiteContactFinal.Text;
                }
            }

            if (!string.IsNullOrEmpty(txtSiteFinance.Text))
            {
                if (string.IsNullOrEmpty(strFuncNameAppNamefinal))
                {
                    strFuncNameAppNamefinal = lblFinalAppgrpSiteFinance.Text + ":" + txtSiteFinance.Text;
                }
                else
                {
                    strFuncNameAppNamefinal = strFuncNameAppNamefinal + "," + lblFinalAppgrpSiteFinance.Text + ":" + txtSiteFinance.Text;
                }
            }

            if (!string.IsNullOrEmpty(txtSiteLeaderShip.Text))
            {
                if (string.IsNullOrEmpty(strFuncNameAppNamefinal))
                {
                    strFuncNameAppNamefinal = lblFinalAppgrpSiteLeaderShip.Text + ":" + txtSiteLeaderShip.Text;
                }
                else
                {
                    strFuncNameAppNamefinal = strFuncNameAppNamefinal + "," + lblFinalAppgrpSiteLeaderShip.Text + ":" + txtSiteLeaderShip.Text;
                }
            }

            if (!string.IsNullOrEmpty(txtPSRAFinal.Text))
            {
                if (string.IsNullOrEmpty(strFuncNameAppNamefinal))
                {
                    strFuncNameAppNamefinal = lblFinalAppgrpPSRA.Text + ":" + txtPSRAFinal.Text;
                }
                else
                {
                    strFuncNameAppNamefinal = strFuncNameAppNamefinal + "," + lblFinalAppgrpPSRA.Text + ":" + txtPSRAFinal.Text;
                }
            }

            if (!string.IsNullOrEmpty(txtFinalTimingGate.Text))
            {
                if (string.IsNullOrEmpty(strFuncNameAppNamefinal))
                {
                    strFuncNameAppNamefinal = lblFinalAppgrpTimingGate.Text + ":" + txtFinalTimingGate.Text;
                }
                else
                {
                    strFuncNameAppNamefinal = strFuncNameAppNamefinal + "," + lblFinalAppgrpTimingGate.Text + ":" + txtFinalTimingGate.Text;
                }
            }

            if (!string.IsNullOrEmpty(txtFinalQA.Text))
            {
                if (string.IsNullOrEmpty(strFuncNameAppNamefinal))
                {
                    strFuncNameAppNamefinal = lblFinalAppgrpQA.Text + ":" + txtFinalQA.Text;
                }
                else
                {
                    strFuncNameAppNamefinal = strFuncNameAppNamefinal + "," + lblFinalAppgrpQA.Text + ":" + txtFinalQA.Text;
                }
            }

            //Added for Central QA 05/18/09
            if (!string.IsNullOrEmpty(txtFinalCentralQA.Text))
            {
                if (string.IsNullOrEmpty(strFuncNameAppNamefinal))
                {
                    strFuncNameAppNamefinal = lblFinalAppgrpCentralQA.Text + ":" + txtFinalCentralQA.Text;
                }
                else
                {
                    strFuncNameAppNamefinal = strFuncNameAppNamefinal + "," + lblFinalAppgrpCentralQA.Text + ":" + txtFinalCentralQA.Text;
                }
            }

            if (!string.IsNullOrEmpty(txtFinalStandardsOffice.Text))
            {
                if (string.IsNullOrEmpty(strFuncNameAppNamefinal))
                {
                    strFuncNameAppNamefinal = lblFinalAppgrpStandsOffice.Text + ":" + txtFinalStandardsOffice.Text;
                }
                else
                {
                    strFuncNameAppNamefinal = strFuncNameAppNamefinal + "," + lblFinalAppgrpStandsOffice.Text + ":" + txtFinalStandardsOffice.Text;
                }
            }

            //Added by David - MUREO PCR : 4 Additional Approvers - Date: 01/03/2012

            if (!string.IsNullOrEmpty(txtFinalAdditionalApprover1.Text))
            {
                if (string.IsNullOrEmpty(strFuncNameAppNamefinal))
                {
                    strFuncNameAppNamefinal = lblFinalAdditionalApprover1.Text + ":" + txtFinalAdditionalApprover1.Text;
                }
                else
                {
                    strFuncNameAppNamefinal = strFuncNameAppNamefinal + "," + lblFinalAdditionalApprover1.Text + ":" + txtFinalAdditionalApprover1.Text;
                }
            }


            if (!string.IsNullOrEmpty(txtFinalAdditionalApprover2.Text))
            {
                if (string.IsNullOrEmpty(strFuncNameAppNamefinal))
                {
                    strFuncNameAppNamefinal = lblFinalAdditionalApprover2.Text + ":" + txtFinalAdditionalApprover2.Text;
                }
                else
                {
                    strFuncNameAppNamefinal = strFuncNameAppNamefinal + "," + lblFinalAdditionalApprover2.Text + ":" + txtFinalAdditionalApprover2.Text;
                }
            }

            if (!string.IsNullOrEmpty(txtFinalAdditionalApprover3.Text))
            {
                if (string.IsNullOrEmpty(strFuncNameAppNamefinal))
                {
                    strFuncNameAppNamefinal = lblFinalAdditionalApprover3.Text + ":" + txtFinalAdditionalApprover3.Text;
                }
                else
                {
                    strFuncNameAppNamefinal = strFuncNameAppNamefinal + "," + lblFinalAdditionalApprover3.Text + ":" + txtFinalAdditionalApprover3.Text;
                }
            }


            if (!string.IsNullOrEmpty(txtFinalAdditionalApprover4.Text))
            {
                if (string.IsNullOrEmpty(strFuncNameAppNamefinal))
                {
                    strFuncNameAppNamefinal = lblFinalAdditionalApprover4.Text + ":" + txtFinalAdditionalApprover4.Text;
                }
                else
                {
                    strFuncNameAppNamefinal = strFuncNameAppNamefinal + "," + lblFinalAdditionalApprover4.Text + ":" + txtFinalAdditionalApprover4.Text;
                }
            }


            if (!string.IsNullOrEmpty(strFuncNameAppNamefinal))
            {
                objEO.FuncIDAppNameListFinal = strFuncNameAppNamefinal;
            }
            else
            {
                objEO.FuncIDAppNameListFinal = DBNull.Value.ToString();
            }

            //Add New fields here
            //Added on 01/20/2010 
            //For MUREO PCRs
            //By: David

            //Section : New Materials and Brands

            //@p_Raw_Pack_Mat	
            if (rbRawMaterialFinal.Items[0].Selected)
            {
                objEO.NewRawPackageFinal = "Y";
            }
            else if (rbRawMaterialFinal.Items[1].Selected)
            {
                objEO.NewRawPackageFinal = "N";
            }
            else
            {
                objEO.NewRawPackageFinal = "";
            }

            //@p_Parent_Rolls		
            if (rbParentRollsFinal.Items[0].Selected)
            {
                objEO.ParentRollsFinal = "Y";
            }
            else if (rbParentRollsFinal.Items[1].Selected)
            {
                objEO.ParentRollsFinal = "N";
            }
            else
            {
                objEO.ParentRollsFinal = "";
            }

            //@p_Intermediate_Mat	
            if (rbInterMaterialsFinal.Items[0].Selected)
            {
                objEO.InterMaterialFinal = "Y";
            }
            else if (rbInterMaterialsFinal.Items[1].Selected)
            {
                objEO.InterMaterialFinal = "N";
            }
            else
            {
                objEO.InterMaterialFinal = "";
            }

            //@p_Current_Brand
            if (rbShippedFinal.Items[0].Selected)
            {
                objEO.CurrentBrandFinal = "Y";
            }
            else if (rbShippedFinal.Items[1].Selected)
            {
                objEO.CurrentBrandFinal = "N";
            }
            else
            {
                objEO.CurrentBrandFinal = "";
            }



            //@p_Cons_Lab_Eval
            if (rbTestProductedShippedFinal.Items[0].Selected)
            {
                objEO.ConsLabEvalFinal = "Y";
            }
            else if (rbTestProductedShippedFinal.Items[1].Selected)
            {
                objEO.ConsLabEvalFinal = "N";
            }
            else
            {
                objEO.ConsLabEvalFinal = "";
            }

            //@p_GCAS
            if (rbGCASNumberFinal.Items[0].Selected)
            {
                objEO.GCASFinal = "Y";
            }
            else if (rbGCASNumberFinal.Items[1].Selected)
            {
                objEO.GCASFinal = "N";
            }
            else
            {
                objEO.GCASFinal = "";
            }

            //@p_Is_Understood_Policy_37
            if (chkFinalMaterialsBrands.Items[0].Selected)
            {
                objEO.ProdSelectIs_Understood_Policy_37Final = true;
                objEO.ProdSelectIs_Exception_Policy_37Final = false;
                objEO.ProdSelectIs_EO_Covered_Policy_37Final = false;
                //@p_Is_Exception_Policy_37
            }
            else if (chkFinalMaterialsBrands.Items[1].Selected)
            {
                objEO.ProdSelectIs_Exception_Policy_37Final = true;
                objEO.ProdSelectIs_Understood_Policy_37Final = false;
                objEO.ProdSelectIs_EO_Covered_Policy_37Final = false;
                //@p_Is_EO_Covered_Policy_37
            }
            else if (chkFinalMaterialsBrands.Items[2].Selected)
            {
                objEO.ProdSelectIs_EO_Covered_Policy_37Final = true;
                objEO.ProdSelectIs_Understood_Policy_37Final = false;
                objEO.ProdSelectIs_Exception_Policy_37Final = false;

            }
            else
            {
                objEO.ProdSelectIs_EO_Covered_Policy_37Final = false;
                objEO.ProdSelectIs_Understood_Policy_37Final = false;
                objEO.ProdSelectIs_Exception_Policy_37Final = false;

            }


            //@p_Is_Product_Go_To_Customers
            if (rblFinalProductConsumerOption.Items[0].Selected)
            {
                objEO.Is_Product_Go_To_CustomersFinal = true;
            }
            else if (rblFinalProductConsumerOption.Items[1].Selected)
            {
                objEO.Is_Product_Go_To_CustomersFinal = false;
            }
            else
            {
                objEO.Is_Product_Go_To_CustomersNullFinal = "NULL";
            }


            //@p_Is_Using_Approved_FC_R_ATS
            if (rblFinalProductApprovedOption.Items[0].Selected)
            {
                objEO.Is_Using_Approved_FC_R_ATSFinal = true;
            }
            else if (rblFinalProductApprovedOption.Items[1].Selected)
            {
                objEO.Is_Using_Approved_FC_R_ATSFinal = false;
            }
            else
            {
                objEO.Is_Using_Approved_FC_R_ATSNullFinal = "NULL";
            }


            //@p_Is_Approved_At_Level
            if (rblFinalRawMaterialsQ1.Items[0].Selected)
            {
                objEO.Is_Approved_At_LevelFinal = true;
            }
            else if (rblFinalRawMaterialsQ1.Items[1].Selected)
            {
                objEO.Is_Approved_At_LevelFinal = false;
            }
            else
            {
                objEO.Is_Approved_At_LevelNullFinal = "NULL";
            }

            //@p_Is_Approved_For_Region
            if (rblFinalRawMaterialsQ2.Items[0].Selected)
            {
                objEO.Is_Approved_For_RegionFinal = true;

            }
            else if (rblFinalRawMaterialsQ2.Items[1].Selected)
            {
                objEO.Is_Approved_For_RegionFinal = false;
            }
            else
            {
                objEO.Is_Approved_At_RegionNullFinal = "NULL";
            }

            //@p_Is_Approved_For_Application
            if (rblFinalRawMaterialsQ3.Items[0].Selected)
            {
                objEO.Is_Approved_For_ApplicationFinal = true;
            }
            else if (rblFinalRawMaterialsQ3.Items[1].Selected)
            {
                objEO.Is_Approved_For_ApplicationFinal = false;
            }
            else
            {
                objEO.Is_Approved_At_ApplicationNullFinal = "NULL";
            }

            //@p_Is_Approved_At_Prev_Application_Rate
            if (rblFinalRawMaterialsQ4.Items[0].Selected)
            {
                objEO.Is_Approved_At_Prev_Application_RateFinal = true;
            }
            else if (rblFinalRawMaterialsQ4.Items[1].Selected)
            {
                objEO.Is_Approved_At_Prev_Application_RateFinal = false;
            }
            else
            {
                objEO.Is_Approved_At_Application_RateNullFinal = "NULL";
            }

            //@p_GCAS
            if (rbGCASNumber.Items[0].Selected)
            {
                objEO.GCASUMOF = "Y";
            }
            else if (rbGCASNumber.Items[1].Selected)
            {
                objEO.GCASUMOF = "N";
            }
            else
            {
                objEO.GCASUMOF = "";
            }


            //--------------- final tab over

            //-----------------Close out Tab


            //@p_EO_ID 	  already exist

            //@p_Lab_NoteBook_Num
            if (!string.IsNullOrEmpty(txtCloseLabNoteBook.Text.Trim()))
            {
                objEO.LabNoteBookCO = txtCloseLabNoteBook.Text.Trim();
            }
            else
            {
                objEO.LabNoteBookCO = DBNull.Value.ToString();
            }

            //@p_Completion_Date
            if (!string.IsNullOrEmpty(txtCloseCompletionDate.Text.Trim()))
            {
                objEO.CompletionDate = Convert.ToDateTime(txtCloseCompletionDate.Text.Trim());
            }
            else
            {
                objEO.CompletionDate = System.DateTime.MinValue;
            }
            //@p_AC_Attachment 
            if (!string.IsNullOrEmpty(txtACAttachment.Value))
            {
                objEO.AttFinalCostSheetCO = txtACAttachment.Value;
            }
            else
            {
                objEO.AttFinalCostSheetCO = DBNull.Value.ToString();
            }

            //@p_Total_CostSheet 
            if (!string.IsNullOrEmpty(txtTotalCostSheetAttach.Text.Trim()))
            {
                objEO.TotCostSheetCO = Convert.ToDecimal(txtTotalCostSheetAttach.Text.Trim());
            }
            else
            {
                objEO.TotCostSheetCO = Convert.ToDecimal(0.0);
                //DBNull.Value.ToString
            }
            //-- Initial Learning Report
            //@p_ILR_Attachment	

            objEO.ILRAttachment = DBNull.Value.ToString();

            //Test Plans Used tbl_EO_Test_Plans_Used 

            //@p_TP_Attachment	
            if (!string.IsNullOrEmpty(txtTPAttach.Value))
            {
                objEO.AttchTestPlanTepmpalteCO = txtTPAttach.Value;
            }
            else
            {
                objEO.AttchTestPlanTepmpalteCO = DBNull.Value.ToString();
            }
            //@p_Keyword1
            if (!string.IsNullOrEmpty(txtCloseKeyworkd1.Text.Trim()))
            {
                objEO.KeyWords1CO = txtCloseKeyworkd1.Text.Trim();
            }
            else
            {
                objEO.KeyWords1CO = DBNull.Value.ToString();
            }
            //@p_Keyword2			
            if (!string.IsNullOrEmpty(txtCloseKeyworkd2.Text.Trim()))
            {
                objEO.KeyWords2CO = txtCloseKeyworkd2.Text.Trim();
            }
            else
            {
                objEO.KeyWords2CO = DBNull.Value.ToString();
            }
            //@p_Keyword3			
            if (!string.IsNullOrEmpty(txtCloseKeyworkd3.Text.Trim()))
            {
                objEO.KeyWords3CO = txtCloseKeyworkd3.Text.Trim();
            }
            else
            {
                objEO.KeyWords3CO = DBNull.Value.ToString();
            }
            //@p_Keyword4			
            if (!string.IsNullOrEmpty(txtCloseKeyworkd4.Text.Trim()))
            {
                objEO.KeyWords4CO = txtCloseKeyworkd4.Text.Trim();
            }
            else
            {
                objEO.KeyWords4CO = DBNull.Value.ToString();
            }
            //@p_Keyword5			
            if (!string.IsNullOrEmpty(txtCloseKeyworkd5.Text.Trim()))
            {
                objEO.KeyWords5CO = txtCloseKeyworkd5.Text.Trim();
            }
            else
            {
                objEO.KeyWords5CO = DBNull.Value.ToString();
            }
            //@p_Keyword6			VARCHAR(50)=NULL,
            if (!string.IsNullOrEmpty(txtCloseKeyworkd6.Text.Trim()))
            {
                objEO.KeyWords6CO = txtCloseKeyworkd6.Text.Trim();
            }
            else
            {
                objEO.KeyWords6CO = DBNull.Value.ToString();
            }
            //@p_Comments_Approver
            if (!string.IsNullOrEmpty(txtCloseApproverComments.Text.Trim()))
            {
                objEO.CommentsApproverCO = txtCloseApproverComments.Text.Trim();
            }
            else
            {
                objEO.CommentsApproverCO = DBNull.Value.ToString();
            }

            //-- Closeout Approval
            //'@p_EO_Mode	
            //If rbCloseEOType.Items[0].Selected = true Then
            //    objEO.EoTypeCloseOut = "E"
            //Else
            //    objEO.EoTypeCloseOut = "O"
            //End If

            //@p_Approval_Group_ID
            if (!(drpCloseApprovalGroup.SelectedIndex == -1 | drpCloseApprovalGroup.SelectedIndex == 0))
            {
                objEO.AppGroupCloseOut = Convert.ToInt32(drpCloseApprovalGroup.SelectedItem.Value);
            }
            else
            {
                objEO.AppGroupCloseOut = 0;
            }
            string strFuncNameAppNameCO = null;

            if (!string.IsNullOrEmpty(txtCloseSiteFinance.Text))
            {
                if (string.IsNullOrEmpty(strFuncNameAppNameCO))
                {
                    strFuncNameAppNameCO = lblCOAppgrpSiteFinance.Text + ":" + txtCloseSiteFinance.Text;
                }
                else
                {
                    strFuncNameAppNameCO = strFuncNameAppNameCO + "," + lblCOAppgrpSiteFinance.Text + ":" + txtCloseSiteFinance.Text;
                }
            }

            if (!string.IsNullOrEmpty(txtCloseBudgetOwner.Text))
            {
                if (string.IsNullOrEmpty(strFuncNameAppNameCO))
                {
                    strFuncNameAppNameCO = lblCOAppgrpBO.Text + ":" + txtCloseBudgetOwner.Text;
                }
                else
                {
                    strFuncNameAppNameCO = strFuncNameAppNameCO + "," + lblCOAppgrpBO.Text + ":" + txtCloseBudgetOwner.Text;
                }
            }

            if (!string.IsNullOrEmpty(strFuncNameAppNameCO))
            {
                objEO.FuncIDAppNameListCloseOut = strFuncNameAppNameCO;
            }
            else
            {
                objEO.FuncIDAppNameListCloseOut = DBNull.Value.ToString();
            }

            int intresSetEOMandatory = 0;
            int intresSETEOPreliminary = 0;
            int intresSETEOFinal = 0;
            int intresSETEOCloseout = 0;


            //FinalCost Attachments

            string strFinalCostPath = Server.MapPath("..") + "\\Common\\UpLoad\\Final\\CostSheet\\";
            //9999
            FilesUpload(strFinalCostPath, lbCostSheetAttach, arCostSheet, "Cost", "SET_EO_Final_Attachment");
            arCostSheet.Clear();
            int intCostSheetAttach = 0;
            string strFinalCostfilesPath = null;
            for (intCostSheetAttach = 0; intCostSheetAttach <= lbCostSheetAttach.Items.Count - 1; intCostSheetAttach++)
            {
                if (string.IsNullOrEmpty(strFinalCostfilesPath))
                {
                    strFinalCostfilesPath = "UpLoad\\Final\\CostSheet\\" + objEO.EOID + "_" + strDateTime + "_" + lbCostSheetAttach.Items[intCostSheetAttach].Text;
                }
                else
                {
                    strFinalCostfilesPath = strFinalCostfilesPath + "|" + "UpLoad\\Final\\CostSheet\\" + objEO.EOID + "_" + strDateTime + "_" + lbCostSheetAttach.Items[intCostSheetAttach].Text;
                }

            }
            if (string.IsNullOrEmpty(strFinalCostfilesPath))
            {
                objEO.AttaCostSheet = DBNull.Value.ToString();
            }
            else
            {
                objEO.AttaCostSheet = strFinalCostfilesPath;
            }

            //Final QA Attachments
            string strFinalQA = Server.MapPath("..") + "\\Common\\UpLoad\\Final\\QA\\";
            FilesUpload(strFinalQA, lbFinalQAAttach, arQAFinal, "QA", "SET_EO_Final_Attachment");
            arQAFinal.Clear();
            int intQAAttach = 0;
            string strFinalAttachQA = null;
            for (intQAAttach = 0; intQAAttach <= lbFinalQAAttach.Items.Count - 1; intQAAttach++)
            {
                if (string.IsNullOrEmpty(strFinalCostfilesPath))
                {
                    strFinalAttachQA = "UpLoad\\Final\\QA\\" + objEO.EOID + "_" + strDateTime + "_" + lbFinalQAAttach.Items[intQAAttach].Text;
                }
                else
                {
                    strFinalAttachQA = strFinalAttachQA + "|" + "UpLoad\\Final\\QA\\" + objEO.EOID + "_" + strDateTime + "_" + lbFinalQAAttach.Items[intQAAttach].Text;
                }

            }
            if (string.IsNullOrEmpty(strFinalAttachQA))
            {
                objEO.FinalAttachQA = DBNull.Value.ToString();
            }
            else
            {
                objEO.FinalAttachQA = strFinalAttachQA;
            }

            //formula card info Attachments
            string strFinalFormulaCardPath = Server.MapPath("..") + "\\Common\\UpLoad\\Final\\FormulaCardInfo\\";
            //99999
            FilesUpload(strFinalFormulaCardPath, lbFormulaCardAttach, arFormulaCardInfo, "Formula", "SET_EO_Final_Attachment");
            arFormulaCardInfo.Clear();
            int intFormulaCardAttach = 0;
            string strFormulaCardfilesPath = null;
            for (intFormulaCardAttach = 0; intFormulaCardAttach <= lbFormulaCardAttach.Items.Count - 1; intFormulaCardAttach++)
            {
                if (string.IsNullOrEmpty(strFormulaCardfilesPath))
                {
                    strFormulaCardfilesPath = "UpLoad\\Final\\FormulaCardInfo\\" + objEO.EOID + "_" + strDateTime + "_" + lbFormulaCardAttach.Items[intFormulaCardAttach].Text;
                }
                else
                {
                    strFormulaCardfilesPath = strFinalCostfilesPath + "|" + "UpLoad\\Final\\FormulaCardInfo\\" + objEO.EOID + "_" + strDateTime + "_" + lbFormulaCardAttach.Items[intFormulaCardAttach].Text;
                }
            }
            if (string.IsNullOrEmpty(strFormulaCardfilesPath))
            {
                objEO.AttachFormulaCard = DBNull.Value.ToString();
            }
            else
            {
                objEO.AttachFormulaCard = strFormulaCardfilesPath;
            }

            //Final Test Plans Attachments
            string strFinalTestPlansPath = Server.MapPath("..") + "\\Common\\UpLoad\\Final\\TestPlans\\";
            //9999
            FilesUpload(strFinalTestPlansPath, lbTestPlansAttach, arTestPlans, "Test_Plans", "SET_EO_Final_Attachment");
            arTestPlans.Clear();
            int intTestPlansAttach = 0;
            string strTestPlansfilesPath = null;
            for (intTestPlansAttach = 0; intTestPlansAttach <= lbTestPlansAttach.Items.Count - 1; intTestPlansAttach++)
            {
                if (string.IsNullOrEmpty(strTestPlansfilesPath))
                {
                    strTestPlansfilesPath = "UpLoad\\Final\\TestPlans\\" + objEO.EOID + "_" + strDateTime + "_" + lbTestPlansAttach.Items[intTestPlansAttach].Text;
                }
                else
                {
                    strTestPlansfilesPath = strFinalCostfilesPath + "|" + "UpLoad\\Final\\TestPlans\\" + objEO.EOID + "_" + strDateTime + "_" + lbTestPlansAttach.Items[intTestPlansAttach].Text;
                }

            }
            if (string.IsNullOrEmpty(strTestPlansfilesPath))
            {
                objEO.TestPlantAttachments = DBNull.Value.ToString();
            }
            else
            {
                objEO.TestPlantAttachments = strTestPlansfilesPath;
            }


            //Final Lab Sampling Plans Attachments
            string strFinalLabSampPath = Server.MapPath("..") + "\\Common\\UpLoad\\Final\\LabSamples\\";
            //9999
            FilesUpload(strFinalLabSampPath, lbLabSampleAttach, arLabSamples, "Lab", "SET_EO_Final_Attachment");
            arLabSamples.Clear();
            int intLabSampleAttach = 0;
            string strLabSampfilesPath = null;
            for (intLabSampleAttach = 0; intLabSampleAttach <= lbLabSampleAttach.Items.Count - 1; intLabSampleAttach++)
            {
                if (string.IsNullOrEmpty(strLabSampfilesPath))
                {
                    strLabSampfilesPath = "UpLoad\\Final\\LabSamples\\" + objEO.EOID + "_" + strDateTime + "_" + lbLabSampleAttach.Items[intLabSampleAttach].Text;
                }
                else
                {
                    strLabSampfilesPath = strLabSampfilesPath + "|" + "UpLoad\\Final\\LabSamples\\" + objEO.EOID + "_" + strDateTime + "_" + lbLabSampleAttach.Items[intLabSampleAttach].Text;
                }
            }
            if (string.IsNullOrEmpty(strLabSampfilesPath))
            {
                objEO.AttchLabforTesting = DBNull.Value.ToString();
            }
            else
            {
                objEO.AttchLabforTesting = strLabSampfilesPath;
            }

            //Final TestFlow Matrix Attachments
            string strFinalTestFlowMatrixPath = Server.MapPath("..") + "\\Common\\UpLoad\\Final\\TestFlowMatrix\\";
            //9999
            FilesUpload(strFinalTestFlowMatrixPath, lbFlowMatrixAttach, arProdTestFlowMatrix, "Matrix", "SET_EO_Final_Attachment");
            arProdTestFlowMatrix.Clear();
            int intFlowMatrixAttach = 0;
            string strTestFlowMatrixfilesPath = null;
            for (intFlowMatrixAttach = 0; intFlowMatrixAttach <= lbFlowMatrixAttach.Items.Count - 1; intFlowMatrixAttach++)
            {
                if (string.IsNullOrEmpty(strTestFlowMatrixfilesPath))
                {
                    strTestFlowMatrixfilesPath = "UpLoad\\Final\\TestFlowMatrix\\" + objEO.EOID + "_" + strDateTime + "_" + lbFlowMatrixAttach.Items[intFlowMatrixAttach].Text;
                }
                else
                {
                    strTestFlowMatrixfilesPath = strTestFlowMatrixfilesPath + "|" + "UpLoad\\Final\\TestFlowMatrix\\" + objEO.EOID + "_" + strDateTime + "_" + lbFlowMatrixAttach.Items[intFlowMatrixAttach].Text;
                }
            }
            if (string.IsNullOrEmpty(strTestFlowMatrixfilesPath))
            {
                objEO.ProdDetailTest = DBNull.Value.ToString();
            }
            else
            {
                objEO.ProdDetailTest = strTestFlowMatrixfilesPath;
            }

            //Final Other Supporting Doc Attachments
            string strFinalOtherSuppPath = Server.MapPath("..") + "\\Common\\UpLoad\\Final\\OtherSupp\\";
            //9999
            FilesUpload(strFinalOtherSuppPath, lbSupDocAttach, arOtherSupp, "Others", "SET_EO_Final_Attachment");
            arOtherSupp.Clear();
            int intSupDocAttach = 0;
            string strOtherSuppfilesPath = null;
            for (intSupDocAttach = 0; intSupDocAttach <= lbSupDocAttach.Items.Count - 1; intSupDocAttach++)
            {
                if (string.IsNullOrEmpty(strTestFlowMatrixfilesPath))
                {
                    strOtherSuppfilesPath = "UpLoad\\Final\\OtherSupp\\" + objEO.EOID + "_" + strDateTime + "_" + lbSupDocAttach.Items[intSupDocAttach].Text;
                }
                else
                {
                    strOtherSuppfilesPath = strOtherSuppfilesPath + "|" + "UpLoad\\Final\\OtherSupp\\" + objEO.EOID + "_" + strDateTime + "_" + lbSupDocAttach.Items[intSupDocAttach].Text;
                }
            }
            if (string.IsNullOrEmpty(strOtherSuppfilesPath))
            {
                objEO.OtherSupAttach = DBNull.Value.ToString();
            }
            else
            {
                objEO.OtherSupAttach = strOtherSuppfilesPath;
            }


            //CloseOut Actual Cost Sheet Attachments
            string strCOActualCostPath = Server.MapPath("..") + "\\Common\\UpLoad\\CloseOut\\ActualCostSheet\\";
            //9999
            FilesUpload(strCOActualCostPath, lbFinalCostAttach, arActualCostSheet, "Actual", "SET_EO_CloseOut_Attachment");
            arActualCostSheet.Clear();
            int intFinalCostAttach = 0;
            string strCOActualCostfilesPath = null;
            for (intFinalCostAttach = 0; intFinalCostAttach <= lbFinalCostAttach.Items.Count - 1; intFinalCostAttach++)
            {
                if (string.IsNullOrEmpty(strCOActualCostfilesPath))
                {
                    strCOActualCostfilesPath = "UpLoad\\CloseOut\\ActualCostSheet\\" + objEO.EOID + "_" + strDateTime + "_" + lbFinalCostAttach.Items[intFinalCostAttach].Text;
                }
                else
                {
                    strCOActualCostfilesPath = strCOActualCostfilesPath + "|" + "UpLoad\\CloseOut\\ActualCostSheet\\" + objEO.EOID + "_" + strDateTime + "_" + lbFinalCostAttach.Items[intFinalCostAttach].Text;
                }
            }
            if (string.IsNullOrEmpty(strCOActualCostfilesPath))
            {
                objEO.AttFinalCostSheetCO = DBNull.Value.ToString();
            }
            else
            {
                objEO.AttFinalCostSheetCO = strCOActualCostfilesPath;
            }

            //CloseOut Intial Learning Report Attachments
            string strCOILR = Server.MapPath("..") + "\\Common\\UpLoad\\CloseOut\\IntialLearningReport\\";
            //9999
            FilesUpload(strCOILR, lbILR, arIntialLearningCloseOut, "Learning", "SET_EO_CloseOut_Attachment");
            arIntialLearningCloseOut.Clear();
            int intILR = 0;
            string strCOILRPath = null;
            for (intILR = 0; intILR <= lbILR.Items.Count - 1; intILR++)
            {
                if (string.IsNullOrEmpty(strCOILRPath))
                {
                    strCOILRPath = "UpLoad\\CloseOut\\IntialLearningReport\\" + objEO.EOID + "_" + strDateTime + "_" + lbILR.Items[intILR].Text;
                }
                else
                {
                    strCOILRPath = strCOILRPath + "|" + "UpLoad\\CloseOut\\IntialLearningReport\\" + objEO.EOID + "_" + strDateTime + "_" + lbILR.Items[intILR].Text;
                }
            }
            if (string.IsNullOrEmpty(strCOILRPath))
            {
                objEO.AttCOILR = DBNull.Value.ToString();
            }
            else
            {
                objEO.AttCOILR = strCOILRPath;
            }

            //CloseOut TestPlans Used Attachments
            string strCOTestPlansUsedPath = Server.MapPath("..") + "\\Common\\UpLoad\\CloseOut\\TestPlansUsed\\";
            //9999
            FilesUpload(strCOTestPlansUsedPath, lbTestPlanUsedAttach, arTestPlaneedused, "Plans_Used", "SET_EO_CloseOut_Attachment");
            arTestPlaneedused.Clear();
            int intTestPlanUsedAttach = 0;
            string strCOTestPlansUsedfilesPath = null;
            for (intTestPlanUsedAttach = 0; intTestPlanUsedAttach <= lbTestPlanUsedAttach.Items.Count - 1; intTestPlanUsedAttach++)
            {
                if (string.IsNullOrEmpty(strCOTestPlansUsedfilesPath))
                {
                    strCOTestPlansUsedfilesPath = "UpLoad\\CloseOut\\TestPlansUsed\\" + objEO.EOID + "_" + strDateTime + "_" + lbTestPlanUsedAttach.Items[intTestPlanUsedAttach].Text;
                }
                else
                {
                    strCOTestPlansUsedfilesPath = strCOTestPlansUsedfilesPath + "|" + "UpLoad\\CloseOut\\TestPlansUsed\\" + objEO.EOID + "_" + strDateTime + "_" + lbTestPlanUsedAttach.Items[intTestPlanUsedAttach].Text;
                }
            }

            if (string.IsNullOrEmpty(strCOTestPlansUsedfilesPath))
            {
                objEO.AttchTestPlanTepmpalteCO = DBNull.Value.ToString();
            }
            else
            {
                objEO.AttchTestPlanTepmpalteCO = strCOTestPlansUsedfilesPath;
            }


            //CloseOut  Report Attachments
            string strCOReport = Server.MapPath("..") + "\\Common\\UpLoad\\CloseOut\\CloseOutReport\\";
            //9999
            FilesUpload(strCOReport, lbCOReport, arCloseOutReportCloseOut, "Report", "SET_EO_CloseOut_Attachment");
            arCloseOutReportCloseOut.Clear();
            int intCOReport = 0;
            string strCOPathReport = null;
            for (intCOReport = 0; intCOReport <= lbCOReport.Items.Count - 1; intCOReport++)
            {
                if (string.IsNullOrEmpty(strCOPathReport))
                {
                    strCOPathReport = "UpLoad\\CloseOut\\CloseOutReport\\" + objEO.EOID + "_" + strDateTime + "_" + lbCOReport.Items[intCOReport].Text;
                }
                else
                {
                    strCOPathReport = strCOPathReport + "|" + "UpLoad\\CloseOut\\CloseOutReport\\" + objEO.EOID + "_" + strDateTime + "_" + lbCOReport.Items[intCOReport].Text;
                }
            }
            if (string.IsNullOrEmpty(strCOPathReport))
            {
                objEO.AttCOReport = DBNull.Value.ToString();
            }
            else
            {
                objEO.AttCOReport = strCOPathReport;
            }
            objEO.UserName = objSecurity.UserName;
            if (objEOBA.SET_EO_Final(objEO, ref paramOut))
            {
                if (paramOut[0].Value != DBNull.Value)
                    intresSETEOFinal = Convert.ToInt32(paramOut[0].Value);
                else
                    intresSETEOFinal = -1;
            }
            if (objEOBA.SET_EO_Closeout(objEO, ref paramOut))
            {
                if (paramOut[0].Value != DBNull.Value)
                    intresSETEOCloseout = Convert.ToInt32(paramOut[0].Value);
                else
                    intresSETEOCloseout = -1;
            }

            if (intresSETEOFinal == 0 & intresSETEOCloseout == 0)
            {
                if (strStageStatus.ToUpper() == "Routed".ToUpper())
                {
                    if (strCurrentStage.ToUpper() == "Final".ToUpper())
                    {
                        if (!string.IsNullOrEmpty(txtBudgetOwnerFinal.Text))
                        {
                            try
                            {
                                //jagan code Start
                                mandataroinfoforEmail();
                                DataSet dsAppList = null;
                                int intResult = 0;
                                int intRow = 0;
                                string strNames = null;
                                string strbudgetcenter = null;
                                string strFYI = null;
                                if (objEOBA.GET_EO_Final_Approvers_List(Convert.ToInt32(ViewState["EOID"]), ref dsAppList))
                                {
                                    if ((dsAppList != null))
                                    {
                                        if (!(dsAppList.Tables.Count == 0))
                                        {
                                            if (!(dsAppList.Tables[0].Rows.Count == 0))
                                            {
                                                for (intRow = 0; intRow <= dsAppList.Tables[0].Rows.Count - 1; intRow++)
                                                {
                                                    DataSet dsPreliminary = null;
                                                    try
                                                    {
                                                        if (objEOBA.GET_EO_Preliminary(Convert.ToInt32(ViewState["EOID"]), ref dsPreliminary))
                                                        {
                                                            if ((!object.ReferenceEquals(dsAppList.Tables[0].Rows[intRow][0], System.DBNull.Value)))
                                                            {
                                                                if (dsAppList.Tables[0].Rows[intRow][0].ToString() == "Budget Center")
                                                                {
                                                                    if ((!object.ReferenceEquals(dsAppList.Tables[0].Rows[intRow][1], System.DBNull.Value)))
                                                                    {
                                                                        strbudgetcenter = dsAppList.Tables[0].Rows[intRow][1].ToString();
                                                                    }
                                                                }
                                                            }
                                                        }

                                                    }
                                                    catch (Exception ex)
                                                    {
                                                    }

                                                    try
                                                    {
                                                        if ((!object.ReferenceEquals(dsAppList.Tables[0].Rows[intRow][0], System.DBNull.Value)))
                                                        {
                                                            if (dsAppList.Tables[0].Rows[intRow][0].ToString() == "Site HS&E Resource")
                                                            {
                                                                if ((!object.ReferenceEquals(dsAppList.Tables[0].Rows[intRow][1], System.DBNull.Value)))
                                                                {
                                                                    if (!(dsAppList.Tables[0].Rows[intRow][1].ToString() == "Approval Not Needed"))
                                                                    {
                                                                        if (!(dsPreliminary.Tables.Count == 0))
                                                                        {
                                                                            if (!(dsPreliminary.Tables[4].Rows.Count == 0))
                                                                            {

                                                                                if ((object.ReferenceEquals(dsPreliminary.Tables[4].Rows[0][0], System.DBNull.Value)) | (object.ReferenceEquals(dsPreliminary.Tables[4].Rows[0][1], System.DBNull.Value)) | (object.ReferenceEquals(dsPreliminary.Tables[4].Rows[0][2], System.DBNull.Value)) | (object.ReferenceEquals(dsPreliminary.Tables[4].Rows[0][3], System.DBNull.Value)))
                                                                                {
                                                                                }
                                                                                else
                                                                                {
                                                                                    if (dsPreliminary.Tables[4].Rows[0][0].ToString() == "Y" | dsPreliminary.Tables[4].Rows[0][1].ToString() == "Y" | dsPreliminary.Tables[4].Rows[0][2].ToString() == "Y" | dsPreliminary.Tables[4].Rows[0][3].ToString() == "Y")
                                                                                    {
                                                                                        try
                                                                                        {
                                                                                            string strURLLockMode = null;
                                                                                            strURLLockMode = "http://" + ViewState["servername"] + "/Common/NewEO.aspx?From=ForEOLock&For=FYI&EOID=" + ViewState["EOID"];
                                                                                            string strURLEditMode = null;
                                                                                            strURLEditMode = "http://" + ViewState["servername"] + "/Common/NewEO.aspx?From=MailEdit&EOID=" + ViewState["EOID"];
                                                                                            SendMail(dsAppList.Tables[0].Rows[intRow][1].ToString(), "Please Review by " + ViewState["nextTwoDate"] + ". EO Number - " + ViewState["EONum"] + " - " + ViewState["EOTitle"], "<br>" + "<br>" + "Dear " + dsAppList.Tables[0].Rows[intRow][0] + " (FYI ONLY)," + "<br>" + "<br>" + "You are receiving this link as an FYI.  Please communicate any issues with the proposed timing of this EO to the originator." + "<br>" + "Please follow the link below to review this EO." + "<br>" + "<br>" + "NOTE:  This link will open the EO in 'Read Only' Mode." + "<br>" + "<br><a href='" + strURLLockMode + "'>" + strURLLockMode + "</a><br>" + "<br>" + "<br>" + "EO Number is :" + ViewState["EONum"] + "<br>" + "EO Title is  :" + ViewState["EOTitle"] + "<br>" + "<br>" + "EO Location :" + ViewState["PlantName"] + "<br>" + "Budget Center :" + ViewState["BudgetCenter"] + "<br>" + "Expected Cost : $" + ViewState["TotCost"] + "<br>" + "Current Stage  :" + ViewState["stage"] + "<br><font color=red><b>" + "Proposed Testing Start Date :" + ViewState["PlannedStartDate"] + "</b></font><br>" + "<br>" + "Thank you," + "<br>" + objSecurity.UserName + ".");
                                                                                        }
                                                                                        catch (Exception ex)
                                                                                        {
                                                                                        }

                                                                                    }
                                                                                    else
                                                                                    {
                                                                                        try
                                                                                        {
                                                                                            string strURLLockMode = null;
                                                                                            strURLLockMode = "http://" + ViewState["servername"] + "/Common/NewEO.aspx?From=ForEOLock&EOID=" + ViewState["EOID"];

                                                                                            string strURLEditMode = null;
                                                                                            strURLEditMode = "http://" + ViewState["servername"] + "/Common/NewEO.aspx?From=MailEdit&EOID=" + ViewState["EOID"];


                                                                                            //Added on 01/20/2010 
                                                                                            //For MUREO PCRs
                                                                                            //By: David
                                                                                            if ((ViewState["EOIDFlag"] != null) && (ViewState["EOIDFlag"].ToString() == "1"))
                                                                                            {
                                                                                                SendMail(dsAppList.Tables[0].Rows[intRow][1].ToString(), "Please Review by " + ViewState["nextTwoDate"] + ". EO Number - " + ViewState["EONum"] + " - " + ViewState["EOTitle"], "Dear " + dsAppList.Tables[0].Rows[intRow][0] + " Approver," + "<br>" + "<br>" + "You are listed as an approver for this EO.  Please follow the link to see this EO." + "<br>" + "<br>" + "NOTE:  Use this link to open the EO in 'Read Only' Mode." + "<br><a href='" + strURLLockMode + "'>" + strURLLockMode + "</a><br>" + "<br>" + "NOTE:  Use this link to open the EO in 'Edit' Mode." + "<br>" + "<br><a href='" + strURLEditMode + "'>" + strURLEditMode + "</a><br>" + "<br>" + "EO Number is :" + ViewState["EONum"] + "<br>" + "SAP IO Number :" + ViewState["SAPIONum"] + "<br>" + "Smart Clearance Number :" + ViewState["SmartClearanceNum"] + "<br>" + "EO Title is  :" + ViewState["EOTitle"] + "<br>" + "<br>" + "EO Location :" + ViewState["PlantName"] + "<br>" + "Budget Center :" + ViewState["BudgetCenter"] + "<br>" + "Expected Cost : $" + ViewState["TotCost"] + "<br>" + "Current Stage  :" + ViewState["stage"] + "<br><font color=red><b>" + "Proposed Testing Start Date :" + ViewState["PlannedStartDate"] + "</b></font><br>" + "<br>" + "Thank you," + "<br>" + objSecurity.UserName + ".");
                                                                                            }
                                                                                            else 
                                                                                            {
                                                                                                SendMail(dsAppList.Tables[0].Rows[intRow][1].ToString(), "Please Review by " + ViewState["nextTwoDate"] + ". EO Number - " + ViewState["EONum"] + " - " + ViewState["EOTitle"], "Dear " + dsAppList.Tables[0].Rows[intRow][0] + " Approver," + "<br>" + "<br>" + "You are listed as an approver for this EO.  Please follow the link to see this EO." + "<br>" + "<br>" + "NOTE:  Use this link to open the EO in 'Read Only' Mode." + "<br><a href='" + strURLLockMode + "'>" + strURLLockMode + "</a><br>" + "<br>" + "NOTE:  Use this link to open the EO in 'Edit' Mode." + "<br>" + "<br><a href='" + strURLEditMode + "'>" + strURLEditMode + "</a><br>" + "<br>" + "EO Number is :" + ViewState["EONum"] + "<br>" + "SAP IO Number :" + ViewState["SAPIONum"] + "<br>" + "EO Title is  :" + ViewState["EOTitle"] + "<br>" + "<br>" + "EO Location :" + ViewState["PlantName"] + "<br>" + "Budget Center :" + ViewState["BudgetCenter"] + "<br>" + "Expected Cost : $" + ViewState["TotCost"] + "<br>" + "Current Stage  :" + ViewState["stage"] + "<br><font color=red><b>" + "Proposed Testing Start Date :" + ViewState["PlannedStartDate"] + "</b></font><br>" + "<br>" + "Thank you," + "<br>" + objSecurity.UserName + ".");
                                                                                            }

                                                                                        }
                                                                                        catch (Exception ex)
                                                                                        {
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }

                                                    }
                                                    catch (Exception ex)
                                                    {
                                                    }

                                                    if (dsAppList.Tables[0].Rows[intRow][0].ToString() == "GBU HS&E Resource" | dsAppList.Tables[0].Rows[intRow][0].ToString() == "QA")
                                                    {
                                                        //For FYI
                                                        try
                                                        {
                                                            string strURLLockMode = null;
                                                            strURLLockMode = "http://" + ViewState["servername"] + "/Common/NewEO.aspx?From=ForEOLock&For=FYI&EOID=" + ViewState["EOID"];

                                                            string strURLEditMode = null;
                                                            strURLEditMode = "http://" + ViewState["servername"] + "/Common/NewEO.aspx?From=MailEdit&EOID=" + ViewState["EOID"];

                                                            SendMail(dsAppList.Tables[0].Rows[intRow][1].ToString(), "Please Review by " + ViewState["nextTwoDate"] + ". EO Number - " + ViewState["EONum"] + " - " + ViewState["EOTitle"], "<br>" + "<br>" + "Dear " + dsAppList.Tables[0].Rows[intRow][0] + " (FYI ONLY)," + "<br>" + "<br>" + "You are receiving this link as an FYI.  Please communicate any issues with the proposed timing of this EO to the originator." + "<br>" + "Please follow the link below to review this EO." + "<br>" + "<br>" + "NOTE:  This link will open the EO in 'Read Only' Mode." + "<br>" + "<br><a href='" + strURLLockMode + "'>" + strURLLockMode + "</a><br>" + "<br>" + "<br>" + "<br>" + "EO Number is :" + ViewState["EONum"] + "<br>" + "EO Title is  :" + ViewState["EOTitle"] + "<br>" + "<br>" + "EO Location :" + ViewState["PlantName"] + "<br>" + "Budget Center :" + ViewState["BudgetCenter"] + "<br>" + "Expected Cost : $" + ViewState["TotCost"] + "<br>" + "Current Stage  :" + ViewState["stage"] + "<br>" + "Proposed Testing Start Date :" + ViewState["PlannedStartDate"] + "</b></font><br>" + "<br>" + "Thank you," + "<br>" + objSecurity.UserName + ".");
                                                        }
                                                        catch (Exception ex)
                                                        {
                                                        }
                                                    }
                                                    else
                                                    {
                                                        //For Approve
                                                        try
                                                        {
                                                            string strURLLockMode = null;
                                                            strURLLockMode = "http://" + ViewState["servername"] + "/Common/NewEO.aspx?From=ForEOLock&EOID=" + ViewState["EOID"];

                                                            string strURLEditMode = null;
                                                            strURLEditMode = "http://" + ViewState["servername"] + "/Common/NewEO.aspx?From=MailEdit&EOID=" + ViewState["EOID"];


                                                            //Added on 01/20/2010 
                                                            //For MUREO PCRs
                                                            //By: David
                                                            if ((ViewState["EOIDFlag"] != null) && (ViewState["EOIDFlag"].ToString() == "1"))
                                                            {
                                                                SendMail(dsAppList.Tables[0].Rows[intRow][1].ToString(), "Please Review by " + ViewState["nextTwoDate"].ToString() + ". EO Number - " + ViewState["EONum"].ToString() + " - " + ViewState["EOTitle"].ToString(), "Dear " + dsAppList.Tables[0].Rows[intRow][0].ToString() + " Approver," + "<br>" + "<br>" + "You are listed as an approver for this EO.  Please follow the link to see this EO." + "<br>" + "<br>" + "NOTE:  Use this link to open the EO in 'Read Only' Mode." + "<br><a href='" + strURLLockMode + "'>" + strURLLockMode + "</a><br>" + "<br>" + "NOTE:  Use this link to open the EO in 'Edit' Mode." + "<br><a href='" + strURLEditMode + "'>" + strURLEditMode + "</a><br>" + "<br>" + "EO Number is :" + ViewState["EONum"] + "<br>" + "SAP IO Number :" + ViewState["SAPIONum"].ToString() + "<br>" + "Smart Clearance Number :" + ViewState["SmartClearanceNum"] + "<br>" + "EO Title is  :" + ViewState["EOTitle"].ToString() + "<br>" + "<br>" + "EO Location :" + ViewState["PlantName"] + "<br>" + "Budget Center :" + ViewState["BudgetCenter"].ToString() + "<br>" + "Expected Cost : $" + ViewState["TotCost"].ToString() + "<br>" + "Current Stage  :" + ViewState["stage"].ToString() + "<br><font color=red><b>" + "Proposed Testing Start Date :" + ViewState["PlannedStartDate"].ToString() + "</b></font><br>" + "<br>" + "Thank you," + "<br>" + objSecurity.UserName + ".");
                                                            }
                                                            else
                                                            {
                                                                SendMail(dsAppList.Tables[0].Rows[intRow][1].ToString(), "Please Review by " + ViewState["nextTwoDate"].ToString() + ". EO Number - " + ViewState["EONum"].ToString() + " - " + ViewState["EOTitle"].ToString(), "Dear " + dsAppList.Tables[0].Rows[intRow][0].ToString() + " Approver," + "<br>" + "<br>" + "You are listed as an approver for this EO.  Please follow the link to see this EO." + "<br>" + "<br>" + "NOTE:  Use this link to open the EO in 'Read Only' Mode." + "<br><a href='" + strURLLockMode + "'>" + strURLLockMode + "</a><br>" + "<br>" + "NOTE:  Use this link to open the EO in 'Edit' Mode." + "<br><a href='" + strURLEditMode + "'>" + strURLEditMode + "</a><br>" + "<br>" + "EO Number is :" + ViewState["EONum"] + "<br>" + "SAP IO Number :" + ViewState["SAPIONum"].ToString() + "<br>" + "EO Title is  :" + ViewState["EOTitle"] + "<br>" + "<br>" + "EO Location :" + ViewState["PlantName"].ToString() + "<br>" + "Budget Center :" + ViewState["BudgetCenter"] + "<br>" + "Expected Cost : $" + ViewState["TotCost"].ToString() + "<br>" + "Current Stage  :" + ViewState["stage"].ToString() + "<br><font color=red><b>" + "Proposed Testing Start Date :" + ViewState["PlannedStartDate"].ToString() + "</b></font><br>" + "<br>" + "Thank you," + "<br>" + objSecurity.UserName.ToString() + ".");
                                                            }

                                                        }
                                                        catch (Exception ex)
                                                        {
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }

                                //jagan code End
                            }
                            catch (Exception ex)
                            {
                            }
                        }
                    }
                    else if (strCurrentStage.ToUpper() == "CloseOut".ToUpper())
                    {
                        if (!string.IsNullOrEmpty(txtCloseBudgetOwner.Text))
                        {
                            try
                            {
                                mandataroinfoforEmail();
                                //jagan code start
                                string strURLLockMode = null;
                                strURLLockMode = "http://" + ViewState["servername"] + "/Common/NewEO.aspx?From=ForEOLock&EOID=" + ViewState["EOID"];

                                string strURLEditMode = null;
                                strURLEditMode = "http://" + ViewState["servername"] + "/Common/NewEO.aspx?From=MailEdit&EOID=" + ViewState["EOID"];


                                SendMail(txtCloseBudgetOwner.Text.Trim(), "Please Review by " + ViewState["nextTwoDate"] + ". EO Number - " + ViewState["EONum"] + " - " + ViewState["EOTitle"], "Dear Budget Approver," + "<br>" + "<br>" + "You are listed as an approver for this EO.  Please follow the link to see this EO." + "<br>" + "<br>" + "NOTE:  Use this link to open the EO in 'Read Only' Mode." + "<br><a href='" + strURLLockMode + "'>" + strURLLockMode + "</a><br>" + "<br>" + "NOTE:  Use this link to open the EO in 'Edit' Mode." + "<br><a href='" + strURLEditMode + "'>" + strURLEditMode + "</a><br>" + "<br>" + "EO Number is :" + "<br>" + "SAP IO Number :" + "<br>" + "EO Title is  :" + ViewState["EOTitle"] + "<br>" + "<br>" + "EO Location :" + drpPlant.SelectedItem.Text + "<br>" + "Budget Center :" + ViewState["BudgetCenter"] + "<br>" + "Expected Cost : $" + lbTotalCost.Text + "<br>" + "Current Stage  :" + "<br><font color=red><b>" + "Proposed Testing Start Date :" + ViewState["PlannedStartDate"] + "</b></font><br>" + "Thank you," + "<br>" + objSecurity.UserName);
                                //jagan code end
                            }
                            catch (Exception ex)
                            {
                            }
                        }
                    }
                }
                if (strCurrentStage == "Final" & strStageStatus == "Routed")
                {
                    if (!(ViewState["EOID"] == null))
                    {
                        if (objEOBA.SET_EO_Lock_Release_User(Convert.ToInt32(ViewState["EOID"]), objSecurity.UserName))
                        { }
                    }
                    //string script = null;
                    //script = "<script>alert('Final Route Completed Successfully');window.navigate('../Reports/MYEOs.aspx');</script> ";
                    //Page.RegisterStartupScript("clientscript", script);

                    ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "alert('Final Route Completed Successfully.');window.location='../Reports/MYEOs.aspx';", true);
                }
                else if (strresumeExit.ToUpper() == "Resume".ToUpper())
                {
                    //txtCloseApproverComments.Text = "";
                    //string script = null;
                    //script = "<script>alert('Record updated successfully');</script> ";
                    //Page.RegisterStartupScript("clientscript", script);
                    if (ViewState["Fin"] == null)
                    {
                        ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "alert('Record updated successfully.');", true);
                    }

                    else
                    {

                    }
                    if (ViewState["Fin"].ToString().Trim() == "Yes")
                    {
                        ViewState["Fin"] = null;
                    }
                    fillFinalCloseOutAttachments();
                }
                else
                {
                    if (!(ViewState["EOID"] == null))
                    {
                        if (objEOBA.SET_EO_Lock_Release_User(Convert.ToInt32(ViewState["EOID"]), objSecurity.UserName))
                        { }
                    }
                    //string script = null;
                    //script = "<script>alert('Record updated successfully');window.navigate('Home.aspx');</script> ";
                    //Page.RegisterStartupScript("clientscript", script);

                    ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "alert('Record updated successfully.');window.location='Home.aspx';", true);


                }

            }
            else if (intresSETEOFinal == 5 & intresSETEOCloseout == 5)
            {
                //string script = null;
                //script = "<script>alert('Document is already in edit mode. Please try again in a few minutes..');window.navigate('Home.aspx');</script> ";
                //Page.RegisterStartupScript("clientscript", script);

                ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "alert('Document is already in edit mode. Please try again in a few minutes...');window.location='Home.aspx';", true);
            }
            else
            {
                int intResult = 0;
                if (objEOBA.SET_EO_Delete_Upon_Error(Convert.ToInt32(objEO.EOID), Convert.ToChar(rbEOType.SelectedItem.Value), ref paramOut))
                { intResult = Convert.ToInt32(paramOut[0].Value); }
                //string script = null;
                //script = "<script>alert('Record Creation Failed');</script> ";
                //Page.RegisterStartupScript("clientscript", script);

                ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "alert('Record Creation Failed.');window.location='Home.aspx';", true);
            }

        }

        public void FilesUpload(string strbaseLocation, ListBox lb, ArrayList ar, string sectionName, string SPName)
        {
            // New code............
            string script = null;
            string strFileName = string.Empty;

            if (((lb.Items.Count == 0)))
            {
            }
            else
            {
                System.Web.UI.HtmlControls.HtmlInputFile HIFAttchFinalTestPlan = null;
                string strTestFile = null;
                try
                {
                    foreach (System.Web.UI.HtmlControls.HtmlInputFile HIFAttchFinalTestPlan_loopVariable in ar)
                    {
                        HIFAttchFinalTestPlan = HIFAttchFinalTestPlan_loopVariable;
                        strDateTime1 = String.Format("{0:MM-dd-yyyy_hh-mm-ss}", System.DateTime.Now);

                        try
                        {
                            //**********Reading File Attachment and Converting to Bytes*********
                            // ERROR: Not supported in C#: ReDimStatement
                            bytContent = new byte[HIFAttchFinalTestPlan.PostedFile.InputStream.Length];
                            //byte array, set to file size 
                            sContentType = HIFAttchFinalTestPlan.PostedFile.ContentType;
                            //strip the path off the filename 
                            //intStripthePath = Strings.InStrRev(HIFAttchFinalTestPlan.PostedFile.FileName.Trim(), "\\");

                            intStripthePath = HIFAttchFinalTestPlan.PostedFile.FileName.Trim().LastIndexOf("\\");

                            if (intStripthePath == 0)
                            {
                                strFileName = HIFAttchFinalTestPlan.PostedFile.FileName.Trim();
                            }
                            else
                            {
                                //strFileName = Strings.Right(HIFAttchFinalTestPlan.PostedFile.FileName.Trim(), Strings.Len(HIFAttchFinalTestPlan.PostedFile.FileName.Trim()) - intStripthePath);
                                strFileName = HIFAttchFinalTestPlan.PostedFile.FileName.Trim().Substring(intStripthePath + 1);


                            }
                            strTestFile = strFileName.ToLower();

                            if (!string.IsNullOrEmpty(strFileName))
                            {
                                HIFAttchFinalTestPlan.PostedFile.InputStream.Read(bytContent, 0, Convert.ToInt32(HIFAttchFinalTestPlan.PostedFile.InputStream.Length));
                            }

                        }
                        catch (Exception ex)
                        {
                            //script = "<script>alert(" + ex.Message + ")</script>";
                            //Page.RegisterStartupScript("clientscript", script);
                            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "alert(" + ex.Message + ");", true);
                        }

                        if (!string.IsNullOrEmpty(strFileName))
                        {
                            if (bytContent.Length == 0)
                            {
                                fSize = 0;
                            }
                            else
                            {
                                fSize = bytContent.Length;
                            }
                            sContentType = HIFAttchFinalTestPlan.PostedFile.ContentType;
                            //Dim strLocFileName As String = strbaseLocation & ViewState["EOID"] & "_" & strDateTime & "_" & strFileName
                            //Dim strFinalFile As String = ViewState["EOID"] & "_" & strDateTime1 & "_" & strFileName
                            string strFinalFile = strFileName;

                            if (objEOBA.SubmitCommonAttachments(strFinalFile, bytContent, sContentType, Convert.ToInt32(ViewState["EOID"]), sectionName, SPName, ref paramOut))
                            {
                                intAttachResult = Convert.ToInt32(paramOut[0].Value);
                            }

                        }
                    }
                }
                catch (Exception ex)
                {
                    string strErr = ex.Message;
                }
            }
        }


        public void FillDropDownData(int tabValue, string colNameText, string colNameID, string optionalValue, DropDownList drpName)
        {
            DataSet objDS = null;


            if (objEOBA.FillDropDownSeedData(ref objDS))
            {
                if (objDS.Tables.Count > 0)
                {
                    drpName.DataSource = objDS.Tables[tabValue].DefaultView;
                    drpName.DataTextField = colNameText;
                    drpName.DataValueField = colNameID;
                    drpName.DataBind();

                    if (tabValue == 5)
                    {
                        drpName.Items.Clear();
                        drpName.DataSource = null;
                        drpName.DataBind();
                        fillSelectedPlantDetails1();
                    }
                    drpName.Items.Insert(0, optionalValue);
                }
            }
        }

        protected void AllTabSave(string strCurrentStage, string strStageStatus, string strresumeExit)
        {

            objEO objEO = new objEO();
            SqlParameter[] paramOut = null;
            DataTable dtGCAS = new DataTable();


            if (ViewState["twoTabRoute"] == null)
                objEO.TwoTabRoute = "N";
            else
                objEO.TwoTabRoute = ViewState["twoTabRoute"].ToString();

            if (ViewState["LockMode"] == null)
            {
                if (Request.QueryString["From"] == "MailEdit")
                { objEO.EOID = ViewState["EOID"].ToString(); }
                else
                { objEO.EOID = "0"; }

            }
            else
            {
                if (Request.QueryString["From"].ToString() == "MailEdit")
                { objEO.EOID = ViewState["EOID"].ToString(); }
                else
                { objEO.EOID = "0"; }
            }

            if ((Request.QueryString["From"] != null) && (Request.QueryString["From"].ToString() == "CopyNew"))
                objEO.EOID = "0";

            objEO.FinalCurrentStagePre = strCurrentStage;
            objEO.FinalStageStatus = strStageStatus;

            objEO.CloseOutCurrentStage = strCurrentStage;
            objEO.CloseOutStageStatus = strStageStatus;

            if (txtTitle.Text != "")
                objEO.Title = txtTitle.Text;
            else
                objEO.Title = "NewEO" + DateTime.Now.Date; //'DBNull.Value.ToString

            string EventID = string.Empty;
            for (int intEvents = 0; intEvents < lbEOEventsDB.Items.Count - 1; intEvents++)
            {
                if (lbEOEventsDB.Items[intEvents].Selected)
                {
                    if (EventID == "")
                        EventID = lbEOEventsDB.Items[intEvents].Value;// 'lbEOEventsDB.SelectedItem.Value
                    else
                        EventID = EventID + "," + lbEOEventsDB.Items[intEvents].Value;// 'lbEOEventsDB.SelectedItem.Value

                }
            }

            if (EventID != "")
                objEO.EventIDs = EventID;
            else
                objEO.EventIDs = DBNull.Value.ToString();

            // 'Project dropdown

            if (drpEOProjectsDB.SelectedIndex != -1)
            {
                if (drpEOProjectsDB.SelectedItem.Value != "--Select a Project--")
                { objEO.ProjectID = Convert.ToInt32(drpEOProjectsDB.SelectedItem.Value); }
                else
                { objEO.ProjectID = 0; }
            }
            else
                objEO.ProjectID = 0;

            //'Plant dropdown
            if (drpPlant.SelectedIndex == -1 || drpPlant.SelectedItem.Text == "--Select a Plant--")
                objEO.PlantID = 0;
            else
                objEO.PlantID = Convert.ToInt32(drpPlant.SelectedItem.Value);

            if (drpCategoryDB.SelectedIndex != -1)
            {
                if (drpCategoryDB.SelectedItem.Value != "--Select a Category--")
                { objEO.CategoryID = Convert.ToInt32(drpCategoryDB.SelectedItem.Value); }
                else
                { objEO.CategoryID = 0; }
            }
            else
                objEO.CategoryID = 0;

            //  'CoOrdinator label
            if (lblCoOrdinator.Text != "")
                objEO.Originator = lblCoOrdinator.Text.ToString();
            else
                objEO.Originator = DBNull.Value.ToString();


            //'Office Number
            if (txtOfficeNumber.Text != "")
                objEO.OfficeNumber = txtOfficeNumber.Text;
            else
                objEO.OfficeNumber = DBNull.Value.ToString();

            //'PhNumber
            if (txtPhoneNumberDB.Text != "")
                objEO.PhoneNumber = txtPhoneNumberDB.Text;
            else
                objEO.PhoneNumber = DBNull.Value.ToString();
            //'Brand Segment list

            string strBrands = string.Empty;
            for (int intBrandlist = 0; intBrandlist < lbEOBrandsDB.Items.Count - 1; intBrandlist++)
            {
                if (lbEOBrandsDB.Items[intBrandlist].Selected == true)
                {
                    if (strBrands == "")
                        strBrands = lbEOBrandsDB.Items[intBrandlist].Value;
                    else
                        strBrands = strBrands + "," + lbEOBrandsDB.Items[intBrandlist].Value;
                }
            }

            if (strBrands != "")
                objEO.Brands = strBrands;
            else
                objEO.Brands = DBNull.Value.ToString();

            //'Coorginator
            if (!(txtCooriginator.Text == ""))
                objEO.CoOrginator = txtCooriginator.Text;
            else
                objEO.CoOrginator = DBNull.Value.ToString();

            objEO.CommsntsToApprover = "";
            objEO.PreStatus = "";
            objEO.PreIsRouted = "";
            objEO.FinalStatus = "";
            objEO.FinalIsRouted = "";
            objEO.CloseOutStatus = "";
            objEO.CloseOutIsRouted = "";

            if (strCurrentStage != "")
                objEO.CurrentStagePre = strCurrentStage;
            else
                objEO.CurrentStagePre = DBNull.Value.ToString();

            if (strStageStatus != "")
                objEO.StageStatus = strStageStatus;
            else
                objEO.StageStatus = DBNull.Value.ToString();
            //     'Completed top portion
            //'------------------------------------
            //'Preliminary Tab starts : SET_EO_Preliminary
            //'EOID exist above
            //'@p_EO_Type_ID_List	


            string EOTypeID = null;
            for (int intEOTypeID = 0; intEOTypeID <= lbEOTypeDB.Items.Count - 1; intEOTypeID++)
            {
                if (lbEOTypeDB.Items[intEOTypeID].Selected == true)
                {
                    if (string.IsNullOrEmpty(EOTypeID))
                        EOTypeID = lbEOTypeDB.Items[intEOTypeID].Value;
                    else
                        EOTypeID = EOTypeID + "," + lbEOTypeDB.Items[intEOTypeID].Value;
                }
            }
            if (!string.IsNullOrEmpty(EOTypeID))
            {
                objEO.EOType = EOTypeID;
            }
            else
            {
                objEO.EOType = DBNull.Value.ToString();
            }

            //@p_New_EO_Type_Name
            if (!string.IsNullOrEmpty(txtEOTypeOther.Text))
            {
                objEO.NewTypeOfEOType = txtEOTypeOther.Text.Trim();
            }
            else
            {
                objEO.NewTypeOfEOType = DBNull.Value.ToString();
            }

            if (drpEOScopeDB.SelectedIndex == -1 || drpEOScopeDB.SelectedItem.Text == "--Select EO Scope--")
            {
                objEO.EOScopeProjectType = 0;
            }
            else
            {
                objEO.EOScopeProjectType = Convert.ToInt32(drpEOScopeDB.SelectedItem.Value);
            }

            //@p_New_Scope_Type_Name	
            if (!string.IsNullOrEmpty(txtEOScopeOther.Text.Trim()))
            {
                objEO.NewTypeOfEOScope = txtEOScopeOther.Text.Trim();
            }
            else
            {
                objEO.NewTypeOfEOScope = DBNull.Value.ToString();
            }

            //@p_Description
            if (!string.IsNullOrEmpty(txtBriefDescription.Text.Trim()))
            {
                objEO.BriefDesc = txtBriefDescription.Text.Trim();
            }
            else
            {
                objEO.BriefDesc = DBNull.Value.ToString();
            }

            //'@p_Paper_Making_Days
            if (!string.IsNullOrEmpty(txtPaperMaking.Text.Trim()))
            {
                objEO.TotPaperMaking = Convert.ToDouble(txtPaperMaking.Text.Trim());
            }
            else
            {
                objEO.TotPaperMaking = 0.0;
            }

            //@p_Converting_Time_Days
            if (!string.IsNullOrEmpty(txtConvertingTime.Text.Trim()))
            {
                objEO.TotConverting = Convert.ToDouble(txtConvertingTime.Text.Trim());
            }
            else
            {
                objEO.TotConverting = 0.0;
            }

            //@p_Material_Cost
            if (!string.IsNullOrEmpty(txtCostNewMaterials.Text.Trim()))
            {
                objEO.TotCostNewMaterials = Convert.ToDouble(txtCostNewMaterials.Text.Trim());
            }
            else
            {
                objEO.TotCostNewMaterials = 0.0;
            }

            // '@p_Specific_Cost	
            if (!string.IsNullOrEmpty(txtEOEquipment.Text.Trim()))
            {
                objEO.CostofEOSpecific = Convert.ToDouble(txtEOEquipment.Text.Trim());
            }
            else
            {
                objEO.CostofEOSpecific = 0.0;
            }


            //@p_Total_Pre_Spending	
            if (!string.IsNullOrEmpty(lbPreSpending.Text.Trim()))
            {
                objEO.TotPreSpend = Convert.ToDouble(lbPreSpending.Text.Trim());
            }
            else
            {
                objEO.TotPreSpend = 0.0;
            }

            //@p_EO_Executing_Cost	
            if (!string.IsNullOrEmpty(txtExecutionCost.Text.Trim()))
            {
                objEO.EOExecuCost = Convert.ToDouble(txtExecutionCost.Text.Trim());
            }
            else
            {
                objEO.EOExecuCost = 0.0;
            }

            //@p_Total_Cost
            if (!string.IsNullOrEmpty(lbTotalCost.Text.Trim()))
            {
                objEO.TotCost = Convert.ToDouble(lbTotalCost.Text.Trim());
            }
            else
            {
                objEO.TotCost = 0.0;
            }

            //'@p_Budget_Center_ID	
            if (!(drpBudgetCenterDB.SelectedIndex == -1))
            {
                if (!(drpBudgetCenterDB.SelectedIndex == 0))
                {
                    objEO.SujBudgetCenter = Convert.ToInt32(drpBudgetCenterDB.SelectedItem.Value);
                }
                else
                {
                    objEO.SujBudgetCenter = 0;
                }
            }
            else
            {
                objEO.SujBudgetCenter = 0;
            }


            //'@p_Other_Center_Number
            if (!string.IsNullOrEmpty(txtOtherBudgetCenter.Text.Trim()))
            {
                objEO.OtherBudgCenter = txtOtherBudgetCenter.Text.Trim();
            }
            else
            {
                objEO.OtherBudgCenter = DBNull.Value.ToString();
            }

            //@p_Suggested_Budget_Center_Name

            if (!string.IsNullOrEmpty(txtSelectedBudgCenter.Text.Trim()))
            {
                objEO.SelectedBudgCenter = txtSelectedBudgCenter.Text.Trim();
            }
            else
            {
                objEO.SelectedBudgCenter = DBNull.Value.ToString();
            }

            //'Section : New Materials and Brands

            //'@p_Raw_Pack_Mat
            if (rbRawMaterial.Items[0].Selected)
            {
                objEO.NewRawPackage = "Y";
            }
            else if (rbRawMaterial.Items[1].Selected)
            {
                objEO.NewRawPackage = "N";
            }
            else
            {
                objEO.NewRawPackage = "";
            }

            //@p_Parent_Rolls		
            if (rbParentRolls.Items[0].Selected)
            {
                objEO.EOProduce = "Y";
            }
            else if (rbParentRolls.Items[1].Selected)
            {
                objEO.EOProduce = "N";
            }
            else
            {
                objEO.EOProduce = "";
            }

            //@p_Intermediate_Mat	
            if (rbInterMaterials.Items[0].Selected)
            {
                objEO.EOProduceInterMaterial = "Y";
            }
            else if (rbInterMaterials.Items[1].Selected)
            {
                objEO.EOProduceInterMaterial = "N";
            }
            else
            {
                objEO.EOProduceInterMaterial = "";
            }

            //  '@p_Regulated_Prod
            if (rbRegulatedProduct.Items[0].Selected)
            {
                objEO.EOProduceRegProd = "Y";
            }
            else if (rbRegulatedProduct.Items[1].Selected)
            {
                objEO.EOProduceRegProd = "N";
            }
            else
            {
                objEO.EOProduceRegProd = "";
            }


            //@p_GMP_Classsify
            if (chkGMPClassify.Checked == true)
            {
                objEO.appropriateGMP = "A";
            }
            else
            {
                objEO.appropriateGMP = "B";
            }

            //@p_Current_Brand	
            if (rbShipped.Items[0].Selected)
            {
                objEO.EOShippedTrade = "Y";
            }
            else if (rbShipped.Items[1].Selected)
            {
                objEO.EOShippedTrade = "N";
            }
            else
            {
                objEO.EOShippedTrade = "";
            }

            //'@p_Cons_Lab_Eval
            if (rbTestProductedShipped.Items[0].Selected)
            {
                objEO.TestProdSample = "Y";
            }
            else if (rbTestProductedShipped.Items[1].Selected)
            {
                objEO.TestProdSample = "N";
            }
            else
            {
                objEO.TestProdSample = "";
            }


            //         'Added on 01/20/2010 
            //'For MUREO PCRs
            //'By: David


            if (chkMaterialsBrands.Items[0].Selected)
            {
                objEO.ProdSelectIs_Understood_Policy_37 = true;
                objEO.ProdSelectIs_Exception_Policy_37 = false;
                objEO.ProdSelectIs_EO_Covered_Policy_37 = false;
            }
            else if (chkMaterialsBrands.Items[1].Selected)
            {
                objEO.ProdSelectIs_Exception_Policy_37 = true;
                objEO.ProdSelectIs_Understood_Policy_37 = false;
                objEO.ProdSelectIs_EO_Covered_Policy_37 = false;
            }
            else if (chkMaterialsBrands.Items[2].Selected)
            {
                objEO.ProdSelectIs_EO_Covered_Policy_37 = true;
                objEO.ProdSelectIs_Understood_Policy_37 = false;
                objEO.ProdSelectIs_Exception_Policy_37 = false;

            }
            else
            {
                objEO.ProdSelectIs_EO_Covered_Policy_37 = false;
                objEO.ProdSelectIs_Understood_Policy_37 = false;
                objEO.ProdSelectIs_Exception_Policy_37 = false;

            }
            //---()
            if (rblProductConsumers.Items[0].Selected)
            {
                objEO.Is_Product_Go_To_Customers = true;
            }
            else if (rblProductConsumers.Items[1].Selected)
            {
                objEO.Is_Product_Go_To_Customers = false;
            }
            else
            {
                objEO.Is_Product_Go_To_CustomersNull = "NULL";
            }


            if (rblProductApproved.Items[0].Selected)
            {
                objEO.Is_Using_Approved_FC_R_ATS = true;
            }
            else if (rblProductApproved.Items[1].Selected)
            {
                objEO.Is_Using_Approved_FC_R_ATS = false;
            }
            else
            {
                objEO.Is_Using_Approved_FC_R_ATSNull = "NULL";
            }


            if (rblRawMaterialsQ1.Items[0].Selected)
            {
                objEO.Is_Approved_At_Level = true;
            }
            else if (rblRawMaterialsQ1.Items[1].Selected)
            {
                objEO.Is_Approved_At_Level = false;
            }
            else
            {
                objEO.Is_Approved_At_LevelNull = "NULL";
            }


            if (rblRawMaterialsQ2.Items[0].Selected)
            {
                objEO.Is_Approved_For_Region = true;

            }
            else if (rblRawMaterialsQ2.Items[1].Selected)
            {
                objEO.Is_Approved_For_Region = false;
            }
            else
            {
                objEO.Is_Approved_At_RegionNull = "NULL";
            }


            if (rblRawMaterialsQ3.Items[0].Selected)
            {
                objEO.Is_Approved_For_Application = true;
            }
            else if (rblRawMaterialsQ3.Items[1].Selected)
            {
                objEO.Is_Approved_For_Application = false;
            }
            else
            {
                objEO.Is_Approved_At_ApplicationNull = "NULL";
            }

            if (rblRawMaterialsQ4.Items[0].Selected)
            {
                objEO.Is_Approved_At_Prev_Application_Rate = true;
            }
            else if (rblRawMaterialsQ4.Items[1].Selected)
            {
                objEO.Is_Approved_At_Prev_Application_Rate = false;
            }
            else
            {
                objEO.Is_Approved_At_Application_RateNull = "NULL";
            }

            //Added to 

            if (hdnSmart.Value == "In Process")
            {
                objEO.Smart_Clearance_Number = "In Process";
            }

            //@p_GCAS

            if (rbGCASNumber.Items[0].Selected)
            {
                objEO.GCASUMOF = "Y";
            }
            else if (rbGCASNumber.Items[1].Selected)
            {
                objEO.GCASUMOF = "N";
            }
            else
            {
                objEO.GCASUMOF = "";
            }

            objEO.IsGCASRec = 1;
            int intgridCount;
            StringBuilder GCASXML = new StringBuilder();
            GCASXML.Append("<ROOT>");

            for (intgridCount = 0; intgridCount <= dgdGCASInfo.Items.Count - 1; intgridCount++)
            {
                if (!(dgdGCASInfo.Items[intgridCount].Cells[2].Text == DBNull.Value.ToString()))
                {
                    if (!string.IsNullOrEmpty(dgdGCASInfo.Items[intgridCount].Cells[2].Text))
                    {
                        if (!(dgdGCASInfo.Items[intgridCount].Cells[2].Text == "&nbsp;"))
                        {
                            GCASXML.Append("<GCAS Mat_Number=" + (char)34 + dgdGCASInfo.Items[intgridCount].Cells[2].Text + (char)34 + "\t");
                        }
                        else
                        {
                            GCASXML.Append("<GCAS Mat_Number=" + DBNull.Value.ToString() + "\t");
                        }
                    }
                    else
                    {
                        GCASXML.Append("<GCAS Mat_Number=" + DBNull.Value.ToString() + "\t");
                    }
                }
                else
                {
                    GCASXML.Append("<GCAS Mat_Number=" + DBNull.Value.ToString() + "\t");
                }



                if (!(dgdGCASInfo.Items[intgridCount].Cells[3].Text == DBNull.Value.ToString()))
                {
                    if (!string.IsNullOrEmpty(dgdGCASInfo.Items[intgridCount].Cells[3].Text))
                    {
                        if (!(dgdGCASInfo.Items[intgridCount].Cells[3].Text == "&nbsp;"))
                        {
                            GCASXML.Append("Short_Name = " + (char)34 + dgdGCASInfo.Items[intgridCount].Cells[3].Text + (char)34 + "\t");
                        }
                        else
                        {
                            GCASXML.Append("Short_Name = " + DBNull.Value.ToString() + "\t");
                        }
                    }
                    else
                    {
                        GCASXML.Append("Short_Name = " + DBNull.Value.ToString() + "\t");
                    }
                }
                else
                {
                    GCASXML.Append("Short_Name = " + DBNull.Value.ToString() + "\t");
                }


                if (!(dgdGCASInfo.Items[intgridCount].Cells[4].Text == DBNull.Value.ToString()))
                {
                    if (!string.IsNullOrEmpty(dgdGCASInfo.Items[intgridCount].Cells[4].Text))
                    {
                        if (!(dgdGCASInfo.Items[intgridCount].Cells[4].Text == "&nbsp;"))
                        {
                            if (dgdGCASInfo.Items[intgridCount].Cells[4].Text == "Yes")
                            {
                                GCASXML.Append("New_To_Site = " + (char)34 + "Y" + (char)34 + "\t");
                            }
                            else
                            {
                                GCASXML.Append("New_To_Site = " + (char)34 + "N" + (char)34 + "\t");
                            }
                        }
                        else
                        {
                            GCASXML.Append("New_To_Site = " + DBNull.Value.ToString() + "\t");
                        }
                    }
                    else
                    {
                        GCASXML.Append("New_To_Site = " + DBNull.Value.ToString() + "\t");
                    }
                }
                else
                {
                    GCASXML.Append("New_To_Site = " + DBNull.Value.ToString());
                }


                if (!(dgdGCASInfo.Items[intgridCount].Cells[5].Text == DBNull.Value.ToString()))
                {
                    if (!string.IsNullOrEmpty(dgdGCASInfo.Items[intgridCount].Cells[5].Text))
                    {
                        if (!(dgdGCASInfo.Items[intgridCount].Cells[5].Text == "&nbsp;"))
                        {
                            if (dgdGCASInfo.Items[intgridCount].Cells[5].Text == "Yes")
                            {
                                GCASXML.Append("New_To_Category = " + (char)34 + "Y" + (char)34 + "\t");
                            }
                            else
                            {
                                GCASXML.Append("New_To_Category = " + (char)34 + "N" + (char)34 + "\t");
                            }
                        }
                        else
                        {
                            GCASXML.Append("New_To_Category = " + DBNull.Value.ToString() + "\t");
                        }
                    }
                    else
                    {
                        GCASXML.Append("New_To_Category = " + DBNull.Value.ToString() + "\t");
                    }
                }
                else
                {
                    GCASXML.Append("New_To_Category = " + DBNull.Value.ToString() + "\t");
                }

                if (!(dgdGCASInfo.Items[intgridCount].Cells[6].Text == DBNull.Value.ToString()))
                {
                    if (!string.IsNullOrEmpty(dgdGCASInfo.Items[intgridCount].Cells[6].Text))
                    {
                        if (!(dgdGCASInfo.Items[intgridCount].Cells[6].Text == "&nbsp;"))
                        {
                            if (dgdGCASInfo.Items[intgridCount].Cells[6].Text == "Yes")
                            {
                                GCASXML.Append("Intermediate = " + (char)34 + "Y" + (char)34 + "\t");
                            }
                            else
                            {
                                GCASXML.Append("Intermediate = " + (char)34 + "N" + (char)34 + "\t");
                            }
                        }
                        else
                        {
                            GCASXML.Append("Intermediate = " + DBNull.Value.ToString() + "\t");
                        }
                    }
                    else
                    {
                        GCASXML.Append("Intermediate = " + DBNull.Value.ToString() + "\t");
                    }
                }
                else
                {
                    GCASXML.Append("Intermediate = " + DBNull.Value.ToString() + "\t");
                }





                if (!(dgdGCASInfo.Items[intgridCount].Cells[7].Text == DBNull.Value.ToString()))
                {
                    if (!string.IsNullOrEmpty(dgdGCASInfo.Items[intgridCount].Cells[7].Text))
                    {
                        if (!(dgdGCASInfo.Items[intgridCount].Cells[7].Text == "&nbsp;"))
                        {
                            string[] a = null;
                            a = dgdGCASInfo.Items[intgridCount].Cells[7].Text.ToString().Split(',');
                            int i = 0;
                            int j = 0;
                            int k = 0;
                            int l = 0;
                            int m = 0;
                            j = 0;
                            k = 0;
                            l = 0;
                            m = 0;

                            for (i = 0; i <= a.Length - 1; i++)
                            {
                                if (a[i] == "Developmental")
                                {
                                    GCASXML.Append("Type_Developmental = " + (char)34 + "Y" + (char)34 + "\t");
                                    j = 1;
                                }
                                else if (a[i] == "Regulated")
                                {
                                    GCASXML.Append("Type_Regulated = " + (char)34 + "Y" + (char)34 + "\t");
                                    k = 1;
                                }
                                else if (a[i] == "Contingent")
                                {
                                    GCASXML.Append("Type_Contingent = " + (char)34 + "Y" + (char)34 + "\t");
                                    l = 1;
                                }
                                else if (a[i] == "Needs Activation")
                                {
                                    GCASXML.Append("Type_Needs_Activation = " + (char)34 + "Y" + (char)34 + "\t");
                                    m = 1;
                                }
                            }

                            if (!(j == 1))
                            {
                                GCASXML.Append("Type_Developmental = " + (char)34 + "N" + (char)34 + "\t");
                            }
                            if (!(k == 1))
                            {
                                GCASXML.Append("Type_Regulated = " + (char)34 + "N" + (char)34 + "\t");
                            }
                            if (!(l == 1))
                            {
                                GCASXML.Append("Type_Contingent = " + (char)34 + "N" + (char)34 + "\t");
                            }
                            if (!(m == 1))
                            {
                                GCASXML.Append("Type_Needs_Activation = " + (char)34 + "N" + (char)34 + "\t");
                            }

                        }
                        else
                        {
                            GCASXML.Append("Type_Developmental = " + (char)34 + "N" + (char)34 + "\t");
                            GCASXML.Append("Type_Regulated = " + (char)34 + "N" + (char)34 + "\t");
                            GCASXML.Append("Type_Contingent = " + (char)34 + "N" + (char)34 + "\t");
                            GCASXML.Append("Type_Needs_Activation = " + (char)34 + "N" + (char)34 + "\t");
                        }
                    }
                    else
                    {
                        GCASXML.Append("Type_Developmental = " + (char)34 + "N" + (char)34 + "\t");
                        GCASXML.Append("Type_Regulated = " + (char)34 + "N" + (char)34 + "\t");
                        GCASXML.Append("Type_Contingent = " + (char)34 + "N" + (char)34 + "\t");
                        GCASXML.Append("Type_Needs_Activation = " + (char)34 + "N" + (char)34 + "\t");
                    }
                }
                else
                {
                    GCASXML.Append("Type_Developmental = " + (char)34 + "N" + (char)34 + "\t");
                    GCASXML.Append("Type_Regulated = " + (char)34 + "N" + (char)34 + "\t");
                    GCASXML.Append("Type_Contingent = " + (char)34 + "N" + (char)34 + "\t");
                    GCASXML.Append("Type_Needs_Activation = " + (char)34 + "N" + (char)34 + "\t");
                }
                GCASXML.Append("></GCAS>");

            }//for end

            GCASXML.Append("</ROOT>");
            if (!string.IsNullOrEmpty(GCASXML.ToString()))
            {
                objEO.GCASXMLStr = "<ROOT></ROOT>";
            }
            else
            {
                objEO.GCASXMLStr = DBNull.Value.ToString();
            }

            //Section : HS&E Section
            //@p_Chemical_Change

            if (rbChemical.Items[0].Selected)
            {
                objEO.NewChemExistChem = "Y";
            }
            else if (rbChemical.Items[1].Selected)
            {
                objEO.NewChemExistChem = "N";
            }
            else
            {
                objEO.NewChemExistChem = "";
            }

            //@p_Raw_Material_Change
            if (rbNewRawMaterial.Items[0].Selected)
            {
                objEO.NewRawExistRaw = "Y";
            }
            else if (rbNewRawMaterial.Items[1].Selected)
            {
                objEO.NewRawExistRaw = "N";
            }
            else
            {
                objEO.NewRawExistRaw = "";
            }

            //@p_Equipment_Change
            if (rbNewEquipment.Items[0].Selected)
            {
                objEO.NewEqipExistEuip = "Y";
            }
            else if (rbNewEquipment.Items[1].Selected)
            {
                objEO.NewEqipExistEuip = "N";
            }
            else
            {
                objEO.NewEqipExistEuip = "";
            }

            //@p_Job_Task_Change
            if (rbNewJobTask.Items[0].Selected)
            {
                objEO.NewjobExistjob = "Y";
            }
            else if (rbNewJobTask.Items[1].Selected)
            {
                objEO.NewjobExistjob = "N";
            }
            else
            {
                objEO.NewjobExistjob = "";
            }

            //      ' PSRA Section
            //'@p_Is_PSRA
            objEO.IsPSRA = 1;
            int intPsragridCount;
            StringBuilder PSRAXML = new StringBuilder();

            //'If Not dgdPSRAInfo.Items.Count = 0 Then
            PSRAXML.Append("<ROOT>");

            for (intPsragridCount = 0; intPsragridCount < dgdPSRAInfo.Items.Count; intPsragridCount++)
            {
                //' for CT_Tracking_Num column
                if (!(dgdPSRAInfo.Items[intPsragridCount].Cells[2].Text == DBNull.Value.ToString()))
                {
                    if (!string.IsNullOrEmpty(dgdPSRAInfo.Items[intPsragridCount].Cells[2].Text))
                    {
                        if (!(dgdPSRAInfo.Items[intPsragridCount].Cells[2].Text == "&nbsp;"))
                        {
                            PSRAXML.Append("<PSRA CT_Tracking_Num=" + (char)34 + dgdPSRAInfo.Items[intPsragridCount].Cells[2].Text + (char)34 + "\t");
                        }
                        else
                        {
                            PSRAXML.Append("<PSRA CT_Tracking_Num=" + (char)34 + DBNull.Value.ToString() + (char)34 + "\t");
                        }
                    }
                    else
                    {
                        PSRAXML.Append("<PSRA CT_Tracking_Num=" + (char)34 + DBNull.Value.ToString() + (char)34 + "\t");
                    }
                }
                else
                {
                    PSRAXML.Append("<PSRA CT_Tracking_Num=" + (char)34 + DBNull.Value.ToString() + (char)34 + "\t");
                }

                // for Supplier_Name column

                {
                    if (!(dgdPSRAInfo.Items[intPsragridCount].Cells[3].Text == DBNull.Value.ToString()))
                    {
                        if (!string.IsNullOrEmpty(dgdPSRAInfo.Items[intPsragridCount].Cells[3].Text))
                        {
                            if (!(dgdPSRAInfo.Items[intgridCount].Cells[3].Text == "&nbsp;"))
                            {
                                PSRAXML.Append("Supplier_Name=" + (char)34 + dgdPSRAInfo.Items[intPsragridCount].Cells[3].Text + (char)34 + "\t");
                            }
                            else
                            {
                                PSRAXML.Append("Supplier_Name=" + (char)34 + DBNull.Value.ToString() + (char)34 + "\t");
                            }
                        }
                        else
                        {
                            PSRAXML.Append("Supplier_Name=" + (char)34 + DBNull.Value.ToString() + (char)34 + "\t");
                        }
                    }
                    else
                    {
                        PSRAXML.Append("Supplier_Name=" + (char)34 + DBNull.Value.ToString() + (char)34 + "\t");
                    }
                }

                // for Material_Application column

                {
                    if (!(dgdPSRAInfo.Items[intPsragridCount].Cells[4].Text == DBNull.Value.ToString()))
                    {
                        if (!string.IsNullOrEmpty(dgdPSRAInfo.Items[intPsragridCount].Cells[4].Text))
                        {
                            if (!(dgdPSRAInfo.Items[intPsragridCount].Cells[4].Text == "&nbsp;"))
                            {
                                PSRAXML.Append("Material_Application=" + (char)34 + dgdPSRAInfo.Items[intPsragridCount].Cells[4].Text + (char)34 + "\t");
                            }
                            else
                            {
                                PSRAXML.Append("Material_Application=" + (char)34 + DBNull.Value.ToString() + (char)34 + "\t");
                            }
                        }
                        else
                        {
                            PSRAXML.Append("Material_Application=" + (char)34 + DBNull.Value.ToString() + (char)34 + "\t");
                        }
                    }
                    else
                    {
                        PSRAXML.Append("Material_Application=" + (char)34 + DBNull.Value.ToString() + (char)34 + "\t");
                    }
                }


                //for Material_Usage_Amount

                {
                    if (!(dgdPSRAInfo.Items[intPsragridCount].Cells[5].Text == DBNull.Value.ToString()))
                    {
                        if (!string.IsNullOrEmpty(dgdPSRAInfo.Items[intPsragridCount].Cells[5].Text))
                        {
                            if (!(dgdPSRAInfo.Items[intPsragridCount].Cells[5].Text == "&nbsp;"))
                            {
                                PSRAXML.Append("Material_Usage_Amount=" + (char)34 + dgdPSRAInfo.Items[intPsragridCount].Cells[5].Text + (char)34 + "\t");
                            }
                            else
                            {
                                PSRAXML.Append("Material_Usage_Amount=" + (char)34 + DBNull.Value.ToString() + (char)34 + "\t");
                            }
                        }
                        else
                        {
                            PSRAXML.Append("Material_Usage_Amount=" + (char)34 + 0.0 + (char)34 + "\t");
                        }
                    }
                    else
                    {
                        PSRAXML.Append("Material_Usage_Amount=" + (char)34 + 0.0 + (char)34 + "\t");
                    }
                }

                //for PSRA_Level

                {
                    if (!(dgdPSRAInfo.Items[intPsragridCount].Cells[6].Text == DBNull.Value.ToString()))
                    {
                        if (!string.IsNullOrEmpty(dgdPSRAInfo.Items[intPsragridCount].Cells[6].Text))
                        {
                            if (!(dgdPSRAInfo.Items[intPsragridCount].Cells[6].Text == "&nbsp;"))
                            {
                                PSRAXML.Append("PSRA_Level=" + (char)34 + dgdPSRAInfo.Items[intPsragridCount].Cells[6].Text + (char)34 + "\t");
                            }
                            else
                            {
                                PSRAXML.Append("PSRA_Level=" + (char)34 + DBNull.Value.ToString() + (char)34 + "\t");
                            }
                        }
                        else
                        {
                            PSRAXML.Append("PSRA_Level=" + (char)34 + DBNull.Value.ToString() + (char)34 + "\t");
                        }
                    }
                    else
                    {
                        PSRAXML.Append("PSRA_Level=" + (char)34 + DBNull.Value.ToString() + (char)34 + "\t");
                    }
                }

                //'for PSRA_Others
                PSRAXML.Append("PSRA_Others=" + (char)34 + DBNull.Value.ToString() + (char)34);
                PSRAXML.Append("></PSRA>");
            }//for PSRAXML end
            PSRAXML.Append("</ROOT>");
            //@p_PSRA_XML_Str

            {
                if (!string.IsNullOrEmpty(PSRAXML.ToString()))
                {
                    objEO.PSRAXMLStr = PSRAXML.ToString();
                }
                else
                {
                    objEO.PSRAXMLStr = DBNull.Value.ToString();
                }
            }

            //@p_PSRA_ID_List

            int intPSRAIDLIST = 0;
            string StrPSRAIDList = null;
            for (intPSRAIDLIST = 0; intPSRAIDLIST <= lbPSRADB.Items.Count - 1; intPSRAIDLIST++)
            {
                if (lbPSRADB.Items[intPSRAIDLIST].Selected == true)
                {
                    if (string.IsNullOrEmpty(StrPSRAIDList))
                    {
                        StrPSRAIDList = lbPSRADB.Items[intPSRAIDLIST].Value;
                        //lbEOEventsDB.SelectedItem.Value
                    }
                    else
                    {
                        StrPSRAIDList = StrPSRAIDList + "," + lbPSRADB.Items[intPSRAIDLIST].Value;
                        //lbEOEventsDB.SelectedItem.Value
                    }
                }
            }


            if (!string.IsNullOrEmpty(StrPSRAIDList))
            {
                objEO.PSRAIDList = StrPSRAIDList;
            }
            else
            {
                objEO.PSRAIDList = DBNull.Value.ToString();
            }

            if (!string.IsNullOrEmpty(txtPSRAOther.Text))
            {
                objEO.PSRAAdditionalInfo = txtPSRAOther.Text.Trim();
            }
            else
            {
                objEO.PSRAAdditionalInfo = "";
            }

            //'@p_Lines_Machines
            if (!string.IsNullOrEmpty(txtMachine.Text.Trim()))
            {
                objEO.LineMachine = txtMachine.Text.Trim();
            }
            else
            {
                objEO.LineMachine = DBNull.Value.ToString();
            }

            //@p_Planned_Start_Date
            if (!string.IsNullOrEmpty(txtStartDate.Text.Trim()))
            {
                objEO.PlannedStartDate = Convert.ToDateTime(txtStartDate.Text.Trim());
            }
            else
            {
                objEO.PlannedStartDate = System.DateTime.MinValue;
            }

            //'@p_Formula_Card_Number
            if (!string.IsNullOrEmpty(txtFormulaCardNumber.Text.Trim()))//need to check int/str
            {
                objEO.FormulaCardNumber = txtFormulaCardNumber.Text.Trim();
            }
            else
            {
                objEO.FormulaCardNumber = DBNull.Value.ToString();
            }

            //@p_IGCAS_Number

            if (!string.IsNullOrEmpty(txtIPSGCAS.Text.Trim()))//need to check int/str
            {
                objEO.IGCASNumber = txtIPSGCAS.Text.Trim();
            }
            else
            {
                objEO.IGCASNumber = DBNull.Value.ToString();
            }

            //'@p_PP_Format

            if (!string.IsNullOrEmpty(txtFormat.Text.Trim())) //need to check int/str
            {
                objEO.Formats = txtFormat.Text.Trim();
            }
            else
            {
                objEO.Formats = DBNull.Value.ToString();
            }

            //@p_PP_Attachment
            objEO.PPAttachment = DBNull.Value.ToString();

            //@p_PP_Lab_Notebook_Number
            objEO.PPLabNotebookNumber = DBNull.Value.ToString();

            //Section : Packaging / Disposition Information
            int intProPacked = 0;
            string strProPacked = null;
            for (intProPacked = 0; intProPacked <= lbProductPackedDB.Items.Count - 1; intProPacked++)
            {
                if (lbProductPackedDB.Items[intProPacked].Selected == true)
                {
                    if (string.IsNullOrEmpty(strProPacked))
                    {
                        strProPacked = lbProductPackedDB.Items[intProPacked].Value;
                        //lbProductPackedDB.SelectedItem.Value
                    }
                    else
                    {
                        strProPacked = strProPacked + "," + lbProductPackedDB.Items[intProPacked].Value;
                    }
                }
            }

            // '@p_Prod_Pack_ID_List
            if (!string.IsNullOrEmpty(strProPacked))
            {
                objEO.ProductPacked = strProPacked;
            }
            else
            {
                objEO.ProductPacked = DBNull.Value.ToString();
            }

            //@p_Current_Packaging 
            if (chkCurrentPackaging.Checked == true)
            {
                objEO.CurPackage = "Y";
            }
            else
            {
                objEO.CurPackage = "N";
            }

            int intCurPakType = 0;
            string strCurPakType = null;
            for (intCurPakType = 0; intCurPakType <= lbPackaging.Items.Count - 1; intCurPakType++)
            {
                if (lbPackaging.Items[intCurPakType].Selected == true)
                {
                    if (string.IsNullOrEmpty(strCurPakType))
                    {
                        strCurPakType = lbPackaging.Items[intCurPakType].Value;
                        //lbPackaging.SelectedItem.Value
                    }
                    else
                    {
                        strCurPakType = strCurPakType + "," + lbPackaging.Items[intCurPakType].Value;
                    }
                }
            }



            if (!string.IsNullOrEmpty(strCurPakType))
            {
                objEO.PackagingList = strCurPakType;
            }
            else
            {
                objEO.PackagingList = DBNull.Value.ToString();
            }

            //@p_Experimental_Packaging
            if (chkExperimentalPackaging.Checked == true)
            {
                objEO.ExpPackage = "Y";
            }
            else
            {
                objEO.ExpPackage = "N";
            }

            //@p_Exp_Pack_Clear_Poly
            if (chkClearPoly.Checked == true)
            {
                objEO.ClearPoly = "Y";
            }
            else
            {
                objEO.ClearPoly = "N";

            }

            //@p_Exp_Pack_Blank_KDF	
            if (chkBlankKDF.Checked == true)
            {
                objEO.BlankKDF = "Y";
            }
            else
            {
                objEO.BlankKDF = "N";
            }



            if (!(drpProductDispositionDB.SelectedIndex == -1) | drpProductDispositionDB.SelectedItem.Text == "--Select a Product Disposition--")
            {
                if (!(drpProductDispositionDB.SelectedItem.Value == "--Select a Product Disposition--"))
                {
                    objEO.ProdDisposition = Convert.ToInt32(drpProductDispositionDB.SelectedItem.Value);
                }
                else
                {
                    objEO.ProdDisposition = 0;
                }
            }
            else
            {
                objEO.ProdDisposition = 0;
            }

            //@p_Prod_Disp_Add_Comments	
            if (!string.IsNullOrEmpty(txtAdditionalComments.Text.Trim()))
            {
                objEO.AddCommnets = txtAdditionalComments.Text.Trim();
            }
            else
            {
                objEO.AddCommnets = DBNull.Value.ToString();
            }

            //@p_Pallet_Patter_SKU	
            if (rbPalletPattern.Items[0].Selected)
            {
                objEO.PalletPatternYesNo = "Y";
            }
            else if (rbPalletPattern.Items[1].Selected)
            {
                objEO.PalletPatternYesNo = "N";
            }
            else
            {
                objEO.PalletPatternYesNo = "";
            }


            //     '@p_Stack_Testing
            if (chkStackShipTesting.Items[0].Selected == true)
            {
                objEO.StacTesting = "Y";
            }
            else
            {
                objEO.StacTesting = "N";
            }

            //@p_Ship_Testing		
            if (chkStackShipTesting.Items[1].Selected == true)
            {
                objEO.ShipTesting = "Y";
            }
            else
            {
                objEO.ShipTesting = "N";
            }

            //@p_Material_Disposition_ID
            if (!(drpMaterialDispositionDB.SelectedIndex == -1 | drpMaterialDispositionDB.SelectedIndex == 0))
            {
                objEO.MaterialDisposition = Convert.ToInt32(drpMaterialDispositionDB.SelectedItem.Value);
            }
            else
            {
                objEO.MaterialDisposition = 0;
            }

            // '@p_Mat_Disp_Add_Comments
            if (!string.IsNullOrEmpty(txtMaterialComments.Text.Trim()))
            {
                objEO.MaterialDispoOtherComments = txtMaterialComments.Text.Trim();
            }
            else
            {
                objEO.MaterialDispoOtherComments = DBNull.Value.ToString();
            }

            //@p_Broke_Disp_Normal	
            if (rbBroke.Items[0].Selected)
            {
                objEO.EOgengreaternormalbroke = "Y";
            }
            else if (rbBroke.Items[1].Selected)
            {
                objEO.EOgengreaternormalbroke = "N";
            }
            else
            {
                objEO.EOgengreaternormalbroke = "";
            }

            //@p_Printer_Broke
            if (rbPrintedBroke.Items[0].Selected)
            {
                objEO.PrintBroke = "Y";
            }
            else if (rbPrintedBroke.Items[1].Selected)
            {
                objEO.PrintBroke = "N";
            }
            else
            {
                objEO.PrintBroke = "";
            }

            //@p_Ink_Coverage
            if (rbInkCoverage.Items[0].Selected)
            {
                objEO.PrintBrokeYesOption = "Y";
            }
            else if (rbInkCoverage.Items[0].Selected)
            {
                objEO.PrintBrokeYesOption = "N";
            }
            else
            {
                objEO.PrintBrokeYesOption = "";
            }

            //@p_PDI_Lab_Notebook_Number
            if (!string.IsNullOrEmpty(txtLabNoteBook.Text.Trim()))
            {
                objEO.LabNoteBook = txtLabNoteBook.Text.Trim();
            }
            else
            {
                objEO.LabNoteBook = DBNull.Value.ToString();
            }

            //@p_PDI_Attachments	
            if (!string.IsNullOrEmpty(txtPackagingComments.Text.Trim()))
            {
                objEO.PrevComments = txtPackagingComments.Text.Trim();
            }
            else
            {
                objEO.PrevComments = DBNull.Value.ToString();
            }

            //    ' Preliminary Approval 
            //'@p_EO_Mode

            if (rbEOType.Items[0].Selected == true)
            {
                objEO.EOSiteTestOther = "E";
            }
            else if (rbEOType.Items[1].Selected == true)
            {
                objEO.EOSiteTestOther = "S";
            }
            else if (rbEOType.Items[2].Selected == true)
            {
                objEO.EOSiteTestOther = "O";
            }
            else if (rbEOType.Items[3].Selected == true)
            {
                objEO.EOSiteTestOther = "H";
            }

            //@p_Approval_Group_ID
            if (!(drpPrelimApproval.SelectedIndex == -1))
            {
                if (!(drpPrelimApproval.SelectedValue == "--Select Approver Group--"))
                {
                    objEO.ApprovalGroup = Convert.ToInt32(drpPrelimApproval.SelectedValue);
                }
                else
                {
                    objEO.ApprovalGroup = 0;
                }
            }
            else
            {
                objEO.ApprovalGroup = 0;
            }


            string strFuncNameAppName = string.Empty;

            if (!string.IsNullOrEmpty(txtBudgetOwner.Text))
            {
                if (string.IsNullOrEmpty(strFuncNameAppName))
                {
                    strFuncNameAppName = lblAPPBO.Text + ":" + txtBudgetOwner.Text;
                }
                else
                {
                    strFuncNameAppName = strFuncNameAppName + "," + lblAPPBO.Text + ":" + txtBudgetOwner.Text;
                }
            }

            if (!string.IsNullOrEmpty(txtGBUHSE.Text))
            {
                if (string.IsNullOrEmpty(strFuncNameAppName))
                {
                    strFuncNameAppName = lblApprGBUHSE.Text + ":" + txtGBUHSE.Text;
                }
                else
                {
                    strFuncNameAppName = strFuncNameAppName + "," + lblApprGBUHSE.Text + ":" + txtGBUHSE.Text;
                }
            }

            if (!string.IsNullOrEmpty(txtQAPre.Text))
            {
                if (string.IsNullOrEmpty(strFuncNameAppName))
                {
                    strFuncNameAppName = lblAppQAPrelim.Text + ":" + txtQAPre.Text;
                }
                else
                {
                    strFuncNameAppName = strFuncNameAppName + "," + lblAppQAPrelim.Text + ":" + txtQAPre.Text;
                }
            }

            if (!string.IsNullOrEmpty(txtCentralQAPre.Text))
            {
                if (string.IsNullOrEmpty(strFuncNameAppName))
                {
                    strFuncNameAppName = lblAppCentralQAPrelim.Text + ":" + txtCentralQAPre.Text;
                }
                else
                {
                    strFuncNameAppName = strFuncNameAppName + "," + lblAppCentralQAPrelim.Text + ":" + txtCentralQAPre.Text;
                }
            }

            if (!string.IsNullOrEmpty(txtSiteHSE.Text))
            {
                if (string.IsNullOrEmpty(strFuncNameAppName))
                {
                    strFuncNameAppName = lblAppHSESite.Text + ":" + txtSiteHSE.Text;
                }
                else
                {
                    strFuncNameAppName = strFuncNameAppName + "," + lblAppHSESite.Text + ":" + txtSiteHSE.Text;
                }
            }

            if (!string.IsNullOrEmpty(txtSiteContact.Text))
            {
                if (string.IsNullOrEmpty(strFuncNameAppName))
                {
                    strFuncNameAppName = lblAppSiteContact.Text + ":" + txtSiteContact.Text;
                }
                else
                {
                    strFuncNameAppName = strFuncNameAppName + "," + lblAppSiteContact.Text + ":" + txtSiteContact.Text;
                }
            }

            if (!string.IsNullOrEmpty(txtSitePlanning.Text))
            {
                if (string.IsNullOrEmpty(strFuncNameAppName))
                {
                    strFuncNameAppName = lblAppSiteplan.Text + ":" + txtSitePlanning.Text;
                }
                else
                {
                    strFuncNameAppName = strFuncNameAppName + "," + lblAppSiteplan.Text + ":" + txtSitePlanning.Text;
                }
            }

            if (!string.IsNullOrEmpty(txtCentralPlanning.Text))
            {
                if (string.IsNullOrEmpty(strFuncNameAppName))
                {
                    strFuncNameAppName = lblAppCentralPlan.Text + ":" + txtCentralPlanning.Text;
                }
                else
                {
                    strFuncNameAppName = strFuncNameAppName + "," + lblAppCentralPlan.Text + ":" + txtCentralPlanning.Text;
                }
            }

            if (!string.IsNullOrEmpty(txtSAPCost.Text))
            {
                if (string.IsNullOrEmpty(strFuncNameAppName))
                {
                    strFuncNameAppName = lblAppSAPCost.Text + ":" + txtSAPCost.Text;
                }
                else
                {
                    strFuncNameAppName = strFuncNameAppName + "," + lblAppSAPCost.Text + ":" + txtSAPCost.Text;
                }
            }

            //Added on 01/20/2010 
            //For MUREO PCRs
            //By: David


            if (!string.IsNullOrEmpty(txtSmartClearance.Text))
            {
                if (string.IsNullOrEmpty(strFuncNameAppName))
                {
                    strFuncNameAppName = lblAppSmartClearance.Text + ":" + txtSmartClearance.Text;
                }
                else
                {
                    strFuncNameAppName = strFuncNameAppName + "," + lblAppSmartClearance.Text + ":" + txtSmartClearance.Text;
                }
            }



            if (!string.IsNullOrEmpty(txtTimingGate.Text))
            {
                if (string.IsNullOrEmpty(strFuncNameAppName))
                {
                    strFuncNameAppName = lblAppTiminingGate.Text + ":" + txtTimingGate.Text;
                }
                else
                {
                    strFuncNameAppName = strFuncNameAppName + "," + lblAppTiminingGate.Text + ":" + txtTimingGate.Text;
                }
            }

            if (!string.IsNullOrEmpty(txtStandardOffice.Text))
            {
                if (string.IsNullOrEmpty(strFuncNameAppName))
                {
                    strFuncNameAppName = lblAppStandsOffice.Text + ":" + txtStandardOffice.Text;
                }
                else
                {
                    strFuncNameAppName = strFuncNameAppName + "," + lblAppStandsOffice.Text + ":" + txtStandardOffice.Text;
                }
            }


            //Added by David - MUREO PCR : 4 Additional Approvers - Date: 01/03/2012

            if (!string.IsNullOrEmpty(txtAdditionalApp1.Text))
            {
                if (string.IsNullOrEmpty(strFuncNameAppName))
                {
                    strFuncNameAppName = lblAdditionalApprover1a.Text + ":" + txtAdditionalApp1.Text;
                }
                else
                {
                    strFuncNameAppName = strFuncNameAppName + "," + lblAdditionalApprover1a.Text + ":" + txtAdditionalApp1.Text;
                }
            }

            if (!string.IsNullOrEmpty(txtAdditionalApp2.Text))
            {
                if (string.IsNullOrEmpty(strFuncNameAppName))
                {
                    strFuncNameAppName = lblAdditionalApprover2a.Text + ":" + txtAdditionalApp2.Text;
                }
                else
                {
                    strFuncNameAppName = strFuncNameAppName + "," + lblAdditionalApprover2a.Text + ":" + txtAdditionalApp2.Text;
                }
            }

            if (!string.IsNullOrEmpty(txtAdditionalApp3.Text))
            {
                if (string.IsNullOrEmpty(strFuncNameAppName))
                {
                    strFuncNameAppName = lblAdditionalApprover3a.Text + ":" + txtAdditionalApp3.Text;
                }
                else
                {
                    strFuncNameAppName = strFuncNameAppName + "," + lblAdditionalApprover3a.Text + ":" + txtAdditionalApp3.Text;
                }
            }


            if (!string.IsNullOrEmpty(txtAdditionalApp4.Text))
            {
                if (string.IsNullOrEmpty(strFuncNameAppName))
                {
                    strFuncNameAppName = lblAdditionalApprover4a.Text + ":" + txtAdditionalApp4.Text;
                }
                else
                {
                    strFuncNameAppName = strFuncNameAppName + "," + lblAdditionalApprover4a.Text + ":" + txtAdditionalApp4.Text;
                }
            }


            if (!string.IsNullOrEmpty(strFuncNameAppName))
            {
                objEO.FuncIDAppNameList = strFuncNameAppName;
            }
            else
            {
                objEO.FuncIDAppNameList = DBNull.Value.ToString();
            }

            // Approval History Section

            //@p_App_History_Desc	
            if (string.IsNullOrEmpty(lblApprovals.Text.Trim()))
            {
                objEO.AppHistoryDesc = lblApprovals.Text.Trim();
            }
            else
            {
                objEO.AppHistoryDesc = DBNull.Value.ToString();
            }

            //@p_Rev_History_Desc	
            if (string.IsNullOrEmpty(lblRevisionHistory.Text.Trim()))
            {
                objEO.RevHistoryDesc = lblRevisionHistory.Text.Trim();
            }
            else
            {
                objEO.RevHistoryDesc = DBNull.Value.ToString();
            }

            //@p_Prev_Comments		
            if (!string.IsNullOrEmpty(txtPackagingComments.Text))
            {
                objEO.PrevComments = txtPackagingComments.Text.Trim();
                // need to check
            }
            else
            {
                objEO.PrevComments = DBNull.Value.ToString();
                // need to check
            }
            //    'Completed Pre Tab
            //'------------------------------------
            //' final tab starts
            //'@p_EO_ID 
            //'Already exist

            //'-- Final Document section 
            //'@p_Budget_Center_ID

            if (!string.IsNullOrEmpty(lblBudgetCenterFinalDB.Text.Trim()))
            {
                objEO.BudgetCenterFinal = lblBudgetCenterFinalDB.Text.Trim();
            }
            else
            {
                //objEO.BudgetCenterFinal = DBNull.Value.ToString
                objEO.BudgetCenterFinal = "0";
            }
            //@p_New_Chemical_Change
            objEO.NewChemicalChange = "N";
            //@p_New_RawMaterial_Change
            objEO.NewRawMaterialChange = "N";


            //-- Packaging Disposition Information Section
            //@p_Prod_Pack_ID_List

            int intProdPackIdList = 0;
            string strProdPackIdList = null;
            for (intProdPackIdList = 0; intProdPackIdList <= lbFinalPackagingInfoDB.Items.Count - 1; intProdPackIdList++)
            {
                if (lbFinalPackagingInfoDB.Items[intProdPackIdList].Selected == true)
                {

                    if (lbFinalPackagingInfoDB.Items[intProdPackIdList].Text != "--Select Product Pack--")
                    {
                        if (string.IsNullOrEmpty(strProdPackIdList))
                        {
                            strProdPackIdList = lbFinalPackagingInfoDB.Items[intProdPackIdList].Value;
                        }
                        else
                        {
                            strProdPackIdList = strProdPackIdList + "," + lbFinalPackagingInfoDB.Items[intProdPackIdList].Value;
                        }
                    }

                }
            }
            if (!string.IsNullOrEmpty(strProdPackIdList))
            {
                objEO.ProductPack = strProdPackIdList;
            }
            else
            {
                //objEO.ProductPack = DBNull.Value.ToString
                objEO.ProductPack = objEO.ProductPacked;
            }


            //@p_Current_Packaging		
            if (chkCurPack.Checked == true)
            {
                objEO.CurrentPackage = "Y";
            }
            else
            {
                //objEO.CurrentPackage = "N"
                objEO.CurrentPackage = objEO.CurPackage;
            }

            //@p_Current_Packaging_Type --changed to @p_Packaging_Type

            int intCurFinalPakType = 0;
            string strCurFinalPakType = null;
            for (intCurFinalPakType = 0; intCurFinalPakType <= lbFinalPackage.Items.Count - 1; intCurFinalPakType++)
            {
                if (lbFinalPackage.Items[intCurFinalPakType].Selected == true)
                {
                    if (string.IsNullOrEmpty(strCurFinalPakType))
                    {
                        strCurFinalPakType = lbFinalPackage.Items[intCurFinalPakType].Value;
                        //lbPackaging.SelectedItem.Value
                    }
                    else
                    {
                        strCurFinalPakType = strCurFinalPakType + "," + lbFinalPackage.Items[intCurFinalPakType].Value;
                    }
                }
            }

            if (!string.IsNullOrEmpty(strCurFinalPakType))
            {
                objEO.CurrentPackagingType = strCurFinalPakType;
            }
            else
            {
                //objEO.CurrentPackagingType = DBNull.Value.ToString
                objEO.CurrentPackagingType = objEO.PackagingList;
            }
            //objEO.CurrentPackagingType = DBNull.Value.ToString
            //@p_Experimental_Packaging
            if (chkExpPack.Checked == true)
            {
                objEO.ExperimentPackage = "Y";
            }
            else
            {
                //objEO.ExperimentPackage = "N"
                objEO.ExperimentPackage = objEO.ExpPackage;
            }

            //@p_Exp_Pack_Clear_Poly	
            if (chkCurrentPoly.Checked == true)
            {
                objEO.ClearPolyFinal = "Y";
            }
            else
            {
                //objEO.ClearPolyFinal = "N"
                objEO.ClearPolyFinal = objEO.ClearPoly;
            }

            //@p_Exp_Pack_Blank_KDF
            if (chkBlankKGF.Checked == true)
            {
                objEO.BlankKDFFinal = "Y";
            }
            else
            {
                //objEO.BlankKDFFinal = "N"
                objEO.BlankKDFFinal = objEO.BlankKDF;
            }

            //@p_Prod_Disp_ID
            if (!(drpFinalProductDispositionDB.SelectedIndex == -1 | drpFinalProductDispositionDB.SelectedIndex == 0))
            {
                objEO.ProdDispoID = Convert.ToInt32(drpFinalProductDispositionDB.SelectedItem.Value);
            }
            else
            {
                //objEO.ProdDispoID = 0
                objEO.ProdDispoID = objEO.ProdDisposition;
            }

            //@p_Prod_Disp_Add_Comments	
            if (!string.IsNullOrEmpty(txtProductDisposition.Text.Trim()))
            {
                objEO.OtherProdDispo = txtProductDisposition.Text.Trim();
            }
            else
            {
                //objEO.OtherProdDispo = DBNull.Value.ToString
                objEO.OtherProdDispo = objEO.AddCommnets;
            }

            //@p_Pallet_Patter_SKU	
            if (rbUniqPallet.Items[0].Selected)
            {
                objEO.EOUniquePalletPaerns = "Y";
            }
            else if (rbUniqPallet.Items[1].Selected)
            {
                objEO.EOUniquePalletPaerns = "N";
            }
            else
            {
                //objEO.EOUniquePalletPaerns = ""
                objEO.EOUniquePalletPaerns = objEO.PalletPatternYesNo;
            }
            //@p_Stack_Testing
            if (chkFinalStackShip.Items[0].Selected == false)
            {
                objEO.EOUniqPaletPatStackTesing = "N";
            }
            else if (chkFinalStackShip.Items[0].Selected == true)
            {
                objEO.EOUniqPaletPatStackTesing = "Y";
            }
            else
            {
                objEO.EOUniqPaletPatStackTesing = "";
            }

            //@p_Ship_Testing	
            if (chkFinalStackShip.Items[1].Selected == false)
            {
                objEO.EOUniqPaletPatShipTesing = "N";
            }
            else if (chkFinalStackShip.Items[1].Selected == true)
            {
                objEO.EOUniqPaletPatShipTesing = "Y";
            }
            else
            {
                objEO.EOUniqPaletPatShipTesing = "";
            }


            //@p_Material_Disposition_ID
            if (!(drpFinalMaterialDispositionDBFinal.SelectedIndex == -1 | drpFinalMaterialDispositionDBFinal.SelectedIndex == 0))
            {
                objEO.MaterialDispostion = Convert.ToInt32(drpFinalMaterialDispositionDBFinal.SelectedItem.Value);
            }
            else
            {
                //objEO.MaterialDispostion = 0
                objEO.MaterialDispostion = objEO.MaterialDisposition;
            }



            //@p_Mat_Disp_Add_Comments
            //
            if (!string.IsNullOrEmpty(txtMaterialDisposition.Text.Trim()))
            {
                objEO.MaterialDispoAddCommnets = txtMaterialDisposition.Text.Trim();
            }
            else
            {
                //objEO.MaterialDispoAddCommnets = DBNull.Value.ToString
                objEO.MaterialDispoAddCommnets = objEO.MaterialDispoOtherComments;
            }

            //@p_Broke_Disp_Normal
            if (rbBrokeDisposition.Items[0].Selected)
            {
                objEO.EOGraterNormalBroke = "Y";
            }
            else if (rbBrokeDisposition.Items[1].Selected)
            {
                objEO.EOGraterNormalBroke = "N";
            }
            else
            {
                //objEO.EOGraterNormalBroke = ""
                objEO.EOGraterNormalBroke = objEO.EOgengreaternormalbroke;
            }

            //@p_Printer_Broke
            if (rbPrintBrokeFinal.Items[0].Selected)
            {
                objEO.EOPrintedBroke = "Y";
            }
            else if (rbPrintBrokeFinal.Items[1].Selected)
            {
                objEO.EOPrintedBroke = "N";
            }
            else
            {
                //objEO.EOPrintedBroke = ""
                objEO.EOPrintedBroke = objEO.PrintBroke;
            }

            //@p_Ink_Coverage	
            if (rbPrintedBrokeInk.Items[0].Selected)
            {
                objEO.EOPrintedBrokeIncCov = "Y";
            }
            else if (rbPrintedBrokeInk.Items[1].Selected)
            {
                objEO.EOPrintedBrokeIncCov = "N";
            }
            else
            {
                //objEO.EOPrintedBrokeIncCov = ""
                objEO.EOPrintedBrokeIncCov = objEO.PrintBrokeYesOption;
            }

            //@p_PDI_Lab_Notebook_Number	
            if (!string.IsNullOrEmpty(txtLabNoteBook.Text.Trim()))
            {
                objEO.PDILabNotebookNumber = txtLabNoteBook.Text.Trim();
            }
            else
            {
                objEO.PDILabNotebookNumber = DBNull.Value.ToString();
            }

            //@p_PDI_Attachment			
            if (!string.IsNullOrEmpty(txtAddPertaingEO.Value))
            {
                objEO.PDIAttachment = txtAddPertaingEO.Value;
            }
            else
            {
                objEO.PDIAttachment = DBNull.Value.ToString();
            }
            //'     -- Cost Sheet 
            objEO.EstmAmtCostSheet = Convert.ToDecimal(objEO.TotCost);
            //@p_Total_Cost_Diff

            if (rbCostSheetDiff.Items[0].Selected)
            {
                objEO.TotDiffCostSheet = "Y";
            }
            else if (rbCostSheetDiff.Items[1].Selected)
            {
                objEO.TotDiffCostSheet = "N";
            }
            else
            {
                objEO.TotDiffCostSheet = "";
            }

            //@p_Cost_Cost_Sheet		
            if (!string.IsNullOrEmpty(txtCostSheetDiff.Text.Trim()))
            {
                objEO.TotDiffCostSheetYesOpt = Convert.ToDecimal(txtCostSheetDiff.Text.Trim());
            }
            else
            {
                objEO.TotDiffCostSheetYesOpt = Convert.ToDecimal(0.0);
                //DBNull.Value.ToString
            }

            //@p_CS_Comments		
            if (!string.IsNullOrEmpty(txtCostSheetComments.Text.Trim()))
            {
                objEO.AddCommnetsCostSheet = txtCostSheetComments.Text.Trim();
            }
            else
            {
                objEO.AddCommnetsCostSheet = DBNull.Value.ToString();
            }

            //@p_CS_Attachments		
            if (!string.IsNullOrEmpty(CSAttachments.Value))
            {
                objEO.AttaCostSheet = CSAttachments.Value;
            }
            else
            {
                objEO.AttaCostSheet = DBNull.Value.ToString();
            }

            //@p_Formula_Card_Info		 Note : intially it was dropdown now its changed to textbox.
            if (!(txtFinal.Text.Trim() == string.Empty))
            {
                objEO.EOFormulaCardInformation = txtFinal.Text.Trim();
            }
            else
            {
                objEO.EOFormulaCardInformation = DBNull.Value.ToString();
            }

            //@p_FC_Attachment		
            if (!string.IsNullOrEmpty(txtFCAttachment.Value))
            {
                objEO.AttachFormulaCard = txtFCAttachment.Value;
            }
            else
            {
                //objEO.AttachFormulaCard = DBNull.Value.ToString
                objEO.AttachFormulaCard = "0";
            }

            // -- Test Plans 
            //@p_TP_Attachment		
            if (!string.IsNullOrEmpty(txtTPAttachment.Value))
            {
                objEO.TestPlantAttachments = txtTPAttachment.Value;
            }
            else
            {
                objEO.TestPlantAttachments = DBNull.Value.ToString();
            }

            //-- Lab Samplings Plans 
            //@p_Central_Analytical_Lab	
            if (chkCenAnaLab.Checked == true)
            {
                objEO.CentralAnalyticalLab = "Y";
            }
            else
            {
                objEO.CentralAnalyticalLab = "N";
            }

            //@p_Site_Testing_Lab
            if (chkSiteTestLab.Checked == true)
            {
                objEO.SiteTestingLab = "Y";
            }
            else
            {
                objEO.SiteTestingLab = "N";
            }

            //@p_LS_Attachment	
            if (!string.IsNullOrEmpty(txtLSAttachment.Value))
            {
                objEO.AttchLabforTesting = txtLSAttachment.Value;
            }
            else
            {
                objEO.AttchLabforTesting = DBNull.Value.ToString();
            }

            //-- Product or Detailed Test Flow Matrix 
            //@p_PTF_Attachment		
            if (!string.IsNullOrEmpty(txtPTFAttachment.Value))
            {
                objEO.ProdDetailTest = txtPTFAttachment.Value;
            }
            else
            {
                objEO.ProdDetailTest = DBNull.Value.ToString();
            }

            //-- Other Supporting Documents 
            //@p_Comments_Approvers		VARCHAR(1000)=NULL,

            if (!string.IsNullOrEmpty(txtApproverComments.Text.Trim()))
            {
                objEO.Comments = txtApproverComments.Text.Trim();
            }
            else
            {
                objEO.Comments = DBNull.Value.ToString();
            }

            //@p_OD_Attachment		VARCHAR(4000)=NULL, 
            if (!string.IsNullOrEmpty(txtODAttachment.Value))
            {
                objEO.OtherSupAttach = txtODAttachment.Value;
            }
            else
            {
                objEO.OtherSupAttach = DBNull.Value.ToString();
            }

            //'@p_Raw_Pack_Mat	
            if (rbRawMaterialFinal.Items[0].Selected)
            {
                objEO.NewRawPackageFinal = "Y";
            }
            else if (rbRawMaterialFinal.Items[1].Selected)
            {
                objEO.NewRawPackageFinal = "N";
            }
            else
            {
                objEO.NewRawPackageFinal = "";
            }

            //@p_Parent_Rolls		
            if (rbParentRollsFinal.Items[0].Selected)
            {
                objEO.ParentRollsFinal = "Y";
            }
            else if (rbParentRollsFinal.Items[1].Selected)
            {
                objEO.ParentRollsFinal = "N";
            }
            else
            {
                objEO.ParentRollsFinal = "";
            }

            //@p_Intermediate_Mat	
            if (rbInterMaterialsFinal.Items[0].Selected)
            {
                objEO.InterMaterialFinal = "Y";
            }
            else if (rbInterMaterialsFinal.Items[1].Selected)
            {
                objEO.InterMaterialFinal = "N";
            }
            else
            {
                objEO.InterMaterialFinal = "";
            }

            //@p_Current_Brand
            if (rbShippedFinal.Items[0].Selected)
            {
                objEO.CurrentBrandFinal = "Y";
            }
            else if (rbShippedFinal.Items[1].Selected)
            {
                objEO.CurrentBrandFinal = "N";
            }
            else
            {
                objEO.CurrentBrandFinal = "";
            }



            //@p_Cons_Lab_Eval
            if (rbTestProductedShippedFinal.Items[0].Selected)
            {
                objEO.ConsLabEvalFinal = "Y";
            }
            else if (rbTestProductedShippedFinal.Items[1].Selected)
            {
                objEO.ConsLabEvalFinal = "N";
            }
            else
            {
                objEO.ConsLabEvalFinal = "";
            }

            //@p_GCAS
            if (rbGCASNumberFinal.Items[0].Selected)
            {
                objEO.GCASFinal = "Y";
            }
            else if (rbGCASNumberFinal.Items[1].Selected)
            {
                objEO.GCASFinal = "N";
            }
            else
            {
                objEO.GCASFinal = "";
            }

            //@p_Is_Understood_Policy_37
            if (chkFinalMaterialsBrands.Items[0].Selected)
            {
                objEO.ProdSelectIs_Understood_Policy_37Final = true;
                objEO.ProdSelectIs_Exception_Policy_37Final = false;
                objEO.ProdSelectIs_EO_Covered_Policy_37Final = false;
                //@p_Is_Exception_Policy_37
            }
            else if (chkFinalMaterialsBrands.Items[1].Selected)
            {
                objEO.ProdSelectIs_Exception_Policy_37Final = true;
                objEO.ProdSelectIs_Understood_Policy_37Final = false;
                objEO.ProdSelectIs_EO_Covered_Policy_37Final = false;
                //@p_Is_EO_Covered_Policy_37
            }
            else if (chkFinalMaterialsBrands.Items[2].Selected)
            {
                objEO.ProdSelectIs_EO_Covered_Policy_37Final = true;
                objEO.ProdSelectIs_Understood_Policy_37Final = false;
                objEO.ProdSelectIs_Exception_Policy_37Final = false;

            }
            else
            {
                objEO.ProdSelectIs_EO_Covered_Policy_37Final = false;
                objEO.ProdSelectIs_Understood_Policy_37Final = false;
                objEO.ProdSelectIs_Exception_Policy_37Final = false;

            }


            //@p_Is_Product_Go_To_Customers
            if (rblFinalProductConsumerOption.Items[0].Selected)
            {
                objEO.Is_Product_Go_To_CustomersFinal = true;
            }
            else if (rblFinalProductConsumerOption.Items[1].Selected)
            {
                objEO.Is_Product_Go_To_CustomersFinal = false;
            }
            else
            {
                objEO.Is_Product_Go_To_CustomersNullFinal = "NULL";
            }


            //@p_Is_Using_Approved_FC_R_ATS
            if (rblFinalProductApprovedOption.Items[0].Selected)
            {
                objEO.Is_Using_Approved_FC_R_ATSFinal = true;
            }
            else if (rblFinalProductApprovedOption.Items[1].Selected)
            {
                objEO.Is_Using_Approved_FC_R_ATSFinal = false;
            }
            else
            {
                objEO.Is_Using_Approved_FC_R_ATSNullFinal = "NULL";
            }


            //@p_Is_Approved_At_Level
            if (rblFinalRawMaterialsQ1.Items[0].Selected)
            {
                objEO.Is_Approved_At_LevelFinal = true;
            }
            else if (rblFinalRawMaterialsQ1.Items[1].Selected)
            {
                objEO.Is_Approved_At_LevelFinal = false;
            }
            else
            {
                objEO.Is_Approved_At_LevelNullFinal = "NULL";
            }

            //@p_Is_Approved_For_Region
            if (rblFinalRawMaterialsQ2.Items[0].Selected)
            {
                objEO.Is_Approved_For_RegionFinal = true;

            }
            else if (rblFinalRawMaterialsQ2.Items[1].Selected)
            {
                objEO.Is_Approved_For_RegionFinal = false;
            }
            else
            {
                objEO.Is_Approved_At_RegionNullFinal = "NULL";
            }

            //@p_Is_Approved_For_Application
            if (rblFinalRawMaterialsQ3.Items[0].Selected)
            {
                objEO.Is_Approved_For_ApplicationFinal = true;
            }
            else if (rblFinalRawMaterialsQ3.Items[1].Selected)
            {
                objEO.Is_Approved_For_ApplicationFinal = false;
            }
            else
            {
                objEO.Is_Approved_At_ApplicationNullFinal = "NULL";
            }

            //@p_Is_Approved_At_Prev_Application_Rate
            if (rblFinalRawMaterialsQ4.Items[0].Selected)
            {
                objEO.Is_Approved_At_Prev_Application_RateFinal = true;
            }
            else if (rblFinalRawMaterialsQ4.Items[1].Selected)
            {
                objEO.Is_Approved_At_Prev_Application_RateFinal = false;
            }
            else
            {
                objEO.Is_Approved_At_Application_RateNullFinal = "NULL";
            }

            //@p_GCAS
            if (rbGCASNumber.Items[0].Selected)
            {
                objEO.GCASUMOF = "Y";
            }
            else if (rbGCASNumber.Items[1].Selected)
            {
                objEO.GCASUMOF = "N";
            }
            else
            {
                objEO.GCASUMOF = "";
            }
            // '@p_Approval_Group_ID
            if (!(drpAppGrpFinal.SelectedIndex == -1 | drpAppGrpFinal.SelectedIndex == 0))
            {
                objEO.AppGrp = Convert.ToInt32(drpAppGrpFinal.SelectedItem.Value);
            }
            else
            {
                objEO.AppGrp = 0;
            }

            string strFuncNameAppNamefinal = string.Empty;

            if (!string.IsNullOrEmpty(txtPSInitiative.Text))
            {
                if (string.IsNullOrEmpty(strFuncNameAppNamefinal))
                {
                    strFuncNameAppNamefinal = lblPSIntiativeFinalAppgrp.Text + ":" + txtPSInitiative.Text;
                }

                else
                {
                    strFuncNameAppNamefinal = strFuncNameAppNamefinal + "," + lblPSIntiativeFinalAppgrp.Text + ":" + txtPSInitiative.Text;
                }
            }

            if (!string.IsNullOrEmpty(txtProductsResearch.Text))
            {
                if (string.IsNullOrEmpty(strFuncNameAppNamefinal))
                {
                    strFuncNameAppNamefinal = lblFinalAppgrpprodResearch.Text + ":" + txtProductsResearch.Text;
                }
                else
                {
                    strFuncNameAppNamefinal = strFuncNameAppNamefinal + "," + lblFinalAppgrpprodResearch.Text + ":" + txtProductsResearch.Text;
                }
            }


            if (!string.IsNullOrEmpty(txtBudgetOwnerFinal.Text))
            {
                if (string.IsNullOrEmpty(strFuncNameAppNamefinal))
                {
                    strFuncNameAppNamefinal = lblFinalAppgrpBO.Text + ":" + txtBudgetOwnerFinal.Text;
                }
                else
                {
                    strFuncNameAppNamefinal = strFuncNameAppNamefinal + "," + lblFinalAppgrpBO.Text + ":" + txtBudgetOwnerFinal.Text;
                }
            }

            if (!string.IsNullOrEmpty(txtGBUHSEFinal.Text))
            {
                if (string.IsNullOrEmpty(strFuncNameAppNamefinal))
                {
                    strFuncNameAppNamefinal = lblFinalAppgrpGBUHSE.Text + ":" + txtGBUHSEFinal.Text;
                }
                else
                {
                    strFuncNameAppNamefinal = strFuncNameAppNamefinal + "," + lblFinalAppgrpGBUHSE.Text + ":" + txtGBUHSEFinal.Text;
                }
            }

            if (!string.IsNullOrEmpty(txtSiteHSEFinal.Text))
            {
                if (string.IsNullOrEmpty(strFuncNameAppNamefinal))
                {
                    strFuncNameAppNamefinal = lblFinalAppgrpSiteHSE.Text + ":" + txtSiteHSEFinal.Text;
                }
                else
                {
                    strFuncNameAppNamefinal = strFuncNameAppNamefinal + "," + lblFinalAppgrpSiteHSE.Text + ":" + txtSiteHSEFinal.Text;
                }
            }

            if (!string.IsNullOrEmpty(txtSAPCostCenter.Text))
            {
                if (string.IsNullOrEmpty(strFuncNameAppNamefinal))
                {
                    strFuncNameAppNamefinal = lblFinalAppgrpSAP.Text + ":" + txtSAPCostCenter.Text;
                }
                else
                {
                    strFuncNameAppNamefinal = strFuncNameAppNamefinal + "," + lblFinalAppgrpSAP.Text + ":" + txtSAPCostCenter.Text;
                }
            }

            //Added by David
            //Date: 07/16/2010

            if (!string.IsNullOrEmpty(txtSMARTClearanceFinal.Text))
            {
                if (string.IsNullOrEmpty(strFuncNameAppNamefinal))
                {
                    strFuncNameAppNamefinal = lblFinalAppgrpSMARTClearance.Text + ":" + txtSMARTClearanceFinal.Text;
                }
                else
                {
                    strFuncNameAppNamefinal = strFuncNameAppNamefinal + "," + lblFinalAppgrpSMARTClearance.Text + ":" + txtSMARTClearanceFinal.Text;
                }
            }

            if (!string.IsNullOrEmpty(txtSitePlanFinal.Text))
            {
                if (string.IsNullOrEmpty(strFuncNameAppNamefinal))
                {
                    strFuncNameAppNamefinal = lblFinalAppgrpSitePlan.Text + ":" + txtSitePlanFinal.Text;
                }
                else
                {
                    strFuncNameAppNamefinal = strFuncNameAppNamefinal + "," + lblFinalAppgrpSitePlan.Text + ":" + txtSitePlanFinal.Text;
                }
            }

            if (!string.IsNullOrEmpty(txtSiteContactFinal.Text))
            {
                if (string.IsNullOrEmpty(strFuncNameAppNamefinal))
                {
                    strFuncNameAppNamefinal = lblFinalAppgrpSiteContact.Text + ":" + txtSiteContactFinal.Text;
                }
                else
                {
                    strFuncNameAppNamefinal = strFuncNameAppNamefinal + "," + lblFinalAppgrpSiteContact.Text + ":" + txtSiteContactFinal.Text;
                }
            }

            if (!string.IsNullOrEmpty(txtSiteFinance.Text))
            {
                if (string.IsNullOrEmpty(strFuncNameAppNamefinal))
                {
                    strFuncNameAppNamefinal = lblFinalAppgrpSiteFinance.Text + ":" + txtSiteFinance.Text;
                }
                else
                {
                    strFuncNameAppNamefinal = strFuncNameAppNamefinal + "," + lblFinalAppgrpSiteFinance.Text + ":" + txtSiteFinance.Text;
                }
            }

            if (!string.IsNullOrEmpty(txtSiteLeaderShip.Text))
            {
                if (string.IsNullOrEmpty(strFuncNameAppNamefinal))
                {
                    strFuncNameAppNamefinal = lblFinalAppgrpSiteLeaderShip.Text + ":" + txtSiteLeaderShip.Text;
                }
                else
                {
                    strFuncNameAppNamefinal = strFuncNameAppNamefinal + "," + lblFinalAppgrpSiteLeaderShip.Text + ":" + txtSiteLeaderShip.Text;
                }
            }

            if (!string.IsNullOrEmpty(txtFinalTimingGate.Text))
            {
                if (string.IsNullOrEmpty(strFuncNameAppNamefinal))
                {
                    strFuncNameAppNamefinal = lblFinalAppgrpTimingGate.Text + ":" + txtFinalTimingGate.Text;
                }
                else
                {
                    strFuncNameAppNamefinal = strFuncNameAppNamefinal + "," + lblFinalAppgrpTimingGate.Text + ":" + txtFinalTimingGate.Text;
                }
            }

            if (!string.IsNullOrEmpty(txtFinalQA.Text))
            {
                if (string.IsNullOrEmpty(strFuncNameAppNamefinal))
                {
                    strFuncNameAppNamefinal = lblFinalAppgrpQA.Text + ":" + txtFinalQA.Text;
                }
                else
                {
                    strFuncNameAppNamefinal = strFuncNameAppNamefinal + "," + lblFinalAppgrpQA.Text + ":" + txtFinalQA.Text;
                }
            }
            //Added for Central QA 05/18/09
            if (!string.IsNullOrEmpty(txtFinalCentralQA.Text))
            {
                if (string.IsNullOrEmpty(strFuncNameAppNamefinal))
                {
                    strFuncNameAppNamefinal = lblFinalAppgrpCentralQA.Text + ":" + txtFinalCentralQA.Text;
                }
                else
                {
                    strFuncNameAppNamefinal = strFuncNameAppNamefinal + "," + lblFinalAppgrpCentralQA.Text + ":" + txtFinalCentralQA.Text;
                }
            }

            if (!string.IsNullOrEmpty(txtFinalStandardsOffice.Text))
            {
                if (string.IsNullOrEmpty(strFuncNameAppNamefinal))
                {
                    strFuncNameAppNamefinal = lblFinalAppgrpStandsOffice.Text + ":" + txtFinalStandardsOffice.Text;
                }
                else
                {
                    strFuncNameAppNamefinal = strFuncNameAppNamefinal + "," + lblFinalAppgrpStandsOffice.Text + ":" + txtFinalStandardsOffice.Text;
                }
            }



            //Added by David - MUREO PCR : 4 Additional Approvers - Date: 01/03/2012

            if (!string.IsNullOrEmpty(txtFinalAdditionalApprover1.Text))
            {
                if (string.IsNullOrEmpty(strFuncNameAppNamefinal))
                {
                    strFuncNameAppNamefinal = lblFinalAdditionalApprover1.Text + ":" + txtFinalAdditionalApprover1.Text;
                }
                else
                {
                    strFuncNameAppNamefinal = strFuncNameAppNamefinal + "," + lblFinalAdditionalApprover1.Text + ":" + txtFinalAdditionalApprover1.Text;
                }
            }

            if (!string.IsNullOrEmpty(txtFinalAdditionalApprover2.Text))
            {
                if (string.IsNullOrEmpty(strFuncNameAppNamefinal))
                {
                    strFuncNameAppNamefinal = lblFinalAdditionalApprover2.Text + ":" + txtFinalAdditionalApprover2.Text;
                }
                else
                {
                    strFuncNameAppNamefinal = strFuncNameAppNamefinal + "," + lblFinalAdditionalApprover2.Text + ":" + txtFinalAdditionalApprover2.Text;
                }
            }

            if (!string.IsNullOrEmpty(txtFinalAdditionalApprover3.Text))
            {
                if (string.IsNullOrEmpty(strFuncNameAppNamefinal))
                {
                    strFuncNameAppNamefinal = lblFinalAdditionalApprover3.Text + ":" + txtFinalAdditionalApprover3.Text;
                }
                else
                {
                    strFuncNameAppNamefinal = strFuncNameAppNamefinal + "," + lblFinalAdditionalApprover3.Text + ":" + txtFinalAdditionalApprover3.Text;
                }
            }

            if (!string.IsNullOrEmpty(txtFinalAdditionalApprover4.Text))
            {
                if (string.IsNullOrEmpty(strFuncNameAppNamefinal))
                {
                    strFuncNameAppNamefinal = lblFinalAdditionalApprover4.Text + ":" + txtFinalAdditionalApprover4.Text;
                }
                else
                {
                    strFuncNameAppNamefinal = strFuncNameAppNamefinal + "," + lblFinalAdditionalApprover4.Text + ":" + txtFinalAdditionalApprover4.Text;
                }
            }

            if (!string.IsNullOrEmpty(strFuncNameAppNamefinal))
            {
                objEO.FuncIDAppNameListFinal = strFuncNameAppNamefinal;
            }
            else
            {
                objEO.FuncIDAppNameListFinal = DBNull.Value.ToString();
            }
            //--------------- final tab over

            //-----------------Close out Tab

            //'@p_Lab_NoteBook_Num
            if (!string.IsNullOrEmpty(txtCloseLabNoteBook.Text.Trim()))
            {
                objEO.LabNoteBookCO = txtCloseLabNoteBook.Text.Trim();
            }
            else
            {
                objEO.LabNoteBookCO = DBNull.Value.ToString();
            }

            //@p_Completion_Date
            if (!string.IsNullOrEmpty(txtCloseCompletionDate.Text.Trim()))
            {
                objEO.CompletionDate = Convert.ToDateTime(txtCloseCompletionDate.Text.Trim());
            }
            else
            {
                objEO.CompletionDate = System.DateTime.MinValue;
            }

            //@p_AC_Attachment 
            if (!string.IsNullOrEmpty(txtACAttachment.Value))
            {
                objEO.AttFinalCostSheetCO = txtACAttachment.Value;
            }
            else
            {
                objEO.AttFinalCostSheetCO = DBNull.Value.ToString();
            }

            //@p_Total_CostSheet 
            if (!string.IsNullOrEmpty(txtTotalCostSheetAttach.Text.Trim()))
            {
                objEO.TotCostSheetCO = Convert.ToDecimal(txtTotalCostSheetAttach.Text);
            }
            else
            {
                objEO.TotCostSheetCO = Convert.ToDecimal(0.0);
                //DBNull.Value.ToString
            }
            //-- Initial Learning Report
            //@p_ILR_Attachment	

            objEO.ILRAttachment = DBNull.Value.ToString();

            //Test Plans Used tbl_EO_Test_Plans_Used 

            //@p_TP_Attachment	
            if (!string.IsNullOrEmpty(txtTPAttach.Value))
            {
                objEO.AttchTestPlanTepmpalteCO = txtTPAttach.Value;
            }
            else
            {
                objEO.AttchTestPlanTepmpalteCO = DBNull.Value.ToString();
            }


            //@p_Keyword1
            if (!string.IsNullOrEmpty(txtCloseKeyworkd1.Text.Trim()))
            {
                objEO.KeyWords1CO = txtCloseKeyworkd1.Text.Trim();
            }
            else
            {
                objEO.KeyWords1CO = DBNull.Value.ToString();
            }
            //@p_Keyword2			
            if (!string.IsNullOrEmpty(txtCloseKeyworkd2.Text.Trim()))
            {
                objEO.KeyWords2CO = txtCloseKeyworkd2.Text.Trim();
            }
            else
            {
                objEO.KeyWords2CO = DBNull.Value.ToString();
            }
            //@p_Keyword3			
            if (!string.IsNullOrEmpty(txtCloseKeyworkd3.Text.Trim()))
            {
                objEO.KeyWords3CO = txtCloseKeyworkd3.Text.Trim();
            }
            else
            {
                objEO.KeyWords3CO = DBNull.Value.ToString();
            }
            //@p_Keyword4			
            if (!string.IsNullOrEmpty(txtCloseKeyworkd4.Text.Trim()))
            {
                objEO.KeyWords4CO = txtCloseKeyworkd4.Text.Trim();
            }
            else
            {
                objEO.KeyWords4CO = DBNull.Value.ToString();
            }
            //@p_Keyword5			
            if (!string.IsNullOrEmpty(txtCloseKeyworkd5.Text.Trim()))
            {
                objEO.KeyWords5CO = txtCloseKeyworkd5.Text.Trim();
            }
            else
            {
                objEO.KeyWords5CO = DBNull.Value.ToString();
            }
            //@p_Keyword6			VARCHAR(50)=NULL,
            if (!string.IsNullOrEmpty(txtCloseKeyworkd6.Text.Trim()))
            {
                objEO.KeyWords6CO = txtCloseKeyworkd6.Text.Trim();
            }
            else
            {
                objEO.KeyWords6CO = DBNull.Value.ToString();
            }
            //@p_Comments_Approver
            if (!string.IsNullOrEmpty(txtCloseApproverComments.Text.Trim()))
            {
                objEO.CommentsApproverCO = txtCloseApproverComments.Text.Trim();
            }
            else
            {
                objEO.CommentsApproverCO = DBNull.Value.ToString();
            }
            //'@p_Approval_Group_ID
            if (!(drpCloseApprovalGroup.SelectedIndex == -1 | drpCloseApprovalGroup.SelectedIndex == 0))
            {
                objEO.AppGroupCloseOut = Convert.ToInt32(drpCloseApprovalGroup.SelectedItem.Value);
            }
            else
            {
                objEO.AppGroupCloseOut = 0;
            }

            string strFuncNameAppNameCO = null;
            if (!string.IsNullOrEmpty(txtCloseSiteFinance.Text))
            {
                if (string.IsNullOrEmpty(strFuncNameAppNameCO))
                {
                    strFuncNameAppNameCO = lblCOAppgrpSiteFinance.Text + ":" + txtCloseSiteFinance.Text;
                }
                else
                {
                    strFuncNameAppNameCO = strFuncNameAppNameCO + "," + lblCOAppgrpSiteFinance.Text + ":" + txtCloseSiteFinance.Text;
                }
            }

            if (!string.IsNullOrEmpty(txtCloseBudgetOwner.Text))
            {
                if (string.IsNullOrEmpty(strFuncNameAppNameCO))
                {
                    strFuncNameAppNameCO = lblCOAppgrpBO.Text + ":" + txtCloseBudgetOwner.Text;
                }
                else
                {
                    strFuncNameAppNameCO = strFuncNameAppNameCO + "," + lblCOAppgrpBO.Text + ":" + txtCloseBudgetOwner.Text;
                }
            }

            if (!string.IsNullOrEmpty(strFuncNameAppNameCO))
            {
                objEO.FuncIDAppNameListCloseOut = strFuncNameAppNameCO;
            }
            else
            {
                objEO.FuncIDAppNameListCloseOut = DBNull.Value.ToString();
            }
            int intresSetEOMandatory = 0;
            int intresSETEOPreliminary = 0;
            int intresSETEOFinal = 0;
            int intresSETEOCloseout = 0;
            if (Request.QueryString["From"] != null)
            {
                if ((Request.QueryString["From"].ToString() == "ForEOEdit") || (Request.QueryString["From"].ToString() == "MailEdit") || (Request.QueryString["From"].ToString() == "ForEOLock"))
                {
                    trProdRegulatedProductRAQ1.Visible = true;
                    trProdRegulatedProductRAQ2.Visible = true;
                    PSR1.Visible = false;
                    PSR2.Visible = false;
                    PSR3.Visible = false;
                    PSR4.Visible = false;
                    PSR5.Visible = false;
                    TRPSRAChanged.Visible = true;
                    TRPSRAChanged1.Visible = true;

                    if ((lblReadonlyPSR1.Text == "Yes" & lblReadonlyPSR2.Text == "No"))
                    {
                    }
                    else
                    {
                        TRPSRAChanged1.Visible = false;
                    }
                    Label49.Visible = false;
                    objEO.EOID = ViewState["EOID"].ToString();
                    if ((ViewState["EOIDFlag"] != null) && (ViewState["EOIDFlag"].ToString() == "1"))
                    {
                        if (hdnSmart.Value == "In Process")
                        {
                            objEO.Smart_Clearance_Number = "In Process";
                        }
                    }


                    if (objEOBA.SetEOMandatory(objEO, ref paramOut))
                    {
                        intresSetEOMandatory = Convert.ToInt32(paramOut[0].Value);
                    }
                    objEO.EOID = ViewState["EOID"].ToString();

                }
                else
                {
                    if ((ViewState["EOID"] != null))
                    {
                        objEO.EOID = ViewState["EOID"].ToString();
                        if (objEOBA.SetEOMandatory(objEO, ref paramOut))
                        {
                            intresSetEOMandatory = Convert.ToInt32(paramOut[0].Value);
                        }
                        objEO.EOID = ViewState["EOID"].ToString();
                    }
                    else
                    {
                        if (objEOBA.SetEOMandatory(objEO, ref paramOut))
                        {
                            intresSetEOMandatory = Convert.ToInt32(paramOut[0].Value);
                        }
                        ViewState["EOID"] = intresSetEOMandatory;
                        objEO.EOID = intresSetEOMandatory.ToString();
                        Session["EOID"] = ViewState["EOID"].ToString();
                    }

                }

            }
            else
            {
                if ((ViewState["EOID"] != null))
                {
                    objEO.EOID = ViewState["EOID"].ToString();
                    if (objEOBA.SetEOMandatory(objEO, ref paramOut))
                    {
                        intresSetEOMandatory = Convert.ToInt32(paramOut[0].Value);
                    }
                    objEO.EOID = ViewState["EOID"].ToString();
                }
                else
                {
                    if (objEOBA.SetEOMandatory(objEO, ref paramOut))
                    {
                        intresSetEOMandatory = Convert.ToInt32(paramOut[0].Value);
                    }
                    ViewState["EOID"] = intresSetEOMandatory;
                    objEO.EOID = intresSetEOMandatory.ToString();
                    Session["EOID"] = ViewState["EOID"].ToString();
                }

            }
            //'PrelimAttach Attachments

            string strbaseLocation = Server.MapPath("..") + "\\Common\\UpLoad\\Preliminary\\";
            //''11
            FilesUpload(strbaseLocation, lbAddItemsEO, hif, "PDI", "SET_EO_Preliminary_Attachment");
            hif.Clear();
            int intAddItemsEO = 0;
            string strAddItemsEO = string.Empty;
            for (intAddItemsEO = 0; intAddItemsEO <= lbAddItemsEO.Items.Count - 1; intAddItemsEO++)
            {
                if (string.IsNullOrEmpty(strAddItemsEO))
                {
                    strAddItemsEO = "UpLoad\\Preliminary\\" + objEO.EOID + "_" + strDateTime + "_" + lbAddItemsEO.Items[intAddItemsEO].Text;
                }
                else
                {
                    strAddItemsEO = strAddItemsEO + "|" + "UpLoad\\Preliminary\\" + objEO.EOID + "_" + strDateTime + "_" + lbAddItemsEO.Items[intAddItemsEO].Text;
                }
            }
            if (string.IsNullOrEmpty(strAddItemsEO))
            {
                objEO.AdditionalItems = DBNull.Value.ToString();
            }
            else
            {
                objEO.AdditionalItems = strAddItemsEO;
            }
            //FinalCost Attachments
            string strFinalCostPath = Server.MapPath("..") + "\\Common\\UpLoad\\Final\\CostSheet\\";
            //'22
            FilesUpload(strFinalCostPath, lbCostSheetAttach, arCostSheet, "Cost", "SET_EO_Final_Attachment");
            arCostSheet.Clear();
            int intCostSheetAttach = 0;
            string strFinalCostfilesPath = null;
            for (intCostSheetAttach = 0; intCostSheetAttach <= lbCostSheetAttach.Items.Count - 1; intCostSheetAttach++)
            {
                if (string.IsNullOrEmpty(strFinalCostfilesPath))
                {
                    strFinalCostfilesPath = "UpLoad\\Final\\CostSheet\\" + objEO.EOID + "_" + strDateTime + "_" + lbCostSheetAttach.Items[intCostSheetAttach].Text;
                }
                else
                {
                    strFinalCostfilesPath = strFinalCostfilesPath + "|" + "UpLoad\\Final\\CostSheet\\" + objEO.EOID + "_" + strDateTime + "_" + lbCostSheetAttach.Items[intCostSheetAttach].Text;
                }

            }
            if (string.IsNullOrEmpty(strFinalCostfilesPath))
            {
                objEO.AttaCostSheet = DBNull.Value.ToString();
            }
            else
            {
                objEO.AttaCostSheet = strFinalCostfilesPath;
            }


            //Final QA Attachments
            string strFinalQA = Server.MapPath("..") + "\\Common\\UpLoad\\Final\\QA\\";
            //'33
            FilesUpload(strFinalQA, lbFinalQAAttach, arQAFinal, "QA", "SET_EO_Final_Attachment");
            arQAFinal.Clear();
            int intQAAttach = 0;
            string strFinalAttachQA = null;
            for (intQAAttach = 0; intQAAttach <= lbFinalQAAttach.Items.Count - 1; intQAAttach++)
            {
                if (string.IsNullOrEmpty(strFinalCostfilesPath))
                {
                    strFinalAttachQA = "UpLoad\\Final\\QA\\" + objEO.EOID + "_" + strDateTime + "_" + lbFinalQAAttach.Items[intQAAttach].Text;
                }
                else
                {
                    strFinalAttachQA = strFinalAttachQA + "|" + "UpLoad\\Final\\QA\\" + objEO.EOID + "_" + strDateTime + "_" + lbFinalQAAttach.Items[intQAAttach].Text;
                }

            }
            if (string.IsNullOrEmpty(strFinalAttachQA))
            {
                objEO.FinalAttachQA = DBNull.Value.ToString();
            }
            else
            {
                objEO.FinalAttachQA = strFinalAttachQA;
            }

            //formula card info Attachments
            string strFinalFormulaCardPath = Server.MapPath("..") + "\\Common\\UpLoad\\Final\\FormulaCardInfo\\";
            //'44
            FilesUpload(strFinalFormulaCardPath, lbFormulaCardAttach, arFormulaCardInfo, "Formula", "SET_EO_Final_Attachment");
            arFormulaCardInfo.Clear();
            int intFormulaCardAttach = 0;
            string strFormulaCardfilesPath = null;
            for (intFormulaCardAttach = 0; intFormulaCardAttach <= lbFormulaCardAttach.Items.Count - 1; intFormulaCardAttach++)
            {
                if (string.IsNullOrEmpty(strFormulaCardfilesPath))
                {
                    strFormulaCardfilesPath = "UpLoad\\Final\\FormulaCardInfo\\" + objEO.EOID + "_" + strDateTime + "_" + lbFormulaCardAttach.Items[intFormulaCardAttach].Text;
                }
                else
                {
                    strFormulaCardfilesPath = strFinalCostfilesPath + "|" + "UpLoad\\Final\\FormulaCardInfo\\" + objEO.EOID + "_" + strDateTime + "_" + lbFormulaCardAttach.Items[intFormulaCardAttach].Text;
                }
            }
            if (string.IsNullOrEmpty(strFormulaCardfilesPath))
            {
                objEO.AttachFormulaCard = DBNull.Value.ToString();
            }
            else
            {
                objEO.AttachFormulaCard = strFormulaCardfilesPath;
            }
            //Final Test Plans Attachments
            string strFinalTestPlansPath = Server.MapPath("..") + "\\Common\\UpLoad\\Final\\TestPlans\\";
            //'55
            FilesUpload(strFinalTestPlansPath, lbTestPlansAttach, arTestPlans, "Test_Plans", "SET_EO_Final_Attachment");
            arTestPlans.Clear();
            int intTestPlansAttach = 0;
            string strTestPlansfilesPath = null;
            for (intTestPlansAttach = 0; intTestPlansAttach <= lbTestPlansAttach.Items.Count - 1; intTestPlansAttach++)
            {
                if (string.IsNullOrEmpty(strTestPlansfilesPath))
                {
                    strTestPlansfilesPath = "UpLoad\\Final\\TestPlans\\" + objEO.EOID + "_" + strDateTime + "_" + lbTestPlansAttach.Items[intTestPlansAttach].Text;
                }
                else
                {
                    strTestPlansfilesPath = strFinalCostfilesPath + "|" + "UpLoad\\Final\\TestPlans\\" + objEO.EOID + "_" + strDateTime + "_" + lbTestPlansAttach.Items[intTestPlansAttach].Text;
                }

            }
            if (string.IsNullOrEmpty(strTestPlansfilesPath))
            {
                objEO.TestPlantAttachments = DBNull.Value.ToString();
            }
            else
            {
                objEO.TestPlantAttachments = strTestPlansfilesPath;
            }

            //Final Lab Sampling Plans Attachments
            string strFinalLabSampPath = Server.MapPath("..") + "\\Common\\UpLoad\\Final\\LabSamples\\";
            //'66
            FilesUpload(strFinalLabSampPath, lbLabSampleAttach, arLabSamples, "Lab", "SET_EO_Final_Attachment");
            arLabSamples.Clear();
            int intLabSampleAttach = 0;
            string strLabSampfilesPath = null;
            for (intLabSampleAttach = 0; intLabSampleAttach <= lbLabSampleAttach.Items.Count - 1; intLabSampleAttach++)
            {
                if (string.IsNullOrEmpty(strLabSampfilesPath))
                {
                    strLabSampfilesPath = "UpLoad\\Final\\LabSamples\\" + objEO.EOID + "_" + strDateTime + "_" + lbLabSampleAttach.Items[intLabSampleAttach].Text;
                }
                else
                {
                    strLabSampfilesPath = strLabSampfilesPath + "|" + "UpLoad\\Final\\LabSamples\\" + objEO.EOID + "_" + strDateTime + "_" + lbLabSampleAttach.Items[intLabSampleAttach].Text;
                }
            }
            if (string.IsNullOrEmpty(strLabSampfilesPath))
            {
                objEO.AttchLabforTesting = DBNull.Value.ToString();
            }
            else
            {
                objEO.AttchLabforTesting = strLabSampfilesPath;
            }

            //Final TestFlow Matrix Attachments
            string strFinalTestFlowMatrixPath = Server.MapPath("..") + "\\Common\\UpLoad\\Final\\TestFlowMatrix\\";
            //77

            FilesUpload(strFinalTestFlowMatrixPath, lbFlowMatrixAttach, arProdTestFlowMatrix, "Matrix", "SET_EO_Final_Attachment");
            arProdTestFlowMatrix.Clear();
            int intFlowMatrixAttach = 0;
            string strTestFlowMatrixfilesPath = null;
            for (intFlowMatrixAttach = 0; intFlowMatrixAttach <= lbFlowMatrixAttach.Items.Count - 1; intFlowMatrixAttach++)
            {
                if (string.IsNullOrEmpty(strTestFlowMatrixfilesPath))
                {
                    strTestFlowMatrixfilesPath = "UpLoad\\Final\\TestFlowMatrix\\" + objEO.EOID + "_" + strDateTime + "_" + lbFlowMatrixAttach.Items[intFlowMatrixAttach].Text;
                }
                else
                {
                    strTestFlowMatrixfilesPath = strTestFlowMatrixfilesPath + "|" + "UpLoad\\Final\\TestFlowMatrix\\" + objEO.EOID + "_" + strDateTime + "_" + lbFlowMatrixAttach.Items[intFlowMatrixAttach].Text;
                }
            }
            if (string.IsNullOrEmpty(strTestFlowMatrixfilesPath))
            {
                objEO.ProdDetailTest = DBNull.Value.ToString();
            }
            else
            {
                objEO.ProdDetailTest = strTestFlowMatrixfilesPath;
            }
            //Final Other Supporting Doc Attachments
            string strFinalOtherSuppPath = Server.MapPath("..") + "\\Common\\UpLoad\\Final\\OtherSupp\\";
            //'88
            FilesUpload(strFinalOtherSuppPath, lbSupDocAttach, arOtherSupp, "Others", "SET_EO_Final_Attachment");
            arOtherSupp.Clear();
            int intSupDocAttach = 0;
            string strOtherSuppfilesPath = null;
            for (intSupDocAttach = 0; intSupDocAttach <= lbSupDocAttach.Items.Count - 1; intSupDocAttach++)
            {
                if (string.IsNullOrEmpty(strOtherSuppfilesPath))
                {
                    strOtherSuppfilesPath = "UpLoad\\Final\\OtherSupp\\" + objEO.EOID + "_" + strDateTime + "_" + lbSupDocAttach.Items[intSupDocAttach].Text;
                }
                else
                {
                    strOtherSuppfilesPath = strOtherSuppfilesPath + "|" + "UpLoad\\Final\\OtherSupp\\" + objEO.EOID + "_" + strDateTime + "_" + lbSupDocAttach.Items[intSupDocAttach].Text;
                }
            }
            if (string.IsNullOrEmpty(strOtherSuppfilesPath))
            {
                objEO.OtherSupAttach = DBNull.Value.ToString();
            }
            else
            {
                objEO.OtherSupAttach = strOtherSuppfilesPath;
            }
            //CloseOut Actual Cost Sheet Attachments
            string strCOActualCostPath = Server.MapPath("..") + "\\Common\\UpLoad\\CloseOut\\ActualCostSheet\\";
            //'99
            FilesUpload(strCOActualCostPath, lbFinalCostAttach, arActualCostSheet, "Actual", "SET_EO_CloseOut_Attachment");
            arActualCostSheet.Clear();
            int intFinalCostAttach = 0;
            string strCOActualCostfilesPath = null;
            for (intFinalCostAttach = 0; intFinalCostAttach <= lbFinalCostAttach.Items.Count - 1; intFinalCostAttach++)
            {
                if (string.IsNullOrEmpty(strCOActualCostfilesPath))
                {
                    strCOActualCostfilesPath = "UpLoad\\CloseOut\\ActualCostSheet\\" + objEO.EOID + "_" + strDateTime + "_" + lbFinalCostAttach.Items[intFinalCostAttach].Text;
                }
                else
                {
                    strCOActualCostfilesPath = strCOActualCostfilesPath + "|" + "UpLoad\\CloseOut\\ActualCostSheet\\" + objEO.EOID + "_" + strDateTime + "_" + lbFinalCostAttach.Items[intFinalCostAttach].Text;
                }
            }
            if (string.IsNullOrEmpty(strCOActualCostfilesPath))
            {
                objEO.AttFinalCostSheetCO = DBNull.Value.ToString();
            }
            else
            {
                objEO.AttFinalCostSheetCO = strCOActualCostfilesPath;
            }

            //CloseOut Intial Learning Report Attachments
            string strCOILR = Server.MapPath("..") + "\\Common\\UpLoad\\CloseOut\\IntialLearningReport\\";
            //1010
            FilesUpload(strCOILR, lbILR, arIntialLearningCloseOut, "Learning", "SET_EO_CloseOut_Attachment");
            arIntialLearningCloseOut.Clear();
            int intILR = 0;
            string strCOILRPath = null;
            for (intILR = 0; intILR <= lbILR.Items.Count - 1; intILR++)
            {
                if (string.IsNullOrEmpty(strCOILRPath))
                {
                    strCOILRPath = "UpLoad\\CloseOut\\IntialLearningReport\\" + objEO.EOID + "_" + strDateTime + "_" + lbILR.Items[intILR].Text;
                }
                else
                {
                    strCOILRPath = strCOILRPath + "|" + "UpLoad\\CloseOut\\IntialLearningReport\\" + objEO.EOID + "_" + strDateTime + "_" + lbILR.Items[intILR].Text;
                }
            }
            if (string.IsNullOrEmpty(strCOILRPath))
            {
                objEO.AttCOILR = DBNull.Value.ToString();
            }
            else
            {
                objEO.AttCOILR = strCOILRPath;
            }

            //CloseOut TestPlans Used Attachments
            string strCOTestPlansUsedPath = Server.MapPath("..") + "\\Common\\UpLoad\\CloseOut\\TestPlansUsed\\";
            //1111
            FilesUpload(strCOTestPlansUsedPath, lbTestPlanUsedAttach, arTestPlaneedused, "Plans_Used", "SET_EO_CloseOut_Attachment");
            arTestPlaneedused.Clear();
            int intTestPlanUsedAttach = 0;
            string strCOTestPlansUsedfilesPath = null;
            for (intTestPlanUsedAttach = 0; intTestPlanUsedAttach <= lbTestPlanUsedAttach.Items.Count - 1; intTestPlanUsedAttach++)
            {
                if (string.IsNullOrEmpty(strCOTestPlansUsedfilesPath))
                {
                    strCOTestPlansUsedfilesPath = "UpLoad\\CloseOut\\TestPlansUsed\\" + objEO.EOID + "_" + strDateTime + "_" + lbTestPlanUsedAttach.Items[intTestPlanUsedAttach].Text;
                }
                else
                {
                    strCOTestPlansUsedfilesPath = strCOTestPlansUsedfilesPath + "|" + "UpLoad\\CloseOut\\TestPlansUsed\\" + objEO.EOID + "_" + strDateTime + "_" + lbTestPlanUsedAttach.Items[intTestPlanUsedAttach].Text;
                }
            }

            if (string.IsNullOrEmpty(strCOTestPlansUsedfilesPath))
            {
                objEO.AttchTestPlanTepmpalteCO = DBNull.Value.ToString();
            }
            else
            {
                objEO.AttchTestPlanTepmpalteCO = strCOTestPlansUsedfilesPath;
            }

            //CloseOut  Report Attachments
            string strCOReport = Server.MapPath("..") + "\\Common\\UpLoad\\CloseOut\\CloseOutReport\\";
            FilesUpload(strCOReport, lbCOReport, arCloseOutReportCloseOut, "Report", "SET_EO_CloseOut_Attachment");
            arCloseOutReportCloseOut.Clear();
            int intCOReport = 0;
            string strCOPathReport = null;
            for (intCOReport = 0; intCOReport <= lbCOReport.Items.Count - 1; intCOReport++)
            {
                if (string.IsNullOrEmpty(strCOPathReport))
                {
                    strCOPathReport = "UpLoad\\CloseOut\\CloseOutReport\\" + objEO.EOID + "_" + strDateTime + "_" + lbCOReport.Items[intCOReport].Text;
                }
                else
                {
                    strCOPathReport = strCOPathReport + "|" + "UpLoad\\CloseOut\\CloseOutReport\\" + objEO.EOID + "_" + strDateTime + "_" + lbCOReport.Items[intCOReport].Text;
                }
            }
            if (string.IsNullOrEmpty(strCOPathReport))
            {
                objEO.AttCOReport = DBNull.Value.ToString();
            }
            else
            {
                objEO.AttCOReport = strCOPathReport;
            }

            objEO.UserName = objSecurity.UserName;
            //Calling SET_EO_Preliminary,SET_EO_Final,SET_EO_Closeout to insert values of 3 tabs
            if (objEOBA.SET_EO_Preliminary(objEO, ref paramOut))
            {
                if (paramOut[0].Value != DBNull.Value)
                    intresSETEOPreliminary = Convert.ToInt32(paramOut[0].Value);
                else
                    intresSETEOPreliminary = -1;
            }

            if (strCurrentStage.ToUpper() == "Preliminary".ToUpper())
            {
                objEO.NewRawPackageFinal = objEO.NewRawPackage;

                objEO.ParentRollsFinal = objEO.EOProduce;

                objEO.InterMaterialFinal = objEO.EOProduceInterMaterial;

                objEO.CurrentBrandFinal = objEO.EOShippedTrade;

                objEO.ConsLabEvalFinal = objEO.TestProdSample;

                objEO.GCASFinal = objEO.GCASUMOF;

                objEO.ProdSelectIs_Understood_Policy_37Final = objEO.ProdSelectIs_Understood_Policy_37;
                objEO.ProdSelectIs_Exception_Policy_37Final = objEO.ProdSelectIs_Exception_Policy_37;
                objEO.ProdSelectIs_EO_Covered_Policy_37Final = objEO.ProdSelectIs_EO_Covered_Policy_37;

                objEO.Is_Product_Go_To_CustomersFinal = objEO.Is_Product_Go_To_Customers;
                objEO.Is_Product_Go_To_CustomersNullFinal = objEO.Is_Product_Go_To_CustomersNull;

                objEO.Is_Using_Approved_FC_R_ATSFinal = objEO.Is_Using_Approved_FC_R_ATS;
                objEO.Is_Using_Approved_FC_R_ATSNullFinal = objEO.Is_Using_Approved_FC_R_ATSNull;

                objEO.Is_Approved_At_LevelFinal = objEO.Is_Approved_At_Level;
                objEO.Is_Approved_At_LevelNullFinal = objEO.Is_Approved_At_LevelNull;

                objEO.Is_Approved_For_RegionFinal = objEO.Is_Approved_For_Region;
                objEO.Is_Approved_At_RegionNullFinal = objEO.Is_Approved_At_RegionNull;

                objEO.Is_Approved_For_ApplicationFinal = objEO.Is_Approved_For_Application;
                objEO.Is_Approved_At_ApplicationNullFinal = objEO.Is_Approved_At_ApplicationNull;

                objEO.Is_Approved_At_Prev_Application_RateFinal = objEO.Is_Approved_At_Prev_Application_Rate;
                objEO.Is_Approved_At_Application_RateNullFinal = objEO.Is_Approved_At_Application_RateNull;



            }
            else
            {
                //@p_Raw_Pack_Mat	
                if (rbRawMaterialFinal.Items[0].Selected)
                {
                    objEO.NewRawPackageFinal = "Y";
                }
                else if (rbRawMaterialFinal.Items[1].Selected)
                {
                    objEO.NewRawPackageFinal = "N";
                }
                else
                {
                    objEO.NewRawPackageFinal = "";
                }

                //@p_Parent_Rolls		
                if (rbParentRollsFinal.Items[0].Selected)
                {
                    objEO.ParentRollsFinal = "Y";
                }
                else if (rbParentRollsFinal.Items[1].Selected)
                {
                    objEO.ParentRollsFinal = "N";
                }
                else
                {
                    objEO.ParentRollsFinal = "";
                }

                //@p_Intermediate_Mat	
                if (rbInterMaterialsFinal.Items[0].Selected)
                {
                    objEO.InterMaterialFinal = "Y";
                }
                else if (rbInterMaterialsFinal.Items[1].Selected)
                {
                    objEO.InterMaterialFinal = "N";
                }
                else
                {
                    objEO.InterMaterialFinal = "";
                }

                //@p_Current_Brand
                if (rbShippedFinal.Items[0].Selected)
                {
                    objEO.CurrentBrandFinal = "Y";
                }
                else if (rbShippedFinal.Items[1].Selected)
                {
                    objEO.CurrentBrandFinal = "N";
                }
                else
                {
                    objEO.CurrentBrandFinal = "";
                }



                //@p_Cons_Lab_Eval
                if (rbTestProductedShippedFinal.Items[0].Selected)
                {
                    objEO.ConsLabEvalFinal = "Y";
                }
                else if (rbTestProductedShippedFinal.Items[1].Selected)
                {
                    objEO.ConsLabEvalFinal = "N";
                }
                else
                {
                    objEO.ConsLabEvalFinal = "";
                }

                //@p_GCAS
                if (rbGCASNumberFinal.Items[0].Selected)
                {
                    objEO.GCASFinal = "Y";
                }
                else if (rbGCASNumberFinal.Items[1].Selected)
                {
                    objEO.GCASFinal = "N";
                }
                else
                {
                    objEO.GCASFinal = "";
                }

                //@p_Is_Understood_Policy_37
                if (chkFinalMaterialsBrands.Items[0].Selected)
                {
                    objEO.ProdSelectIs_Understood_Policy_37Final = true;
                    objEO.ProdSelectIs_Exception_Policy_37Final = false;
                    objEO.ProdSelectIs_EO_Covered_Policy_37Final = false;
                    //@p_Is_Exception_Policy_37
                }
                else if (chkFinalMaterialsBrands.Items[1].Selected)
                {
                    objEO.ProdSelectIs_Exception_Policy_37Final = true;
                    objEO.ProdSelectIs_Understood_Policy_37Final = false;
                    objEO.ProdSelectIs_EO_Covered_Policy_37Final = false;
                    //@p_Is_EO_Covered_Policy_37
                }
                else if (chkFinalMaterialsBrands.Items[2].Selected)
                {
                    objEO.ProdSelectIs_EO_Covered_Policy_37Final = true;
                    objEO.ProdSelectIs_Understood_Policy_37Final = false;
                    objEO.ProdSelectIs_Exception_Policy_37Final = false;

                }
                else
                {
                    objEO.ProdSelectIs_EO_Covered_Policy_37Final = false;
                    objEO.ProdSelectIs_Understood_Policy_37Final = false;
                    objEO.ProdSelectIs_Exception_Policy_37Final = false;

                }


                //@p_Is_Product_Go_To_Customers
                if (rblFinalProductConsumerOption.Items[0].Selected)
                {
                    objEO.Is_Product_Go_To_CustomersFinal = true;
                }
                else if (rblFinalProductConsumerOption.Items[1].Selected)
                {
                    objEO.Is_Product_Go_To_CustomersFinal = false;
                }
                else
                {
                    objEO.Is_Product_Go_To_CustomersNullFinal = "NULL";
                }


                //@p_Is_Using_Approved_FC_R_ATS
                if (rblFinalProductApprovedOption.Items[0].Selected)
                {
                    objEO.Is_Using_Approved_FC_R_ATSFinal = true;
                }
                else if (rblFinalProductApprovedOption.Items[1].Selected)
                {
                    objEO.Is_Using_Approved_FC_R_ATSFinal = false;
                }
                else
                {
                    objEO.Is_Using_Approved_FC_R_ATSNullFinal = "NULL";
                }


                //@p_Is_Approved_At_Level
                if (rblFinalRawMaterialsQ1.Items[0].Selected)
                {
                    objEO.Is_Approved_At_LevelFinal = true;
                }
                else if (rblFinalRawMaterialsQ1.Items[1].Selected)
                {
                    objEO.Is_Approved_At_LevelFinal = false;
                }
                else
                {
                    objEO.Is_Approved_At_LevelNullFinal = "NULL";
                }

                //@p_Is_Approved_For_Region
                if (rblFinalRawMaterialsQ2.Items[0].Selected)
                {
                    objEO.Is_Approved_For_RegionFinal = true;

                }
                else if (rblFinalRawMaterialsQ2.Items[1].Selected)
                {
                    objEO.Is_Approved_For_RegionFinal = false;
                }
                else
                {
                    objEO.Is_Approved_At_RegionNullFinal = "NULL";
                }

                //@p_Is_Approved_For_Application
                if (rblFinalRawMaterialsQ3.Items[0].Selected)
                {
                    objEO.Is_Approved_For_ApplicationFinal = true;
                }
                else if (rblFinalRawMaterialsQ3.Items[1].Selected)
                {
                    objEO.Is_Approved_For_ApplicationFinal = false;
                }
                else
                {
                    objEO.Is_Approved_At_ApplicationNullFinal = "NULL";
                }

                //@p_Is_Approved_At_Prev_Application_Rate
                if (rblFinalRawMaterialsQ4.Items[0].Selected)
                {
                    objEO.Is_Approved_At_Prev_Application_RateFinal = true;
                }
                else if (rblFinalRawMaterialsQ4.Items[1].Selected)
                {
                    objEO.Is_Approved_At_Prev_Application_RateFinal = false;
                }
                else
                {
                    objEO.Is_Approved_At_Application_RateNullFinal = "NULL";
                }

            }
            objEO.UserName = objSecurity.UserName;
            if (objEOBA.SET_EO_Final(objEO, ref paramOut))
            {
                if (paramOut[0].Value != DBNull.Value)
                    intresSETEOFinal = Convert.ToInt32(paramOut[0].Value);
                else
                    intresSETEOFinal = -1;
            }
            if (objEOBA.SET_EO_Closeout(objEO, ref paramOut))
            {
                if (paramOut[0].Value != DBNull.Value)
                    intresSETEOCloseout = Convert.ToInt32(paramOut[0].Value);
                else
                    intresSETEOCloseout = -1;
            }

            if (intresSETEOPreliminary == 0 || intresSETEOFinal == 0 || intresSETEOCloseout == 0)
            {
                if (strStageStatus.ToUpper() == "Routed".ToUpper())
                {
                    if (strCurrentStage.ToUpper() == "Preliminary".ToUpper())
                    {
                        if (!string.IsNullOrEmpty(txtBudgetOwner.Text))
                        {
                            try
                            {
                                mandataroinfoforEmail();
                                string strURLLockMode = null;
                                strURLLockMode = "http://" + ViewState["servername"] + "/Common/NewEO.aspx?From=ForEOLock&EOID=" + ViewState["EOID"];
                                string strURLEditMode = null;
                                strURLEditMode = "http://" + ViewState["servername"] + "/Common/NewEO.aspx?From=MailEdit&EOID=" + ViewState["EOID"];
                                if ((ViewState["EOIDFlag"] != null) && (ViewState["EOIDFlag"].ToString() == "1"))
                                {
                                    SendMail(txtBudgetOwner.Text.Trim(), "Please Review by " + ViewState["nextTwoDate"] + ". EO Number - " + ViewState["EONum"] + " - " + ViewState["EOTitle"], "Dear Budget Approver," + "<br>" + "<br>" + "You are listed as an approver for this EO.  Please follow the link to see this EO." + "<br>" + "<br>" + "NOTE:  Use this link to open the EO in 'Read Only' Mode." + "<br><a href='" + strURLLockMode + "'>" + strURLLockMode + "</a><br>" + "<br>" + "NOTE:  Use this link to open the EO in 'Edit' Mode." + "<br><a href='" + strURLEditMode + "'>" + strURLEditMode + "</a><br>" + "<br>" + "EO Number is :" + ViewState["EONum"] + "<br>" + "SAP IO Number :" + ViewState["SAPIONum"] + "<br>" + "Smart Clearance Number :" + ViewState["SmartClearanceNum"] + "<br>" + "EO Title is  :" + ViewState["EOTitle"] + "<br>" + "<br>" + "EO Location :" + ViewState["PlantName"] + "<br>" + "Budget Center :" + ViewState["BudgetCenter"] + "<br>" + "Expected Cost : $" + ViewState["TotCost"] + "<br>" + "Current Stage  :" + ViewState["stage"] + "<br><font color=red><b>" + "Proposed Testing Start Date :" + ViewState["PlannedStartDate"] + "</b></font><br>" + "<br>" + "Thank you," + "<br>" + objSecurity.UserName + ".");
                                }
                                else
                                {
                                    SendMail(txtBudgetOwner.Text.Trim(), "Please Review by " + ViewState["nextTwoDate"] + ". EO Number - " + ViewState["EONum"] + " - " + ViewState["EOTitle"], "Dear Budget Approver," + "<br>" + "<br>" + "You are listed as an approver for this EO.  Please follow the link to see this EO." + "<br>" + "<br>" + "NOTE:  Use this link to open the EO in 'Read Only' Mode." + "<br><a href='" + strURLLockMode + "'>" + strURLLockMode + "</a><br>" + "<br>" + "NOTE:  Use this link to open the EO in 'Edit' Mode." + "<br><a href='" + strURLEditMode + "'>" + strURLEditMode + "</a><br>" + "<br>" + "EO Number is :" + ViewState["EONum"] + "<br>" + "SAP IO Number :" + ViewState["SAPIONum"] + "<br>" + "EO Title is  :" + ViewState["EOTitle"] + "<br>" + "<br>" + "EO Location :" + ViewState["PlantName"] + "<br>" + "Budget Center :" + ViewState["BudgetCenter"] + "<br>" + "Expected Cost : $" + ViewState["TotCost"] + "<br>" + "Current Stage  :" + ViewState["stage"] + "<br><font color=red><b>" + "Proposed Testing Start Date :" + ViewState["PlannedStartDate"] + "</b></font><br>" + "<br>" + "Thank you," + "<br>" + objSecurity.UserName + ".");
                                }
                            }
                            catch (Exception ex)
                            {
                            }
                        }
                        else if (strCurrentStage.ToUpper() == "Final".ToUpper())
                        {
                            if (!string.IsNullOrEmpty(txtBudgetOwnerFinal.Text))
                            {
                                try
                                {
                                    mandataroinfoforEmail();
                                    string strURLLockMode = null;
                                    strURLLockMode = "http://" + ViewState["servername"] + "/Common/NewEO.aspx?From=ForEOLock&EOID=" + ViewState["EOID"];
                                    string strURLEditMode = null;
                                    strURLEditMode = "http://" + ViewState["servername"] + "/Common/NewEO.aspx?From=MailEdit&EOID=" + ViewState["EOID"];
                                    if ((ViewState["EOIDFlag"] != null) && (ViewState["EOIDFlag"].ToString() == "1"))
                                    {
                                        SendMail(txtBudgetOwnerFinal.Text.Trim(), "Please Review by " + ViewState["nextTwoDate"] + ". EO Number - " + ViewState["EONum"] + " - " + ViewState["EOTitle"], "Dear Budget Approver," + "<br>" + "<br>" + "You are listed as an approver for this EO.  Please follow the link to see this EO." + "<br>" + "<br>" + "NOTE:  Use this link to open the EO in 'Read Only' Mode." + "<br><a href='" + strURLLockMode + "'>" + strURLLockMode + "</a><br>" + "<br>" + "NOTE:  Use this link to open the EO in 'Edit' Mode." + "<br><a href='" + strURLEditMode + "'>" + strURLEditMode + "</a><br>" + "<br>" + "EO Number is :" + ViewState["EONum"] + "<br>" + "SAP IO Number :" + ViewState["SAPIONum"] + "<br>" + "Smart Clearance Number :" + ViewState["SmartClearanceNum"] + "<br>" + "EO Title is  :" + ViewState["EOTitle"] + "<br>" + "<br>" + "EO Location :" + ViewState["PlantName"] + "<br>" + "Budget Center :" + ViewState["BudgetCenter"] + "<br>" + "Expected Cost : $" + ViewState["TotCost"] + "<br>" + "Current Stage  :" + ViewState["stage"] + "<br><font color=red><b>" + "Proposed Testing Start Date :" + ViewState["PlannedStartDate"] + "</b></font><br>" + "<br>" + "Thank you," + "<br>" + objSecurity.UserName + ".");
                                    }
                                    else
                                    {
                                        SendMail(txtBudgetOwnerFinal.Text.Trim(), "Please Review by " + ViewState["nextTwoDate"] + ". EO Number - " + ViewState["EONum"] + " - " + ViewState["EOTitle"], "Dear Budget Approver," + "<br>" + "<br>" + "You are listed as an approver for this EO.  Please follow the link to see this EO." + "<br>" + "<br>" + "NOTE:  Use this link to open the EO in 'Read Only' Mode." + "<br><a href='" + strURLLockMode + "'>" + strURLLockMode + "</a><br>" + "<br>" + "NOTE:  Use this link to open the EO in 'Edit' Mode." + "<br><a href='" + strURLEditMode + "'>" + strURLEditMode + "</a><br>" + "<br>" + "EO Number is :" + ViewState["EONum"] + "<br>" + "SAP IO Number :" + ViewState["SAPIONum"] + "<br>" + "EO Title is  :" + ViewState["EOTitle"] + "<br>" + "<br>" + "EO Location :" + ViewState["PlantName"] + "<br>" + "Budget Center :" + ViewState["BudgetCenter"] + "<br>" + "Expected Cost : $" + ViewState["TotCost"] + "<br>" + "Current Stage  :" + ViewState["stage"] + "<br><font color=red><b>" + "Proposed Testing Start Date :" + ViewState["PlannedStartDate"] + "</b></font><br>" + "<br>" + "Thank you," + "<br>" + objSecurity.UserName + ".");
                                    }
                                }
                                catch (Exception ex)
                                {
                                }
                            }

                        }
                        else if (strCurrentStage.ToUpper() == "CloseOut".ToUpper())
                        {
                            if (!string.IsNullOrEmpty(txtCloseBudgetOwner.Text))
                            {
                                try
                                {
                                    mandataroinfoforEmail();
                                    string strURLLockMode = null;
                                    strURLLockMode = "http://" + ViewState["servername"] + "/Common/NewEO.aspx?From=ForEOLock&EOID=" + ViewState["EOID"];
                                    string strURLEditMode = null;
                                    strURLEditMode = "http://" + ViewState["servername"] + "/Common/NewEO.aspx?From=MailEdit&EOID=" + ViewState["EOID"];
                                    if ((ViewState["EOIDFlag"] != null) && (ViewState["EOIDFlag"].ToString() == "1"))
                                    {
                                        SendMail(txtCloseBudgetOwner.Text.Trim(), "Please Review by " + ViewState["nextTwoDate"] + ". EO Number - " + ViewState["EONum"] + " - " + ViewState["EOTitle"], "Dear Budget Approver," + "<br>" + "<br>" + "You are listed as an approver for this EO.  Please follow the link to see this EO." + "<br>" + "<br>" + "NOTE:  Use this link to open the EO in 'Read Only' Mode." + "<br><a href='" + strURLLockMode + "'>" + strURLLockMode + "</a><br>" + "<br>" + "NOTE:  Use this link to open the EO in 'Edit' Mode." + "<br><a href='" + strURLEditMode + "'>" + strURLEditMode + "</a><br>" + "<br>" + "EO Number is :" + ViewState["EONum"] + "<br>" + "SAP IO Number :" + ViewState["SAPIONum"] + "<br>" + "Smart Clearance Number :" + ViewState["SmartClearanceNum"] + "<br>" + "EO Title is  :" + ViewState["EOTitle"] + "<br>" + "<br>" + "EO Location :" + ViewState["PlantName"] + "<br>" + "Budget Center :" + ViewState["BudgetCenter"] + "<br>" + "Expected Cost : $" + ViewState["TotCost"] + "<br>" + "Current Stage  :" + ViewState["stage"] + "<br><font color=red><b>" + "Proposed Testing Start Date :" + ViewState["PlannedStartDate"] + "</b></font><br>" + "<br>" + "Thank you," + "<br>" + objSecurity.UserName + ".");
                                    }
                                    else
                                    {
                                        SendMail(txtCloseBudgetOwner.Text.Trim(), "Please Review by " + ViewState["nextTwoDate"] + ". EO Number - " + ViewState["EONum"] + " - " + ViewState["EOTitle"], "Dear Budget Approver," + "<br>" + "<br>" + "You are listed as an approver for this EO.  Please follow the link to see this EO." + "<br>" + "<br>" + "NOTE:  Use this link to open the EO in 'Read Only' Mode." + "<br><a href='" + strURLLockMode + "'>" + strURLLockMode + "</a><br>" + "<br>" + "NOTE:  Use this link to open the EO in 'Edit' Mode." + "<br><a href='" + strURLEditMode + "'>" + strURLEditMode + "</a><br>" + "<br>" + "EO Number is :" + ViewState["EONum"] + "<br>" + "SAP IO Number :" + ViewState["SAPIONum"] + "<br>" + "EO Title is  :" + ViewState["EOTitle"] + "<br>" + "<br>" + "EO Location :" + ViewState["PlantName"] + "<br>" + "Budget Center :" + ViewState["BudgetCenter"] + "<br>" + "Expected Cost : $" + ViewState["TotCost"] + "<br>" + "Current Stage  :" + ViewState["stage"] + "<br><font color=red><b>" + "Proposed Testing Start Date :" + ViewState["PlannedStartDate"] + "</b></font><br>" + "<br>" + "Thank you," + "<br>" + objSecurity.UserName + ".");
                                    }
                                }
                                catch (Exception ex)
                                {
                                }
                            }

                        }



                    }
                }
                if (strCurrentStage.ToUpper() == "Preliminary".ToUpper() && strStageStatus.ToUpper() == "Routed".ToUpper())
                {
                    if (!(ViewState["EOID"] == null))
                    {
                        if (objEOBA.SET_EO_Lock_Release_User(Convert.ToInt32(ViewState["EOID"]), objSecurity.UserName))
                        { }
                    }
                    //string script1 = null;
                    //script1 = "<script>alert('Preliminary Route Completed Successfully');window.navigate('../Reports/MYEOs.aspx');</script> ";
                    //Page.RegisterStartupScript("clientscript", script1);

                    ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "alert('Preliminary Route Completed Successfully.');window.location='../Reports/MYEOs.aspx';", true);
                }
                else if (strCurrentStage.ToUpper() == "Final".ToUpper() && strStageStatus.ToUpper() == "Routed".ToUpper())
                {
                    if (!(ViewState["EOID"] == null))
                    {
                        if (objEOBA.SET_EO_Lock_Release_User(Convert.ToInt32(ViewState["EOID"]), objSecurity.UserName))
                        { }
                    }
                    //string script1 = null;
                    //script1 = "<script>alert('Final Route Completed Successfully');window.navigate('../Reports/MYEOs.aspx');</script> ";
                    //Page.RegisterStartupScript("clientscript", script1);

                    ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "alert('Final Route Completed Successfully.');window.location='../Reports/MYEOs.aspx';", true);
                }
                else if (strCurrentStage.ToUpper() == "CloseOut".ToUpper() && strStageStatus.ToUpper() == "Routed".ToUpper())
                {
                    if (!(ViewState["EOID"] == null))
                    {
                        if (objEOBA.SET_EO_Lock_Release_User(Convert.ToInt32(ViewState["EOID"]), objSecurity.UserName))
                        { }
                    }
                    //string script1 = null;
                    //script1 = "<script>alert('CloseOut Route Completed Successfully');window.navigate('../Reports/MYEOs.aspx');</script> ";
                    //Page.RegisterStartupScript("clientscript", script1);
                    ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "alert('CloseOut Route Completed Successfully.');window.location='../Reports/MYEOs.aspx';", true);
                }
                else if (strresumeExit.ToUpper() == "Resume".ToUpper())
                {
                    txtCloseApproverComments.Text = "";
                    //string script1 = null;
                    //script1 = "<script>alert('Record updated successfully');</script> ";
                    //Page.RegisterStartupScript("clientscript", script1);

                    ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "alert('Record updated successfully.');", true);

                    //Get_EO_Mandatory_Edit()
                    DataSet ds = null;
                    if (objEOBA.GET_EO_Preliminary(Convert.ToInt32(ViewState["EOID"]), ref ds))
                    {
                        if ((ds != null))
                        {
                            if (!(ds.Tables.Count == 0))
                            {
                                if (!(ds.Tables[3].Rows.Count == 0))
                                {
                                    try
                                    {
                                        dgdGCASInfo.Visible = true;
                                        dgdGCASInfo.DataSource = ds.Tables[3];
                                        dgdGCASInfo.DataBind();
                                        //dgdGCASInfo.Columns(8).Visible = False
                                        dtGCAS = ds.Tables[3];

                                    }
                                    catch (Exception ex)
                                    {
                                    }
                                }
                                // 'PSRA Datagrid RaedOnly
                                if (!(ds.Tables[5].Rows.Count == 0))
                                {
                                    dgdPSRAInfo.DataSource = ds.Tables[5];
                                    dgdPSRAInfo.DataBind();
                                    dtPSRA = ds.Tables[5];
                                }
                                try
                                {
                                    if (!(ds.Tables[19].Rows.Count == 0))
                                    {
                                        lbAddItemsEO.DataSource = ds.Tables[19].DefaultView;
                                        lbAddItemsEO.DataTextField = "PDI_Attachment_File_Name";
                                        lbAddItemsEO.DataValueField = "PDI_Attach_ID";
                                        lbAddItemsEO.DataBind();
                                    }

                                }
                                catch (Exception ex)
                                {
                                }

                                try
                                {
                                    dgrdAttachment.DataSource = null;
                                    dgrdAttachment.DataBind();

                                }
                                catch (Exception ex)
                                {
                                }
                                if (!(ds.Tables[19].Rows.Count == 0))
                                {
                                    dgrdAttachment.DataSource = ds.Tables[19].DefaultView;
                                    dgrdAttachment.DataBind();
                                }



                            }

                            if (objEOBA.GET_EO_Final(Convert.ToInt32(ViewState["EOID"]), ref ds))
                            {
                                if ((ds != null))
                                {
                                    if (!(ds.Tables.Count == 0))
                                    {
                                        try
                                        {
                                            if (!(ds.Tables[21].Rows.Count == 0))
                                            {
                                                lbCostSheetAttach.DataSource = ds.Tables[21].DefaultView;
                                                lbCostSheetAttach.DataTextField = "Cost_Sheet_Attachment_File_Name";
                                                lbCostSheetAttach.DataValueField = "Cost_Sheet_Attach_ID";
                                                lbCostSheetAttach.DataBind();
                                            }

                                        }
                                        catch (Exception ex)
                                        {
                                        }


                                        try
                                        {
                                            dgrdCostSheetFinal.DataSource = null;
                                            dgrdCostSheetFinal.DataBind();

                                        }
                                        catch (Exception ex)
                                        {
                                        }

                                        if (!(ds.Tables[21].Rows.Count == 0))
                                        {
                                            dgrdCostSheetFinal.DataSource = ds.Tables[21].DefaultView;
                                            dgrdCostSheetFinal.DataBind();
                                        }
                                        //lbFormulaCardAttach.Items.Clear()

                                        try
                                        {
                                            if (!(ds.Tables[23].Rows.Count == 0))
                                            {
                                                lbFormulaCardAttach.DataSource = ds.Tables[23].DefaultView;
                                                lbFormulaCardAttach.DataTextField = "Formula_Cards_Attachment_File_Name";
                                                lbFormulaCardAttach.DataValueField = "Formula_Cards_Attach_ID";
                                                lbFormulaCardAttach.DataBind();
                                            }


                                        }
                                        catch (Exception ex)
                                        {
                                        }


                                        try
                                        {
                                            dgrdFormulaCard.DataSource = null;
                                            dgrdFormulaCard.DataBind();

                                        }
                                        catch (Exception ex)
                                        {
                                        }

                                        if (!(ds.Tables[23].Rows.Count == 0))
                                        {
                                            dgrdFormulaCard.DataSource = ds.Tables[23].DefaultView;
                                            dgrdFormulaCard.DataBind();
                                        }

                                        try
                                        {
                                            if (!(ds.Tables[24].Rows.Count == 0))
                                            {
                                                lbTestPlansAttach.DataSource = ds.Tables[24].DefaultView;
                                                lbTestPlansAttach.DataTextField = "Test_Plans_Attachment_File_Name";
                                                lbTestPlansAttach.DataValueField = "Test_Plans_Attach_ID";
                                                lbTestPlansAttach.DataBind();
                                            }
                                        }
                                        catch (Exception ex)
                                        {
                                        }
                                        try
                                        {
                                            dgrdTestPlansFinal.DataSource = null;
                                            dgrdTestPlansFinal.DataBind();
                                        }
                                        catch (Exception ex)
                                        {
                                        }

                                        if (!(ds.Tables[24].Rows.Count == 0))
                                        {
                                            dgrdTestPlansFinal.DataSource = ds.Tables[24].DefaultView;
                                            dgrdTestPlansFinal.DataBind();
                                        }

                                        try
                                        {
                                            if (!(ds.Tables[25].Rows.Count == 0))
                                            {
                                                lbLabSampleAttach.DataSource = ds.Tables[25].DefaultView;
                                                lbLabSampleAttach.DataTextField = "Lab_Sampling_Attachment_File_Name";
                                                lbLabSampleAttach.DataValueField = "Lab_Sampling_Attach_ID";
                                                lbLabSampleAttach.DataBind();
                                            }

                                        }
                                        catch (Exception ex)
                                        {
                                        }
                                        try
                                        {
                                            dgrdLabSamp.DataSource = null;
                                            dgrdLabSamp.DataBind();

                                        }
                                        catch (Exception ex)
                                        {
                                        }
                                        if (!(ds.Tables[25].Rows.Count == 0))
                                        {
                                            dgrdLabSamp.DataSource = ds.Tables[25].DefaultView;
                                            dgrdLabSamp.DataBind();
                                        }


                                        try
                                        {
                                            if (!(ds.Tables[26].Rows.Count == 0))
                                            {
                                                lbFlowMatrixAttach.DataSource = ds.Tables[26].DefaultView;
                                                lbFlowMatrixAttach.DataTextField = "Matrix_Attachment_File_Name";
                                                lbFlowMatrixAttach.DataValueField = "Matrix_Attach_ID";
                                                lbFlowMatrixAttach.DataBind();

                                            }


                                        }
                                        catch (Exception ex)
                                        {
                                        }

                                        //'Product or Detailed Test Flow Matrix
                                        try
                                        {
                                            dgrdTestMatrix.DataSource = null;
                                            dgrdTestMatrix.DataBind();

                                        }
                                        catch (Exception ex)
                                        {
                                        }
                                        if (!(ds.Tables[26].Rows.Count == 0))
                                        {
                                            dgrdTestMatrix.DataSource = ds.Tables[26].DefaultView;
                                            dgrdTestMatrix.DataBind();
                                        }

                                        //'Other Supporting Documentation
                                        try
                                        {
                                            if (!(ds.Tables[27].Rows.Count == 0))
                                            {
                                                lbSupDocAttach.DataSource = ds.Tables[27].DefaultView;
                                                lbSupDocAttach.DataTextField = "Other_Docs_Attachment_File_Name";
                                                lbSupDocAttach.DataValueField = "Others_Attach_ID";
                                                lbSupDocAttach.DataBind();
                                            }
                                        }
                                        catch (Exception ex)
                                        {
                                        }

                                        try
                                        {
                                            dgrdOtherDocFinal.DataSource = null;
                                            dgrdOtherDocFinal.DataBind();

                                        }
                                        catch (Exception ex)
                                        {
                                        }

                                        if (!(ds.Tables[27].Rows.Count == 0))
                                        {
                                            dgrdOtherDocFinal.DataSource = ds.Tables[27].DefaultView;
                                            dgrdOtherDocFinal.DataBind();
                                        }

                                        try
                                        {
                                            if (!(ds.Tables[22].Rows.Count == 0))
                                            {
                                                lbFinalQAAttach.DataSource = ds.Tables[22].DefaultView;
                                                lbFinalQAAttach.DataTextField = "QA_Info_Attachment_File_Name";
                                                lbFinalQAAttach.DataValueField = "QA_Info_Attach_ID";
                                                lbFinalQAAttach.DataBind();
                                            }

                                        }
                                        catch (Exception ex)
                                        {
                                        }

                                        try
                                        {
                                            dgrdQAFinalTabAttachment.DataSource = null;
                                            dgrdQAFinalTabAttachment.DataBind();

                                        }
                                        catch (Exception ex)
                                        {
                                        }
                                        if (!(ds.Tables[22].Rows.Count == 0))
                                        {
                                            dgrdQAFinalTabAttachment.DataSource = ds.Tables[22].DefaultView;
                                            dgrdQAFinalTabAttachment.DataBind();
                                        }
                                    }
                                }
                            }

                        }
                    }
                    for (int intchkMaterialsBrands = 0; intchkMaterialsBrands <= chkMaterialsBrands.Items.Count - 1; intchkMaterialsBrands++)
                    {
                        if (chkMaterialsBrands.Items[intchkMaterialsBrands].Selected == true)
                        {
                            // Page.RegisterStartupScript("js", "<script>HandleOnCheck();</script>");
                            ScriptManager.RegisterStartupScript(Page, Page.GetType(), Guid.NewGuid().ToString(), "HandleOnCheck();", true);
                            break; // TODO: might not be correct. Was : Exit For

                        }
                        else
                        {
                        }
                    }

                    if (objEOBA.GET_EO_Closeout(Convert.ToInt32(ViewState["EOID"]), ref ds))
                    {
                        if ((ds != null))
                        {
                            if (!(ds.Tables.Count == 0))
                            {//'Actual Cost Sheet
                                try
                                {
                                    if (!(ds.Tables[11].Rows.Count == 0))
                                    {
                                        lbFinalCostAttach.DataSource = ds.Tables[11].DefaultView;
                                        lbFinalCostAttach.DataTextField = "Actual_Cost_Sheet_Attachment_File_Name";
                                        lbFinalCostAttach.DataValueField = "Actual_Cost_Sheet_Attach_ID";
                                        lbFinalCostAttach.DataBind();
                                    }
                                }
                                catch (Exception ex)
                                {
                                }

                                try
                                {
                                    dgrdActualCostCloseOut.DataSource = null;
                                    dgrdActualCostCloseOut.DataBind();

                                }
                                catch (Exception ex)
                                {
                                }

                                if (!(ds.Tables[11].Rows.Count == 0))
                                {
                                    dgrdActualCostCloseOut.DataSource = ds.Tables[11].DefaultView;
                                    dgrdActualCostCloseOut.DataBind();
                                }


                                //Test Plans Used
                                try
                                {
                                    if (!(ds.Tables[13].Rows.Count == 0))
                                    {
                                        lbTestPlanUsedAttach.DataSource = ds.Tables[13].DefaultView;
                                        lbTestPlanUsedAttach.DataTextField = "Plans_Used_Attachment_File_Name";
                                        lbTestPlanUsedAttach.DataValueField = "Plans_Used_Attach_ID";
                                        lbTestPlanUsedAttach.DataBind();
                                    }


                                }
                                catch (Exception ex)
                                {
                                }
                                try
                                {
                                    dgrdTestPlansCloseOut.DataSource = null;
                                    dgrdTestPlansCloseOut.DataBind();

                                }
                                catch (Exception ex)
                                {
                                }
                                if (!(ds.Tables[13].Rows.Count == 0))
                                {
                                    dgrdTestPlansCloseOut.DataSource = ds.Tables[13].DefaultView;
                                    dgrdTestPlansCloseOut.DataBind();
                                }

                                //ILR

                                try
                                {
                                    if (!(ds.Tables[12].Rows.Count == 0))
                                    {
                                        lbILR.DataSource = ds.Tables[12].DefaultView;
                                        lbILR.DataTextField = "Initial_Learning_Attachment_File_Name";
                                        lbILR.DataValueField = "Initial_Learning_Attach_ID";
                                        lbILR.DataBind();
                                    }

                                }
                                catch (Exception ex)
                                {
                                }
                                try
                                {
                                    dgrdILR.DataSource = null;
                                    dgrdILR.DataBind();
                                }
                                catch (Exception ex)
                                {
                                }

                                if (!(ds.Tables[12].Rows.Count == 0))
                                {
                                    dgrdILR.DataSource = ds.Tables[12].DefaultView;
                                    dgrdILR.DataBind();
                                }

                                //Closeout Report Attachment
                                try
                                {
                                    if (!(ds.Tables[14].Rows.Count == 0))
                                    {
                                        lbCOReport.DataSource = ds.Tables[14].DefaultView;
                                        lbCOReport.DataTextField = "Closeout_Report_Attachment_File_Name";
                                        lbCOReport.DataValueField = "Closeout_Report_Attach_ID";
                                        lbCOReport.DataBind();
                                    }

                                }
                                catch (Exception ex)
                                {
                                }

                                try
                                {
                                    dgrdCOReport.DataSource = null;
                                    dgrdCOReport.DataBind();

                                }
                                catch (Exception ex)
                                {
                                }
                                if (!(ds.Tables[14].Rows.Count == 0))
                                {
                                    dgrdCOReport.DataSource = ds.Tables[14].DefaultView;
                                    dgrdCOReport.DataBind();
                                }

                            }
                        }
                    }

                }

                else if (strresumeExit.ToUpper() == "Exit".ToUpper())
                {
                    lbAddItemsEO.Items.Clear();
                    lbCostSheetAttach.Items.Clear();
                    lbFormulaCardAttach.Items.Clear();
                    lbTestPlansAttach.Items.Clear();
                    lbLabSampleAttach.Items.Clear();
                    lbFlowMatrixAttach.Items.Clear();
                    lbSupDocAttach.Items.Clear();
                    lbFinalCostAttach.Items.Clear();
                    lbTestPlanUsedAttach.Items.Clear();
                    lbFinalQAAttach.Items.Clear();
                    lbILR.Items.Clear();
                    lbCOReport.Items.Clear();
                    //Session["DTPSRA"] = Nothing
                    //Session["DT"] = Nothing
                    if (!(ViewState["EOID"] == null))
                    {
                        if (objEOBA.SET_EO_Lock_Release_User(Convert.ToInt32(ViewState["EOID"]), objSecurity.UserName))
                        { }
                    }
                    if ((ViewState["Prelim"] == null) && (ViewState["Fin"] == null))
                    {
                        ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "alert('Record updated successfully');window.location='Home.aspx';", true);
                    }
                    else if (ViewState["Prelim"] == "Yes")
                    {
                        ViewState["Prelim"] = null;
                    }
                    else if (ViewState["Fin"] == "Yes")
                    {
                        ViewState["Fin"] = null;
                    }

                }

            }
            else if (intresSETEOPreliminary == 5 || intresSETEOFinal == 5 || intresSETEOCloseout == 5)
            {
                ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "alert('Document is already in edit mode. Please try again in a few minutes..');window.navigate('Home.aspx');", true);
            }
            else
            {
                int intResult = 0;
                if (objEOBA.SET_EO_Delete_Upon_Error(Convert.ToInt32(objEO.EOID), Convert.ToChar(rbEOType.SelectedItem.Value), ref paramOut))
                { intResult = Convert.ToInt32(paramOut[0].Value); }
                ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "alert('Record Creation Failed');", true);
            }
            //all tab save over

        }

        protected void imgSaveResume_Click(object sender, ImageClickEventArgs e)
        {
            DataSet dsCGName = new DataSet();
            string strName = string.Empty;
            int rowCoun;
            string strCurrentStage = "Preliminary";
            string strStageStatus = "Draft";
            if ((ViewState["LockMode"] != null) && (ViewState["LockMode"].ToString() == "PRELIMINARY"))
            {
                string strresumeExit = "Resume";
                FinalCloseOutTabSave(ViewState["stage"].ToString(), ViewState["Status"].ToString(), strresumeExit);
            }
            else if ((ViewState["LockMode"] != null) && (ViewState["LockMode"].ToString() == "FINAL"))
            {
                string strresumeExit = "Resume";
                CloseOutTabSave(ViewState["stage"].ToString(), ViewState["Status"].ToString(), strresumeExit);
            }
            else if (ViewState["LockMode"] == null)
            {
                string strresumeExit = "Resume";
                AllTabSave(strCurrentStage, strStageStatus, strresumeExit);
            }
            else
            {
                string strresumeExit = "Resume";
                AllTabSave(strCurrentStage, strStageStatus, strresumeExit);
            }
        }



        protected void btnSave_Click(object sender, ImageClickEventArgs e)
        {
            DataSet dsCGName = null;
            string strName = null;
            int rowCoun = 0;
            string strCurrentStage = "Preliminary";
            string strStageStatus = "Draft";
            if (((ViewState["LockMode"] != null)) && (ViewState["LockMode"].ToString().ToUpper() == "PRELIMINARY"))
            {
                string strresumeExit = "Exit";
                FinalCloseOutTabSave(ViewState["stage"].ToString(), ViewState["Status"].ToString(), strresumeExit);
            }
            else if (((ViewState["LockMode"] != null)) && (ViewState["LockMode"].ToString().ToUpper() == "FINAL"))
            {
                string strresumeExit = "Exit";
                CloseOutTabSave(ViewState["stage"].ToString(), ViewState["Status"].ToString(), strresumeExit);
            }
            else if (ViewState["LockMode"] == null)
            {
                string strresumeExit = "Exit";
                AllTabSave(strCurrentStage, strStageStatus, strresumeExit);
            }
            else
            {
                string strresumeExit = "Exit";
                AllTabSave(strCurrentStage, strStageStatus, strresumeExit);
            }
        }


        private void btnSaveandExit_Click(System.Object sender, System.Web.UI.ImageClickEventArgs e)
        {
            if (!(ViewState["EOID"] == null))
            {

                if (objEOBA.SET_EO_Lock_Release_User(Convert.ToInt32(ViewState["EOID"]), objSecurity.UserName))
                { }
            }
            Response.Redirect("Home.aspx");
        }

        public void CarryApprovalDetaisfinalco()
        {
            DataSet ds = null;

            try
            {
                if (objEOBA.GET_EO_Preliminary(Convert.ToInt32(ViewState["EOID"]), ref ds))
                {
                    if (!(ds.Tables[12].Rows.Count == 0))
                    {
                        int intRowCount = 0;
                        for (intRowCount = 0; intRowCount <= ds.Tables[12].Rows.Count - 1; intRowCount++)
                        {
                            if (ds.Tables[12].Rows[intRowCount]["Function_Name"].ToString() == "Budget Center")
                            {
                                //If Not ds.Tables[12).Rows[intRowCount].Item("Approver_Name") Is System.DBNull.Value Or Not ds.Tables[12).Rows(intRowCount).Item("Approver_Name") = "" Then
                                if ((!object.ReferenceEquals(ds.Tables[12].Rows[intRowCount]["Approver_Name"], System.DBNull.Value)))
                                {
                                    if (string.IsNullOrEmpty(txtCloseBudgetOwner.Text))
                                    {
                                        txtCloseBudgetOwner.Text = ds.Tables[12].Rows[intRowCount]["Approver_Name"].ToString();
                                    }
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
            }
        }

        private void Carry()
        {
            DataSet ds = null;

            if (objEOBA.GET_EO_Final(Convert.ToInt32(ViewState["EOID"]), ref ds))
            {
                if ((ds != null))
                {
                    if (!(ds.Tables.Count == 0))
                    {
                        if (!(ds.Tables[19].Rows.Count == 0))
                        {
                            int intRowCount = 0;
                            for (intRowCount = 0; intRowCount <= ds.Tables[19].Rows.Count - 1; intRowCount++)
                            {
                                if ((!object.ReferenceEquals(ds.Tables[19].Rows[intRowCount][0], System.DBNull.Value)))
                                {
                                    if (!string.IsNullOrEmpty(ds.Tables[19].Rows[intRowCount][0].ToString()))
                                    {
                                        string s1 = ds.Tables[19].Rows[intRowCount][0].ToString();
                                        string[] s = null;
                                        s = s1.Split(',');
                                        if (!(s.Length == 0))
                                        {
                                            int i = 0;
                                            for (i = 0; i <= s.Length - 1; i++)
                                            {
                                                lbFinalPackage.Items[lbFinalPackage.Items.IndexOf(lbFinalPackage.Items.FindByValue(s[i]))].Selected = true;
                                            }
                                        }
                                        else
                                        {
                                            lbFinalPackage.SelectedIndex = 0;
                                        }
                                    }
                                }
                            }
                        }
                        if (!(ds.Tables[5].Rows.Count == 0))
                        {
                            if ((!object.ReferenceEquals(ds.Tables[5].Rows[0]["Formula_Card_Info"], System.DBNull.Value)))
                            {
                                txtFinal.Text = ds.Tables[5].Rows[0]["Formula_Card_Info"].ToString();
                            }
                            else
                            {
                                txtFinal.Text = string.Empty;
                            }
                        }
                        if (!(ds.Tables[14].Rows.Count == 0))
                        {
                            int intRowCount = 0;
                            for (intRowCount = 0; intRowCount <= ds.Tables[14].Rows.Count - 1; intRowCount++)
                            {
                                if ((!object.ReferenceEquals(ds.Tables[14].Rows[intRowCount]["Prod_Pack_Name"], System.DBNull.Value)))
                                {
                                    if (!string.IsNullOrEmpty(ds.Tables[14].Rows[intRowCount]["Prod_Pack_Name"].ToString()))
                                    {
                                        try
                                        {
                                            lbFinalPackagingInfoDB.Items[lbFinalPackagingInfoDB.Items.IndexOf(lbFinalPackagingInfoDB.Items.FindByText(ds.Tables[14].Rows[intRowCount]["Prod_Pack_Name"].ToString()))].Selected = true;
                                        }
                                        catch (Exception ex)
                                        {
                                        }
                                    }
                                }
                            }
                        }

                        if (!(ds.Tables[1].Rows.Count == 0))
                        {
                            if ((!object.ReferenceEquals(ds.Tables[1].Rows[0]["Current_Packaging"], System.DBNull.Value)))
                            {
                                if (ds.Tables[1].Rows[0]["Current_Packaging"].ToString() == "Y")
                                {
                                    chkCurPack.Checked = true;
                                }
                                else
                                {
                                    chkCurPack.Checked = false;
                                }
                            }
                            if ((!object.ReferenceEquals(ds.Tables[1].Rows[0]["Experimental_Packaging"], System.DBNull.Value)))
                            {
                                if (ds.Tables[1].Rows[0]["Experimental_Packaging"].ToString() == "Y")
                                {
                                    chkExpPack.Checked = true;
                                }
                                else
                                {
                                    chkExpPack.Checked = false;
                                }
                            }
                            if ((!object.ReferenceEquals(ds.Tables[1].Rows[0]["Exp_Pack_Clear_Poly"], System.DBNull.Value)))
                            {
                                if (ds.Tables[1].Rows[0]["Exp_Pack_Clear_Poly"].ToString() == "Y")
                                {
                                    chkCurrentPoly.Checked = true;
                                }
                                else
                                {
                                    chkCurrentPoly.Checked = false;
                                }
                            }
                            if ((!object.ReferenceEquals(ds.Tables[1].Rows[0]["Exp_Pack_Blank_KDF"], System.DBNull.Value)))
                            {
                                if (ds.Tables[1].Rows[0]["Exp_Pack_Blank_KDF"].ToString() == "Y")
                                {
                                    chkBlankKGF.Checked = true;
                                }
                                else
                                {
                                    chkBlankKGF.Checked = false;
                                }
                            }
                            try
                            {
                                if ((!object.ReferenceEquals(ds.Tables[1].Rows[0]["Prod_Disp_ID"], System.DBNull.Value)))
                                {
                                    if ((!object.ReferenceEquals(ds.Tables[1].Rows[0]["Prod_Disp_ID"], System.DBNull.Value)))
                                    {
                                        if (!(Convert.ToInt32(ds.Tables[1].Rows[0]["Prod_Disp_ID"]) == 0))
                                        {
                                            drpFinalProductDispositionDB.SelectedIndex = -1;
                                            drpFinalProductDispositionDB.Items[drpFinalProductDispositionDB.Items.IndexOf(drpFinalProductDispositionDB.Items.FindByValue(ds.Tables[1].Rows[0]["Prod_Disp_ID"].ToString()))].Selected = true;
                                        }
                                        else
                                        {
                                        }
                                    }
                                    else
                                    {
                                    }
                                }
                            }
                            catch (Exception ex)
                            {
                            }
                            if ((!object.ReferenceEquals(ds.Tables[1].Rows[0]["Prod_Disp_Add_Comments"], System.DBNull.Value)))
                            {
                                txtProductDisposition.Text = ds.Tables[1].Rows[0]["Prod_Disp_Add_Comments"].ToString();
                            }
                            else
                            {
                                txtProductDisposition.Text = string.Empty;
                            }
                            if ((!object.ReferenceEquals(ds.Tables[1].Rows[0]["Pallet_Patter_SKU"], System.DBNull.Value)))
                            {
                                if (ds.Tables[1].Rows[0]["Pallet_Patter_SKU"].ToString() == "Y")
                                {
                                    rbUniqPallet.Items[0].Selected = true;
                                    rbUniqPallet.Items[1].Selected = false;
                                }
                                else if (ds.Tables[1].Rows[0]["Pallet_Patter_SKU"].ToString() == "N")
                                {
                                    rbUniqPallet.Items[0].Selected = false;
                                    rbUniqPallet.Items[1].Selected = true;
                                }
                                else
                                {
                                    rbUniqPallet.Items[0].Selected = false;
                                    rbUniqPallet.Items[1].Selected = false;
                                }
                            }
                            try
                            {
                                drpFinalMaterialDispositionDBFinal.SelectedIndex = -1;
                                if ((!object.ReferenceEquals(ds.Tables[1].Rows[0]["Material_Disposition_ID"], System.DBNull.Value)))
                                {
                                    if ((!object.ReferenceEquals(ds.Tables[1].Rows[0]["Material_Disposition_ID"], System.DBNull.Value)))
                                    {
                                        if (!(Convert.ToInt32(ds.Tables[1].Rows[0]["Material_Disposition_ID"]) == 0))
                                        {
                                            drpFinalMaterialDispositionDBFinal.Items[drpFinalMaterialDispositionDBFinal.Items.IndexOf(drpFinalMaterialDispositionDBFinal.Items.FindByValue(ds.Tables[1].Rows[0]["Material_Disposition_ID"].ToString()))].Selected = true;
                                        }
                                        else
                                        {
                                        }
                                    }
                                    else
                                    {
                                    }
                                }
                                if ((!object.ReferenceEquals(ds.Tables[1].Rows[0]["Stack_Testing"], System.DBNull.Value)))
                                {
                                    if (ds.Tables[1].Rows[0]["Stack_Testing"].ToString() == "Y")
                                    {
                                        chkFinalStackShip.Items[0].Selected = true;
                                    }
                                    else if (ds.Tables[1].Rows[0]["Stack_Testing"].ToString() == "N")
                                    {
                                        chkFinalStackShip.Items[0].Selected = false;
                                    }
                                    else
                                    {
                                        chkFinalStackShip.Items[0].Selected = false;
                                    }
                                }
                                else
                                {
                                    chkFinalStackShip.Items[0].Selected = false;
                                }

                                if ((!object.ReferenceEquals(ds.Tables[1].Rows[0]["Ship_Testing"], System.DBNull.Value)))
                                {
                                    if (ds.Tables[1].Rows[0]["Ship_Testing"].ToString() == "Y")
                                    {
                                        chkFinalStackShip.Items[1].Selected = true;
                                    }
                                    else if (ds.Tables[1].Rows[0]["Ship_Testing"].ToString() == "N")
                                    {
                                        chkFinalStackShip.Items[1].Selected = false;
                                    }
                                    else
                                    {
                                        chkFinalStackShip.Items[1].Selected = false;
                                    }
                                }
                                else
                                {
                                    chkFinalStackShip.Items[1].Selected = false;
                                }
                            }
                            catch (Exception ex)
                            {
                            }


                            if ((!object.ReferenceEquals(ds.Tables[1].Rows[0]["Mat_Disp_Add_Comments"], System.DBNull.Value)))
                            {
                                txtMaterialDisposition.Text = ds.Tables[1].Rows[0]["Mat_Disp_Add_Comments"].ToString();
                            }
                            else
                            {
                                txtMaterialDisposition.Text = string.Empty;
                            }
                            try
                            {
                                if ((!object.ReferenceEquals(ds.Tables[1].Rows[0]["Broke_Disp_Normal"], System.DBNull.Value)))
                                {
                                    if (ds.Tables[1].Rows[0]["Broke_Disp_Normal"].ToString() == "Y")
                                    {
                                        rbBrokeDisposition.Items[0].Selected = true;
                                        rbBrokeDisposition.Items[1].Selected = false;
                                    }
                                    else if (ds.Tables[1].Rows[0]["Broke_Disp_Normal"].ToString() == "N")
                                    {
                                        rbBrokeDisposition.Items[0].Selected = false;
                                        rbBrokeDisposition.Items[1].Selected = true;
                                    }
                                    else
                                    {
                                        rbBrokeDisposition.Items[0].Selected = false;
                                        rbBrokeDisposition.Items[1].Selected = false;
                                    }
                                }
                            }
                            catch (Exception ex)
                            {
                            }
                            try
                            {
                                if ((!object.ReferenceEquals(ds.Tables[1].Rows[0]["Printer_Broke"], System.DBNull.Value)))
                                {
                                    if (ds.Tables[1].Rows[0]["Printer_Broke"].ToString() == "Y")
                                    {
                                        rbPrintBrokeFinal.Items[0].Selected = true;
                                        rbPrintBrokeFinal.Items[1].Selected = false;
                                    }
                                    else if (ds.Tables[1].Rows[0]["Printer_Broke"].ToString() == "N")
                                    {
                                        rbPrintBrokeFinal.Items[0].Selected = false;
                                        rbPrintBrokeFinal.Items[1].Selected = true;
                                    }
                                    else
                                    {
                                        rbPrintBrokeFinal.Items[0].Selected = false;
                                        rbPrintBrokeFinal.Items[1].Selected = false;
                                    }
                                }

                            }
                            catch (Exception ex)
                            {
                            }
                            try
                            {
                                if ((!object.ReferenceEquals(ds.Tables[1].Rows[0]["Ink_Coverage"], System.DBNull.Value)))
                                {
                                    if (ds.Tables[1].Rows[0]["Ink_Coverage"].ToString() == "Y")
                                    {
                                        rbPrintedBrokeInk.Items[0].Selected = true;
                                        rbPrintedBrokeInk.Items[1].Selected = false;
                                    }
                                    else if (ds.Tables[1].Rows[0]["Ink_Coverage"].ToString() == "N")
                                    {
                                        rbPrintedBrokeInk.Items[0].Selected = false;
                                        rbPrintedBrokeInk.Items[1].Selected = true;
                                    }
                                    else
                                    {
                                        rbPrintedBrokeInk.Items[0].Selected = false;
                                        rbPrintedBrokeInk.Items[1].Selected = false;
                                    }
                                }
                            }
                            catch (Exception ex)
                            {
                            }
                        }
                    }
                }
            }
        }



        private void btnPrintStage_Click(System.Object sender, System.Web.UI.ImageClickEventArgs e)
        {

        }



        private void imgEditEo_Click(System.Object sender, System.Web.UI.ImageClickEventArgs e)
        {
            Response.Redirect("NewEO.aspx?From=ForEOEdit&EOID=" + Request.QueryString["EOID"]);
        }




        


        private void lnkFinalCentralQABackUp_Click(System.Object sender, System.EventArgs e)
        {
            int intResult;
            intResult = GET_EO_Lock_Status_Approve();
            if (intResult == 5)
            {
                return;
            }

            string script = null;
            string strFuncName = lblFinalAppgrpCentralQA.Text.Trim();
            string strPlantID = drpPlant.SelectedItem.Value;
            if (strPlantID == "--Select a Plant--")
            {
                strPlantID = "0";
            }
            //script = "<script>window.open('ChangeApprover.aspx?FuncName=" + strFuncName + "&OriginalApprover=" + lblFinalAppgrpCentralQA.Text.Trim() + "&EOID=" + ViewState["EOID"] + "&PlantID=" + strPlantID + "&From=BackUp','Approvers','height=200,width=400');</script>";
            //Page.RegisterStartupScript("clientscript", script);

            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "window.open('ChangeApprover.aspx?FuncName=" + strFuncName + "&OriginalApprover=" + lblFinalAppgrpCentralQA.Text.Trim() + "&EOID=" + ViewState["EOID"] + "&PlantID=" + strPlantID + "&From=BackUp','Approvers','height=200,width=400');", true);
        }

        private void rblProductApproved_SelectedIndexChanged(System.Object sender, System.EventArgs e)
        {
            if (rblProductApproved.SelectedItem.Text == "No")
            {
                divPSRAAddedRawMaterials.Style.Add("display", "block");
                if (hdnSmart.Value == "In Process")
                {
                    lblSmartClearanceDB.Text = " ";
                    lblSmartClearance.Text = " ";
                }
            }
            if (rblProductConsumers.SelectedItem.Text == "No" && rblProductApproved.SelectedItem.Text == "No")
            {
                divPSRAAddedRawMaterials.Style.Add("display", "none");
            }
            if (rblProductConsumers.SelectedItem.Text == "Yes" && rblProductApproved.SelectedItem.Text == "Yes")
            {
                divPSRAAddedRawMaterials.Style.Add("display", "none");
            }
        }




        private void lnkFormulaCardTemplate_Click(System.Object sender, System.EventArgs e)
        {
            try
            {
                string strPath = Server.MapPath("..\\Common\\Templates\\FC Exception Template r030722.xls");
                Response.AddHeader("Content-Disposition", "attachment;filename=FC Exception Template r030722.xls");
                Response.TransmitFile(strPath);
                Response.End();
            }
            catch (Exception ex)
            {
            }
        }



        private void lnkTestPlanTemplate_Click(System.Object sender, System.EventArgs e)
        {
            try
            {
                string strPath = Server.MapPath("..\\Common\\Templates\\EO Test Plan template 030703.doc");
                Response.AddHeader("Content-Disposition", "attachment;filename=EO Test Plan template 030703.doc");
                Response.TransmitFile(strPath);
                Response.End();
            }
            catch (Exception ex)
            {
            }
        }

        public void trr()
        {

            if (TextBox1.Text == "1")
            {

            }
            else if (TextBox1.Text == "2")
            {
            }

        }


        #region "David"


        /// <summary>
        /// imgPreRoute_Click
        /// Preliminary Routing Process called
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected void imgPreRoute_Click(object sender, ImageClickEventArgs e)
        {


        }

        /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public int GET_EO_Lock_Status_Approve()
        {
            try
            {
                if (objEOBA.GET_EO_Lock_Status_Approve(Request.QueryString["EOID"].ToString(), objSecurity.UserName, ref paramOut))
                {
                    if (Convert.ToInt32(paramOut[0].Value) == 5)
                    {
                        string script11 = string.Empty;
                        script11 = ("<script>'Document is already in edit mode. Please try again in a few minutes.');window.navigate('Home.aspx');</script>");
                        ClientScript.RegisterStartupScript(GetType(), "clientscript", script11);

                    }

                }

                return Convert.ToInt32(paramOut[0].Value);

            }
            catch (Exception)
            {

                return -1;
            }

        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected void imgPreFinalRoute_Click(object sender, ImageClickEventArgs e)
        {


        }

        #endregion

        protected void btnTabFinal_Click(object sender, ImageClickEventArgs e)
        {
            carryselectedBudgetCenter();
            t11.Text = "";
            ViewState["printstage"] = "Final";

            PreliminaryRevision.Visible = true;
            txtEstimatedAmount.Text = lbTotalCost.Text;
            txtFinal.Text = txtFormulaCardNumber.Text;
            lnkbeforeFinTabRouApp.Visible = false;

            if ((ViewState["stage"] != null))
            {
                if (!(ViewState["stage"].ToString().ToUpper() == "Preliminary".ToUpper() && ViewState["Status"].ToString().ToUpper() == "Draft".ToUpper()))
                {
                    if (Request.QueryString["From"] != null && Request.QueryString["From"].ToString() != "ForEOLock")
                    {
                        lnkPreScreener.Visible = true;
                        dgrPrescrenners.Visible = true;
                    }
                }
            }
            else
            {
                lnkPreScreener.Visible = false;
                dgrPrescrenners.Visible = false;
            }

            if ((Request.QueryString["From"] == "ForEOLock"))
            {
                btnTabFinal.ImageUrl = "../Images/final-over.gif";
                btnTabPreliminary.ImageUrl = "../Images/preliminary-nor.gif";
                btnTabCloseOut.ImageUrl = "../Images/close-out-nor.gif";
                imgPreRoute.Visible = false;
                imgPreFinalRoute.Visible = false;
                imgCloseOutRoute.Visible = false;
                if (ViewState["Status"] != null)
                {
                    lblStatusType.Text = ViewState["Status"].ToString();
                    lbStatusDB.Text = ViewState["Status"].ToString();
                }
                if (ViewState["stage"] != null)
                    lbCurrentStageDB.Text = ViewState["stage"].ToString();


                if (ViewState["Status"] != null && ViewState["stage"] != null)
                {
                    if (ViewState["stage"].ToString().ToUpper() == "CloseOut".ToUpper())
                    {
                        if (ViewState["Status"].ToString().ToUpper() == "Approved".ToUpper())
                        {
                            lbStatusDB.Text = "Completed";
                        }
                    }
                }

                tblTop.Visible = false;
                tblTopReadonly.Visible = true;
                FirstSectionPreliminary.Visible = false;
                TrGeneralPreliminaryRO.Visible = false;
                NewMaterialandBrands.Visible = false;
                NewMaterialandBrandsReadOnly.Visible = false;
                HSandSE.Visible = false;
                HSandSEReadOnly.Visible = false;
                PSandRA.Visible = false;
                PSandRAReadOnly.Visible = false;
                PlanningandBudgetInfo.Visible = false;
                PlanningandBudgetInfoReadOnly.Visible = false;
                ProductionandPackaging.Visible = false;
                ProductionandPackagingReadOnly.Visible = false;
                PackagingandDispositionPreliminary.Visible = false;
                PackagingandDispositionPreliminaryReadOnly.Visible = false;
                PreliminaryApprovals.Visible = false;
                PreliminaryApprovalsReadOnly.Visible = false;
                PreliminaryRevision.Visible = true;

                FinalPackagingandDisposition.Visible = false;
                FinalPackagingandDispositionReadOnly.Visible = true;
                FinalCostSheet.Visible = false;
                FinalCostSheetReadOnly.Visible = true;
                TrFinalQA.Visible = false;
                TrFinalQARO.Visible = true;
                FinalFormulaCardInformation.Visible = false;
                FinalFormulaCardInformationReadOnly.Visible = true;
                FinalTestPlans.Visible = false;
                FinalTestPlansReadOnly.Visible = true;
                LabSamplingPlans.Visible = false;
                LabSamplingPlansReadOnly.Visible = true;
                FinalProductTestFlowMatrix.Visible = false;
                FinalProductTestFlowMatrixReadonly.Visible = true;
                FinalOtherSupportingDoc.Visible = false;
                FinalOtherSupportingDocReadonly.Visible = true;
                FinalApprovals.Visible = false;
                FinalApprovalsReadOnly.Visible = true;

                FinalPackagingandDisposition.Visible = false;
                FinalPackagingandDispositionReadOnly.Visible = true;
                FinalCostSheet.Visible = false;
                FinalCostSheetReadOnly.Visible = true;
                TrFinalQA.Visible = false;
                TrFinalQARO.Visible = true;
                FinalFormulaCardInformation.Visible = false;
                FinalFormulaCardInformationReadOnly.Visible = true;
                FinalTestPlans.Visible = false;
                FinalTestPlansReadOnly.Visible = true;
                LabSamplingPlans.Visible = false;
                LabSamplingPlansReadOnly.Visible = true;
                FinalProductTestFlowMatrix.Visible = false;
                FinalProductTestFlowMatrixReadonly.Visible = true;
                FinalOtherSupportingDoc.Visible = false;
                FinalOtherSupportingDocReadonly.Visible = true;
                FinalApprovals.Visible = false;
                FinalApprovalsReadOnly.Visible = true;


                //For PCRs
                trFinalMaterialsBrandsRadioBefore.Visible = false;
                trFinalMaterialsBrands.Visible = false;
                trFinalMaterialsBrandsRadioAfter.Visible = false;
                trFinalPSRA.Visible = false;
                trFinalMaterialsBrandshead.Visible = false;
                trFinalPSRAhead.Visible = false;

                NewMaterialandBrandsReadOnlyFinal.Visible = true;
                trProdRegulatedProductRAQ2Final.Visible = true;
                PSandRAReadOnlyFinal.Visible = true;

                //Close Out Edit Fields
                CloseFirstSection.Visible = false;
                CloseActualCostSheet.Visible = false;
                CloseInitialLearningReport.Visible = false;
                CloseTestPlansUsed.Visible = false;
                CloseOutReport.Visible = false;
                CloseApprovals.Visible = false;
                CloseRevision.Visible = false;
                //Close Out Read only Fields
                CloseFirstSectionReadonly.Visible = false;
                CloseActualCostSheetReadonly.Visible = false;
                CloseInitialLearningReportReadOnly.Visible = false;
                CloseTestPlansUsedReadonly.Visible = false;
                CloseoutReportRO.Visible = false;
                CloseApprovalsReadonly.Visible = false;

                //making visible false for mail-lock 
                imgSaveResume.Visible = false;
                btnSave.Visible = false;
                btnExportPilotLine.Visible = false;
                imgPreRoute.Visible = false;
                imgPreFinalRoute.Visible = false;
                imgCloseOutRoute.Visible = false;
                if (ViewState["stage"] != null && ViewState["stage"].ToString().ToUpper() == "Preliminary".ToUpper())
                {
                    lblStageLevel.Text = "Final";
                    lblStatusType.Text = "Draft";
                }
                else if (ViewState["Status"] != null && ViewState["stage"] != null && ViewState["stage"].ToString().ToUpper() == "Final".ToUpper() && ViewState["Status"].ToString().ToUpper() == "Draft".ToUpper())
                {
                    lblStageLevel.Text = "Final";
                    lblStatusType.Text = "Draft";
                }
                else
                {
                    lblStageLevel.Text = "Final";
                    lblStatusType.Text = "Routed";
                }

                return;
            }
            if ((Request.QueryString["From"] == "MailEdit" | Request.QueryString["From"] == "ForEOEdit") && ViewState["stage"].ToString().ToUpper() == "Preliminary".ToUpper() && ViewState["Status"].ToString().ToUpper() == "Draft".ToUpper())
            {
                trProdRegulatedProductRAQ1.Visible = true;
                trProdRegulatedProductRAQ2.Visible = true;
                trMaterialsBrandsNewRow1.Visible = true;
                divMaterialsBrandsNewRow2.Style.Add("display", "block");
                divPSRAAdded.Style.Add("display", "block");
                Label49.Visible = false;
                TRPSRAChanged.Visible = true;
                divPSRAAddedRawMaterials.Style.Add("display", "block");
                divPSRARemoved.Style.Add("display", "none");
                carryapp();
                btnTabFinal.ImageUrl = "../Images/final-over.gif";
                btnTabPreliminary.ImageUrl = "../Images/preliminary-nor.gif";
                btnTabCloseOut.ImageUrl = "../Images/close-out-nor.gif";
                imgPreRoute.Visible = false;
                imgPreFinalRoute.Visible = false;
                imgCloseOutRoute.Visible = false;
                lblStageLevel.Text = "Final";
                lblStatusType.Text = "Draft";
                lbCurrentStageDB.Text = ViewState["stage"].ToString();
                lbStatusDB.Text = ViewState["Status"].ToString();

                //Chnaged by chary Approved to complete 16/09/08
                if (ViewState["stage"].ToString().ToUpper() == "CloseOut".ToUpper())
                {
                    if (ViewState["Status"].ToString().ToUpper() == "Approved".ToUpper())
                    {
                        lbStatusDB.Text = "Completed";
                    }
                }

                tblTop.Visible = true;
                tblTopReadonly.Visible = false;
                FirstSectionPreliminary.Visible = false;
                TrGeneralPreliminaryRO.Visible = false;
                NewMaterialandBrands.Visible = false;
                NewMaterialandBrandsReadOnly.Visible = false;
                HSandSE.Visible = false;
                HSandSEReadOnly.Visible = false;
                PSandRA.Visible = false;
                PSandRAReadOnly.Visible = false;
                PlanningandBudgetInfo.Visible = false;
                PlanningandBudgetInfoReadOnly.Visible = false;
                ProductionandPackaging.Visible = false;
                ProductionandPackagingReadOnly.Visible = false;
                PackagingandDispositionPreliminary.Visible = false;
                PackagingandDispositionPreliminaryReadOnly.Visible = false;
                PreliminaryApprovals.Visible = false;
                PreliminaryApprovalsReadOnly.Visible = false;
                PreliminaryRevision.Visible = true;

                FinalPackagingandDisposition.Visible = true;
                //test()
                FinalPackagingandDispositionReadOnly.Visible = false;
                FinalCostSheet.Visible = true;
                FinalCostSheetReadOnly.Visible = false;
                TrFinalQA.Visible = true;
                TrFinalQARO.Visible = false;
                FinalFormulaCardInformation.Visible = true;
                FinalFormulaCardInformationReadOnly.Visible = false;
                FinalTestPlans.Visible = true;
                FinalTestPlansReadOnly.Visible = false;
                LabSamplingPlans.Visible = true;
                LabSamplingPlansReadOnly.Visible = false;
                FinalProductTestFlowMatrix.Visible = true;
                FinalProductTestFlowMatrixReadonly.Visible = false;
                FinalOtherSupportingDoc.Visible = true;
                FinalOtherSupportingDocReadonly.Visible = false;
                FinalApprovals.Visible = true;
                FinalApprovalsReadOnly.Visible = false;

                FinalPackagingandDisposition.Visible = true;
                test();
                FinalPackagingandDispositionReadOnly.Visible = false;
                FinalCostSheet.Visible = true;
                FinalCostSheetReadOnly.Visible = false;
                TrFinalQA.Visible = true;
                TrFinalQARO.Visible = false;
                FinalFormulaCardInformation.Visible = true;
                FinalFormulaCardInformationReadOnly.Visible = false;
                FinalTestPlans.Visible = true;
                FinalTestPlansReadOnly.Visible = false;
                LabSamplingPlans.Visible = true;
                LabSamplingPlansReadOnly.Visible = false;
                FinalProductTestFlowMatrix.Visible = true;
                FinalProductTestFlowMatrixReadonly.Visible = false;
                FinalOtherSupportingDoc.Visible = true;
                FinalOtherSupportingDocReadonly.Visible = false;
                FinalApprovals.Visible = true;
                FinalApprovalsReadOnly.Visible = false;



                //For PCRs
                trFinalMaterialsBrandsRadioBefore.Visible = true;
                trFinalMaterialsBrands.Visible = true;
                trFinalMaterialsBrandsRadioAfter.Visible = true;
                trFinalPSRA.Visible = true;
                trFinalMaterialsBrandshead.Visible = true;
                trFinalPSRAhead.Visible = true;
                NewMaterialandBrandsReadOnlyFinal.Visible = false;
                trProdRegulatedProductRAQ2Final.Visible = false;
                PSandRAReadOnlyFinal.Visible = false;
                //Close Out Edit Fields
                CloseFirstSection.Visible = false;
                CloseActualCostSheet.Visible = false;
                CloseInitialLearningReport.Visible = false;
                CloseTestPlansUsed.Visible = false;
                CloseOutReport.Visible = false;
                CloseApprovals.Visible = false;
                CloseRevision.Visible = false;
                //Close Out Read only Fields
                CloseActualCostSheetReadonly.Visible = false;
                CloseInitialLearningReportReadOnly.Visible = false;
                CloseTestPlansUsedReadonly.Visible = false;
                CloseoutReportRO.Visible = false;
                CloseApprovalsReadonly.Visible = false;
            }
            else if ((Request.QueryString["From"] == "MailEdit" || Request.QueryString["From"] == "ForEOEdit") && ViewState["stage"].ToString().ToUpper() == "Preliminary".ToUpper() && ViewState["Status"].ToString().ToUpper() == "Routed".ToUpper())
            {
                //lblStageLevel.Text =ViewState["stage"]
                lblStatusType.Text = ViewState["Status"].ToString();
                btnTabFinal.ImageUrl = "../Images/final-over.gif";
                btnTabPreliminary.ImageUrl = "../Images/preliminary-nor.gif";
                btnTabCloseOut.ImageUrl = "../Images/close-out-nor.gif";
                btnExportPilotLine.Visible = true;
                CarryApprovalDetais();
                imgPreRoute.Visible = false;
                btnSave.Visible = true;
                imgSaveResume.Visible = true;
                imgPreFinalRoute.Visible = false;
                imgCloseOutRoute.Visible = false;
                trProdRegulatedProductRAQ1.Visible = true;
                trProdRegulatedProductRAQ2.Visible = true;
                trMaterialsBrandsNewRow1.Visible = true;
                PreliminaryMsg2.Visible = false;
                divMaterialsBrandsNewRow2.Style.Add("display", "block");
                divPSRAAdded.Style.Add("display", "block");


                Label49.Visible = false;
                // divPSRAAdded.Style.Add("display", "block")



                lbCurrentStageDB.Text = ViewState["stage"].ToString();
                lbStatusDB.Text = ViewState["Status"].ToString();


                //Chnaged by chary Approved to complete 16/09/08
                if (ViewState["stage"].ToString().ToUpper() == "CloseOut".ToUpper())
                {
                    if (ViewState["Status"].ToString().ToUpper() == "Approved".ToUpper())
                    {
                        lbStatusDB.Text = "Completed";
                    }
                }

                lblStageLevel.Text = "Final";
                lblStatusType.Text = "Draft";

                lbStatusDB.Visible = false;
                lblClosed.Visible = true;
                tblTop.Visible = false;
                tblTopReadonly.Visible = true;
                FirstSectionPreliminary.Visible = false;
                TrGeneralPreliminaryRO.Visible = false;
                NewMaterialandBrands.Visible = false;
                NewMaterialandBrandsReadOnly.Visible = false;
                HSandSE.Visible = false;
                HSandSEReadOnly.Visible = false;
                PSandRA.Visible = false;
                PSandRAReadOnly.Visible = false;
                PlanningandBudgetInfo.Visible = false;
                PlanningandBudgetInfoReadOnly.Visible = false;
                ProductionandPackaging.Visible = false;
                ProductionandPackagingReadOnly.Visible = false;
                PackagingandDispositionPreliminary.Visible = false;
                PackagingandDispositionPreliminaryReadOnly.Visible = false;
                PreliminaryApprovals.Visible = false;
                PreliminaryApprovalsReadOnly.Visible = false;
                PreliminaryRevision.Visible = true;

                FinalPackagingandDisposition.Visible = true;
                //test()
                FinalPackagingandDispositionReadOnly.Visible = false;
                FinalCostSheet.Visible = true;
                FinalCostSheetReadOnly.Visible = false;
                TrFinalQA.Visible = true;
                TrFinalQARO.Visible = false;
                FinalFormulaCardInformation.Visible = true;
                FinalFormulaCardInformationReadOnly.Visible = false;
                FinalTestPlans.Visible = true;
                FinalTestPlansReadOnly.Visible = false;
                LabSamplingPlans.Visible = true;
                LabSamplingPlansReadOnly.Visible = false;
                FinalProductTestFlowMatrix.Visible = true;
                FinalProductTestFlowMatrixReadonly.Visible = false;
                FinalOtherSupportingDoc.Visible = true;
                FinalOtherSupportingDocReadonly.Visible = false;
                FinalApprovals.Visible = true;
                FinalApprovalsReadOnly.Visible = false;

                FinalPackagingandDisposition.Visible = true;
                test();
                FinalPackagingandDispositionReadOnly.Visible = false;
                FinalCostSheet.Visible = true;
                FinalCostSheetReadOnly.Visible = false;
                TrFinalQA.Visible = true;
                TrFinalQARO.Visible = false;
                FinalFormulaCardInformation.Visible = true;
                FinalFormulaCardInformationReadOnly.Visible = false;
                FinalTestPlans.Visible = true;
                FinalTestPlansReadOnly.Visible = false;
                LabSamplingPlans.Visible = true;
                LabSamplingPlansReadOnly.Visible = false;
                FinalProductTestFlowMatrix.Visible = true;
                FinalProductTestFlowMatrixReadonly.Visible = false;
                FinalOtherSupportingDoc.Visible = true;
                FinalOtherSupportingDocReadonly.Visible = false;
                FinalApprovals.Visible = true;
                FinalApprovalsReadOnly.Visible = false;


                //For PCRs
                trFinalMaterialsBrandsRadioBefore.Visible = true;
                trFinalMaterialsBrands.Visible = true;
                trFinalMaterialsBrandsRadioAfter.Visible = true;
                trFinalPSRA.Visible = true;
                trFinalMaterialsBrandshead.Visible = true;
                trFinalPSRAhead.Visible = true;

                NewMaterialandBrandsReadOnlyFinal.Visible = false;
                trProdRegulatedProductRAQ2Final.Visible = false;
                PSandRAReadOnlyFinal.Visible = false;

                //Close Out Edit Fields
                CloseFirstSection.Visible = false;
                CloseActualCostSheet.Visible = false;
                CloseInitialLearningReport.Visible = false;
                CloseTestPlansUsed.Visible = false;
                CloseOutReport.Visible = false;
                CloseApprovals.Visible = false;
                CloseRevision.Visible = false;
                //Close Out Read only Fields
                CloseActualCostSheetReadonly.Visible = false;
                CloseInitialLearningReportReadOnly.Visible = false;
                CloseTestPlansUsedReadonly.Visible = false;
                CloseoutReportRO.Visible = false;
                CloseApprovalsReadonly.Visible = false;
                CarryPrelToFinal();
            }
            else if ((Request.QueryString["From"] == "MailEdit" || Request.QueryString["From"] == "ForEOEdit") && ViewState["stage"].ToString().ToUpper() == "Final".ToUpper() && ViewState["Status"].ToString().ToUpper() == "Draft".ToUpper())
            {
                CarryApprovalDetais();
                //lblStageLevel.Text =ViewState["stage"]
                lblStatusType.Text = ViewState["Status"].ToString();
                btnTabFinal.ImageUrl = "../Images/final-over.gif";
                btnTabPreliminary.ImageUrl = "../Images/preliminary-nor.gif";
                btnTabCloseOut.ImageUrl = "../Images/close-out-nor.gif";
                btnExportPilotLine.Visible = true;
                imgPreRoute.Visible = false;
                btnSave.Visible = true;
                imgSaveResume.Visible = true;
                imgPreFinalRoute.Visible = true;
                imgCloseOutRoute.Visible = false;
                //lblStageLevel.Text =ViewState["stage"]
                //lblStatusType.Text =ViewState["Status"]
                lbCurrentStageDB.Text = ViewState["stage"].ToString();
                lbStatusDB.Text = ViewState["Status"].ToString();

                //Chnaged by chary Approved to complete 16/09/08
                if (ViewState["stage"].ToString().ToUpper() == "CloseOut".ToUpper())
                {
                    if (ViewState["Status"].ToString().ToUpper() == "Approved".ToUpper())
                    {
                        lbStatusDB.Text = "Completed";
                    }
                }

                lblStageLevel.Text = "Final";
                lblStatusType.Text = "Draft";


                tblTop.Visible = false;
                tblTopReadonly.Visible = true;
                FirstSectionPreliminary.Visible = false;
                TrGeneralPreliminaryRO.Visible = false;
                NewMaterialandBrands.Visible = false;
                NewMaterialandBrandsReadOnly.Visible = false;
                HSandSE.Visible = false;
                HSandSEReadOnly.Visible = false;
                PSandRA.Visible = false;
                PSandRAReadOnly.Visible = false;
                PlanningandBudgetInfo.Visible = false;
                PlanningandBudgetInfoReadOnly.Visible = false;
                ProductionandPackaging.Visible = false;
                ProductionandPackagingReadOnly.Visible = false;
                PackagingandDispositionPreliminary.Visible = false;
                PackagingandDispositionPreliminaryReadOnly.Visible = false;
                PreliminaryApprovals.Visible = false;
                PreliminaryApprovalsReadOnly.Visible = false;
                PreliminaryRevision.Visible = true;

                FinalPackagingandDisposition.Visible = true;
                //test()
                FinalPackagingandDispositionReadOnly.Visible = false;
                FinalCostSheet.Visible = true;
                FinalCostSheetReadOnly.Visible = false;
                TrFinalQA.Visible = true;
                TrFinalQARO.Visible = false;
                FinalFormulaCardInformation.Visible = true;
                FinalFormulaCardInformationReadOnly.Visible = false;
                FinalTestPlans.Visible = true;
                FinalTestPlansReadOnly.Visible = false;
                LabSamplingPlans.Visible = true;
                LabSamplingPlansReadOnly.Visible = false;
                FinalProductTestFlowMatrix.Visible = true;
                FinalProductTestFlowMatrixReadonly.Visible = false;
                FinalOtherSupportingDoc.Visible = true;
                FinalOtherSupportingDocReadonly.Visible = false;
                FinalApprovals.Visible = true;
                FinalApprovalsReadOnly.Visible = false;

                FinalPackagingandDisposition.Visible = true;
                test();
                FinalPackagingandDispositionReadOnly.Visible = false;
                FinalCostSheet.Visible = true;
                FinalCostSheetReadOnly.Visible = false;
                TrFinalQA.Visible = true;
                TrFinalQARO.Visible = false;
                FinalFormulaCardInformation.Visible = true;
                FinalFormulaCardInformationReadOnly.Visible = false;
                FinalTestPlans.Visible = true;
                FinalTestPlansReadOnly.Visible = false;
                LabSamplingPlans.Visible = true;
                LabSamplingPlansReadOnly.Visible = false;
                FinalProductTestFlowMatrix.Visible = true;
                FinalProductTestFlowMatrixReadonly.Visible = false;
                FinalOtherSupportingDoc.Visible = true;
                FinalOtherSupportingDocReadonly.Visible = false;
                FinalApprovals.Visible = true;
                FinalApprovalsReadOnly.Visible = false;


                //For PCRs
                trFinalMaterialsBrandsRadioBefore.Visible = true;
                trFinalMaterialsBrands.Visible = true;
                trFinalMaterialsBrandsRadioAfter.Visible = true;
                trFinalPSRA.Visible = true;
                trFinalMaterialsBrandshead.Visible = true;
                trFinalPSRAhead.Visible = true;


                NewMaterialandBrandsReadOnlyFinal.Visible = false;
                trProdRegulatedProductRAQ2Final.Visible = false;
                PSandRAReadOnlyFinal.Visible = false;

                //Close Out Edit Fields
                CloseFirstSection.Visible = false;
                CloseActualCostSheet.Visible = false;
                CloseInitialLearningReport.Visible = false;
                CloseTestPlansUsed.Visible = false;
                CloseOutReport.Visible = false;
                CloseApprovals.Visible = false;
                CloseRevision.Visible = false;
                //Close Out Read only Fields
                CloseActualCostSheetReadonly.Visible = false;
                CloseInitialLearningReportReadOnly.Visible = false;
                CloseTestPlansUsedReadonly.Visible = false;
                CloseoutReportRO.Visible = false;
                CloseApprovalsReadonly.Visible = false;
            }
            else if ((Request.QueryString["From"] == "MailEdit" || Request.QueryString["From"] == "ForEOEdit") && ViewState["stage"].ToString().ToUpper() == "Final".ToUpper() && ViewState["Status"].ToString().ToUpper() == "Routed".ToUpper())
            {
                try
                {
                    if (!(ViewState["Two_Tab_Routing"].ToString() == "N"))
                    {
                        trTowtabRoutePrelimData.Visible = true;
                    }
                    else
                    {
                        trTowtabRoutePrelimData.Visible = false;
                    }
                }
                catch (Exception ex)
                {
                    trTowtabRoutePrelimData.Visible = false;
                }

                CarryPrelToFinal();

                //lblStageLevel.Text =ViewState["stage"]
                //lblStatusType.Text =ViewState["Status"]

                if (ViewState["Two_Tab_Routing"].ToString() == "Y")
                {
                    lblStageLevel.Text = "Final" + "<br>" + "Preliminary";
                    lblStatusType.Text = "&nbsp;" + "Routed" + "<br>&nbsp;" + " Routed";
                }
                else
                {
                    lblStageLevel.Text = "Final";
                    lblStatusType.Text = "Routed";
                }

                btnSave.Visible = false;
                imgSaveResume.Visible = false;
                btnTabFinal.ImageUrl = "../Images/final-over.gif";
                btnTabPreliminary.ImageUrl = "../Images/preliminary-nor.gif";
                btnTabCloseOut.ImageUrl = "../Images/close-out-nor.gif";
                btnExportPilotLine.Visible = false;

                imgPreRoute.Visible = false;
                imgPreFinalRoute.Visible = false;
                imgCloseOutRoute.Visible = false;
                //lblStageLevel.Text =ViewState["stage"]
                //lblStatusType.Text =ViewState["Status"]
                lbCurrentStageDB.Text = ViewState["stage"].ToString();
                lbStatusDB.Text = ViewState["Status"].ToString();

                //Chnaged by chary Approved to complete 16/09/08
                if (ViewState["stage"].ToString().ToUpper() == "CloseOut".ToUpper())
                {
                    if (ViewState["Status"].ToString().ToUpper() == "Approved".ToUpper())
                    {
                        lbStatusDB.Text = "Completed";
                    }
                }


                lbStatusDB.Visible = false;
                lblClosed.Visible = true;
                tblTop.Visible = false;
                tblTopReadonly.Visible = true;
                FirstSectionPreliminary.Visible = false;
                TrGeneralPreliminaryRO.Visible = false;
                NewMaterialandBrands.Visible = false;
                NewMaterialandBrandsReadOnly.Visible = false;
                HSandSE.Visible = false;
                HSandSEReadOnly.Visible = false;
                PSandRA.Visible = false;
                PSandRAReadOnly.Visible = false;
                PlanningandBudgetInfo.Visible = false;
                PlanningandBudgetInfoReadOnly.Visible = false;
                ProductionandPackaging.Visible = false;
                ProductionandPackagingReadOnly.Visible = false;
                PackagingandDispositionPreliminary.Visible = false;
                PackagingandDispositionPreliminaryReadOnly.Visible = false;
                PreliminaryApprovals.Visible = false;
                PreliminaryApprovalsReadOnly.Visible = false;
                PreliminaryRevision.Visible = true;

                FinalPackagingandDisposition.Visible = false;
                FinalPackagingandDispositionReadOnly.Visible = true;
                FinalCostSheet.Visible = false;
                FinalCostSheetReadOnly.Visible = true;
                TrFinalQA.Visible = false;
                TrFinalQARO.Visible = true;
                FinalFormulaCardInformation.Visible = false;
                FinalFormulaCardInformationReadOnly.Visible = true;
                FinalTestPlans.Visible = false;
                FinalTestPlansReadOnly.Visible = true;
                LabSamplingPlans.Visible = false;
                LabSamplingPlansReadOnly.Visible = true;
                FinalProductTestFlowMatrix.Visible = false;
                FinalProductTestFlowMatrixReadonly.Visible = true;
                FinalOtherSupportingDoc.Visible = false;
                FinalOtherSupportingDocReadonly.Visible = true;
                FinalApprovals.Visible = false;
                FinalApprovalsReadOnly.Visible = true;

                FinalPackagingandDisposition.Visible = false;
                FinalPackagingandDispositionReadOnly.Visible = true;
                FinalCostSheet.Visible = false;
                FinalCostSheetReadOnly.Visible = true;
                FinalFormulaCardInformation.Visible = false;
                FinalFormulaCardInformationReadOnly.Visible = true;
                FinalTestPlans.Visible = false;
                FinalTestPlansReadOnly.Visible = true;
                LabSamplingPlans.Visible = false;
                LabSamplingPlansReadOnly.Visible = true;
                FinalProductTestFlowMatrix.Visible = false;
                FinalProductTestFlowMatrixReadonly.Visible = true;
                FinalOtherSupportingDoc.Visible = false;
                FinalOtherSupportingDocReadonly.Visible = true;
                FinalApprovals.Visible = false;
                FinalApprovalsReadOnly.Visible = true;


                //For PCRs
                trFinalMaterialsBrandsRadioBefore.Visible = false;
                trFinalMaterialsBrands.Visible = false;
                trFinalMaterialsBrandsRadioAfter.Visible = false;
                trFinalPSRA.Visible = false;
                trFinalMaterialsBrandshead.Visible = false;
                trFinalPSRAhead.Visible = false;

                NewMaterialandBrandsReadOnlyFinal.Visible = true;
                trProdRegulatedProductRAQ2Final.Visible = true;
                PSandRAReadOnlyFinal.Visible = true;


                //Close Out Edit Fields
                CloseFirstSection.Visible = false;
                CloseActualCostSheet.Visible = false;
                CloseInitialLearningReport.Visible = false;
                CloseTestPlansUsed.Visible = false;
                CloseOutReport.Visible = false;
                CloseApprovals.Visible = false;
                CloseRevision.Visible = false;
                //Close Out Read only Fields
                CloseActualCostSheetReadonly.Visible = false;
                CloseInitialLearningReportReadOnly.Visible = false;
                CloseTestPlansUsedReadonly.Visible = false;
                CloseoutReportRO.Visible = false;
                CloseApprovalsReadonly.Visible = false;

            }
            else if ((Request.QueryString["From"] == "MailEdit" || Request.QueryString["From"] == "ForEOEdit") && ViewState["stage"].ToString().ToUpper() == "CloseOut".ToUpper() && ViewState["Status"].ToString().ToUpper() == "Draft".ToUpper())
            {
                if (ViewState["Two_Tab_Routing"].ToString() == "Y")
                {
                    lblStageLevel.Text = "Final" + "<br>" + "Preliminary";
                    lblStatusType.Text = "&nbsp;" + "Routed" + "<br>&nbsp;" + " Routed";
                    trTowtabRoutePrelimData.Visible = true;
                }
                else
                {
                    lblStageLevel.Text = "Final";
                    lblStatusType.Text = "Routed";
                }
                btnSave.Visible = false;
                imgSaveResume.Visible = false;
                btnTabFinal.ImageUrl = "../Images/final-over.gif";
                btnTabPreliminary.ImageUrl = "../Images/preliminary-nor.gif";
                btnTabCloseOut.ImageUrl = "../Images/close-out-nor.gif";
                imgPreRoute.Visible = false;
                imgPreFinalRoute.Visible = false;
                imgCloseOutRoute.Visible = false;
                lbCurrentStageDB.Text = ViewState["stage"].ToString();
                lbStatusDB.Text = ViewState["Status"].ToString();

                //Chnaged by chary Approved to complete 16/09/08
                if (ViewState["stage"].ToString().ToUpper() == "CloseOut".ToUpper())
                {
                    if (ViewState["Status"].ToString().ToUpper() == "Approved".ToUpper())
                    {
                        lbStatusDB.Text = "Completed";
                    }
                }
                tblTop.Visible = false;
                tblTopReadonly.Visible = true;
                FirstSectionPreliminary.Visible = false;
                TrGeneralPreliminaryRO.Visible = false;
                NewMaterialandBrands.Visible = false;
                NewMaterialandBrandsReadOnly.Visible = false;
                HSandSE.Visible = false;
                HSandSEReadOnly.Visible = false;
                PSandRA.Visible = false;
                PSandRAReadOnly.Visible = false;
                PlanningandBudgetInfo.Visible = false;
                PlanningandBudgetInfoReadOnly.Visible = false;
                ProductionandPackaging.Visible = false;
                ProductionandPackagingReadOnly.Visible = false;
                PackagingandDispositionPreliminary.Visible = false;
                PackagingandDispositionPreliminaryReadOnly.Visible = false;
                PreliminaryApprovals.Visible = false;
                PreliminaryApprovalsReadOnly.Visible = false;
                PreliminaryRevision.Visible = true;

                FinalPackagingandDisposition.Visible = false;
                FinalPackagingandDispositionReadOnly.Visible = true;
                FinalCostSheet.Visible = false;
                FinalCostSheetReadOnly.Visible = true;
                TrFinalQA.Visible = false;
                TrFinalQARO.Visible = true;
                FinalFormulaCardInformation.Visible = false;
                FinalFormulaCardInformationReadOnly.Visible = true;
                FinalTestPlans.Visible = false;
                FinalTestPlansReadOnly.Visible = true;
                LabSamplingPlans.Visible = false;
                LabSamplingPlansReadOnly.Visible = true;
                FinalProductTestFlowMatrix.Visible = false;
                FinalProductTestFlowMatrixReadonly.Visible = true;
                FinalOtherSupportingDoc.Visible = false;
                FinalOtherSupportingDocReadonly.Visible = true;
                FinalApprovals.Visible = false;
                FinalApprovalsReadOnly.Visible = true;

                FinalPackagingandDisposition.Visible = false;
                FinalPackagingandDispositionReadOnly.Visible = true;
                FinalCostSheet.Visible = false;
                FinalCostSheetReadOnly.Visible = true;
                TrFinalQA.Visible = false;
                TrFinalQARO.Visible = true;
                FinalFormulaCardInformation.Visible = false;
                FinalFormulaCardInformationReadOnly.Visible = true;
                FinalTestPlans.Visible = false;
                FinalTestPlansReadOnly.Visible = true;
                LabSamplingPlans.Visible = false;
                LabSamplingPlansReadOnly.Visible = true;
                FinalProductTestFlowMatrix.Visible = false;
                FinalProductTestFlowMatrixReadonly.Visible = true;
                FinalOtherSupportingDoc.Visible = false;
                FinalOtherSupportingDocReadonly.Visible = true;
                FinalApprovals.Visible = false;
                FinalApprovalsReadOnly.Visible = true;

                //For PCRs
                trFinalMaterialsBrandsRadioBefore.Visible = false;
                trFinalMaterialsBrands.Visible = false;
                trFinalMaterialsBrandsRadioAfter.Visible = false;
                trFinalPSRA.Visible = false;
                trFinalMaterialsBrandshead.Visible = false;
                trFinalPSRAhead.Visible = false;

                NewMaterialandBrandsReadOnlyFinal.Visible = true;
                trProdRegulatedProductRAQ2Final.Visible = true;
                PSandRAReadOnlyFinal.Visible = true;


                //Close Out Edit Fields
                CloseFirstSection.Visible = false;
                CloseActualCostSheet.Visible = false;
                CloseInitialLearningReport.Visible = false;
                CloseTestPlansUsed.Visible = false;
                CloseOutReport.Visible = false;
                CloseApprovals.Visible = false;
                CloseRevision.Visible = false;
                //Close Out Read only Fields
                CloseActualCostSheetReadonly.Visible = false;
                CloseInitialLearningReportReadOnly.Visible = false;
                CloseTestPlansUsedReadonly.Visible = false;
                CloseoutReportRO.Visible = false;
                CloseApprovalsReadonly.Visible = false;
            }
            else if ((Request.QueryString["From"] == "MailEdit" || Request.QueryString["From"] == "ForEOEdit") && ViewState["stage"].ToString().ToUpper() == "CloseOut".ToUpper() && ViewState["Status"].ToString().ToUpper() == "Routed".ToUpper())
            {
                if (ViewState["Two_Tab_Routing"].ToString() == "Y")
                {
                    lblStageLevel.Text = "Final" + "<br>" + "Preliminary";
                    lblStatusType.Text = "&nbsp;" + "Routed" + "<br>&nbsp;" + " Routed";
                    trTowtabRoutePrelimData.Visible = true;
                }
                else
                {
                    lblStageLevel.Text = "Final";
                    lblStatusType.Text = "Routed";
                }
                btnExportPilotLine.Visible = false;
                btnSave.Visible = false;
                imgSaveResume.Visible = false;
                btnTabFinal.ImageUrl = "../Images/final-over.gif";
                btnTabPreliminary.ImageUrl = "../Images/preliminary-nor.gif";
                btnTabCloseOut.ImageUrl = "../Images/close-out-nor.gif";
                imgPreRoute.Visible = false;
                imgPreFinalRoute.Visible = false;
                imgCloseOutRoute.Visible = false;
                lbCurrentStageDB.Text = ViewState["stage"].ToString();
                lbStatusDB.Text = ViewState["Status"].ToString();

                //Chnaged by chary Approved to complete 16/09/08
                if (ViewState["stage"].ToString().ToUpper() == "CloseOut".ToUpper())
                {
                    if (ViewState["Status"].ToString().ToUpper() == "Approved".ToUpper())
                    {
                        lbStatusDB.Text = "Completed";
                    }
                }

                lbStatusDB.Visible = false;
                lblClosed.Visible = true;
                tblTop.Visible = false;
                tblTopReadonly.Visible = true;
                FirstSectionPreliminary.Visible = false;
                TrGeneralPreliminaryRO.Visible = false;
                NewMaterialandBrands.Visible = false;
                NewMaterialandBrandsReadOnly.Visible = false;
                HSandSE.Visible = false;
                HSandSEReadOnly.Visible = false;
                PSandRA.Visible = false;
                PSandRAReadOnly.Visible = false;
                PlanningandBudgetInfo.Visible = false;
                PlanningandBudgetInfoReadOnly.Visible = false;
                ProductionandPackaging.Visible = false;
                ProductionandPackagingReadOnly.Visible = false;
                PackagingandDispositionPreliminary.Visible = false;
                PackagingandDispositionPreliminaryReadOnly.Visible = false;
                PreliminaryApprovals.Visible = false;
                PreliminaryApprovalsReadOnly.Visible = false;
                PreliminaryRevision.Visible = true;

                FinalPackagingandDisposition.Visible = false;
                FinalPackagingandDispositionReadOnly.Visible = true;
                FinalCostSheet.Visible = false;
                FinalCostSheetReadOnly.Visible = true;
                TrFinalQA.Visible = false;
                TrFinalQARO.Visible = true;
                FinalFormulaCardInformation.Visible = false;
                FinalFormulaCardInformationReadOnly.Visible = true;
                FinalTestPlans.Visible = false;
                FinalTestPlansReadOnly.Visible = true;
                LabSamplingPlans.Visible = false;
                LabSamplingPlansReadOnly.Visible = true;
                FinalProductTestFlowMatrix.Visible = false;
                FinalProductTestFlowMatrixReadonly.Visible = true;
                FinalOtherSupportingDoc.Visible = false;
                FinalOtherSupportingDocReadonly.Visible = true;
                FinalApprovals.Visible = false;
                FinalApprovalsReadOnly.Visible = true;

                FinalPackagingandDisposition.Visible = false;
                FinalPackagingandDispositionReadOnly.Visible = true;
                FinalCostSheet.Visible = false;
                FinalCostSheetReadOnly.Visible = true;
                TrFinalQA.Visible = false;
                TrFinalQARO.Visible = true;
                FinalFormulaCardInformation.Visible = false;
                FinalFormulaCardInformationReadOnly.Visible = true;
                FinalTestPlans.Visible = false;
                FinalTestPlansReadOnly.Visible = true;
                LabSamplingPlans.Visible = false;
                LabSamplingPlansReadOnly.Visible = true;
                FinalProductTestFlowMatrix.Visible = false;
                FinalProductTestFlowMatrixReadonly.Visible = true;
                FinalOtherSupportingDoc.Visible = false;
                FinalOtherSupportingDocReadonly.Visible = true;
                FinalApprovals.Visible = false;
                FinalApprovalsReadOnly.Visible = true;

                //For PCRs
                trFinalMaterialsBrandsRadioBefore.Visible = false;
                trFinalMaterialsBrands.Visible = false;
                trFinalMaterialsBrandsRadioAfter.Visible = false;
                trFinalPSRA.Visible = false;
                trFinalMaterialsBrandshead.Visible = false;
                trFinalPSRAhead.Visible = false;

                NewMaterialandBrandsReadOnlyFinal.Visible = true;
                trProdRegulatedProductRAQ2Final.Visible = true;
                PSandRAReadOnlyFinal.Visible = true;

                //Close Out Edit Fields
                CloseFirstSection.Visible = false;
                CloseActualCostSheet.Visible = false;
                CloseInitialLearningReport.Visible = false;
                CloseTestPlansUsed.Visible = false;
                CloseOutReport.Visible = false;
                CloseApprovals.Visible = false;
                CloseRevision.Visible = false;
                //Close Out Read only Fields
                CloseActualCostSheetReadonly.Visible = false;
                CloseInitialLearningReportReadOnly.Visible = false;
                CloseTestPlansUsedReadonly.Visible = false;
                CloseoutReportRO.Visible = false;
                CloseApprovalsReadonly.Visible = false;
            }
            else if ((Request.QueryString["From"] == "MailEdit" || Request.QueryString["From"] == "ForEOEdit") && ViewState["stage"].ToString().ToUpper() == "CloseOut".ToUpper() && ViewState["Status"].ToString().ToUpper() == "Approved".ToUpper())
            {
                btnExportPilotLine.Visible = false;
                if (ViewState["Two_Tab_Routing"].ToString() == "Y")
                {
                    lblStageLevel.Text = "Final" + "<br>" + "Preliminary";
                    lblStatusType.Text = "&nbsp;" + "Routed" + "<br>&nbsp;" + " Routed";
                    trTowtabRoutePrelimData.Visible = true;
                }
                else
                {
                    lblStageLevel.Text = "Final";
                    lblStatusType.Text = "Routed";
                }
                btnSave.Visible = false;
                imgSaveResume.Visible = false;
                btnTabFinal.ImageUrl = "../Images/final-over.gif";
                btnTabPreliminary.ImageUrl = "../Images/preliminary-nor.gif";
                btnTabCloseOut.ImageUrl = "../Images/close-out-nor.gif";
                imgPreRoute.Visible = false;
                imgPreFinalRoute.Visible = false;
                imgCloseOutRoute.Visible = false;
                lbCurrentStageDB.Text = ViewState["stage"].ToString();
                lbStatusDB.Text = ViewState["Status"].ToString();

                //Chnaged by chary Approved to complete 16/09/08
                if (ViewState["stage"].ToString().ToUpper() == "CloseOut".ToUpper())
                {
                    if (ViewState["Status"].ToString().ToUpper() == "Approved".ToUpper())
                    {
                        lbStatusDB.Text = "Completed";
                    }
                }

                tblTop.Visible = false;
                tblTopReadonly.Visible = true;
                FirstSectionPreliminary.Visible = false;
                TrGeneralPreliminaryRO.Visible = false;
                NewMaterialandBrands.Visible = false;
                NewMaterialandBrandsReadOnly.Visible = false;
                HSandSE.Visible = false;
                HSandSEReadOnly.Visible = false;
                PSandRA.Visible = false;
                PSandRAReadOnly.Visible = false;
                PlanningandBudgetInfo.Visible = false;
                PlanningandBudgetInfoReadOnly.Visible = false;
                ProductionandPackaging.Visible = false;
                ProductionandPackagingReadOnly.Visible = false;
                PackagingandDispositionPreliminary.Visible = false;
                PackagingandDispositionPreliminaryReadOnly.Visible = false;
                PreliminaryApprovals.Visible = false;
                PreliminaryApprovalsReadOnly.Visible = false;
                PreliminaryRevision.Visible = true;

                FinalPackagingandDisposition.Visible = false;
                FinalPackagingandDispositionReadOnly.Visible = true;
                FinalCostSheet.Visible = false;
                FinalCostSheetReadOnly.Visible = true;
                TrFinalQA.Visible = false;
                TrFinalQARO.Visible = true;
                FinalFormulaCardInformation.Visible = false;
                FinalFormulaCardInformationReadOnly.Visible = true;
                FinalTestPlans.Visible = false;
                FinalTestPlansReadOnly.Visible = true;
                LabSamplingPlans.Visible = false;
                LabSamplingPlansReadOnly.Visible = true;
                FinalProductTestFlowMatrix.Visible = false;
                FinalProductTestFlowMatrixReadonly.Visible = true;
                FinalOtherSupportingDoc.Visible = false;
                FinalOtherSupportingDocReadonly.Visible = true;
                FinalApprovals.Visible = false;
                FinalApprovalsReadOnly.Visible = true;

                FinalPackagingandDisposition.Visible = false;
                FinalPackagingandDispositionReadOnly.Visible = true;
                FinalCostSheet.Visible = false;
                FinalCostSheetReadOnly.Visible = true;
                TrFinalQA.Visible = false;
                TrFinalQARO.Visible = true;
                FinalFormulaCardInformation.Visible = false;
                FinalFormulaCardInformationReadOnly.Visible = true;
                FinalTestPlans.Visible = false;
                FinalTestPlansReadOnly.Visible = true;
                LabSamplingPlans.Visible = false;
                LabSamplingPlansReadOnly.Visible = true;
                FinalProductTestFlowMatrix.Visible = false;
                FinalProductTestFlowMatrixReadonly.Visible = true;
                FinalOtherSupportingDoc.Visible = false;
                FinalOtherSupportingDocReadonly.Visible = true;
                FinalApprovals.Visible = false;
                FinalApprovalsReadOnly.Visible = true;

                //For PCRs
                trFinalMaterialsBrandsRadioBefore.Visible = false;
                trFinalMaterialsBrands.Visible = false;
                trFinalMaterialsBrandsRadioAfter.Visible = false;
                trFinalPSRA.Visible = false;
                trFinalMaterialsBrandshead.Visible = false;
                trFinalPSRAhead.Visible = false;

                NewMaterialandBrandsReadOnlyFinal.Visible = true;
                trProdRegulatedProductRAQ2Final.Visible = true;
                PSandRAReadOnlyFinal.Visible = true;


                //Close Out Edit Fields
                CloseFirstSection.Visible = false;
                CloseActualCostSheet.Visible = false;
                CloseInitialLearningReport.Visible = false;
                CloseTestPlansUsed.Visible = false;
                CloseOutReport.Visible = false;
                CloseApprovals.Visible = false;
                CloseRevision.Visible = false;
                //Close Out Read only Fields
                CloseActualCostSheetReadonly.Visible = false;
                CloseInitialLearningReportReadOnly.Visible = false;
                CloseTestPlansUsedReadonly.Visible = false;
                CloseoutReportRO.Visible = false;
                CloseApprovalsReadonly.Visible = false;
                CloseFirstSectionReadonly.Visible = false;

            }
            else
            {
                btnTabFinal.ImageUrl = "../Images/final-over.gif";
                btnTabPreliminary.ImageUrl = "../Images/preliminary-nor.gif";
                btnTabCloseOut.ImageUrl = "../Images/close-out-nor.gif";
                imgPreRoute.Visible = false;
                imgPreFinalRoute.Visible = false;
                imgCloseOutRoute.Visible = false;
                carryapp();

                if (ViewState["twoTabRoute"].ToString() == "Y")
                {
                    imgPreFinalRoute.Visible = true;
                }

                //lblStageLevel.Text =ViewState["stage"]
                lblStatusType.Text = "Final";
                lbCurrentStageDB.Text = "Draft";
                if (ViewState["Status"] != null)
                    lbStatusDB.Text = ViewState["Status"].ToString();

                //Changed by chary Approved to complete 16/09/08
                if (ViewState["stage"] != null && ViewState["stage"].ToString().ToUpper() == "CloseOut".ToUpper())
                {
                    if (ViewState["Status"].ToString().ToUpper() == "Approved".ToUpper())
                    {
                        lbStatusDB.Text = "Completed";
                    }
                }

                tblTop.Visible = true;
                tblTopReadonly.Visible = false;
                FirstSectionPreliminary.Visible = false;
                TrGeneralPreliminaryRO.Visible = false;
                NewMaterialandBrands.Visible = false;
                NewMaterialandBrandsReadOnly.Visible = false;
                HSandSE.Visible = false;
                HSandSEReadOnly.Visible = false;
                PSandRA.Visible = false;
                PSandRAReadOnly.Visible = false;
                PlanningandBudgetInfo.Visible = false;
                PlanningandBudgetInfoReadOnly.Visible = false;
                ProductionandPackaging.Visible = false;
                ProductionandPackagingReadOnly.Visible = false;
                PackagingandDispositionPreliminary.Visible = false;
                PackagingandDispositionPreliminaryReadOnly.Visible = false;
                PreliminaryApprovals.Visible = false;
                PreliminaryApprovalsReadOnly.Visible = false;
                PreliminaryRevision.Visible = true;

                FinalPackagingandDisposition.Visible = true;
                // test()
                FinalPackagingandDispositionReadOnly.Visible = false;
                FinalCostSheet.Visible = true;
                FinalCostSheetReadOnly.Visible = false;
                FinalFormulaCardInformation.Visible = true;
                FinalFormulaCardInformationReadOnly.Visible = false;
                FinalTestPlans.Visible = true;
                FinalTestPlansReadOnly.Visible = false;
                LabSamplingPlans.Visible = true;
                LabSamplingPlansReadOnly.Visible = false;
                FinalProductTestFlowMatrix.Visible = true;
                FinalProductTestFlowMatrixReadonly.Visible = false;
                FinalOtherSupportingDoc.Visible = true;
                FinalOtherSupportingDocReadonly.Visible = false;
                FinalApprovals.Visible = true;
                FinalApprovalsReadOnly.Visible = false;

                FinalPackagingandDisposition.Visible = true;
                test();
                FinalPackagingandDispositionReadOnly.Visible = false;
                FinalCostSheet.Visible = true;
                FinalCostSheetReadOnly.Visible = false;
                TrFinalQA.Visible = true;
                TrFinalQARO.Visible = false;
                FinalFormulaCardInformation.Visible = true;
                FinalFormulaCardInformationReadOnly.Visible = false;
                FinalTestPlans.Visible = true;
                FinalTestPlansReadOnly.Visible = false;
                LabSamplingPlans.Visible = true;
                LabSamplingPlansReadOnly.Visible = false;
                FinalProductTestFlowMatrix.Visible = true;
                FinalProductTestFlowMatrixReadonly.Visible = false;
                FinalOtherSupportingDoc.Visible = true;
                FinalOtherSupportingDocReadonly.Visible = false;
                FinalApprovals.Visible = true;
                FinalApprovalsReadOnly.Visible = false;


                //For PCRs
                trFinalMaterialsBrandsRadioBefore.Visible = true;
                trFinalMaterialsBrands.Visible = true;
                trFinalMaterialsBrandsRadioAfter.Visible = true;
                trFinalPSRA.Visible = true;
                trFinalMaterialsBrandshead.Visible = true;
                trFinalPSRAhead.Visible = true;

                NewMaterialandBrandsReadOnlyFinal.Visible = false;
                trProdRegulatedProductRAQ2Final.Visible = false;
                PSandRAReadOnlyFinal.Visible = false;

                //Close Out Edit Fields
                CloseFirstSection.Visible = false;
                CloseActualCostSheet.Visible = false;
                CloseInitialLearningReport.Visible = false;
                CloseTestPlansUsed.Visible = false;
                CloseOutReport.Visible = false;
                CloseApprovals.Visible = false;
                CloseRevision.Visible = false;
                //Close Out Read only Fields
                CloseFirstSectionReadonly.Visible = false;
                CloseActualCostSheetReadonly.Visible = false;
                CloseInitialLearningReportReadOnly.Visible = false;
                CloseTestPlansUsedReadonly.Visible = false;
                CloseoutReportRO.Visible = false;
                CloseApprovalsReadonly.Visible = false;
                lblStageLevel.Text = "Final";
                lblStatusType.Text = "Draft";
            }
            finalApprovalCheck();
            if (ViewState["stage"] != null && ViewState["stage"].ToString().ToUpper() == "Closeout".ToUpper())
            {
                lblStatusType.Text = "Approved";
            }
            else
            {
                if (ViewState["Status"] != null)
                    lblStatusType.Text = ViewState["Status"].ToString();
            }
            lockforapproversfinaltabclick();
            if (ViewState["stage"] != null)
                lblStageLevel.Text = ViewState["stage"].ToString();
            if (ViewState["Status"] != null)
                lblStatusType.Text = ViewState["Status"].ToString();
        }

        protected void btnTabCloseOut_Click(object sender, ImageClickEventArgs e)
        {
            carryselectedBudgetCenter();
            t11.Text = "";
            PreliminaryRevision.Visible = true;
            ViewState["printstage"] = "CloseOut";
            lnkPreScreener.Visible = false;
            dgrPrescrenners.Visible = false;
            if ((Request.QueryString["From"] != null) && (Request.QueryString["From"] == "ForEOLock"))
            {
                btnTabFinal.ImageUrl = "../Images/final-nor.gif";
                btnTabPreliminary.ImageUrl = "../Images/preliminary-nor.gif";
                btnTabCloseOut.ImageUrl = "../Images/close-out-over.gif";
                imgPreRoute.Visible = false;
                imgPreFinalRoute.Visible = false;
                imgCloseOutRoute.Visible = false;
                if (ViewState["Status"] != null)
                {
                    lblStatusType.Text = ViewState["Status"].ToString();
                    lbStatusDB.Text = ViewState["Status"].ToString();
                }
                if (ViewState["stage"] != null)
                {
                    lbCurrentStageDB.Text = ViewState["stage"].ToString();
                }


                if (ViewState["stage"] != null && ViewState["stage"].ToString().ToUpper() == "CloseOut".ToUpper())
                {
                    if (ViewState["Status"].ToString().ToUpper() == "Approved".ToUpper())
                    {
                        lbStatusDB.Text = "Completed";
                    }
                }

                tblTop.Visible = false;
                tblTopReadonly.Visible = true;
                FirstSectionPreliminary.Visible = false;
                TrGeneralPreliminaryRO.Visible = false;
                NewMaterialandBrands.Visible = false;
                NewMaterialandBrandsReadOnly.Visible = false;
                HSandSE.Visible = false;
                HSandSEReadOnly.Visible = false;
                PSandRA.Visible = false;
                PSandRAReadOnly.Visible = false;
                PlanningandBudgetInfo.Visible = false;
                PlanningandBudgetInfoReadOnly.Visible = false;
                ProductionandPackaging.Visible = false;
                ProductionandPackagingReadOnly.Visible = false;
                PackagingandDispositionPreliminary.Visible = false;
                PackagingandDispositionPreliminaryReadOnly.Visible = false;
                PreliminaryApprovals.Visible = false;
                PreliminaryApprovalsReadOnly.Visible = false;
                PreliminaryRevision.Visible = true;
                FinalPackagingandDisposition.Visible = false;
                FinalPackagingandDispositionReadOnly.Visible = false;
                FinalCostSheet.Visible = false;
                FinalCostSheetReadOnly.Visible = false;
                TrFinalQA.Visible = false;
                TrFinalQARO.Visible = false;
                FinalFormulaCardInformation.Visible = false;
                FinalFormulaCardInformationReadOnly.Visible = false;
                FinalTestPlans.Visible = false;
                FinalTestPlansReadOnly.Visible = false;
                LabSamplingPlans.Visible = false;
                LabSamplingPlansReadOnly.Visible = false;
                FinalProductTestFlowMatrix.Visible = false;
                FinalProductTestFlowMatrixReadonly.Visible = false;
                FinalOtherSupportingDoc.Visible = false;
                FinalOtherSupportingDocReadonly.Visible = false;
                FinalApprovals.Visible = false;
                FinalApprovalsReadOnly.Visible = false;
                FinalPackagingandDisposition.Visible = false;
                FinalPackagingandDispositionReadOnly.Visible = false;
                FinalCostSheet.Visible = false;
                FinalCostSheetReadOnly.Visible = false;
                TrFinalQA.Visible = false;
                TrFinalQARO.Visible = false;
                FinalFormulaCardInformation.Visible = false;
                FinalFormulaCardInformationReadOnly.Visible = false;
                FinalTestPlans.Visible = false;
                FinalTestPlansReadOnly.Visible = false;
                LabSamplingPlans.Visible = false;
                LabSamplingPlansReadOnly.Visible = false;
                FinalProductTestFlowMatrix.Visible = false;
                FinalProductTestFlowMatrixReadonly.Visible = false;
                FinalOtherSupportingDoc.Visible = false;
                FinalOtherSupportingDocReadonly.Visible = false;
                FinalApprovals.Visible = false;
                FinalApprovalsReadOnly.Visible = false;
                //For PCRs
                trFinalMaterialsBrandsRadioBefore.Visible = false;
                trFinalMaterialsBrands.Visible = false;
                trFinalMaterialsBrandsRadioAfter.Visible = false;
                trFinalPSRA.Visible = false;
                trFinalMaterialsBrandshead.Visible = false;
                trFinalPSRAhead.Visible = false;
                NewMaterialandBrandsReadOnlyFinal.Visible = false;
                trProdRegulatedProductRAQ2Final.Visible = false;
                PSandRAReadOnlyFinal.Visible = false;
                //Close Out Edit Fields
                CloseFirstSection.Visible = false;
                CloseActualCostSheet.Visible = false;
                CloseInitialLearningReport.Visible = false;
                CloseTestPlansUsed.Visible = false;
                CloseOutReport.Visible = false;
                CloseApprovals.Visible = false;
                CloseRevision.Visible = false;
                //Close Out Read only Fields
                CloseFirstSectionReadonly.Visible = true;
                CloseActualCostSheetReadonly.Visible = true;
                CloseInitialLearningReportReadOnly.Visible = true;
                CloseTestPlansUsedReadonly.Visible = true;
                CloseoutReportRO.Visible = true;
                CloseApprovalsReadonly.Visible = true;
                //making visible false for mail-lock 
                imgSaveResume.Visible = false;
                btnSave.Visible = false;
                btnExportPilotLine.Visible = false;
                imgPreRoute.Visible = false;
                imgPreFinalRoute.Visible = false;
                imgCloseOutRoute.Visible = false;
                if (ViewState["stage"] != null && ViewState["stage"].ToString().ToUpper() == "Preliminary".ToUpper())
                {
                    lblStageLevel.Text = "CloseOut";
                    lblStatusType.Text = "Draft";
                }
                else if (ViewState["stage"] != null && ViewState["stage"].ToString().ToUpper() == "Final".ToUpper())
                {
                    lblStageLevel.Text = "CloseOut";
                    lblStatusType.Text = "Draft";
                }
                else if (ViewState["stage"] != null && ViewState["Status"] != null && ViewState["stage"].ToString().ToUpper() == "CloseOut".ToUpper() && ViewState["Status"].ToString().ToUpper() == "Draft".ToUpper())
                {
                    lblStageLevel.Text = "CloseOut";
                    lblStatusType.Text = "Draft";
                }
                else if (ViewState["stage"] != null && ViewState["Status"] != null && ViewState["stage"].ToString().ToUpper() == "CloseOut".ToUpper() && ViewState["Status"].ToString().ToUpper() == "Approved".ToUpper())
                {
                    lblStageLevel.Text = "CloseOut";
                    lblStatusType.Text = "Completed";
                }
                else
                {
                    lblStageLevel.Text = "CloseOut";
                    lblStatusType.Text = "Completed";
                }
                return;
            }
            if ((Request.QueryString["From"] == "MailEdit" || Request.QueryString["From"] == "ForEOEdit") && ViewState["stage"].ToString().ToUpper() == "Preliminary".ToUpper() & ViewState["Status"].ToString().ToUpper() == "Draft".ToUpper())
            {
                btnTabFinal.ImageUrl = "../Images/final-nor.gif";
                btnTabPreliminary.ImageUrl = "../Images/preliminary-nor.gif";
                btnTabCloseOut.ImageUrl = "../Images/close-out-over.gif";
                carryappfinalco();
                lblStageLevel.Text = "CloseOut";
                lblStatusType.Text = "Draft";
                trProdRegulatedProductRAQ1.Visible = true;
                trProdRegulatedProductRAQ2.Visible = true;
                PSR1.Visible = false;
                PSR2.Visible = false;
                PSR3.Visible = false;
                PSR4.Visible = false;
                PSR5.Visible = false;
                TRPSRAChanged.Visible = true;
                Label49.Visible = false;
                TRPSRAChanged1.Visible = true;
                if ((lblReadonlyPSR1.Text == "Yes" & lblReadonlyPSR2.Text == "No"))
                {
                }
                else
                {
                    TRPSRAChanged1.Visible = false;
                }
                imgPreRoute.Visible = false;
                imgPreFinalRoute.Visible = false;
                imgCloseOutRoute.Visible = false;
                // lblStageLevel.Text = ViewState["stage"]
                lblStatusType.Text = ViewState["Status"].ToString();
                lbCurrentStageDB.Text = ViewState["stage"].ToString();
                lbStatusDB.Text = ViewState["Status"].ToString();

                //Changed by chary Approved to complete 16/09/08
                if (ViewState["stage"].ToString().ToUpper() == "CloseOut".ToUpper())
                {
                    if (ViewState["Status"].ToString().ToUpper() == "Approved".ToUpper())
                    {
                        lbStatusDB.Text = "Completed";
                    }
                }



                tblTop.Visible = true;
                tblTopReadonly.Visible = false;
                FirstSectionPreliminary.Visible = false;
                TrGeneralPreliminaryRO.Visible = false;
                NewMaterialandBrands.Visible = false;
                NewMaterialandBrandsReadOnly.Visible = false;
                HSandSE.Visible = false;
                HSandSEReadOnly.Visible = false;
                PSandRA.Visible = false;
                PSandRAReadOnly.Visible = false;
                PlanningandBudgetInfo.Visible = false;
                PlanningandBudgetInfoReadOnly.Visible = false;
                ProductionandPackaging.Visible = false;
                ProductionandPackagingReadOnly.Visible = false;
                PackagingandDispositionPreliminary.Visible = false;
                PackagingandDispositionPreliminaryReadOnly.Visible = false;
                PreliminaryApprovals.Visible = false;
                PreliminaryApprovalsReadOnly.Visible = false;
                PreliminaryRevision.Visible = true;

                FinalPackagingandDisposition.Visible = false;
                FinalPackagingandDispositionReadOnly.Visible = false;
                FinalCostSheet.Visible = false;
                FinalCostSheetReadOnly.Visible = false;
                TrFinalQA.Visible = false;
                TrFinalQARO.Visible = false;
                FinalFormulaCardInformation.Visible = false;
                FinalFormulaCardInformationReadOnly.Visible = false;
                FinalTestPlans.Visible = false;
                FinalTestPlansReadOnly.Visible = false;
                LabSamplingPlans.Visible = false;
                LabSamplingPlansReadOnly.Visible = false;
                FinalProductTestFlowMatrix.Visible = false;
                FinalProductTestFlowMatrixReadonly.Visible = false;
                FinalOtherSupportingDoc.Visible = false;
                FinalOtherSupportingDocReadonly.Visible = false;
                FinalApprovals.Visible = false;
                FinalApprovalsReadOnly.Visible = false;

                FinalPackagingandDisposition.Visible = false;
                FinalPackagingandDispositionReadOnly.Visible = false;
                FinalCostSheet.Visible = false;
                FinalCostSheetReadOnly.Visible = false;
                TrFinalQA.Visible = false;
                TrFinalQARO.Visible = false;
                FinalFormulaCardInformation.Visible = false;
                FinalFormulaCardInformationReadOnly.Visible = false;
                FinalTestPlans.Visible = false;
                FinalTestPlansReadOnly.Visible = false;
                LabSamplingPlans.Visible = false;
                LabSamplingPlansReadOnly.Visible = false;
                FinalProductTestFlowMatrix.Visible = false;
                FinalProductTestFlowMatrixReadonly.Visible = false;
                FinalOtherSupportingDoc.Visible = false;
                FinalOtherSupportingDocReadonly.Visible = false;
                FinalApprovals.Visible = false;
                FinalApprovalsReadOnly.Visible = false;

                //For PCRs
                trFinalMaterialsBrandsRadioBefore.Visible = false;
                trFinalMaterialsBrands.Visible = false;
                trFinalMaterialsBrandsRadioAfter.Visible = false;
                trFinalPSRA.Visible = false;
                trFinalMaterialsBrandshead.Visible = false;
                trFinalPSRAhead.Visible = false;

                NewMaterialandBrandsReadOnlyFinal.Visible = false;
                trProdRegulatedProductRAQ2Final.Visible = false;
                PSandRAReadOnlyFinal.Visible = false;


                //Close Out Edit Fields
                CloseFirstSection.Visible = true;
                CloseActualCostSheet.Visible = true;
                CloseInitialLearningReport.Visible = true;
                CloseTestPlansUsed.Visible = true;
                CloseOutReport.Visible = true;
                CloseApprovals.Visible = true;
                CloseRevision.Visible = true;
                //Close Out Read only Fields
                CloseActualCostSheetReadonly.Visible = false;
                CloseInitialLearningReportReadOnly.Visible = false;
                CloseTestPlansUsedReadonly.Visible = false;
                CloseoutReportRO.Visible = false;
                CloseApprovalsReadonly.Visible = false;
            }
            else if ((Request.QueryString["From"] == "MailEdit" || Request.QueryString["From"] == "ForEOEdit") && ViewState["stage"].ToString().ToUpper() == "Preliminary".ToUpper() && ViewState["Status"].ToString().ToUpper() == "Routed".ToUpper())
            {
                CarryApprovalDetaisfinalco();
                btnTabFinal.ImageUrl = "../Images/final-nor.gif";
                btnTabPreliminary.ImageUrl = "../Images/preliminary-nor.gif";
                btnTabCloseOut.ImageUrl = "../Images/close-out-over.gif";
                btnExportPilotLine.Visible = false;
                lblStageLevel.Text = "CloseOut";
                lblStatusType.Text = "Draft";
                trProdRegulatedProductRAQ1.Visible = true;
                trProdRegulatedProductRAQ2.Visible = true;
                PSR1.Visible = false;
                PSR2.Visible = false;
                PSR3.Visible = false;
                PSR4.Visible = false;
                PSR5.Visible = false;
                TRPSRAChanged.Visible = true;
                TRPSRAChanged1.Visible = true;

                if ((lblReadonlyPSR1.Text == "Yes" && lblReadonlyPSR2.Text == "No"))
                {
                }
                else
                {
                    TRPSRAChanged1.Visible = false;
                }


                Label49.Visible = false;
                // divPSRAAdded.Style.Add("display", "block")

                btnSave.Visible = true;
                imgSaveResume.Visible = true;
                imgPreRoute.Visible = false;
                imgPreFinalRoute.Visible = false;
                imgCloseOutRoute.Visible = false;
                //lblStageLevel.Text = ViewState["stage"]
                //lblStatusType.Text = ViewState["Status"]
                lbCurrentStageDB.Text = ViewState["stage"].ToString();
                lbStatusDB.Text = ViewState["Status"].ToString();

                //Changed by chary Approved to complete 16/09/08
                if (ViewState["stage"].ToString().ToUpper() == "CloseOut".ToUpper())
                {
                    if (ViewState["Status"].ToString().ToUpper() == "Approved".ToUpper())
                    {
                        lbStatusDB.Text = "Completed";
                    }
                }


                lbStatusDB.Visible = false;
                lblClosed.Visible = true;
                tblTop.Visible = false;
                tblTopReadonly.Visible = true;
                FirstSectionPreliminary.Visible = false;
                TrGeneralPreliminaryRO.Visible = false;
                NewMaterialandBrands.Visible = false;
                NewMaterialandBrandsReadOnly.Visible = false;
                HSandSE.Visible = false;
                HSandSEReadOnly.Visible = false;
                PSandRA.Visible = false;
                PSandRAReadOnly.Visible = false;
                PlanningandBudgetInfo.Visible = false;
                PlanningandBudgetInfoReadOnly.Visible = false;
                ProductionandPackaging.Visible = false;
                ProductionandPackagingReadOnly.Visible = false;
                PackagingandDispositionPreliminary.Visible = false;
                PackagingandDispositionPreliminaryReadOnly.Visible = false;
                PreliminaryApprovals.Visible = false;
                PreliminaryApprovalsReadOnly.Visible = false;
                PreliminaryRevision.Visible = true;

                FinalPackagingandDisposition.Visible = false;
                FinalPackagingandDispositionReadOnly.Visible = false;
                FinalCostSheet.Visible = false;
                FinalCostSheetReadOnly.Visible = false;
                TrFinalQA.Visible = false;
                TrFinalQARO.Visible = false;
                FinalFormulaCardInformation.Visible = false;
                FinalFormulaCardInformationReadOnly.Visible = false;
                FinalTestPlans.Visible = false;
                FinalTestPlansReadOnly.Visible = false;
                LabSamplingPlans.Visible = false;
                LabSamplingPlansReadOnly.Visible = false;
                FinalProductTestFlowMatrix.Visible = false;
                FinalProductTestFlowMatrixReadonly.Visible = false;
                FinalOtherSupportingDoc.Visible = false;
                FinalOtherSupportingDocReadonly.Visible = false;
                FinalApprovals.Visible = false;
                FinalApprovalsReadOnly.Visible = false;

                FinalPackagingandDisposition.Visible = false;
                FinalPackagingandDispositionReadOnly.Visible = false;
                FinalCostSheet.Visible = false;
                FinalCostSheetReadOnly.Visible = false;
                TrFinalQA.Visible = false;
                TrFinalQARO.Visible = false;
                FinalFormulaCardInformation.Visible = false;
                FinalFormulaCardInformationReadOnly.Visible = false;
                FinalTestPlans.Visible = false;
                FinalTestPlansReadOnly.Visible = false;
                LabSamplingPlans.Visible = false;
                LabSamplingPlansReadOnly.Visible = false;
                FinalProductTestFlowMatrix.Visible = false;
                FinalProductTestFlowMatrixReadonly.Visible = false;
                FinalOtherSupportingDoc.Visible = false;
                FinalOtherSupportingDocReadonly.Visible = false;
                FinalApprovals.Visible = false;
                FinalApprovalsReadOnly.Visible = false;


                //For PCRs
                trFinalMaterialsBrandsRadioBefore.Visible = false;
                trFinalMaterialsBrands.Visible = false;
                trFinalMaterialsBrandsRadioAfter.Visible = false;
                trFinalPSRA.Visible = false;
                trFinalMaterialsBrandshead.Visible = false;
                trFinalPSRAhead.Visible = false;

                NewMaterialandBrandsReadOnlyFinal.Visible = false;
                trProdRegulatedProductRAQ2Final.Visible = false;
                PSandRAReadOnlyFinal.Visible = false;


                //Close Out Edit Fields
                CloseFirstSection.Visible = true;
                CloseActualCostSheet.Visible = true;
                CloseInitialLearningReport.Visible = true;
                CloseTestPlansUsed.Visible = true;
                CloseOutReport.Visible = true;
                CloseApprovals.Visible = true;
                CloseRevision.Visible = true;
                //Close Out Read only Fields
                CloseActualCostSheetReadonly.Visible = false;
                CloseInitialLearningReportReadOnly.Visible = false;
                CloseTestPlansUsedReadonly.Visible = false;
                CloseoutReportRO.Visible = false;
                CloseApprovalsReadonly.Visible = false;

            }
            else if ((Request.QueryString["From"] == "MailEdit" || Request.QueryString["From"] == "ForEOEdit") && ViewState["stage"].ToString().ToUpper() == "Final".ToUpper() && ViewState["Status"].ToString().ToUpper() == "Draft".ToUpper())
            {
                CarryApprovalDetaisfinalco();
                btnTabFinal.ImageUrl = "../Images/final-nor.gif";
                btnTabPreliminary.ImageUrl = "../Images/preliminary-nor.gif";
                btnTabCloseOut.ImageUrl = "../Images/close-out-over.gif";
                //lblStageLevel.Text = ViewState["stage"]
                //lblStatusType.Text = ViewState["Status"]

                lblStageLevel.Text = "CloseOut";
                lblStatusType.Text = "Draft";

                imgPreRoute.Visible = false;
                imgPreFinalRoute.Visible = false;
                imgCloseOutRoute.Visible = false;
                //lblStageLevel.Text = ViewState["stage"]
                lblStatusType.Text = ViewState["Status"].ToString();
                lbCurrentStageDB.Text = ViewState["stage"].ToString();
                lbStatusDB.Text = ViewState["Status"].ToString();


                //Changed by chary Approved to complete 16/09/08
                if (ViewState["stage"].ToString().ToUpper() == "CloseOut".ToUpper())
                {
                    if (ViewState["Status"].ToString().ToUpper() == "Approved".ToUpper())
                    {
                        lbStatusDB.Text = "Completed";
                    }
                }


                tblTop.Visible = false;
                tblTopReadonly.Visible = true;
                FirstSectionPreliminary.Visible = false;
                TrGeneralPreliminaryRO.Visible = false;
                NewMaterialandBrands.Visible = false;
                NewMaterialandBrandsReadOnly.Visible = false;
                HSandSE.Visible = false;
                HSandSEReadOnly.Visible = false;
                PSandRA.Visible = false;
                PSandRAReadOnly.Visible = false;
                PlanningandBudgetInfo.Visible = false;
                PlanningandBudgetInfoReadOnly.Visible = false;
                ProductionandPackaging.Visible = false;
                ProductionandPackagingReadOnly.Visible = false;
                PackagingandDispositionPreliminary.Visible = false;
                PackagingandDispositionPreliminaryReadOnly.Visible = false;
                PreliminaryApprovals.Visible = false;
                PreliminaryApprovalsReadOnly.Visible = false;
                PreliminaryRevision.Visible = true;

                FinalPackagingandDisposition.Visible = false;
                FinalPackagingandDispositionReadOnly.Visible = false;
                FinalCostSheet.Visible = false;
                FinalCostSheetReadOnly.Visible = false;
                TrFinalQA.Visible = false;
                TrFinalQARO.Visible = false;
                FinalFormulaCardInformation.Visible = false;
                FinalFormulaCardInformationReadOnly.Visible = false;
                FinalTestPlans.Visible = false;
                FinalTestPlansReadOnly.Visible = false;
                LabSamplingPlans.Visible = false;
                LabSamplingPlansReadOnly.Visible = false;
                FinalProductTestFlowMatrix.Visible = false;
                FinalProductTestFlowMatrixReadonly.Visible = false;
                FinalOtherSupportingDoc.Visible = false;
                FinalOtherSupportingDocReadonly.Visible = false;
                FinalApprovals.Visible = false;
                FinalApprovalsReadOnly.Visible = false;

                FinalPackagingandDisposition.Visible = false;
                FinalPackagingandDispositionReadOnly.Visible = false;
                FinalCostSheet.Visible = false;
                FinalCostSheetReadOnly.Visible = false;
                TrFinalQA.Visible = false;
                TrFinalQARO.Visible = false;
                FinalFormulaCardInformation.Visible = false;
                FinalFormulaCardInformationReadOnly.Visible = false;
                FinalTestPlans.Visible = false;
                FinalTestPlansReadOnly.Visible = false;
                LabSamplingPlans.Visible = false;
                LabSamplingPlansReadOnly.Visible = false;
                FinalProductTestFlowMatrix.Visible = false;
                FinalProductTestFlowMatrixReadonly.Visible = false;
                FinalOtherSupportingDoc.Visible = false;
                FinalOtherSupportingDocReadonly.Visible = false;
                FinalApprovals.Visible = false;
                FinalApprovalsReadOnly.Visible = false;

                //For PCRs
                trFinalMaterialsBrandsRadioBefore.Visible = false;
                trFinalMaterialsBrands.Visible = false;
                trFinalMaterialsBrandsRadioAfter.Visible = false;
                trFinalPSRA.Visible = false;
                trFinalMaterialsBrandshead.Visible = false;
                trFinalPSRAhead.Visible = false;

                NewMaterialandBrandsReadOnlyFinal.Visible = false;
                trProdRegulatedProductRAQ2Final.Visible = false;
                PSandRAReadOnlyFinal.Visible = false;


                //Close Out Edit Fields
                CloseFirstSection.Visible = true;
                CloseActualCostSheet.Visible = true;
                CloseInitialLearningReport.Visible = true;
                CloseTestPlansUsed.Visible = true;
                CloseOutReport.Visible = true;
                CloseApprovals.Visible = true;
                CloseRevision.Visible = true;
                //Close Out Read only Fields
                CloseActualCostSheetReadonly.Visible = false;
                CloseInitialLearningReportReadOnly.Visible = false;
                CloseTestPlansUsedReadonly.Visible = false;
                CloseoutReportRO.Visible = false;
                CloseApprovalsReadonly.Visible = false;
            }
            else if ((Request.QueryString["From"] == "MailEdit" || Request.QueryString["From"] == "ForEOEdit") && ViewState["stage"].ToString().ToUpper() == "Final".ToUpper() && ViewState["Status"].ToString().ToUpper() == "Routed".ToUpper())
            {
                CarryApprovalDetaisfinalco();
                btnTabFinal.ImageUrl = "../Images/final-nor.gif";
                btnTabPreliminary.ImageUrl = "../Images/preliminary-nor.gif";
                btnTabCloseOut.ImageUrl = "../Images/close-out-over.gif";
                btnExportPilotLine.Visible = false;

                lblStageLevel.Text = "CloseOut";
                lblStatusType.Text = "Draft";
                btnSave.Visible = true;
                imgSaveResume.Visible = true;
                imgPreRoute.Visible = false;
                imgPreFinalRoute.Visible = false;
                imgCloseOutRoute.Visible = false;

                lbCurrentStageDB.Text = ViewState["stage"].ToString();
                lbStatusDB.Text = ViewState["Status"].ToString();

                //Changed by chary Approved to complete 16/09/08
                if (ViewState["stage"].ToString().ToUpper() == "CloseOut".ToUpper())
                {
                    if (ViewState["Status"].ToString().ToUpper() == "Approved".ToUpper())
                    {
                        lbStatusDB.Text = "Completed";
                    }
                }

                lbStatusDB.Visible = false;
                lblClosed.Visible = true;
                tblTop.Visible = false;
                tblTopReadonly.Visible = true;
                FirstSectionPreliminary.Visible = false;
                TrGeneralPreliminaryRO.Visible = false;
                NewMaterialandBrands.Visible = false;
                NewMaterialandBrandsReadOnly.Visible = false;
                HSandSE.Visible = false;
                HSandSEReadOnly.Visible = false;
                PSandRA.Visible = false;
                PSandRAReadOnly.Visible = false;
                PlanningandBudgetInfo.Visible = false;
                PlanningandBudgetInfoReadOnly.Visible = false;
                ProductionandPackaging.Visible = false;
                ProductionandPackagingReadOnly.Visible = false;
                PackagingandDispositionPreliminary.Visible = false;
                PackagingandDispositionPreliminaryReadOnly.Visible = false;
                PreliminaryApprovals.Visible = false;
                PreliminaryApprovalsReadOnly.Visible = false;
                PreliminaryRevision.Visible = true;

                FinalPackagingandDisposition.Visible = false;
                FinalPackagingandDispositionReadOnly.Visible = false;
                FinalCostSheet.Visible = false;
                FinalCostSheetReadOnly.Visible = false;
                TrFinalQA.Visible = false;
                TrFinalQARO.Visible = false;
                FinalFormulaCardInformation.Visible = false;
                FinalFormulaCardInformationReadOnly.Visible = false;
                FinalTestPlans.Visible = false;
                FinalTestPlansReadOnly.Visible = false;
                LabSamplingPlans.Visible = false;
                LabSamplingPlansReadOnly.Visible = false;
                FinalProductTestFlowMatrix.Visible = false;
                FinalProductTestFlowMatrixReadonly.Visible = false;
                FinalOtherSupportingDoc.Visible = false;
                FinalOtherSupportingDocReadonly.Visible = false;
                FinalApprovals.Visible = false;
                FinalApprovalsReadOnly.Visible = false;

                FinalPackagingandDisposition.Visible = false;
                FinalPackagingandDispositionReadOnly.Visible = false;
                FinalCostSheet.Visible = false;
                FinalCostSheetReadOnly.Visible = false;
                TrFinalQA.Visible = false;
                TrFinalQARO.Visible = false;
                FinalFormulaCardInformation.Visible = false;
                FinalFormulaCardInformationReadOnly.Visible = false;
                FinalTestPlans.Visible = false;
                FinalTestPlansReadOnly.Visible = false;
                LabSamplingPlans.Visible = false;
                LabSamplingPlansReadOnly.Visible = false;
                FinalProductTestFlowMatrix.Visible = false;
                FinalProductTestFlowMatrixReadonly.Visible = false;
                FinalOtherSupportingDoc.Visible = false;
                FinalOtherSupportingDocReadonly.Visible = false;
                FinalApprovals.Visible = false;
                FinalApprovalsReadOnly.Visible = false;

                //For PCRs
                trFinalMaterialsBrandsRadioBefore.Visible = false;
                trFinalMaterialsBrands.Visible = false;
                trFinalMaterialsBrandsRadioAfter.Visible = false;
                trFinalPSRA.Visible = false;
                trFinalMaterialsBrandshead.Visible = false;
                trFinalPSRAhead.Visible = false;

                NewMaterialandBrandsReadOnlyFinal.Visible = false;
                trProdRegulatedProductRAQ2Final.Visible = false;
                PSandRAReadOnlyFinal.Visible = false;

                //Close Out Edit Fields
                CloseFirstSection.Visible = true;
                CloseActualCostSheet.Visible = true;
                CloseInitialLearningReport.Visible = true;
                CloseTestPlansUsed.Visible = true;
                CloseOutReport.Visible = true;
                CloseApprovals.Visible = true;
                CloseRevision.Visible = true;
                //Close Out Read only Fields
                CloseActualCostSheetReadonly.Visible = false;
                CloseInitialLearningReportReadOnly.Visible = false;
                CloseTestPlansUsedReadonly.Visible = false;
                CloseoutReportRO.Visible = false;
                CloseApprovalsReadonly.Visible = false;
            }
            else if ((Request.QueryString["From"] == "MailEdit" || Request.QueryString["From"] == "ForEOEdit") && ViewState["stage"].ToString().ToUpper() == "CloseOut".ToUpper() && ViewState["Status"].ToString().ToUpper() == "Draft".ToUpper())
            {
                carryappfinalco();
                btnTabFinal.ImageUrl = "../Images/final-nor.gif";
                btnSave.Visible = true;
                imgSaveResume.Visible = true;
                btnTabPreliminary.ImageUrl = "../Images/preliminary-nor.gif";
                btnTabCloseOut.ImageUrl = "../Images/close-out-over.gif";

                lblStageLevel.Text = "CloseOut";
                lblStatusType.Text = "Draft";

                imgPreRoute.Visible = false;
                imgPreFinalRoute.Visible = false;
                imgCloseOutRoute.Visible = true;
                //lblStageLevel.Text = ViewState["stage"]
                lblStatusType.Text = ViewState["Status"].ToString();
                lbCurrentStageDB.Text = ViewState["stage"].ToString();
                lbStatusDB.Text = ViewState["Status"].ToString();


                //Changed by chary Approved to complete 16/09/08
                if (ViewState["stage"].ToString().ToUpper() == "CloseOut".ToUpper())
                {
                    if (ViewState["Status"].ToString().ToUpper() == "Approved".ToUpper())
                    {
                        lbStatusDB.Text = "Completed";
                    }
                }

                tblTop.Visible = false;
                tblTopReadonly.Visible = true;
                FirstSectionPreliminary.Visible = false;
                TrGeneralPreliminaryRO.Visible = false;
                NewMaterialandBrands.Visible = false;
                NewMaterialandBrandsReadOnly.Visible = false;
                HSandSE.Visible = false;
                HSandSEReadOnly.Visible = false;
                PSandRA.Visible = false;
                PSandRAReadOnly.Visible = false;
                PlanningandBudgetInfo.Visible = false;
                PlanningandBudgetInfoReadOnly.Visible = false;
                ProductionandPackaging.Visible = false;
                ProductionandPackagingReadOnly.Visible = false;
                PackagingandDispositionPreliminary.Visible = false;
                PackagingandDispositionPreliminaryReadOnly.Visible = false;
                PreliminaryApprovals.Visible = false;
                PreliminaryApprovalsReadOnly.Visible = false;
                PreliminaryRevision.Visible = true;

                FinalPackagingandDisposition.Visible = false;
                FinalPackagingandDispositionReadOnly.Visible = false;
                FinalCostSheet.Visible = false;
                FinalCostSheetReadOnly.Visible = false;
                TrFinalQA.Visible = false;
                TrFinalQARO.Visible = false;
                FinalFormulaCardInformation.Visible = false;
                FinalFormulaCardInformationReadOnly.Visible = false;
                FinalTestPlans.Visible = false;
                FinalTestPlansReadOnly.Visible = false;
                LabSamplingPlans.Visible = false;
                LabSamplingPlansReadOnly.Visible = false;
                FinalProductTestFlowMatrix.Visible = false;
                FinalProductTestFlowMatrixReadonly.Visible = false;
                FinalOtherSupportingDoc.Visible = false;
                FinalOtherSupportingDocReadonly.Visible = false;
                FinalApprovals.Visible = false;
                FinalApprovalsReadOnly.Visible = false;

                FinalPackagingandDisposition.Visible = false;
                FinalPackagingandDispositionReadOnly.Visible = false;
                FinalCostSheet.Visible = false;
                FinalCostSheetReadOnly.Visible = false;
                TrFinalQA.Visible = false;
                TrFinalQARO.Visible = false;
                FinalFormulaCardInformation.Visible = false;
                FinalFormulaCardInformationReadOnly.Visible = false;
                FinalTestPlans.Visible = false;
                FinalTestPlansReadOnly.Visible = false;
                LabSamplingPlans.Visible = false;
                LabSamplingPlansReadOnly.Visible = false;
                FinalProductTestFlowMatrix.Visible = false;
                FinalProductTestFlowMatrixReadonly.Visible = false;
                FinalOtherSupportingDoc.Visible = false;
                FinalOtherSupportingDocReadonly.Visible = false;
                FinalApprovals.Visible = false;
                FinalApprovalsReadOnly.Visible = false;

                //For PCRs
                trFinalMaterialsBrandsRadioBefore.Visible = false;
                trFinalMaterialsBrands.Visible = false;
                trFinalMaterialsBrandsRadioAfter.Visible = false;
                trFinalPSRA.Visible = false;
                trFinalMaterialsBrandshead.Visible = false;
                trFinalPSRAhead.Visible = false;

                NewMaterialandBrandsReadOnlyFinal.Visible = false;
                trProdRegulatedProductRAQ2Final.Visible = false;
                PSandRAReadOnlyFinal.Visible = false;

                //Close Out Edit Fields
                CloseFirstSection.Visible = true;
                CloseActualCostSheet.Visible = true;
                CloseInitialLearningReport.Visible = true;
                CloseTestPlansUsed.Visible = true;
                CloseOutReport.Visible = true;
                CloseApprovals.Visible = true;
                CloseRevision.Visible = true;
                //Close Out Read only Fields
                CloseActualCostSheetReadonly.Visible = false;
                CloseInitialLearningReportReadOnly.Visible = false;
                CloseTestPlansUsedReadonly.Visible = false;
                CloseoutReportRO.Visible = false;
                CloseApprovalsReadonly.Visible = false;
            }
            else if ((Request.QueryString["From"] == "MailEdit" || Request.QueryString["From"] == "ForEOEdit") && ViewState["stage"].ToString().ToUpper() == "CloseOut".ToUpper() && ViewState["Status"].ToString().ToUpper() == "Routed".ToUpper())
            {
                btnSave.Visible = false;
                imgSaveResume.Visible = false;
                btnExportPilotLine.Visible = false;

                btnTabFinal.ImageUrl = "../Images/final-nor.gif";
                btnTabPreliminary.ImageUrl = "../Images/preliminary-nor.gif";
                btnTabCloseOut.ImageUrl = "../Images/close-out-over.gif";

                lblStageLevel.Text = "CloseOut";
                lblStatusType.Text = "Routed";

                imgPreRoute.Visible = false;
                imgPreFinalRoute.Visible = false;
                imgCloseOutRoute.Visible = false;
                //lblStageLevel.Text = ViewState["stage"]
                lblStatusType.Text = ViewState["Status"].ToString();
                lbCurrentStageDB.Text = ViewState["stage"].ToString();
                lbStatusDB.Text = ViewState["Status"].ToString();

                //Changed by chary Approved to complete 16/09/08
                if (ViewState["stage"].ToString().ToUpper() == "CloseOut".ToUpper())
                {
                    if (ViewState["Status"].ToString().ToUpper() == "Approved".ToUpper())
                    {
                        lbStatusDB.Text = "Completed";
                    }
                }

                lbStatusDB.Visible = false;
                lblClosed.Visible = true;
                tblTop.Visible = false;
                tblTopReadonly.Visible = true;
                FirstSectionPreliminary.Visible = false;
                TrGeneralPreliminaryRO.Visible = false;
                NewMaterialandBrands.Visible = false;
                NewMaterialandBrandsReadOnly.Visible = false;
                HSandSE.Visible = false;
                HSandSEReadOnly.Visible = false;
                PSandRA.Visible = false;
                PSandRAReadOnly.Visible = false;
                PlanningandBudgetInfo.Visible = false;
                PlanningandBudgetInfoReadOnly.Visible = false;
                ProductionandPackaging.Visible = false;
                ProductionandPackagingReadOnly.Visible = false;
                PackagingandDispositionPreliminary.Visible = false;
                PackagingandDispositionPreliminaryReadOnly.Visible = false;
                PreliminaryApprovals.Visible = false;
                PreliminaryApprovalsReadOnly.Visible = false;
                PreliminaryRevision.Visible = true;

                FinalPackagingandDisposition.Visible = false;
                FinalPackagingandDispositionReadOnly.Visible = false;
                FinalCostSheet.Visible = false;
                FinalCostSheetReadOnly.Visible = false;
                TrFinalQA.Visible = false;
                TrFinalQARO.Visible = false;
                FinalFormulaCardInformation.Visible = false;
                FinalFormulaCardInformationReadOnly.Visible = false;
                FinalTestPlans.Visible = false;
                FinalTestPlansReadOnly.Visible = false;
                LabSamplingPlans.Visible = false;
                LabSamplingPlansReadOnly.Visible = false;
                FinalProductTestFlowMatrix.Visible = false;
                FinalProductTestFlowMatrixReadonly.Visible = false;
                FinalOtherSupportingDoc.Visible = false;
                FinalOtherSupportingDocReadonly.Visible = false;
                FinalApprovals.Visible = false;
                FinalApprovalsReadOnly.Visible = false;

                FinalPackagingandDisposition.Visible = false;
                FinalPackagingandDispositionReadOnly.Visible = false;
                FinalCostSheet.Visible = false;
                FinalCostSheetReadOnly.Visible = false;
                TrFinalQA.Visible = false;
                TrFinalQARO.Visible = false;
                FinalFormulaCardInformation.Visible = false;
                FinalFormulaCardInformationReadOnly.Visible = false;
                FinalTestPlans.Visible = false;
                FinalTestPlansReadOnly.Visible = false;
                LabSamplingPlans.Visible = false;
                LabSamplingPlansReadOnly.Visible = false;
                FinalProductTestFlowMatrix.Visible = false;
                FinalProductTestFlowMatrixReadonly.Visible = false;
                FinalOtherSupportingDoc.Visible = false;
                FinalOtherSupportingDocReadonly.Visible = false;
                FinalApprovals.Visible = false;
                FinalApprovalsReadOnly.Visible = false;

                //For PCRs
                trFinalMaterialsBrandsRadioBefore.Visible = false;
                trFinalMaterialsBrands.Visible = false;
                trFinalMaterialsBrandsRadioAfter.Visible = false;
                trFinalPSRA.Visible = false;
                trFinalMaterialsBrandshead.Visible = false;
                trFinalPSRAhead.Visible = false;

                NewMaterialandBrandsReadOnlyFinal.Visible = false;
                trProdRegulatedProductRAQ2Final.Visible = false;
                PSandRAReadOnlyFinal.Visible = false;

                //Close Out Edit Fields
                CloseFirstSection.Visible = false;
                CloseActualCostSheet.Visible = false;
                CloseInitialLearningReport.Visible = false;
                CloseTestPlansUsed.Visible = false;
                CloseOutReport.Visible = false;
                CloseApprovals.Visible = false;
                CloseRevision.Visible = false;
                //Close Out Read only Fields
                CloseFirstSectionReadonly.Visible = true;
                CloseActualCostSheetReadonly.Visible = true;
                CloseInitialLearningReportReadOnly.Visible = true;
                CloseTestPlansUsedReadonly.Visible = true;
                CloseoutReportRO.Visible = true;
                CloseApprovalsReadonly.Visible = true;
            }
            else if ((Request.QueryString["From"] == "MailEdit" || Request.QueryString["From"] == "ForEOEdit") && ViewState["stage"].ToString().ToUpper() == "CloseOut".ToUpper() && ViewState["Status"].ToString().ToUpper() == "Approved".ToUpper())
            {
                btnSave.Visible = false;
                imgSaveResume.Visible = false;
                btnTabFinal.ImageUrl = "../Images/final-nor.gif";
                btnTabPreliminary.ImageUrl = "../Images/preliminary-nor.gif";
                btnTabCloseOut.ImageUrl = "../Images/close-out-over.gif";
                btnExportPilotLine.Visible = false;

                lblStageLevel.Text = "CloseOut";
                lblStatusType.Text = "Completed";

                imgPreRoute.Visible = false;
                imgPreFinalRoute.Visible = false;
                imgCloseOutRoute.Visible = false;
                //lblStageLevel.Text = ViewState["stage"]
                lblStatusType.Text = ViewState["Status"].ToString();
                lbCurrentStageDB.Text = ViewState["stage"].ToString();
                lbStatusDB.Text = ViewState["Status"].ToString();


                //Changed by chary Approved to complete 16/09/08
                if (ViewState["stage"].ToString().ToUpper() == "CloseOut".ToUpper())
                {
                    if (ViewState["Status"].ToString().ToUpper() == "Approved".ToUpper())
                    {
                        lbStatusDB.Text = "Completed";
                        lblStatusType.Text = "Completed";
                    }
                }


                tblTop.Visible = false;
                tblTopReadonly.Visible = true;
                FirstSectionPreliminary.Visible = false;
                TrGeneralPreliminaryRO.Visible = false;
                NewMaterialandBrands.Visible = false;
                NewMaterialandBrandsReadOnly.Visible = false;
                HSandSE.Visible = false;
                HSandSEReadOnly.Visible = false;
                PSandRA.Visible = false;
                PSandRAReadOnly.Visible = false;
                PlanningandBudgetInfo.Visible = false;
                PlanningandBudgetInfoReadOnly.Visible = false;
                ProductionandPackaging.Visible = false;
                ProductionandPackagingReadOnly.Visible = false;
                PackagingandDispositionPreliminary.Visible = false;
                PackagingandDispositionPreliminaryReadOnly.Visible = false;
                PreliminaryApprovals.Visible = false;
                PreliminaryApprovalsReadOnly.Visible = false;
                PreliminaryRevision.Visible = true;

                FinalPackagingandDisposition.Visible = false;
                FinalPackagingandDispositionReadOnly.Visible = false;
                FinalCostSheet.Visible = false;
                FinalCostSheetReadOnly.Visible = false;
                TrFinalQA.Visible = false;
                TrFinalQARO.Visible = false;
                FinalFormulaCardInformation.Visible = false;
                FinalFormulaCardInformationReadOnly.Visible = false;
                FinalTestPlans.Visible = false;
                FinalTestPlansReadOnly.Visible = false;
                LabSamplingPlans.Visible = false;
                LabSamplingPlansReadOnly.Visible = false;
                FinalProductTestFlowMatrix.Visible = false;
                FinalProductTestFlowMatrixReadonly.Visible = false;
                FinalOtherSupportingDoc.Visible = false;
                FinalOtherSupportingDocReadonly.Visible = false;
                FinalApprovals.Visible = false;
                FinalApprovalsReadOnly.Visible = false;

                FinalPackagingandDisposition.Visible = false;
                FinalPackagingandDispositionReadOnly.Visible = false;
                FinalCostSheet.Visible = false;
                FinalCostSheetReadOnly.Visible = false;
                TrFinalQA.Visible = false;
                TrFinalQARO.Visible = false;
                FinalFormulaCardInformation.Visible = false;
                FinalFormulaCardInformationReadOnly.Visible = false;
                FinalTestPlans.Visible = false;
                FinalTestPlansReadOnly.Visible = false;
                LabSamplingPlans.Visible = false;
                LabSamplingPlansReadOnly.Visible = false;
                FinalProductTestFlowMatrix.Visible = false;
                FinalProductTestFlowMatrixReadonly.Visible = false;
                FinalOtherSupportingDoc.Visible = false;
                FinalOtherSupportingDocReadonly.Visible = false;
                FinalApprovals.Visible = false;
                FinalApprovalsReadOnly.Visible = false;

                //For PCRs
                trFinalMaterialsBrandsRadioBefore.Visible = false;
                trFinalMaterialsBrands.Visible = false;
                trFinalMaterialsBrandsRadioAfter.Visible = false;
                trFinalPSRA.Visible = false;
                trFinalMaterialsBrandshead.Visible = false;
                trFinalPSRAhead.Visible = false;

                NewMaterialandBrandsReadOnlyFinal.Visible = false;
                trProdRegulatedProductRAQ2Final.Visible = false;
                PSandRAReadOnlyFinal.Visible = false;

                //Close Out Edit Fields
                CloseFirstSection.Visible = false;
                CloseActualCostSheet.Visible = false;
                CloseInitialLearningReport.Visible = false;
                CloseTestPlansUsed.Visible = false;
                CloseOutReport.Visible = false;
                CloseApprovals.Visible = false;
                CloseRevision.Visible = false;
                //Close Out Read only Fields
                CloseFirstSectionReadonly.Visible = true;
                CloseActualCostSheetReadonly.Visible = true;
                CloseInitialLearningReportReadOnly.Visible = true;
                CloseTestPlansUsedReadonly.Visible = true;
                CloseoutReportRO.Visible = true;
                CloseApprovalsReadonly.Visible = true;

            }
            else
            {
                carryappfinalco();
                btnTabFinal.ImageUrl = "../Images/final-nor.gif";
                btnTabPreliminary.ImageUrl = "../Images/preliminary-nor.gif";
                btnTabCloseOut.ImageUrl = "../Images/close-out-over.gif";
                imgPreRoute.Visible = false;
                imgPreFinalRoute.Visible = false;
                imgCloseOutRoute.Visible = false;
                if (ViewState["stage"] != null)
                    lbCurrentStageDB.Text = ViewState["stage"].ToString();
                if (ViewState["Status"] != null)
                    lbStatusDB.Text = ViewState["Status"].ToString();


                //Changed by chary Approved to complete 16/09/08
                if (ViewState["stage"] != null)
                {
                    if (ViewState["stage"].ToString().ToUpper() == "CloseOut".ToUpper())
                    {
                        if (ViewState["Status"].ToString().ToUpper() == "Approved".ToUpper())
                        {
                            lbStatusDB.Text = "Completed";
                        }
                    }
                }

                tblTop.Visible = true;
                tblTopReadonly.Visible = false;
                FirstSectionPreliminary.Visible = false;
                TrGeneralPreliminaryRO.Visible = false;
                NewMaterialandBrands.Visible = false;
                NewMaterialandBrandsReadOnly.Visible = false;
                HSandSE.Visible = false;
                HSandSEReadOnly.Visible = false;
                PSandRA.Visible = false;
                PSandRAReadOnly.Visible = false;
                PlanningandBudgetInfo.Visible = false;
                PlanningandBudgetInfoReadOnly.Visible = false;
                ProductionandPackaging.Visible = false;
                ProductionandPackagingReadOnly.Visible = false;
                PackagingandDispositionPreliminary.Visible = false;
                PackagingandDispositionPreliminaryReadOnly.Visible = false;
                PreliminaryApprovals.Visible = false;
                PreliminaryApprovalsReadOnly.Visible = false;
                PreliminaryRevision.Visible = true;

                FinalPackagingandDisposition.Visible = false;
                FinalPackagingandDispositionReadOnly.Visible = false;
                FinalCostSheet.Visible = false;
                FinalCostSheetReadOnly.Visible = false;
                TrFinalQA.Visible = false;
                TrFinalQARO.Visible = false;
                FinalFormulaCardInformation.Visible = false;
                FinalFormulaCardInformationReadOnly.Visible = false;
                FinalTestPlans.Visible = false;
                FinalTestPlansReadOnly.Visible = false;
                LabSamplingPlans.Visible = false;
                LabSamplingPlansReadOnly.Visible = false;
                FinalProductTestFlowMatrix.Visible = false;
                FinalProductTestFlowMatrixReadonly.Visible = false;
                FinalOtherSupportingDoc.Visible = false;
                FinalOtherSupportingDocReadonly.Visible = false;
                FinalApprovals.Visible = false;
                FinalApprovalsReadOnly.Visible = false;

                FinalPackagingandDisposition.Visible = false;
                FinalPackagingandDispositionReadOnly.Visible = false;
                FinalCostSheet.Visible = false;
                FinalCostSheetReadOnly.Visible = false;
                TrFinalQA.Visible = false;
                TrFinalQARO.Visible = false;
                FinalFormulaCardInformation.Visible = false;
                FinalFormulaCardInformationReadOnly.Visible = false;
                FinalTestPlans.Visible = false;
                FinalTestPlansReadOnly.Visible = false;
                LabSamplingPlans.Visible = false;
                LabSamplingPlansReadOnly.Visible = false;
                FinalProductTestFlowMatrix.Visible = false;
                FinalProductTestFlowMatrixReadonly.Visible = false;
                FinalOtherSupportingDoc.Visible = false;
                FinalOtherSupportingDocReadonly.Visible = false;
                FinalApprovals.Visible = false;
                FinalApprovalsReadOnly.Visible = false;

                //For PCRs
                trFinalMaterialsBrandsRadioBefore.Visible = false;
                trFinalMaterialsBrands.Visible = false;
                trFinalMaterialsBrandsRadioAfter.Visible = false;
                trFinalPSRA.Visible = false;
                trFinalMaterialsBrandshead.Visible = false;
                trFinalPSRAhead.Visible = false;

                NewMaterialandBrandsReadOnlyFinal.Visible = false;
                trProdRegulatedProductRAQ2Final.Visible = false;
                PSandRAReadOnlyFinal.Visible = false;

                //Close Out Edit Fields
                CloseFirstSection.Visible = true;
                CloseActualCostSheet.Visible = true;
                CloseInitialLearningReport.Visible = true;
                CloseTestPlansUsed.Visible = true;
                CloseOutReport.Visible = true;
                CloseApprovals.Visible = true;
                CloseRevision.Visible = true;
                //Close Out Read only Fields
                CloseActualCostSheetReadonly.Visible = false;
                CloseInitialLearningReportReadOnly.Visible = false;
                CloseTestPlansUsedReadonly.Visible = false;
                CloseoutReportRO.Visible = false;
                CloseApprovalsReadonly.Visible = false;
                lblStageLevel.Text = "CloseOut";
                lblStatusType.Text = "Draft";
                lnkbeforeFinTabRouApp.Visible = false;
            }
            closeOutApprovalCheck();

            string strOriginatorcheck = null;
            string strCooriginatorcheck = null;
            DataSet ds = new DataSet();


            if (objEOBA.GETEOMandatory(Convert.ToInt32(ViewState["EOID"]), ref ds))
            {
                if (ds != null)
                {
                    if (ds.Tables[0].Rows.Count != 0)
                    {
                        if (ds.Tables[0].Rows[0]["Originator"] != System.DBNull.Value)
                        {
                            strOriginatorcheck = ds.Tables[0].Rows[0]["Originator"].ToString();
                        }
                        else
                        {
                            strOriginatorcheck = string.Empty;
                        }

                        if (ds.Tables[0].Rows[0]["CoOriginator"] != System.DBNull.Value)
                        {
                            strCooriginatorcheck = ds.Tables[0].Rows[0]["CoOriginator"].ToString();
                        }
                        else
                        {
                            strCooriginatorcheck = string.Empty;
                        }
                    }

                    if ((strOriginatorcheck != null) && (strOriginatorcheck.ToUpper() == objSecurity.UserName.ToString().Trim().ToUpper()))
                    {
                        lockforapproverscloseouttabclick();
                    }
                    else
                    {
                        if (ViewState["stage"] != null)
                        {
                            if (ViewState["stage"].ToString().ToUpper() == "Preliminary".ToUpper() && ViewState["Status"].ToString().ToUpper() == "Routed".ToUpper())
                            {
                                lockforapproverscloseouttabclick();
                            }

                            if (ViewState["stage"].ToString().ToUpper() == "Final".ToUpper() && ViewState["Status"].ToString().ToUpper() == "Routed".ToUpper())
                            {
                                lockforapproverscloseouttabclick();
                            }
                        }

                    }
                }
            }
            btnTabFinal.ImageUrl = "../Images/final-nor.gif";
            btnTabPreliminary.ImageUrl = "../Images/preliminary-nor.gif";
            btnTabCloseOut.ImageUrl = "../Images/close-out-over.gif";
            if (ViewState["stage"] != null)
                lblStageLevel.Text = ViewState["stage"].ToString();
            if (ViewState["Status"] != null)
                lblStatusType.Text = ViewState["Status"].ToString();
        }

        protected void drpCategoryDB_SelectedIndexChanged(object sender, EventArgs e)
        {
            int intDrpValue = 0;
            intDrpValue = drpCategoryDB.SelectedIndex;
            if (intDrpValue == 0)
            {
                lbEOBrandsDB.Items.Clear();
            }
            else
            {
                DataSet dsBrand = new DataSet();


                if (objEOBA.FillListBoxWithBrands(drpCategoryDB.SelectedValue, ref dsBrand))
                {
                    lbEOBrandsDB.DataSource = dsBrand.Tables[0];
                    lbEOBrandsDB.DataTextField = "Brand_Segment_Name";
                    lbEOBrandsDB.DataValueField = "Brand_Segment_ID";
                    lbEOBrandsDB.DataBind();
                }
                else
                { return; }
            }
            lblEOSelectedBrandDB.Text = string.Empty;
        }

        protected void drpEOProjectsDB_SelectedIndexChanged(object sender, EventArgs e)
        {
            lbEOEventsDB.Items.Clear();
            FillListEvents();
        }

        protected void lbEOBrandsDB_SelectedIndexChanged(object sender, EventArgs e)
        {
            BrandSegmentSelect();
        }

        protected void drpEOScopeDB_SelectedIndexChanged(object sender, EventArgs e)
        {
            try
            {
                DataSet dsBudgetID = null;
                string strPlantID = null;
                try
                {
                    if (drpPlant.SelectedItem.Value == "--Select a Plant--")
                    {
                        strPlantID = "0";
                    }
                    else
                    {
                        strPlantID = drpPlant.SelectedItem.Value;
                    }
                }
                catch (Exception ex)
                {
                    strPlantID = "0";
                }

                try
                {

                    //dsBudgetID = objClsEO.GET_Budget_Centre_ID(drpEOScopeDB.SelectedValue, strPlantID);
                    if (objEOBA.GET_Budget_Centre_ID(Convert.ToInt32(drpEOScopeDB.SelectedValue), Convert.ToInt32(strPlantID), ref dsBudgetID))
                    {
                        if ((dsBudgetID != null))
                        {
                            if (!(dsBudgetID.Tables.Count == 0))
                            {
                                if (!(dsBudgetID.Tables[0].Rows.Count == 0))
                                {
                                    if ((!object.ReferenceEquals(dsBudgetID.Tables[0].Rows[0][1], System.DBNull.Value)))
                                    {
                                        txtSelectedBudgCenter.Text = dsBudgetID.Tables[0].Rows[0][1].ToString();
                                    }
                                    else
                                    {
                                        txtSelectedBudgCenter.Text = "";
                                    }
                                }
                                else
                                {
                                    txtSelectedBudgCenter.Text = "";
                                }
                            }
                            else
                            {
                                txtSelectedBudgCenter.Text = "";
                            }
                        }
                        else
                        {
                            txtSelectedBudgCenter.Text = "";
                        }
                    }
                }
                catch (Exception ex)
                {
                    txtSelectedBudgCenter.Text = "";
                }


            }
            catch (Exception ex)
            {
            }
        }

        protected void lnkBudgetApproved_Click(object sender, EventArgs e)
        {
            int intResult;
            intResult = GET_EO_Lock_Status_Approve();
            if (intResult == 5)
            {
                return;
            }

            //string script = null;
            //script = "<script>ApproverConfirm('" + ViewState["EOID"] + "','" + ViewState["stage"] + "','Budget Center','Y');</script> ";
            //Page.RegisterStartupScript("db_error_message", script);

            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "ApproverConfirm('" + ViewState["EOID"] + "','" + ViewState["stage"] + "','Budget Center','Y');", true);
        }

        protected void drpPlant_SelectedIndexChanged(object sender, EventArgs e)
        {
            fillSelectedPlantDetails();
        }

        protected void imgAddAttachments_Click(object sender, ImageClickEventArgs e)
        {
            if ((Page.IsPostBack == true))
            {
                if (!string.IsNullOrEmpty(txtAddPertaingEO.Value))
                {
                    //script = "<script>alert('Attachment will be inserted into the database after the EO is submitted')</script>";
                    //Page.RegisterStartupScript("clientscript", script);
                    ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "alert('Attachment will be inserted into the database after the EO is submitted.');", true);

                    hif.Add(txtAddPertaingEO);
                    string strFullPostFileName = txtAddPertaingEO.PostedFile.FileName;
                    string strPostFileName = strFullPostFileName.Substring(strFullPostFileName.LastIndexOf("\\") + 1, (strFullPostFileName.Length - 1) - (strFullPostFileName.LastIndexOf("\\")));
                    lbAddItemsEO.Items.Add(strPostFileName);
                }
            }
        }

        protected void imgAddAttachFinalCostSheet_Click(object sender, ImageClickEventArgs e)
        {
            if ((Page.IsPostBack == true))
            {
                if (!string.IsNullOrEmpty(CSAttachments.Value))
                {
                    //script = "<script>alert('Attachment will be inserted into the database after the EO is submitted')</script>";
                    //Page.RegisterStartupScript("clientscript", script);
                    ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "alert('Attachment will be inserted into the database after the EO is submitted.');", true);

                    arCostSheet.Add(CSAttachments);
                    string strFullPostFileName = CSAttachments.PostedFile.FileName;
                    string strPostFileName = strFullPostFileName.Substring(strFullPostFileName.LastIndexOf("\\") + 1, (strFullPostFileName.Length - 1) - (strFullPostFileName.LastIndexOf("\\")));
                    lbCostSheetAttach.Items.Add(strPostFileName);
                }
            }
        }

        protected void imgAddAttachFinalQA_Click(object sender, ImageClickEventArgs e)
        {
            if ((Page.IsPostBack == true))
            {
                if (!string.IsNullOrEmpty(FinalQAAttach.Value))
                {
                    //script = "<script>alert('Attachment will be inserted into the database after the EO is submitted')</script>";
                    //Page.RegisterStartupScript("clientscript", script);
                    ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "alert('Attachment will be inserted into the database after the EO is submitted.');", true);
                    arQAFinal.Add(FinalQAAttach);
                    string strFullPostFileName = FinalQAAttach.PostedFile.FileName;
                    string strPostFileName = strFullPostFileName.Substring(strFullPostFileName.LastIndexOf("\\") + 1, (strFullPostFileName.Length - 1) - (strFullPostFileName.LastIndexOf("\\")));
                    lbFinalQAAttach.Items.Add(strPostFileName);
                }
            }
        }


        protected void imgAddAttchFinalFormulaCard_Click(object sender, ImageClickEventArgs e)
        {
            if ((Page.IsPostBack == true))
            {
                if (!string.IsNullOrEmpty(txtFCAttachment.Value))
                {
                    //script = "<script>alert('Attachment will be inserted into the database after the EO is submitted')</script>";
                    //Page.RegisterStartupScript("clientscript", script);

                    ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "alert('Attachment will be inserted into the database after the EO is submitted.');", true);
                    arFormulaCardInfo.Add(txtFCAttachment);
                    string strFullPostFileName = txtFCAttachment.PostedFile.FileName;
                    string strPostFileName = strFullPostFileName.Substring(strFullPostFileName.LastIndexOf("\\") + 1, (strFullPostFileName.Length - 1) - (strFullPostFileName.LastIndexOf("\\")));
                    lbFormulaCardAttach.Items.Add(strPostFileName);
                }
            }
        }

        protected void imgAddAttchFinalTestPlans_Click(object sender, ImageClickEventArgs e)
        {
            if ((Page.IsPostBack == true))
            {
                if (!string.IsNullOrEmpty(txtTPAttachment.Value))
                {
                    //script = "<script>alert('Attachment will be inserted into the database after the EO is submitted')</script>";
                    //Page.RegisterStartupScript("clientscript", script);

                    ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "alert('Attachment will be inserted into the database after the EO is submitted.');", true);
                    arTestPlans.Add(txtTPAttachment);
                    string strFullPostFileName = txtTPAttachment.PostedFile.FileName;
                    string strPostFileName = strFullPostFileName.Substring(strFullPostFileName.LastIndexOf("\\") + 1, (strFullPostFileName.Length - 1) - (strFullPostFileName.LastIndexOf("\\")));
                    lbTestPlansAttach.Items.Add(strPostFileName);
                }
            }
        }

        protected void imgAddAttchFinalLabSamples_Click(object sender, ImageClickEventArgs e)
        {
            if ((Page.IsPostBack == true))
            {
                if (!string.IsNullOrEmpty(txtLSAttachment.Value))
                {
                    //script = "<script>alert('Attachment will be inserted into the database after the EO is submitted')</script>";
                    //Page.RegisterStartupScript("clientscript", script);

                    ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "alert('Attachment will be inserted into the database after the EO is submitted.');", true);
                    arLabSamples.Add(txtLSAttachment);
                    string strFullPostFileName = txtLSAttachment.PostedFile.FileName;
                    string strPostFileName = strFullPostFileName.Substring(strFullPostFileName.LastIndexOf("\\") + 1, (strFullPostFileName.Length - 1) - (strFullPostFileName.LastIndexOf("\\")));
                    lbLabSampleAttach.Items.Add(strPostFileName);
                }
            }
        }

        protected void imgAddAttchFinalFlowMatrix_Click(object sender, ImageClickEventArgs e)
        {
            if ((Page.IsPostBack == true))
            {
                if (!string.IsNullOrEmpty(txtPTFAttachment.Value))
                {
                    //script = "<script>alert('Attachment will be inserted into the database after the EO is submitted')</script>";
                    //Page.RegisterStartupScript("clientscript", script);

                    ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "alert('Attachment will be inserted into the database after the EO is submitted.');", true);
                    arProdTestFlowMatrix.Add(txtPTFAttachment);
                    string strFullPostFileName = txtPTFAttachment.PostedFile.FileName;
                    string strPostFileName = strFullPostFileName.Substring(strFullPostFileName.LastIndexOf("\\") + 1, (strFullPostFileName.Length - 1) - (strFullPostFileName.LastIndexOf("\\")));
                    lbFlowMatrixAttach.Items.Add(strPostFileName);
                }
            }
        }



        protected void imgAddAttchFinalOtherSup_Click(object sender, ImageClickEventArgs e)
        {
            if ((Page.IsPostBack == true))
            {
                if (!string.IsNullOrEmpty(txtODAttachment.Value))
                {
                    //script = "<script>alert('Attachment will be inserted into the database after the EO is submitted')</script>";
                    //Page.RegisterStartupScript("clientscript", script);
                    ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "alert('Attachment will be inserted into the database after the EO is submitted.');", true);
                    arOtherSupp.Add(txtODAttachment);
                    string strFullPostFileName = txtODAttachment.PostedFile.FileName;
                    string strPostFileName = strFullPostFileName.Substring(strFullPostFileName.LastIndexOf("\\") + 1, (strFullPostFileName.Length - 1) - (strFullPostFileName.LastIndexOf("\\")));
                    lbSupDocAttach.Items.Add(strPostFileName);
                }
            }
        }

        protected void imgAddAttchCOFinalCost_Click(object sender, ImageClickEventArgs e)
        {
            if ((Page.IsPostBack == true))
            {
                if (!string.IsNullOrEmpty(txtACAttachment.Value))
                {
                    //script = "<script>alert('Attachment will be inserted into the database after the EO is submitted')</script>";
                    //Page.RegisterStartupScript("clientscript", script);
                    ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "alert('Attachment will be inserted into the database after the EO is submitted.');", true);
                    arActualCostSheet.Add(txtACAttachment);
                    string strFullPostFileName = txtACAttachment.PostedFile.FileName;
                    string strPostFileName = strFullPostFileName.Substring(strFullPostFileName.LastIndexOf("\\") + 1, (strFullPostFileName.Length - 1) - (strFullPostFileName.LastIndexOf("\\")));
                    lbFinalCostAttach.Items.Add(strPostFileName);
                }

            }
        }





        protected void lnkFinAdditionalApprover4Approved_Click(object sender, EventArgs e)
        {
            int intResult;
            intResult = GET_EO_Lock_Status_Approve();
            if (intResult == 5)
            {
                return;
            }
            //string script = null;
            //script = "<script>ApproverConfirm('" + ViewState["EOID"] + "','" + ViewState["stage"] + "','Additional approver4','Y');</script> ";
            //Page.RegisterStartupScript("db_error_message", script);

            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "ApproverConfirm('" + ViewState["EOID"] + "','" + ViewState["stage"] + "','Additional approver4','Y');", true);
        }

        protected void lnkFinAdditionalApprover4Declined_Click(object sender, EventArgs e)
        {
            int intResult;
            intResult = GET_EO_Lock_Status_Approve();
            if (intResult == 5)
            {
                return;
            }

            //string script = null;
            //script = "<script>ApproverConfirm('" + ViewState["EOID"] + "','" + ViewState["stage"] + "','Additional approver4','N');</script> ";
            //Page.RegisterStartupScript("db_error_message", script);

            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "ApproverConfirm('" + ViewState["EOID"] + "','" + ViewState["stage"] + "','Additional approver4','N');", true);
        }

        protected void lnkFinAdditionalApprover4BackUp_Click(object sender, EventArgs e)
        {
            int intResult;
            intResult = GET_EO_Lock_Status_Approve();
            if (intResult == 5)
            {
                return;
            }

            string script = null;
            string strFuncName = "Additional approver4";
            //lblFinalAdditionalApprover4.Text.Trim
            string strPlantID = drpPlant.SelectedItem.Value;
            if (strPlantID == "--Select a Plant--")
            {
                strPlantID = "0";
            }
            //script = "<script>window.open('ChangeApprover.aspx?FuncName=" + strFuncName + "&OriginalApprover=" + lblAdditionalApprover4FinalAppGrp.Text.Trim() + "&EOID=" + ViewState["EOID"] + "&PlantID=" + strPlantID + "&From=BackUp','Approvers','height=200,width=400');</script>";
            //Page.RegisterStartupScript("clientscript", script);

            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "window.open('ChangeApprover.aspx?FuncName=" + strFuncName + "&OriginalApprover=" + lblAdditionalApprover4FinalAppGrp.Text.Trim() + "&EOID=" + ViewState["EOID"] + "&PlantID=" + strPlantID + "&From=BackUp','Approvers','height=200,width=400');", true);
        }

        protected void lnkFinAdditionalApprover3Approved_Click(object sender, EventArgs e)
        {
            int intResult;
            intResult = GET_EO_Lock_Status_Approve();
            if (intResult == 5)
            {
                return;
            }
            //string script = null;
            //script = "<script>ApproverConfirm('" + ViewState["EOID"] + "','" + ViewState["stage"] + "','Additional approver3','Y');</script> ";
            //Page.RegisterStartupScript("db_error_message", script);

            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "ApproverConfirm('" + ViewState["EOID"] + "','" + ViewState["stage"] + "','Additional approver3','Y');", true);
        }

        protected void lnkFinAdditionalApprover3Declined_Click(object sender, EventArgs e)
        {
            int intResult;
            intResult = GET_EO_Lock_Status_Approve();
            if (intResult == 5)
            {
                return;
            }

            //string script = null;
            //script = "<script>ApproverConfirm('" + ViewState["EOID"] + "','" + ViewState["stage"] + "','Additional approver3','N');</script> ";
            //Page.RegisterStartupScript("db_error_message", script);

            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "ApproverConfirm('" + ViewState["EOID"] + "','" + ViewState["stage"] + "','Additional approver3','N');", true);
        }

        protected void lnkFinAdditionalApprover3BackUp_Click(object sender, EventArgs e)
        {
            int intResult;
            intResult = GET_EO_Lock_Status_Approve();
            if (intResult == 5)
            {
                return;
            }

            string script = null;
            string strFuncName = "Additional approver3";
            //lblFinalAdditionalApprover3.Text.Trim
            string strPlantID = drpPlant.SelectedItem.Value;
            if (strPlantID == "--Select a Plant--")
            {
                strPlantID = "0";
            }
            //script = "<script>window.open('ChangeApprover.aspx?FuncName=" + strFuncName + "&OriginalApprover=" + lblAdditionalApprover3FinalAppGrp.Text.Trim() + "&EOID=" + ViewState["EOID"] + "&PlantID=" + strPlantID + "&From=BackUp','Approvers','height=200,width=400');</script>";
            //Page.RegisterStartupScript("clientscript", script);

            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "window.open('ChangeApprover.aspx?FuncName=" + strFuncName + "&OriginalApprover=" + lblAdditionalApprover3FinalAppGrp.Text.Trim() + "&EOID=" + ViewState["EOID"] + "&PlantID=" + strPlantID + "&From=BackUp','Approvers','height=200,width=400');", true);
        }

        protected void lnkFinAdditionalApprover2Approved_Click(object sender, EventArgs e)
        {
            int intResult;
            intResult = GET_EO_Lock_Status_Approve();
            if (intResult == 5)
            {
                return;
            }
            //string script = null;
            //script = "<script>ApproverConfirm('" + ViewState["EOID"] + "','" + ViewState["stage"] + "','Additional approver2','Y');</script> ";
            //Page.RegisterStartupScript("db_error_message", script);

            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "ApproverConfirm('" + ViewState["EOID"] + "','" + ViewState["stage"] + "','Additional approver2','Y');", true);
        }

        protected void lnkFinAdditionalApprover2Declined_Click(object sender, EventArgs e)
        {
            int intResult;
            intResult = GET_EO_Lock_Status_Approve();
            if (intResult == 5)
            {
                return;
            }

            //string script = null;
            //script = "<script>ApproverConfirm('" + ViewState["EOID"] + "','" + ViewState["stage"] + "','Additional approver2','N');</script> ";
            //Page.RegisterStartupScript("db_error_message", script);

            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "ApproverConfirm('" + ViewState["EOID"] + "','" + ViewState["stage"] + "','Additional approver2','N');", true);
        }

        protected void lnkFinAdditionalApprover2BackUp_Click(object sender, EventArgs e)
        {
            int intResult;
            intResult = GET_EO_Lock_Status_Approve();
            if (intResult == 5)
            {
                return;
            }

            string script = null;
            string strFuncName = "Additional approver2";
            //lblFinalAdditionalApprover2.Text.Trim
            string strPlantID = drpPlant.SelectedItem.Value;
            if (strPlantID == "--Select a Plant--")
            {
                strPlantID = "0";
            }
            //script = "<script>window.open('ChangeApprover.aspx?FuncName=" + strFuncName + "&OriginalApprover=" + lblAdditionalApprover2FinalAppGrp.Text.Trim() + "&EOID=" + ViewState["EOID"] + "&PlantID=" + strPlantID + "&From=BackUp','Approvers','height=200,width=400');</script>";
            //Page.RegisterStartupScript("clientscript", script);

            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "window.open('ChangeApprover.aspx?FuncName=" + strFuncName + "&OriginalApprover=" + lblAdditionalApprover2FinalAppGrp.Text.Trim() + "&EOID=" + ViewState["EOID"] + "&PlantID=" + strPlantID + "&From=BackUp','Approvers','height=200,width=400');", true);
        }

        protected void lnkFinAdditionalApprover1BackUp_Click(object sender, EventArgs e)
        {
            int intResult;
            intResult = GET_EO_Lock_Status_Approve();
            if (intResult == 5)
            {
                return;
            }

            string script = null;
            string strFuncName = "Additional approver1";
            //lblFinalAdditionalApprover1.Text.Trim
            string strPlantID = drpPlant.SelectedItem.Value;
            if (strPlantID == "--Select a Plant--")
            {
                strPlantID = "0";
            }
            //script = "<script>window.open('ChangeApprover.aspx?FuncName=" + strFuncName + "&OriginalApprover=" + lblAdditionalApprover1FinalAppGrp.Text.Trim() + "&EOID=" + ViewState["EOID"] + "&PlantID=" + strPlantID + "&From=BackUp','Approvers','height=200,width=400');</script>";
            //Page.RegisterStartupScript("clientscript", script);

            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "window.open('ChangeApprover.aspx?FuncName=" + strFuncName + "&OriginalApprover=" + lblAdditionalApprover1FinalAppGrp.Text.Trim() + "&EOID=" + ViewState["EOID"] + "&PlantID=" + strPlantID + "&From=BackUp','Approvers','height=200,width=400');", true);
        }

        protected void lnkFinAdditionalApprover1Declined_Click(object sender, EventArgs e)
        {
            int intResult;
            intResult = GET_EO_Lock_Status_Approve();
            if (intResult == 5)
            {
                return;
            }

            //string script = null;
            //script = "<script>ApproverConfirm('" + ViewState["EOID"] + "','" + ViewState["stage"] + "','Additional approver1','N');</script> ";
            //Page.RegisterStartupScript("db_error_message", script);

            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "ApproverConfirm('" + ViewState["EOID"] + "','" + ViewState["stage"] + "','Additional approver1','N');", true);
        }

        protected void lnkFinAdditionalApprover1Approved_Click(object sender, EventArgs e)
        {
            int intResult;
            intResult = GET_EO_Lock_Status_Approve();
            if (intResult == 5)
            {
                return;
            }
            //string script = null;
            //script = "<script>ApproverConfirm('" + ViewState["EOID"] + "','" + ViewState["stage"] + "','Additional approver1','Y');</script> ";
            //Page.RegisterStartupScript("db_error_message", script);

            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "ApproverConfirm('" + ViewState["EOID"] + "','" + ViewState["stage"] + "','Additional approver1','Y');", true);
        }

        protected void lnkStndsOffiBackUp_Click(object sender, EventArgs e)
        {
            int intResult;
            intResult = GET_EO_Lock_Status_Approve();
            if (intResult == 5)
            {
                return;
            }

            string script = null;
            string strFuncName = lblFinalAppgrpStandsOffice.Text.Trim();
            string strPlantID = drpPlant.SelectedItem.Value;
            if (strPlantID == "--Select a Plant--")
            {
                strPlantID = "0";
            }
            //script = "<script>window.open('ChangeApprover.aspx?FuncName=" + strFuncName + "&OriginalApprover=" + lblStandsOfficeFinalAppGrp.Text.Trim() + "&EOID=" + ViewState["EOID"] + "&PlantID=" + strPlantID + "&From=BackUp','Approvers','height=200,width=400');</script>";
            //Page.RegisterStartupScript("clientscript", script);

            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "window.open('ChangeApprover.aspx?FuncName=" + strFuncName + "&OriginalApprover=" + lblStandsOfficeFinalAppGrp.Text.Trim() + "&EOID=" + ViewState["EOID"] + "&PlantID=" + strPlantID + "&From=BackUp','Approvers','height=200,width=400');", true);
        }

        protected void lnkFinStandardOfficeDeclined_Click(object sender, EventArgs e)
        {
            int intResult;
            intResult = GET_EO_Lock_Status_Approve();
            if (intResult == 5)
            {
                return;
            }

            //string script = null;
            //script = "<script>ApproverConfirm('" + ViewState["EOID"] + "','" + ViewState["stage"] + "','Standards Office','N');</script> ";
            //Page.RegisterStartupScript("db_error_message", script);

            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "ApproverConfirm('" + ViewState["EOID"] + "','" + ViewState["stage"] + "','Standards Office','N');", true);
        }

        protected void lnkFinStandardOfficeApproved_Click(object sender, EventArgs e)
        {
            int intResult;
            intResult = GET_EO_Lock_Status_Approve();
            if (intResult == 5)
            {
                return;
            }
            //string script = null;
            //script = "<script>ApproverConfirm('" + ViewState["EOID"] + "','" + ViewState["stage"] + "','Standards Office','Y');</script> ";
            //Page.RegisterStartupScript("db_error_message", script);

            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "ApproverConfirm('" + ViewState["EOID"] + "','" + ViewState["stage"] + "','Standards Office','Y');", true);
        }

        protected void lnkFinCentralQAApproved_Click(object sender, EventArgs e)
        {
            int intResult;
            intResult = GET_EO_Lock_Status_Approve();
            if (intResult == 5)
            {
                return;
            }

            //string script = null;
            //script = "<script>ApproverConfirm('" + ViewState["EOID"] + "','" + ViewState["stage"] + "','Central QA','Y');</script>";
            //Page.RegisterStartupScript("db_error_message", script);

            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "ApproverConfirm('" + ViewState["EOID"] + "','" + ViewState["stage"] + "','Central QA','Y');", true);
        }

        protected void lnkFinCentralQADeclined_Click(object sender, EventArgs e)
        {
            int intResult;
            intResult = GET_EO_Lock_Status_Approve();
            if (intResult == 5)
            {
                return;
            }

            //string script = null;
            //script = "<script>ApproverConfirm('" + ViewState["EOID"] + "','" + ViewState["stage"] + "','Central QA','N');</script> ";
            //Page.RegisterStartupScript("db_error_message", script);

            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "ApproverConfirm('" + ViewState["EOID"] + "','" + ViewState["stage"] + "','Central QA','N');", true);
        }

        protected void lnkFinQAApproved_Click(object sender, EventArgs e)
        {
            int intResult;
            intResult = GET_EO_Lock_Status_Approve();
            if (intResult == 5)
            {
                return;
            }

            //string script = null;
            //script = "<script>ApproverConfirm('" + ViewState["EOID"] + "','" + ViewState["stage"] + "','QA','Y');</script> ";
            //Page.RegisterStartupScript("db_error_message", script);

            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "ApproverConfirm('" + ViewState["EOID"] + "','" + ViewState["stage"] + "','QA','Y');", true);
        }

        protected void lnkFinQADeclined_Click(object sender, EventArgs e)
        {
            int intResult;
            intResult = GET_EO_Lock_Status_Approve();
            if (intResult == 5)
            {
                return;
            }
            //string script = null;
            //script = "<script>ApproverConfirm('" + ViewState["EOID"] + "','" + ViewState["stage"] + "','QA','N');</script> ";
            //Page.RegisterStartupScript("db_error_message", script);

            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "ApproverConfirm('" + ViewState["EOID"] + "','" + ViewState["stage"] + "','QA','N');", true);
        }

        protected void lnkFinalQABackUp_Click(object sender, EventArgs e)
        {
            int intResult;
            intResult = GET_EO_Lock_Status_Approve();
            if (intResult == 5)
            {
                return;
            }

            string script = null;
            string strFuncName = lblFinalAppgrpQA.Text.Trim();
            string strPlantID = drpPlant.SelectedItem.Value;
            if (strPlantID == "--Select a Plant--")
            {
                strPlantID = "0";
            }
            //script = "<script>window.open('ChangeApprover.aspx?FuncName=" + strFuncName + "&OriginalApprover=" + lblQAFinalAppGrp.Text.Trim() + "&EOID=" + ViewState["EOID"] + "&PlantID=" + strPlantID + "&From=BackUp','Approvers','height=200,width=400');</script>";
            //Page.RegisterStartupScript("clientscript", script);

            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "window.open('ChangeApprover.aspx?FuncName=" + strFuncName + "&OriginalApprover=" + lblQAFinalAppGrp.Text.Trim() + "&EOID=" + ViewState["EOID"] + "&PlantID=" + strPlantID + "&From=BackUp','Approvers','height=200,width=400');", true);
        }

        protected void lnkFinTimingGateApproved_Click(object sender, EventArgs e)
        {
            int intResult;
            intResult = GET_EO_Lock_Status_Approve();
            if (intResult == 5)
            {
                return;
            }

            //string script = null;
            //script = "<script>ApproverConfirm('" + ViewState["EOID"] + "','" + ViewState["stage"] + "','Timing Gate Exception','Y');</script> ";
            //Page.RegisterStartupScript("db_error_message", script);

            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "ApproverConfirm('" + ViewState["EOID"] + "','" + ViewState["stage"] + "','Timing Gate Exception','Y');", true);
        }


        protected void lnkFinTimingGateDeclined_Click(object sender, EventArgs e)
        {
            int intResult;
            intResult = GET_EO_Lock_Status_Approve();
            if (intResult == 5)
            {
                return;
            }

            //string script = null;
            //script = "<script>ApproverConfirm('" + ViewState["EOID"] + "','" + ViewState["stage"] + "','Timing Gate Exception','N');</script> ";
            //Page.RegisterStartupScript("db_error_message", script);

            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "ApproverConfirm('" + ViewState["EOID"] + "','" + ViewState["stage"] + "','Timing Gate Exception','N');", true);
        }

        protected void lnkFinalTimingGateBackUp_Click(object sender, EventArgs e)
        {
            int intResult;
            intResult = GET_EO_Lock_Status_Approve();
            if (intResult == 5)
            {
                return;
            }
            string script = null;
            string strFuncName = lblFinalAppgrpTimingGate.Text.Trim();
            string strPlantID = drpPlant.SelectedItem.Value;
            if (strPlantID == "--Select a Plant--")
            {
                strPlantID = "0";
            }
            //script = "<script>window.open('ChangeApprover.aspx?FuncName=" + strFuncName + "&OriginalApprover=" + lblTimingGateFinalAppGrp.Text.Trim() + "&EOID=" + ViewState["EOID"] + "&PlantID=" + strPlantID + "&From=BackUp','Approvers','height=200,width=400');</script>";
            //Page.RegisterStartupScript("clientscript", script);

            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "window.open('ChangeApprover.aspx?FuncName=" + strFuncName + "&OriginalApprover=" + lblTimingGateFinalAppGrp.Text.Trim() + "&EOID=" + ViewState["EOID"] + "&PlantID=" + strPlantID + "&From=BackUp','Approvers','height=200,width=400');", true);
        }

        protected void lnkFinalPSRABackUp_Click(object sender, EventArgs e)
        {
            int intResult;
            intResult = GET_EO_Lock_Status_Approve();
            if (intResult == 5)
            {
                return;
            }
            string script = null;
            string strFuncName = lblFinalAppgrpPSRA.Text.Trim();
            string strPlantID = drpPlant.SelectedItem.Value;
            if (strPlantID == "--Select a Plant--")
            {
                strPlantID = "0";
            }
            //script = "<script>window.open('ChangeApprover.aspx?FuncName=" + strFuncName + "&OriginalApprover=" + lblPSRAFinalAppGrp.Text.Trim() + "&EOID=" + ViewState["EOID"] + "&PlantID=" + strPlantID + "&From=BackUp','Approvers','height=200,width=400');</script>";
            //Page.RegisterStartupScript("clientscript", script);

            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "window.open('ChangeApprover.aspx?FuncName=" + strFuncName + "&OriginalApprover=" + lblPSRAFinalAppGrp.Text.Trim() + "&EOID=" + ViewState["EOID"] + "&PlantID=" + strPlantID + "&From=BackUp','Approvers','height=200,width=400');", true);
        }

        protected void lnkFinPSRADeclined_Click(object sender, EventArgs e)
        {
            int intResult;
            intResult = GET_EO_Lock_Status_Approve();
            if (intResult == 5)
            {
                return;
            }
            //string script = null;
            //script = "<script>ApproverConfirm('" + ViewState["EOID"] + "','" + ViewState["stage"] + "','PS_RA','N');</script> ";
            //Page.RegisterStartupScript("db_error_message", script);

            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "ApproverConfirm('" + ViewState["EOID"] + "','" + ViewState["stage"] + "','PS_RA','N');", true);
        }

        protected void lnkFinPSRAApproved_Click(object sender, EventArgs e)
        {
            int intResult;
            intResult = GET_EO_Lock_Status_Approve();
            if (intResult == 5)
            {
                return;
            }

            //string script = null;
            //script = "<script>ApproverConfirm('" + ViewState["EOID"] + "','" + ViewState["stage"] + "','PS_RA','Y');</script> ";
            //Page.RegisterStartupScript("db_error_message", script);

            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "ApproverConfirm('" + ViewState["EOID"] + "','" + ViewState["stage"] + "','PS_RA','Y');", true);
        }

        protected void lnkFinSiteLeadershipApproved_Click(object sender, EventArgs e)
        {
            int intResult;
            intResult = GET_EO_Lock_Status_Approve();
            if (intResult == 5)
            {
                return;
            }
            //string script = null;
            //script = "<script>ApproverConfirm('" + ViewState["EOID"] + "','" + ViewState["stage"] + "','Site Leadership','Y');</script> ";
            //Page.RegisterStartupScript("db_error_message", script);
            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "ApproverConfirm('" + ViewState["EOID"] + "','" + ViewState["stage"] + "','Site Leadership','Y');", true);

        }

        protected void lnkFinSiteLeadershipDeclined_Click(object sender, EventArgs e)
        {
            int intResult;
            intResult = GET_EO_Lock_Status_Approve();
            if (intResult == 5)
            {
                return;
            }

            //string script = null;
            //script = "<script>ApproverConfirm('" + ViewState["EOID"] + "','" + ViewState["stage"] + "','Site Leadership','N');</script> ";
            //Page.RegisterStartupScript("db_error_message", script);

            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "ApproverConfirm('" + ViewState["EOID"] + "','" + ViewState["stage"] + "','Site Leadership','N');", true);
        }

        protected void lnkFinalSiteSiteLeadBackUp_Click(object sender, EventArgs e)
        {
            int intResult;
            intResult = GET_EO_Lock_Status_Approve();
            if (intResult == 5)
            {
                return;
            }

            string script = null;
            string strFuncName = lblFinalAppgrpSiteLeaderShip.Text.Trim();
            string strPlantID = drpPlant.SelectedItem.Value;
            if (strPlantID == "--Select a Plant--")
            {
                strPlantID = "0";
            }
            //script = "<script>window.open('ChangeApprover.aspx?FuncName=" + strFuncName + "&OriginalApprover=" + lblSiteLeadeshipFinalAppGrp.Text.Trim() + "&EOID=" + ViewState["EOID"] + "&PlantID=" + strPlantID + "&From=BackUp','Approvers','height=200,width=400');</script>";
            //Page.RegisterStartupScript("clientscript", script);

            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "window.open('ChangeApprover.aspx?FuncName=" + strFuncName + "&OriginalApprover=" + lblSiteLeadeshipFinalAppGrp.Text.Trim() + "&EOID=" + ViewState["EOID"] + "&PlantID=" + strPlantID + "&From=BackUp','Approvers','height=200,width=400');", true);
        }

        protected void lnkFinSiteFinanceApproved_Click(object sender, EventArgs e)
        {
            int intResult;
            intResult = GET_EO_Lock_Status_Approve();
            if (intResult == 5)
            {
                return;
            }


            //string script = null;
            //script = "<script>ApproverConfirm('" + ViewState["EOID"] + "','" + ViewState["stage"] + "','Site Finance','Y');</script> ";
            //Page.RegisterStartupScript("db_error_message", script);

            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "ApproverConfirm('" + ViewState["EOID"] + "','" + ViewState["stage"] + "','Site Finance','Y');", true);
        }

        protected void lnkFinSiteFinananceDeclined_Click(object sender, EventArgs e)
        {
            int intResult;
            intResult = GET_EO_Lock_Status_Approve();
            if (intResult == 5)
            {
                return;
            }
            //string script = null;
            //script = "<script>ApproverConfirm('" + ViewState["EOID"] + "','" + ViewState["stage"] + "','Site Finance','N');</script> ";
            //Page.RegisterStartupScript("db_error_message", script);

            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "ApproverConfirm('" + ViewState["EOID"] + "','" + ViewState["stage"] + "','Site Finance','N');", true);
        }

        protected void lnkFinalSiteSiteFanBackUp_Click(object sender, EventArgs e)
        {
            int intResult;
            intResult = GET_EO_Lock_Status_Approve();
            if (intResult == 5)
            {
                return;
            }

            string script = null;
            string strFuncName = lblFinalAppgrpSiteFinance.Text.Trim();
            string strPlantID = drpPlant.SelectedItem.Value;
            if (strPlantID == "--Select a Plant--")
            {
                strPlantID = "0";
            }
            //script = "<script>window.open('ChangeApprover.aspx?FuncName=" + strFuncName + "&OriginalApprover=" + lblSiteFinanceFinalAppGrp.Text.Trim() + "&EOID=" + ViewState["EOID"] + "&PlantID=" + strPlantID + "&From=BackUp','Approvers','height=200,width=400');</script>";
            //Page.RegisterStartupScript("clientscript", script);

            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "window.open('ChangeApprover.aspx?FuncName=" + strFuncName + "&OriginalApprover=" + lblSiteFinanceFinalAppGrp.Text.Trim() + "&EOID=" + ViewState["EOID"] + "&PlantID=" + strPlantID + "&From=BackUp','Approvers','height=200,width=400');", true);
        }

        protected void lnkFinSiteContactApproved_Click(object sender, EventArgs e)
        {
            int intResult;
            intResult = GET_EO_Lock_Status_Approve();
            if (intResult == 5)
            {
                return;
            }

            //string script = null;
            //script = "<script>ApproverConfirm('" + ViewState["EOID"] + "','" + ViewState["stage"] + "','Site Contact','Y');</script> ";
            //Page.RegisterStartupScript("db_error_message", script);

            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "ApproverConfirm('" + ViewState["EOID"] + "','" + ViewState["stage"] + "','Site Contact','Y');", true);
        }

        protected void lnkFinSiteContactDeclined_Click(object sender, EventArgs e)
        {
            int intResult;
            intResult = GET_EO_Lock_Status_Approve();
            if (intResult == 5)
            {
                return;
            }

            //string script = null;
            //script = "<script>ApproverConfirm('" + ViewState["EOID"] + "','" + ViewState["stage"] + "','Site Contact','N');</script> ";
            //Page.RegisterStartupScript("db_error_message", script);

            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "ApproverConfirm('" + ViewState["EOID"] + "','" + ViewState["stage"] + "','Site Contact','N');", true);
        }

        protected void lnkFinalSiteBackUp_Click(object sender, EventArgs e)
        {
            int intResult;
            intResult = GET_EO_Lock_Status_Approve();
            if (intResult == 5)
            {
                return;
            }

            string script = null;
            string strFuncName = lblFinalAppgrpSiteContact.Text.Trim();
            string strPlantID = drpPlant.SelectedItem.Value;
            if (strPlantID == "--Select a Plant--")
            {
                strPlantID = "0";
            }
            //script = "<script>window.open('ChangeApprover.aspx?FuncName=" + strFuncName + "&OriginalApprover=" + lblSiteContactFinalAppGrp.Text.Trim() + "&EOID=" + ViewState["EOID"] + "&PlantID=" + strPlantID + "&From=BackUp','Approvers','height=200,width=400');</script>";
            //Page.RegisterStartupScript("clientscript", script);

            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "window.open('ChangeApprover.aspx?FuncName=" + strFuncName + "&OriginalApprover=" + lblSiteContactFinalAppGrp.Text.Trim() + "&EOID=" + ViewState["EOID"] + "&PlantID=" + strPlantID + "&From=BackUp','Approvers','height=200,width=400');", true);
        }

        protected void lnkFinalSitePlnaBackUp_Click(object sender, EventArgs e)
        {
            int intResult;
            intResult = GET_EO_Lock_Status_Approve();
            if (intResult == 5)
            {
                return;
            }

            string script = null;
            string strFuncName = lblFinalAppgrpSitePlan.Text.Trim();
            string strPlantID = drpPlant.SelectedItem.Value;
            if (strPlantID == "--Select a Plant--")
            {
                strPlantID = "0";
            }
            //script = "<script>window.open('ChangeApprover.aspx?FuncName=" + strFuncName + "&OriginalApprover=" + lblSiteplanningFinalAppGrp.Text.Trim() + "&EOID=" + ViewState["EOID"] + "&PlantID=" + strPlantID + "&From=BackUp','Approvers','height=200,width=400');</script>";
            //Page.RegisterStartupScript("clientscript", script);

            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "window.open('ChangeApprover.aspx?FuncName=" + strFuncName + "&OriginalApprover=" + lblSiteplanningFinalAppGrp.Text.Trim() + "&EOID=" + ViewState["EOID"] + "&PlantID=" + strPlantID + "&From=BackUp','Approvers','height=200,width=400');", true);
        }

        protected void lnkFinSitePlanningDeclined_Click(object sender, EventArgs e)
        {
            int intResult;
            intResult = GET_EO_Lock_Status_Approve();
            if (intResult == 5)
            {
                return;
            }

            //string script = null;
            //script = "<script>ApproverConfirm('" + ViewState["EOID"] + "','" + ViewState["stage"] + "','Site Planning','N');</script> ";
            //Page.RegisterStartupScript("db_error_message", script);

            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "ApproverConfirm('" + ViewState["EOID"] + "','" + ViewState["stage"] + "','Site Planning','N');", true);
        }

        protected void lnkFinSitePlanningApproved_Click(object sender, EventArgs e)
        {
            int intResult;
            intResult = GET_EO_Lock_Status_Approve();
            if (intResult == 5)
            {
                return;
            }

            //string script = null;
            //script = "<script>ApproverConfirm('" + ViewState["EOID"] + "','" + ViewState["stage"] + "','Site Planning','Y');</script> ";
            //Page.RegisterStartupScript("db_error_message", script);

            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "ApproverConfirm('" + ViewState["EOID"] + "','" + ViewState["stage"] + "','Site Planning','Y');", true);
        }

        protected void lnkFinSMARTClearanceApproved_Click(object sender, EventArgs e)
        {
            int intResult;
            intResult = GET_EO_Lock_Status_Approve();
            if (intResult == 5)
            {
                return;
            }

            //string script = null;
            //script = "<script>ApproverConfirm('" + ViewState["EOID"] + "','" + ViewState["stage"] + "','SMART Clearance','Y');</script> ";
            //Page.RegisterStartupScript("db_error_message", script);

            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "ApproverConfirm('" + ViewState["EOID"] + "','" + ViewState["stage"] + "','SMART Clearance','Y');", true);
        }

        protected void lnkFinSMARTClearanceDeclined_Click(object sender, EventArgs e)
        {
            int intResult;
            intResult = GET_EO_Lock_Status_Approve();
            if (intResult == 5)
            {
                return;
            }

            //string script = null;
            //script = "<script>ApproverConfirm('" + ViewState["EOID"] + "','" + ViewState["stage"] + "','SMART Clearance','N');</script> ";
            //Page.RegisterStartupScript("db_error_message", script);

            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "ApproverConfirm('" + ViewState["EOID"] + "','" + ViewState["stage"] + "','SMART Clearance','N');", true);
        }

        protected void lnkFinalSMARTClearanceBackUp_Click(object sender, EventArgs e)
        {
            int intResult;
            intResult = GET_EO_Lock_Status_Approve();
            if (intResult == 5)
            {
                return;
            }
            string script = null;
            string strFuncName = lblFinalAppgrpSMARTClearance.Text.Trim();
            string strPlantID = drpPlant.SelectedItem.Value;
            if (strPlantID == "--Select a Plant--")
            {
                strPlantID = "0".ToString();
            }
            //script = "<script>window.open('ChangeApprover.aspx?FuncName=" + strFuncName + "&OriginalApprover=" + lblSMARTClearanceFinalAppGrp.Text.Trim() + "&EOID=" + ViewState["EOID"] + "&PlantID=" + strPlantID + "&From=BackUp','Approvers','height=200,width=400');</script>";
            //Page.RegisterStartupScript("clientscript", script);

            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "window.open('ChangeApprover.aspx?FuncName=" + strFuncName + "&OriginalApprover=" + lblSMARTClearanceFinalAppGrp.Text.Trim() + "&EOID=" + ViewState["EOID"] + "&PlantID=" + strPlantID + "&From=BackUp','Approvers','height=200,width=400');", true);
        }

        protected void lnkFinalSAPBackUp_Click(object sender, EventArgs e)
        {
            int intResult;
            intResult = GET_EO_Lock_Status_Approve();
            if (intResult == 5)
            {
                return;
            }
            string script = null;
            string strFuncName = lblFinalAppgrpSAP.Text.Trim();
            string strPlantID = drpPlant.SelectedItem.Value;
            if (strPlantID == "--Select a Plant--")
            {
                strPlantID = "0";
            }
            //script = "<script>window.open('ChangeApprover.aspx?FuncName=" + strFuncName + "&OriginalApprover=" + lblSAPCostCenterFinalAppGrp.Text.Trim() + "&EOID=" + ViewState["EOID"] + "&PlantID=" + strPlantID + "&From=BackUp','Approvers','height=200,width=400');</script>";
            //Page.RegisterStartupScript("clientscript", script);

            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "window.open('ChangeApprover.aspx?FuncName=" + strFuncName + "&OriginalApprover=" + lblSAPCostCenterFinalAppGrp.Text.Trim() + "&EOID=" + ViewState["EOID"] + "&PlantID=" + strPlantID + "&From=BackUp','Approvers','height=200,width=400');", true);
        }

        protected void lnkFinSAPDeclined_Click(object sender, EventArgs e)
        {
            int intResult;
            intResult = GET_EO_Lock_Status_Approve();
            if (intResult == 5)
            {
                return;
            }

            //string script = null;
            //script = "<script>ApproverConfirm('" + ViewState["EOID"] + "','" + ViewState["stage"] + "','SAP Cost Center Coordinator','N');</script> ";
            //Page.RegisterStartupScript("db_error_message", script);

            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "ApproverConfirm('" + ViewState["EOID"] + "','" + ViewState["stage"] + "','SAP Cost Center Coordinator','N');", true);
        }

        protected void lnkFinSAPApproved_Click(object sender, EventArgs e)
        {
            int intResult;
            intResult = GET_EO_Lock_Status_Approve();
            if (intResult == 5)
            {
                return;
            }

            //string script = null;
            //script = "<script>ApproverConfirm('" + ViewState["EOID"] + "','" + ViewState["stage"] + "','SAP Cost Center Coordinator','Y');</script> ";
            //Page.RegisterStartupScript("db_error_message", script);

            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "ApproverConfirm('" + ViewState["EOID"] + "','" + ViewState["stage"] + "','SAP Cost Center Coordinator','Y');", true);
        }

        protected void lnkFinSiteHSEApproved_Click(object sender, EventArgs e)
        {
            int intResult;
            intResult = GET_EO_Lock_Status_Approve();
            if (intResult == 5)
            {
                return;
            }

            //string script = null;
            //script = "<script>ApproverConfirm('" + ViewState["EOID"] + "','" + ViewState["stage"] + "','Site HS_E Resource','Y');</script> ";
            //Page.RegisterStartupScript("db_error_message", script);

            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "ApproverConfirm('" + ViewState["EOID"] + "','" + ViewState["stage"] + "','Site HS_E Resource','Y');", true);
        }

        protected void lnkFinSiteHSEDeclined_Click(object sender, EventArgs e)
        {
            int intResult;
            intResult = GET_EO_Lock_Status_Approve();
            if (intResult == 5)
            {
                return;
            }

            //string script = null;
            //script = "<script>ApproverConfirm('" + ViewState["EOID"] + "','" + ViewState["stage"] + "','Site HS_E Resource','N');</script> ";
            //Page.RegisterStartupScript("db_error_message", script);

            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "ApproverConfirm('" + ViewState["EOID"] + "','" + ViewState["stage"] + "','Site HS_E Resource','N');", true);
        }

        protected void lnkFinalSiteHSEBackUp_Click(object sender, EventArgs e)
        {
            int intResult;
            intResult = GET_EO_Lock_Status_Approve();
            if (intResult == 5)
            {
                return;
            }

            string script = null;
            string strFuncName = lblFinalAppgrpSiteHSE.Text.Trim();
            string strPlantID = drpPlant.SelectedItem.Value;
            if (strPlantID == "--Select a Plant--")
            {
                strPlantID = "0";
            }
            //script = "<script>window.open('ChangeApprover.aspx?FuncName=" + strFuncName + "&OriginalApprover=" + lblSiteHSEFinalAppGrp.Text.Trim() + "&EOID=" + ViewState["EOID"] + "&PlantID=" + strPlantID + "&From=BackUp','Approvers','height=200,width=400');</script>";
            //Page.RegisterStartupScript("clientscript", script);


            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "window.open('ChangeApprover.aspx?FuncName=" + strFuncName + "&OriginalApprover=" + lblSiteHSEFinalAppGrp.Text.Trim() + "&EOID=" + ViewState["EOID"] + "&PlantID=" + strPlantID + "&From=BackUp','Approvers','height=200,width=400');", true);
        }

        protected void lnkFinGBUHSEApproved_Click(object sender, EventArgs e)
        {
            int intResult;
            intResult = GET_EO_Lock_Status_Approve();
            if (intResult == 5)
            {
                return;
            }

            //string script = null;
            //script = "<script>ApproverConfirm('" + ViewState["EOID"] + "','" + ViewState["stage"] + "','GBU HS_E Resource','Y');</script> ";
            //Page.RegisterStartupScript("db_error_message", script);

            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "ApproverConfirm('" + ViewState["EOID"] + "','" + ViewState["stage"] + "','GBU HS_E Resource','Y');", true);
        }

        protected void lnkFinGBUHSEDeclined_Click(object sender, EventArgs e)
        {
            int intResult;
            intResult = GET_EO_Lock_Status_Approve();
            if (intResult == 5)
            {
                return;
            }

            //string script = null;
            //script = "<script>ApproverConfirm('" + ViewState["EOID"] + "','" + ViewState["stage"] + "','GBU HS_E Resource','N');</script> ";
            //Page.RegisterStartupScript("db_error_message", script);

            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "ApproverConfirm('" + ViewState["EOID"] + "','" + ViewState["stage"] + "','GBU HS_E Resource','N');", true);
        }

        protected void lnkFinalGBUBackUp_Click(object sender, EventArgs e)
        {
            int intResult;
            intResult = GET_EO_Lock_Status_Approve();
            if (intResult == 5)
            {
                return;
            }

            string script = null;
            string strFuncName = lblFinalAppgrpGBUHSE.Text.Trim();
            string strPlantID = drpPlant.SelectedItem.Value;
            if (strPlantID == "--Select a Plant--")
            {
                strPlantID = "0";
            }
            //script = "<script>window.open('ChangeApprover.aspx?FuncName=" + strFuncName + "&OriginalApprover=" + lblGBUHSEFinalAppGrp.Text.Trim() + "&EOID=" + ViewState["EOID"] + "&PlantID=" + strPlantID + "&From=BackUp','Approvers','height=200,width=400');</script>";
            //Page.RegisterStartupScript("clientscript", script);

            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "window.open('ChangeApprover.aspx?FuncName=" + strFuncName + "&OriginalApprover=" + lblGBUHSEFinalAppGrp.Text.Trim() + "&EOID=" + ViewState["EOID"] + "&PlantID=" + strPlantID + "&From=BackUp','Approvers','height=200,width=400');", true);
        }

        protected void lnkFinBudgetApproved_Click(object sender, EventArgs e)
        {
            int intResult;
            intResult = GET_EO_Lock_Status_Approve();
            if (intResult == 5)
            {
                return;
            }
            //string script = null;
            //script = "<script>ApproverConfirm('" + ViewState["EOID"] + "','" + ViewState["stage"] + "','Budget Center','Y');</script> ";
            //Page.RegisterStartupScript("db_error_message", script);

            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "ApproverConfirm('" + ViewState["EOID"] + "','" + ViewState["stage"] + "','Budget Center','Y');", true);
        }

        protected void lnkFinBudgetDeclined_Click(object sender, EventArgs e)
        {
            int intResult;
            intResult = GET_EO_Lock_Status_Approve();
            if (intResult == 5)
            {
                return;
            }

            //string script = null;
            //script = "<script>ApproverConfirm('" + ViewState["EOID"] + "','" + ViewState["stage"] + "','Budget Center','N');</script> ";
            //Page.RegisterStartupScript("db_error_message", script);

            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "ApproverConfirm('" + ViewState["EOID"] + "','" + ViewState["stage"] + "','Budget Center','N');", true);
        }

        protected void lnkFinalBOBackUp_Click(object sender, EventArgs e)
        {
            int intResult;
            intResult = GET_EO_Lock_Status_Approve();
            if (intResult == 5)
            {
                return;
            }

            string script = null;
            string strFuncName = lblFinalAppgrpBO.Text.Trim();
            string strPlantID = drpPlant.SelectedItem.Value;
            if (strPlantID == "--Select a Plant--")
            {
                strPlantID = "0";
            }
            //script = "<script>window.open('ChangeApprover.aspx?FuncName=" + strFuncName + "&OriginalApprover=" + lblBOFinalAppGrp.Text.Trim() + "&EOID=" + ViewState["EOID"] + "&PlantID=" + strPlantID + "&From=BackUp','Approvers','height=200,width=400');</script>";
            //Page.RegisterStartupScript("clientscript", script);

            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "window.open('ChangeApprover.aspx?FuncName=" + strFuncName + "&OriginalApprover=" + lblBOFinalAppGrp.Text.Trim() + "&EOID=" + ViewState["EOID"] + "&PlantID=" + strPlantID + "&From=BackUp','Approvers','height=200,width=400');", true);
        }

        protected void lnkProdResearchApproved_Click(object sender, EventArgs e)
        {
            int intResult;
            intResult = GET_EO_Lock_Status_Approve();
            if (intResult == 5)
            {
                return;
            }
            //string script = null;
            //script = "<script>ApproverConfirm('" + ViewState["EOID"] + "','" + ViewState["stage"] + "','Products Research','Y');</script> ";
            //Page.RegisterStartupScript("db_error_message", script);

            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "ApproverConfirm('" + ViewState["EOID"] + "','" + ViewState["stage"] + "','Products Research','Y');", true);
        }

        protected void lnkProdResearchDeclined_Click(object sender, EventArgs e)
        {
            int intResult;
            intResult = GET_EO_Lock_Status_Approve();
            if (intResult == 5)
            {
                return;
            }

            //string script = null;
            //script = "<script>ApproverConfirm('" + ViewState["EOID"] + "','" + ViewState["stage"] + "','Products Research','N');</script> ";
            //Page.RegisterStartupScript("db_error_message", script);

            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "ApproverConfirm('" + ViewState["EOID"] + "','" + ViewState["stage"] + "','Products Research','N');", true);
        }

        protected void lnkFinalProdReasBackUp_Click(object sender, EventArgs e)
        {
            int intResult;
            intResult = GET_EO_Lock_Status_Approve();
            if (intResult == 5)
            {
                return;
            }

            //string script = null;
            string strFuncName = lblFinalAppgrpprodResearch.Text.Trim();
            string strPlantID = drpPlant.SelectedItem.Value;
            if (strPlantID == "--Select a Plant--")
            {
                strPlantID = "0";
            }
            //script = "<script>window.open('ChangeApprover.aspx?FuncName=" + strFuncName + "&OriginalApprover=" + lblProdResearchAppGrp.Text.Trim() + "&EOID=" + ViewState["EOID"] + "&PlantID=" + strPlantID + "&From=BackUp','Approvers','height=200,width=400');</script>";
            //Page.RegisterStartupScript("clientscript", script);

            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "window.open('ChangeApprover.aspx?FuncName=" + strFuncName + "&OriginalApprover=" + lblProdResearchAppGrp.Text.Trim() + "&EOID=" + ViewState["EOID"] + "&PlantID=" + strPlantID + "&From=BackUp','Approvers','height=200,width=400');", true);


        }

        protected void lnkPSIniApproved_Click(object sender, EventArgs e)
        {
            int intResult;
            intResult = GET_EO_Lock_Status_Approve();
            if (intResult == 5)
            {
                return;
            }
            //string script = null;
            //script = "<script>ApproverConfirm('" + ViewState["EOID"] + "','" + ViewState["stage"] + "','PS Initiative Manager','Y');</script> ";
            //Page.RegisterStartupScript("db_error_message", script);

            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "ApproverConfirm('" + ViewState["EOID"] + "','" + ViewState["stage"] + "','PS Initiative Manager','Y');", true);
        }

        protected void lnkPSIniDeclined_Click(object sender, EventArgs e)
        {
            int intResult;
            intResult = GET_EO_Lock_Status_Approve();
            if (intResult == 5)
            {
                return;
            }

            //string script = null;
            //script = "<script>ApproverConfirm('" + ViewState["EOID"] + "','" + ViewState["stage"] + "','PS Initiative Manager','N');</script> ";
            //Page.RegisterStartupScript("db_error_message", script);

            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "ApproverConfirm('" + ViewState["EOID"] + "','" + ViewState["stage"] + "','PS Initiative Manager','N');", true);
        }

        protected void lnkFinalPSIntiaBackUp_Click(object sender, EventArgs e)
        {
            int intResult;
            intResult = GET_EO_Lock_Status_Approve();
            if (intResult == 5)
            {
                return;
            }

            string script = null;
            string strFuncName = lblPSIntiativeFinalAppgrp.Text.Trim();
            string strPlantID = drpPlant.SelectedItem.Value;
            if (strPlantID == "--Select a Plant--")
            {
                strPlantID = "0";
            }
            //script = "<script>document.getElementById('txtBackUpName').value=window.open('ChangeApprover.aspx?FuncName=" & strFuncName & "&OriginalApprover=" & lblPSInitiativeAppGrp.Text.Trim & "&EOID=" & ViewState["EOID"] & "&PlantID=" & strPlantID & "&From=BackUp','Approvers','height=200,width=400');</script>"
            //script = "<script>window.open('ChangeApprover.aspx?FuncName=" + strFuncName + "&OriginalApprover=" + lblPSInitiativeAppGrp.Text.Trim() + "&EOID=" + ViewState["EOID"] + "&PlantID=" + strPlantID + "&From=BackUp','Approvers','height=200,width=400');</script>";
            //Page.RegisterStartupScript("clientscript", script);

            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "window.open('ChangeApprover.aspx?FuncName=" + strFuncName + "&OriginalApprover=" + lblPSInitiativeAppGrp.Text.Trim() + "&EOID=" + ViewState["EOID"] + "&PlantID=" + strPlantID + "&From=BackUp','Approvers','height=200,width=400');", true);
        }

        protected void lnkBOChangeApp_Click(object sender, EventArgs e)
        {
            int intFunctionID = 0;
            int PlantID = 0;
            string script = null;
            string strFuncName = lblAPPBO.Text.Trim();
            if (strFuncName == "Label")
            {
                strFuncName = DBNull.Value.ToString();
            }
            string strPlantID = drpPlant.SelectedItem.Value;
            if (strPlantID == "--Select a Plant--")
            {
                strPlantID = "0";
            }
            //script = "<script>window.open('ChangeApprover.aspx?FuncName=" + strFuncName + "&PlantID=" + strPlantID + "&From=Pre ','Approvers','height=200,width=400');</script>";
            //Page.RegisterStartupScript("clientscript", script);
            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "window.open('ChangeApprover.aspx?FuncName=" + strFuncName + "&PlantID=" + strPlantID + "&From=Pre ','Approvers','height=200,width=400');", true);
        }

        protected void lnkGBUChangeApp_Click(object sender, EventArgs e)
        {
            string script = null;
            string strFuncName = lblApprGBUHSE.Text.Trim();
            if (strFuncName == "Label")
            {
                strFuncName = DBNull.Value.ToString();
            }
            string strPlantID = drpPlant.SelectedItem.Value;
            if (strPlantID == "--Select a Plant--")
            {
                strPlantID = "0";
            }
            //script = "<script>window.open('ChangeApprover.aspx?FuncName=" + strFuncName + "&PlantID=" + strPlantID + "&From=PreGBU ','Approvers','height=200,width=400');</script>";
            //Page.RegisterStartupScript("clientscript", script);

            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "window.open('ChangeApprover.aspx?FuncName=" + strFuncName + "&PlantID=" + strPlantID + "&From=PreGBU ','Approvers','height=200,width=400');", true);
        }

        protected void lnkSiteHSEChangeApp_Click(object sender, EventArgs e)
        {
            string script = null;
            string strFuncName = lblAppHSESite.Text.Trim();
            string strPlantID = drpPlant.SelectedItem.Value;
            if (strPlantID == "--Select a Plant--")
            {
                strPlantID = "0";
            }
            //script = "<script>window.open('ChangeApprover.aspx?FuncName=" + strFuncName + "&PlantID=" + strPlantID + "&From=SiteHSE','Approvers','height=200,width=400');</script>";
            //Page.RegisterStartupScript("clientscript", script);

            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "window.open('ChangeApprover.aspx?FuncName=" + strFuncName + "&PlantID=" + strPlantID + "&From=SiteHSE','Approvers','height=200,width=400');", true);
        }

        protected void lnkSiteContaChangeApp_Click(object sender, EventArgs e)
        {
            string script = null;
            string strFuncName = lblAppSiteContact.Text.Trim();
            string strPlantID = drpPlant.SelectedItem.Value;
            if (strPlantID == "--Select a Plant--")
            {
                strPlantID = "0";
            }
            //script = "<script>window.open('ChangeApprover.aspx?FuncName=" + strFuncName + "&PlantID=" + strPlantID + "&From=SiteConta','Approvers','height=200,width=400');</script>";
            //Page.RegisterStartupScript("clientscript", script);

            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "window.open('ChangeApprover.aspx?FuncName=" + strFuncName + "&PlantID=" + strPlantID + "&From=SiteConta','Approvers','height=200,width=400');", true);


        }

        protected void lnkSitePlanChangeApp_Click(object sender, EventArgs e)
        {
            string script = null;
            string strFuncName = lblAppSiteplan.Text.Trim();
            string strPlantID = drpPlant.SelectedItem.Value;
            if (strPlantID == "--Select a Plant--")
            {
                strPlantID = "0";
            }
            //script = "<script>window.open('ChangeApprover.aspx?FuncName=" + strFuncName + "&PlantID=" + strPlantID + "&From=SitePlan','Approvers','height=200,width=400');</script>";
            //Page.RegisterStartupScript("clientscript", script);

            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "window.open('ChangeApprover.aspx?FuncName=" + strFuncName + "&PlantID=" + strPlantID + "&From=SitePlan','Approvers','height=200,width=400');", true);
        }

        protected void lnkQAPreChangeApp_Click(object sender, EventArgs e)
        {
            string script = null;
            string strFuncName = lblAppQAPrelim.Text.Trim();
            string strPlantID = drpPlant.SelectedItem.Value;
            if (strPlantID == "--Select a Plant--")
            {
                strPlantID = "0";
            }
            //script = "<script>window.open('ChangeApprover.aspx?FuncName=" + strFuncName + "&PlantID=" + strPlantID + "&From=QAPre','Approvers','height=200,width=400');</script>";
            //Page.RegisterStartupScript("clientscript", script);

            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "window.open('ChangeApprover.aspx?FuncName=" + strFuncName + "&PlantID=" + strPlantID + "&From=QAPre','Approvers','height=200,width=400');", true);

        }

        protected void lnkCenralQAPreChangeApp_Click(object sender, EventArgs e)
        {
            string script = null;
            string strFuncName = lblAppCentralQAPrelim.Text.Trim();
            string strPlantID = drpPlant.SelectedItem.Value;
            if (strPlantID == "--Select a Plant--")
            {
                strPlantID = "0";
            }
            //script = "<script>window.open('ChangeApprover.aspx?FuncName=" + strFuncName + "&PlantID=" + strPlantID + "&From=CentralQAPre','Approvers','height=200,width=400');</script>";
            //Page.RegisterStartupScript("clientscript", script);

            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "window.open('ChangeApprover.aspx?FuncName=" + strFuncName + "&PlantID=" + strPlantID + "&From=CentralQAPre','Approvers','height=200,width=400');", true);


        }

        protected void lnkCenPlanChangeApp_Click(object sender, EventArgs e)
        {
            string script = null;
            string strFuncName = lblAppCentralPlan.Text.Trim();
            string strPlantID = drpPlant.SelectedItem.Value;
            if (strPlantID == "--Select a Plant--")
            {
                strPlantID = "0";
            }
            //script = "<script>window.open('ChangeApprover.aspx?FuncName=" + strFuncName + "&PlantID=" + strPlantID + "&From=CenPlan','Approvers','height=200,width=400');</script>";
            //Page.RegisterStartupScript("clientscript", script);

            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "window.open('ChangeApprover.aspx?FuncName=" + strFuncName + "&PlantID=" + strPlantID + "&From=CenPlan','Approvers','height=200,width=400');", true);
        }

        protected void lnkSAPChangeApp_Click(object sender, EventArgs e)
        {
            string script = null;
            string strFuncName = lblAppSAPCost.Text.Trim();
            string strPlantID = drpPlant.SelectedItem.Value;
            if (strPlantID == "--Select a Plant--")
            {
                strPlantID = "0";
            }
            //script = "<script>window.open('ChangeApprover.aspx?FuncName=" + strFuncName + "&PlantID=" + strPlantID + "&From=SAP','Approvers','height=200,width=400');</script>";
            //Page.RegisterStartupScript("clientscript", script);

            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "window.open('ChangeApprover.aspx?FuncName=" + strFuncName + "&PlantID=" + strPlantID + "&From=SAP','Approvers','height=200,width=400');", true);
        }

        protected void lnkSmartClearanceApp_Click(object sender, EventArgs e)
        {
            string script = null;
            lblAppSmartClearance.Text = "SMART Clearance";
            string strFuncName = lblAppSmartClearance.Text.Trim();
            string strPlantID = drpPlant.SelectedItem.Value;
            if (strPlantID == "--Select a Plant--")
            {
                strPlantID = "0";
            }
            //script = "<script>window.open('ChangeApprover.aspx?FuncName=" + strFuncName + "&PlantID=" + strPlantID + "&From=SmartClear','Approvers','height=200,width=400');</script>";
            //Page.RegisterStartupScript("clientscript", script);

            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "window.open('ChangeApprover.aspx?FuncName=" + strFuncName + "&PlantID=" + strPlantID + "&From=SmartClear','Approvers','height=200,width=400');", true);
        }

        protected void lnkTGateChangeApp_Click(object sender, EventArgs e)
        {
            string script = null;
            string strFuncName = lblAppTiminingGate.Text.Trim();
            string strPlantID = drpPlant.SelectedItem.Value;
            if (strPlantID == "--Select a Plant--")
            {
                strPlantID = "0";
            }
            //script = "<script>window.open('ChangeApprover.aspx?FuncName=" + strFuncName + "&PlantID=" + strPlantID + "&From=TGate','Approvers','height=200,width=400');</script>";
            //Page.RegisterStartupScript("clientscript", script);

            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "window.open('ChangeApprover.aspx?FuncName=" + strFuncName + "&PlantID=" + strPlantID + "&From=TGate','Approvers','height=200,width=400');", true);

        }

        protected void lnkStandsOffChangeApp_Click(object sender, EventArgs e)
        {
            string script = null;
            string strFuncName = lblAppStandsOffice.Text.Trim();
            string strPlantID = drpPlant.SelectedItem.Value;
            if (strPlantID == "--Select a Plant--")
            {
                strPlantID = "0";
            }
            //ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "window.open('ChangeApprover.aspx?FuncName=" + strFuncName + "&PlantID=" + strPlantID + "&From=StandsOff','Approvers','height=200,width=400');", true); 

            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "window.open('ChangeApprover.aspx?FuncName=" + strFuncName + "&PlantID=" + strPlantID + "&From=StandsOff','Approvers','height=200,width=400');", true);
        }

        protected void lnkAdditionalApp1_Click(object sender, EventArgs e)
        {
            string script = null;
            string strFuncName = "Additional approver1";
            //lblAdditionalApprover1a.Text.Trim
            string strPlantID = drpPlant.SelectedItem.Value;
            if (strPlantID == "--Select a Plant--")
            {
                strPlantID = "0";
            }
            //script = "<script>window.open('ChangeApprover.aspx?FuncName=" + strFuncName + "&PlantID=" + strPlantID + "&From=AdditionalApprover1','Approvers','height=200,width=400');</script>";
            //Page.RegisterStartupScript("clientscript", script);

            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "window.open('ChangeApprover.aspx?FuncName=" + strFuncName + "&PlantID=" + strPlantID + "&From=AdditionalApprover1','Approvers','height=200,width=400');", true);
        }

        protected void lnkAdditionalApp2_Click(object sender, EventArgs e)
        {
            string script = null;
            string strFuncName = "Additional approver2";
            //lblAdditionalApprover2a.Text.Trim
            string strPlantID = drpPlant.SelectedItem.Value;
            if (strPlantID == "--Select a Plant--")
            {
                strPlantID = "0";
            }
            //script = "<script>window.open('ChangeApprover.aspx?FuncName=" + strFuncName + "&PlantID=" + strPlantID + "&From=AdditionalApprover2','Approvers','height=200,width=400');</script>";
            //Page.RegisterStartupScript("clientscript", script);

            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "window.open('ChangeApprover.aspx?FuncName=" + strFuncName + "&PlantID=" + strPlantID + "&From=AdditionalApprover2','Approvers','height=200,width=400');", true);

        }

        protected void lnkAdditionalApp3_Click(object sender, EventArgs e)
        {
            string script = null;
            string strFuncName = "Additional approver3";
            //lblAdditionalApprover3a.Text.Trim
            string strPlantID = drpPlant.SelectedItem.Value;
            if (strPlantID == "--Select a Plant--")
            {
                strPlantID = "0";
            }
            //script = "<script>window.open('ChangeApprover.aspx?FuncName=" + strFuncName + "&PlantID=" + strPlantID + "&From=AdditionalApprover3','Approvers','height=200,width=400');</script>";
            //Page.RegisterStartupScript("clientscript", script);

            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "window.open('ChangeApprover.aspx?FuncName=" + strFuncName + "&PlantID=" + strPlantID + "&From=AdditionalApprover3','Approvers','height=200,width=400');", true);
        }

        protected void lnkAdditionalApp4_Click(object sender, EventArgs e)
        {
            string script = null;
            string strFuncName = "Additional approver4";
            //lblAdditionalApprover4a.Text.Trim
            string strPlantID = drpPlant.SelectedItem.Value;
            if (strPlantID == "--Select a Plant--")
            {
                strPlantID = "0";
            }
            //script = "<script>window.open('ChangeApprover.aspx?FuncName=" + strFuncName + "&PlantID=" + strPlantID + "&From=AdditionalApprover4','Approvers','height=200,width=400');</script>";
            //Page.RegisterStartupScript("clientscript", script);

            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "window.open('ChangeApprover.aspx?FuncName=" + strFuncName + "&PlantID=" + strPlantID + "&From=AdditionalApprover4','Approvers','height=200,width=400');", true);
        }

        protected void lnkGBUFYI_Click(object sender, EventArgs e)
        {
            txtGBUHSE.Text = "Approval Not Needed";
        }

        protected void lnkHSEFYI_Click(object sender, EventArgs e)
        {
            txtSiteHSE.Text = "Approval Not Needed";
        }

        protected void lnkSiteContFYI_Click(object sender, EventArgs e)
        {
            txtSiteContact.Text = "Approval Not Needed";
        }

        protected void lnkSitePlanFYI_Click(object sender, EventArgs e)
        {
            txtSitePlanning.Text = "Approval Not Needed";
        }

        protected void lnkQAPreFYI_Click(object sender, EventArgs e)
        {
            txtQAPre.Text = "Approval Not Needed";
        }

        protected void lnkCentralQAPreFYI_Click(object sender, EventArgs e)
        {
            txtCentralQAPre.Text = "Approval Not Needed";
        }

        protected void lnkCentralPlanFYI_Click(object sender, EventArgs e)
        {
            txtCentralPlanning.Text = "Approval Not Needed";
        }

        protected void lnkSAPFYI_Click(object sender, EventArgs e)
        {
            txtSAPCost.Text = "Approval Not Needed";
        }

        protected void lnkSmartClearanceFYI_Click(object sender, EventArgs e)
        {
            txtSmartClearance.Text = "Approval Not Needed";
            ViewState["SmartClearVal"] = "Approval Not Needed";
        }

        protected void lnkTGateFYI_Click(object sender, EventArgs e)
        {
            txtTimingGate.Text = "Approval Not Needed";
        }

        protected void lnkAdditionalApp1FYIPrelim_Click(object sender, EventArgs e)
        {
            txtAdditionalApp1.Text = "Approval Not Needed";
        }

        protected void lnkAdditionalApp2FYIPrelim_Click(object sender, EventArgs e)
        {
            txtAdditionalApp2.Text = "Approval Not Needed";
        }

        protected void lnkAdditionalApp3FYIPrelim_Click(object sender, EventArgs e)
        {
            txtAdditionalApp3.Text = "Approval Not Needed";
        }

        protected void lnkAdditionalApp4FYIPrelim_Click(object sender, EventArgs e)
        {
            txtAdditionalApp4.Text = "Approval Not Needed";
        }

        protected void lnkPSIntiativeChangeApp_Click(object sender, EventArgs e)
        {
            string script = null;
            string strFuncName = lblPSIntiativeFinalAppgrp.Text.Trim();
            string strPlantID = drpPlant.SelectedItem.Value;
            if (strPlantID == "--Select a Plant--")
            {
                strPlantID = "0";
            }
            //script = "<script>window.open('ChangeApprover.aspx?FuncName=" + strFuncName + "&PlantID=" + strPlantID + "&From=Final','Approvers','height=200,width=400');</script>";
            //Page.RegisterStartupScript("clientscript", script);

            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "window.open('ChangeApprover.aspx?FuncName=" + strFuncName + "&PlantID=" + strPlantID + "&From=Final','Approvers','height=200,width=400');", true);
        }

        protected void lnkProdResearchChangeApp_Click(object sender, EventArgs e)
        {
            string script = null;
            string strFuncName = lblFinalAppgrpprodResearch.Text.Trim();
            string strPlantID = drpPlant.SelectedItem.Value;
            if (strPlantID == "--Select a Plant--")
            {
                strPlantID = "0";
            }
            //script = "<script>window.open('ChangeApprover.aspx?FuncName=" + strFuncName + "&PlantID=" + strPlantID + "&From=FinalProductReSearch','Approvers','height=200,width=400');</script>";
            //Page.RegisterStartupScript("clientscript", script);

            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "window.open('ChangeApprover.aspx?FuncName=" + strFuncName + "&PlantID=" + strPlantID + "&From=FinalProductReSearch','Approvers','height=200,width=400');", true);

        }

        protected void lnkBudgetOwnerChangeApp_Click(object sender, EventArgs e)
        {
            string script = null;
            string strFuncName = lblFinalAppgrpBO.Text.Trim();
            string strPlantID = drpPlant.SelectedItem.Value;
            if (strPlantID == "--Select a Plant--")
            {
                strPlantID = "0";
            }
            //script = "<script>window.open('ChangeApprover.aspx?FuncName=" + strFuncName + "&PlantID=" + strPlantID + "&From=FinalBO','Approvers','height=200,width=400');</script>";
            //Page.RegisterStartupScript("clientscript", script);

            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "window.open('ChangeApprover.aspx?FuncName=" + strFuncName + "&PlantID=" + strPlantID + "&From=FinalBO','Approvers','height=200,width=400');", true);
        }

        protected void lnkGBUHSEChangeApp_Click(object sender, EventArgs e)
        {
            string script = null;
            string strFuncName = lblFinalAppgrpGBUHSE.Text.Trim();
            string strPlantID = drpPlant.SelectedItem.Value;
            if (strPlantID == "--Select a Plant--")
            {
                strPlantID = "0";
            }
            //script = "<script>window.open('ChangeApprover.aspx?FuncName=" + strFuncName + "&PlantID=" + strPlantID + "&From=FinalGBUHSE','Approvers','height=200,width=400');</script>";
            //Page.RegisterStartupScript("clientscript", script);

            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "window.open('ChangeApprover.aspx?FuncName=" + strFuncName + "&PlantID=" + strPlantID + "&From=FinalGBUHSE','Approvers','height=200,width=400');", true);
        }

        protected void lnkSiteHSEFinalChangeApp_Click(object sender, EventArgs e)
        {
            string script = null;
            string strFuncName = lblFinalAppgrpSiteHSE.Text.Trim();
            string strPlantID = drpPlant.SelectedItem.Value;
            if (strPlantID == "--Select a Plant--")
            {
                strPlantID = "0";
            }
            //script = "<script>window.open('ChangeApprover.aspx?FuncName=" + strFuncName + "&PlantID=" + strPlantID + "&From=FinalSiteHSE','Approvers','height=200,width=400');</script>";
            //Page.RegisterStartupScript("clientscript", script);

            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "window.open('ChangeApprover.aspx?FuncName=" + strFuncName + "&PlantID=" + strPlantID + "&From=FinalSiteHSE','Approvers','height=200,width=400');", true);
        }

        protected void lnkSAPFinalChangeApp_Click(object sender, EventArgs e)
        {
            string script = null;
            string strFuncName = lblFinalAppgrpSAP.Text.Trim();
            string strPlantID = drpPlant.SelectedItem.Value;
            if (strPlantID == "--Select a Plant--")
            {
                strPlantID = "0";
            }
            //script = "<script>window.open('ChangeApprover.aspx?FuncName=" + strFuncName + "&PlantID=" + strPlantID + "&From=FinalSAP','Approvers','height=200,width=400');</script>";
            //Page.RegisterStartupScript("clientscript", script);

            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "window.open('ChangeApprover.aspx?FuncName=" + strFuncName + "&PlantID=" + strPlantID + "&From=FinalSAP','Approvers','height=200,width=400');", true);
        }

        protected void lnkSMARTClearanceFinalChangeApp_Click(object sender, EventArgs e)
        {
            string script = null;
            string strFuncName = lblFinalAppgrpSMARTClearance.Text.Trim();
            string strPlantID = drpPlant.SelectedItem.Value;
            if (strPlantID == "--Select a Plant--")
            {
                strPlantID = "0";
            }
            //script = "<script>window.open('ChangeApprover.aspx?FuncName=" + strFuncName + "&PlantID=" + strPlantID + "&From=FinalSMARTClearance','Approvers','height=200,width=400');</script>";
            //Page.RegisterStartupScript("clientscript", script);

            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "window.open('ChangeApprover.aspx?FuncName=" + strFuncName + "&PlantID=" + strPlantID + "&From=FinalSMARTClearance','Approvers','height=200,width=400');", true);

        }

        protected void lnkSitePlanFinalChangeApp_Click(object sender, EventArgs e)
        {
            string script = null;
            string strFuncName = lblFinalAppgrpSitePlan.Text.Trim();
            string strPlantID = drpPlant.SelectedItem.Value;
            if (strPlantID == "--Select a Plant--")
            {
                strPlantID = "0";
            }
            //script = "<script>window.open('ChangeApprover.aspx?FuncName=" + strFuncName + "&PlantID=" + strPlantID + "&From=SitePlanFinal','Approvers','height=200,width=400');</script>";
            //Page.RegisterStartupScript("clientscript", script);

            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "window.open('ChangeApprover.aspx?FuncName=" + strFuncName + "&PlantID=" + strPlantID + "&From=SitePlanFinal','Approvers','height=200,width=400');", true);
        }

        protected void lnkSiteContactFinalChangeApp_Click(object sender, EventArgs e)
        {
            string script = null;
            string strFuncName = lblFinalAppgrpSiteContact.Text.Trim();
            string strPlantID = drpPlant.SelectedItem.Value;
            if (strPlantID == "--Select a Plant--")
            {
                strPlantID = "0";
            }
            //script = "<script>window.open('ChangeApprover.aspx?FuncName=" + strFuncName + "&PlantID=" + strPlantID + "&From=SiteContactFinal','Approvers','height=200,width=400');</script>";
            //Page.RegisterStartupScript("clientscript", script);
            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "window.open('ChangeApprover.aspx?FuncName=" + strFuncName + "&PlantID=" + strPlantID + "&From=SiteContactFinal','Approvers','height=200,width=400');", true);

        }

        protected void lnkSiteFinanceFinalChangeApp_Click(object sender, EventArgs e)
        {
            string script = null;
            string strFuncName = lblFinalAppgrpSiteFinance.Text.Trim();
            string strPlantID = drpPlant.SelectedItem.Value;
            if (strPlantID == "--Select a Plant--")
            {
                strPlantID = "0";
            }
            //script = "<script>window.open('ChangeApprover.aspx?FuncName=" + strFuncName + "&PlantID=" + strPlantID + "&From=SiteFinanceFinal','Approvers','height=200,width=400');</script>";
            //Page.RegisterStartupScript("clientscript", script);
            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "window.open('ChangeApprover.aspx?FuncName=" + strFuncName + "&PlantID=" + strPlantID + "&From=SiteFinanceFinal','Approvers','height=200,width=400');", true);

        }

        protected void lnkSiteLeaderFinalChangeApp_Click(object sender, EventArgs e)
        {
            string script = null;
            string strFuncName = lblFinalAppgrpSiteLeaderShip.Text.Trim();
            string strPlantID = drpPlant.SelectedItem.Value;
            if (strPlantID == "--Select a Plant--")
            {
                strPlantID = "0";
            }
            //script = "<script>window.open('ChangeApprover.aspx?FuncName=" + strFuncName + "&PlantID=" + strPlantID + "&From=SiteLeaderFinal','Approvers','height=200,width=400');</script>";
            //Page.RegisterStartupScript("clientscript", script);
            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "window.open('ChangeApprover.aspx?FuncName=" + strFuncName + "&PlantID=" + strPlantID + "&From=SiteLeaderFinal','Approvers','height=200,width=400');", true);

        }

        protected void lnkPSRAFinalChangeApp_Click(object sender, EventArgs e)
        {
            string script = null;
            string strFuncName = lblFinalAppgrpPSRA.Text.Trim();
            string strPlantID = drpPlant.SelectedItem.Value;
            if (strPlantID == "--Select a Plant--")
            {
                strPlantID = "0";
            }
            //script = "<script>window.open('ChangeApprover.aspx?FuncName=" + strFuncName + "&PlantID=" + strPlantID + "&From=PSRAFinal','Approvers','height=200,width=400');</script>";
            //Page.RegisterStartupScript("clientscript", script);

            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "window.open('ChangeApprover.aspx?FuncName=" + strFuncName + "&PlantID=" + strPlantID + "&From=PSRAFinal','Approvers','height=200,width=400');", true);

        }

        protected void lnkTimiGateFinalChangeApp_Click(object sender, EventArgs e)
        {
            string script = null;
            string strFuncName = lblFinalAppgrpTimingGate.Text.Trim();
            string strPlantID = drpPlant.SelectedItem.Value;
            if (strPlantID == "--Select a Plant--")
            {
                strPlantID = "0";
            }
            //script = "<script>window.open('ChangeApprover.aspx?FuncName=" + strFuncName + "&PlantID=" + strPlantID + "&From=TimiGateFinal','Approvers','height=200,width=400');</script>";
            //Page.RegisterStartupScript("clientscript", script);

            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "window.open('ChangeApprover.aspx?FuncName=" + strFuncName + "&PlantID=" + strPlantID + "&From=TimiGateFinal','Approvers','height=200,width=400');", true);

        }

        protected void lnkPSIntiativeFinalFYI_Click(object sender, EventArgs e)
        {
            txtPSInitiative.Text = "Approval Not Needed";
        }

        protected void lnkProdResearchFYI_Click(object sender, EventArgs e)
        {
            txtProductsResearch.Text = "Approval Not Needed";
        }

        protected void lnkBudgetOwnerFYI_Click(object sender, EventArgs e)
        {
            txtBudgetOwnerFinal.Text = "Approval Not Needed";
        }

        protected void lnkGBUHSEFYI_Click(object sender, EventArgs e)
        {
            txtGBUHSEFinal.Text = "Approval Not Needed";
        }

        protected void lnkSiteHSEFYI_Click(object sender, EventArgs e)
        {
            txtSiteHSEFinal.Text = "Approval Not Needed";
        }

        protected void lnkSAPFinalFYI_Click(object sender, EventArgs e)
        {
            txtSAPCostCenter.Text = "Approval Not Needed";
        }

        protected void lnkSMARTClearanceFinalFYI_Click(object sender, EventArgs e)
        {
            txtSMARTClearanceFinal.Text = "Approval Not Needed";
        }

        protected void lnkSitePlanFinalFYI_Click(object sender, EventArgs e)
        {
            txtSitePlanFinal.Text = "Approval Not Needed";
        }

        protected void lnkSiteContacyFinalFYI_Click(object sender, EventArgs e)
        {
            txtSiteContactFinal.Text = "Approval Not Needed";
        }

        protected void lnkSiteFinanceFinalFYI_Click(object sender, EventArgs e)
        {
            txtSiteFinance.Text = "Approval Not Needed";
        }

        protected void lnkSiteLeadershipFinalFYI_Click(object sender, EventArgs e)
        {
            txtSiteLeaderShip.Text = "Approval Not Needed";
        }

        protected void lnkPSRAFinalFYI_Click(object sender, EventArgs e)
        {
            txtPSRAFinal.Text = "Approval Not Needed";
        }

        protected void lnkTimiggateFinalFYI_Click(object sender, EventArgs e)
        {
            txtFinalTimingGate.Text = "Approval Not Needed";
        }

        protected void lnkQAFinalFYI_Click(object sender, EventArgs e)
        {
            txtFinalQA.Text = "Approval Not Needed";
        }

        protected void lnkCentralQAFinalFYI_Click(object sender, EventArgs e)
        {
            txtFinalCentralQA.Text = "Approval Not Needed";
        }

        protected void lnkStandsOfficeFinalFYI_Click(object sender, EventArgs e)
        {
            txtFinalStandardsOffice.Text = "Approval Not Needed";
        }

        protected void lnkAdditionalApp1FYI_Click(object sender, EventArgs e)
        {
            txtFinalAdditionalApprover1.Text = "Approval Not Needed";
        }

        protected void lnkAdditionalApp2FYI_Click(object sender, EventArgs e)
        {
            txtFinalAdditionalApprover2.Text = "Approval Not Needed";
        }

        protected void lnkAdditionalApp3FYI_Click(object sender, EventArgs e)
        {
            txtFinalAdditionalApprover3.Text = "Approval Not Needed";
        }

        protected void lnkAdditionalApp4FYI_Click(object sender, EventArgs e)
        {
            txtFinalAdditionalApprover4.Text = "Approval Not Needed";
        }

        protected void lnkBudgetDeclined_Click(object sender, EventArgs e)
        {
            int intResult;
            intResult = GET_EO_Lock_Status_Approve();
            if (intResult == 5)
            {
                return;
            }
            //string script = null;
            //script = "<script>ApproverConfirm('" + ViewState["EOID"] + "','" + ViewState["stage"] + "','Budget Center','N');</script> ";
            //Page.RegisterStartupScript("db_error_message", script);

            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "ApproverConfirm('" + ViewState["EOID"] + "','" + ViewState["stage"] + "','Budget Center','N');", true);

        }

        protected void lnkPreBOBackUp_Click(object sender, EventArgs e)
        {
            int intResult;
            intResult = GET_EO_Lock_Status_Approve();
            if (intResult == 5)
            {
                return;
            }

            int intFunctionID = 0;
            int PlantID = 0;
            string script = null;
            string strFuncName = lblAPPBO.Text.Trim();
            if (strFuncName == "Label")
            {
                strFuncName = DBNull.Value.ToString();
            }
            string strPlantID = drpPlant.SelectedItem.Value;
            if (strPlantID == "--Select a Plant--")
            {
                strPlantID = "0";
            }

            //script = "<script>window.open('ChangeApprover.aspx?FuncName=" + strFuncName + "&OriginalApprover=" + lblBORO.Text.Trim() + "&EOID=" + ViewState["EOID"] + "&PlantID=" + strPlantID + "&From=BackUp','Approvers','height=200,width=400');</script>";
            //Page.RegisterStartupScript("clientscript", script);

            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "window.open('ChangeApprover.aspx?FuncName=" + strFuncName + "&OriginalApprover=" + lblBORO.Text.Trim() + "&EOID=" + ViewState["EOID"] + "&PlantID=" + strPlantID + "&From=BackUp','Approvers','height=200,width=400');", true);

        }

        protected void lnkGBUHSEApproved_Click(object sender, EventArgs e)
        {
            int intResult;
            intResult = GET_EO_Lock_Status_Approve();
            if (intResult == 5)
            {
                return;
            }
            //string script = null;
            //script = "<script>ApproverConfirm('" + ViewState["EOID"] + "','" + ViewState["stage"] + "','GBU HS_E Resource','Y');</script> ";
            //Page.RegisterStartupScript("db_error_message", script);

            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "ApproverConfirm('" + ViewState["EOID"] + "','" + ViewState["stage"] + "','GBU HS_E Resource','Y');", true);

        }

        protected void lnkGBUHSEDeclined_Click(object sender, EventArgs e)
        {
            int intResult;
            intResult = GET_EO_Lock_Status_Approve();
            if (intResult == 5)
            {
                return;
            }

            //string script = null;
            //script = "<script>ApproverConfirm('" + ViewState["EOID"] + "','" + ViewState["stage"] + "','GBU HS_E Resource','N');</script> ";
            //Page.RegisterStartupScript("db_error_message", script);

            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "ApproverConfirm('" + ViewState["EOID"] + "','" + ViewState["stage"] + "','GBU HS_E Resource','N');", true);


        }

        protected void lnkPreGBUHSEBackUp_Click(object sender, EventArgs e)
        {
            int intResult;
            intResult = GET_EO_Lock_Status_Approve();
            if (intResult == 5)
            {
                return;
            }

            string script = null;
            string strFuncName = lblApprGBUHSE.Text.Trim();
            if (strFuncName == "Label")
            {
                strFuncName = DBNull.Value.ToString();
            }
            string strPlantID = drpPlant.SelectedItem.Value;
            if (strPlantID == "--Select a Plant--")
            {
                strPlantID = "0";
            }
            //script = "<script>window.open('ChangeApprover.aspx?FuncName=" + strFuncName + "&OriginalApprover=" + lblGBUHSERO.Text.Trim() + "&EOID=" + ViewState["EOID"] + "&PlantID=" + strPlantID + "&From=BackUp','Approvers','height=200,width=400');</script>";
            //Page.RegisterStartupScript("clientscript", script);

            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "window.open('ChangeApprover.aspx?FuncName=" + strFuncName + "&OriginalApprover=" + lblGBUHSERO.Text.Trim() + "&EOID=" + ViewState["EOID"] + "&PlantID=" + strPlantID + "&From=BackUp','Approvers','height=200,width=400');", true);
        }

        protected void lnkSiteHSEApproved_Click(object sender, EventArgs e)
        {
            int intResult;
            intResult = GET_EO_Lock_Status_Approve();
            if (intResult == 5)
            {
                return;
            }
            //string script = null;
            //script = "<script>ApproverConfirm('" + ViewState["EOID"] + "','" + ViewState["stage"] + "','Site HS_E Resource','Y');</script> ";
            //Page.RegisterStartupScript("db_error_message", script);

            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "ApproverConfirm('" + ViewState["EOID"] + "','" + ViewState["stage"] + "','Site HS_E Resource','Y');", true);
        }

        protected void lnkSiteHSEDeclined_Click(object sender, EventArgs e)
        {
            int intResult;
            intResult = GET_EO_Lock_Status_Approve();
            if (intResult == 5)
            {
                return;
            }
            //string script = null;
            //script = "<script>ApproverConfirm('" + ViewState["EOID"] + "','" + ViewState["stage"] + "','Site HS_E Resource','N');</script> ";
            //Page.RegisterStartupScript("db_error_message", script);


            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "ApproverConfirm('" + ViewState["EOID"] + "','" + ViewState["stage"] + "','Site HS_E Resource','N');", true);
        }

        protected void lnkPresiteHSEBackUp_Click(object sender, EventArgs e)
        {
            int intResult;
            intResult = GET_EO_Lock_Status_Approve();
            if (intResult == 5)
            {
                return;
            }

            string script = null;
            string strFuncName = lblAppHSESite.Text.Trim();
            string strPlantID = drpPlant.SelectedItem.Value;
            if (strPlantID == "--Select a Plant--")
            {
                strPlantID = "0";
            }
            //script = "<script>window.open('ChangeApprover.aspx?FuncName=" + strFuncName + "&OriginalApprover=" + lblSiteHSERO.Text.Trim() + "&EOID=" + ViewState["EOID"] + "&PlantID=" + strPlantID + "&From=BackUp','Approvers','height=200,width=400');</script>";
            //Page.RegisterStartupScript("clientscript", script);

            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "window.open('ChangeApprover.aspx?FuncName=" + strFuncName + "&OriginalApprover=" + lblSiteHSERO.Text.Trim() + "&EOID=" + ViewState["EOID"] + "&PlantID=" + strPlantID + "&From=BackUp','Approvers','height=200,width=400');", true);

        }

        protected void lnkSiteContactApproved_Click(object sender, EventArgs e)
        {
            int intResult;
            intResult = GET_EO_Lock_Status_Approve();
            if (intResult == 5)
            {
                return;
            }
            //string script = null;
            //script = "<script>ApproverConfirm('" + ViewState["EOID"] + "','" + ViewState["stage"] + "','Site Contact','Y');</script> ";
            //Page.RegisterStartupScript("db_error_message", script);
            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "ApproverConfirm('" + ViewState["EOID"] + "','" + ViewState["stage"] + "','Site Contact','Y');", true);

        }

        protected void lnkSiteContactDeclined_Click(object sender, EventArgs e)
        {
            int intResult;
            intResult = GET_EO_Lock_Status_Approve();
            if (intResult == 5)
            {
                return;
            }
            //string script = null;
            //script = "<script>ApproverConfirm('" + ViewState["EOID"] + "','" + ViewState["stage"] + "','Site Contact','N');</script> ";
            //Page.RegisterStartupScript("db_error_message", script);

            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "ApproverConfirm('" + ViewState["EOID"] + "','" + ViewState["stage"] + "','Site Contact','N');", true);
        }

        protected void lnkPresiteContactBackUp_Click(object sender, EventArgs e)
        {
            int intResult;
            intResult = GET_EO_Lock_Status_Approve();
            if (intResult == 5)
            {
                return;
            }

            string script = null;
            string strFuncName = lblAppSiteContact.Text.Trim();
            string strPlantID = drpPlant.SelectedItem.Value;
            if (strPlantID == "--Select a Plant--")
            {
                strPlantID = "0";
            }
            ////script = "<script>window.open('ChangeApprover.aspx?FuncID=0&PlantID=0&From=Pre','Approvers','height=200,width=400');</script>"
            //script = "<script>window.open('ChangeApprover.aspx?FuncName=" + strFuncName + "&OriginalApprover=" + lblSiteContactRO.Text.Trim() + "&EOID=" + ViewState["EOID"] + "&PlantID=" + strPlantID + "&From=BackUp','Approvers','height=200,width=400');</script>";
            //Page.RegisterStartupScript("clientscript", script);
            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "window.open('ChangeApprover.aspx?FuncName=" + strFuncName + "&OriginalApprover=" + lblSiteContactRO.Text.Trim() + "&EOID=" + ViewState["EOID"] + "&PlantID=" + strPlantID + "&From=BackUp','Approvers','height=200,width=400');", true);

        }




        protected void lnkSitePlanningApproved_Click(object sender, EventArgs e)
        {
            int intResult;
            intResult = GET_EO_Lock_Status_Approve();
            if (intResult == 5)
            {
                return;
            }
            //string script = null;
            //script = "<script>ApproverConfirm('" + ViewState["EOID"] + "','" + ViewState["stage"] + "','Site Planning','Y');</script> ";
            //Page.RegisterStartupScript("db_error_message", script);
            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "ApproverConfirm('" + ViewState["EOID"] + "','" + ViewState["stage"] + "','Site Planning','Y');", true);
        }

        protected void lnkSitePlanningDeclined_Click(object sender, EventArgs e)
        {
            int intResult;
            intResult = GET_EO_Lock_Status_Approve();
            if (intResult == 5)
            {
                return;
            }

            //string script = null;
            //script = "<script>ApproverConfirm('" + ViewState["EOID"] + "','" + ViewState["stage"] + "','Site Planning','N');</script> ";
            //Page.RegisterStartupScript("db_error_message", script);
            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "ApproverConfirm('" + ViewState["EOID"] + "','" + ViewState["stage"] + "','Site Planning','N');", true);
        }

        protected void lnkPreSitePlanBackUp_Click(object sender, EventArgs e)
        {

            int intResult;
            intResult = GET_EO_Lock_Status_Approve();
            if (intResult == 5)
            {
                return;
            }

            string script = null;
            string strFuncName = lblAppSiteplan.Text.Trim();
            string strPlantID = drpPlant.SelectedItem.Value;
            if (strPlantID == "--Select a Plant--")
            {
                strPlantID = "0";
            }
            //script = "<script>window.open('ChangeApprover.aspx?FuncName=" + strFuncName + "&OriginalApprover=" + lblSitePlanningRO.Text.Trim() + "&EOID=" + ViewState["EOID"] + "&PlantID=" + strPlantID + "&From=BackUp','Approvers','height=200,width=400');</script>";
            //Page.RegisterStartupScript("clientscript", script);
            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "window.open('ChangeApprover.aspx?FuncName=" + strFuncName + "&OriginalApprover=" + lblSitePlanningRO.Text.Trim() + "&EOID=" + ViewState["EOID"] + "&PlantID=" + strPlantID + "&From=BackUp','Approvers','height=200,width=400');", true);
        }

        protected void lnkCentralPlanningApproved_Click(object sender, EventArgs e)
        {
            int intResult;
            intResult = GET_EO_Lock_Status_Approve();
            if (intResult == 5)
            {
                return;
            }
            //string script = null;
            //script = "<script>ApproverConfirm('" + ViewState["EOID"] + "','" + ViewState["stage"] + "','Central Planning','Y');</script> ";
            //Page.RegisterStartupScript("db_error_message", script);
            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "ApproverConfirm('" + ViewState["EOID"] + "','" + ViewState["stage"] + "','Central Planning','Y');", true);
        }

        protected void lnkCentralPlanningDeclined_Click(object sender, EventArgs e)
        {
            int intResult;
            intResult = GET_EO_Lock_Status_Approve();
            if (intResult == 5)
            {
                return;
            }

            //string script = null;
            //script = "<script>ApproverConfirm('" + ViewState["EOID"] + "','" + ViewState["stage"] + "','Central Planning','N');</script> ";
            //Page.RegisterStartupScript("db_error_message", script);
            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "ApproverConfirm('" + ViewState["EOID"] + "','" + ViewState["stage"] + "','Central Planning','N');", true);
        }

        protected void lnkPreCentralPlanBackU_Click(object sender, EventArgs e)
        {
            string script = null;
            string strFuncName = lblAppCentralPlan.Text.Trim();
            string strPlantID = drpPlant.SelectedItem.Value;
            if (strPlantID == "--Select a Plant--")
            {
                strPlantID = "0";
            }
            //script = "<script>window.open('ChangeApprover.aspx?FuncName=" + strFuncName + "&OriginalApprover=" + lblCenPlanningRO.Text.Trim() + "&EOID=" + ViewState["EOID"] + "&PlantID=" + strPlantID + "&From=BackUp','Approvers','height=200,width=400');</script>";
            //Page.RegisterStartupScript("clientscript", script);
            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "ChangeApprover.aspx?FuncName=" + strFuncName + "&OriginalApprover=" + lblCenPlanningRO.Text.Trim() + "&EOID=" + ViewState["EOID"] + "&PlantID=" + strPlantID + "&From=BackUp','Approvers','height=200,width=400');", true);

        }

        protected void lnkSAPCostCenterApproved_Click(object sender, EventArgs e)
        {
            int intResult;
            intResult = GET_EO_Lock_Status_Approve();
            if (intResult == 5)
            {
                return;
            }
            string script = null;
            //script = "<script>ApproverConfirm('" + ViewState["EOID"] + "','" + ViewState["stage"] + "','SAP Cost Center Coordinator','Y');</script> ";
            //Page.RegisterStartupScript("db_error_message", script);
            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "ApproverConfirm('" + ViewState["EOID"] + "','" + ViewState["stage"] + "','SAP Cost Center Coordinator','Y');", true);
        }

        protected void lnkSAPCostCenterDeclined_Click(object sender, EventArgs e)
        {
            int intResult;
            intResult = GET_EO_Lock_Status_Approve();
            if (intResult == 5)
            {
                return;
            }

            string script = null;
            //script = "<script>ApproverConfirm('" + ViewState["EOID"] + "','" + ViewState["stage"] + "','SAP Cost Center Coordinator','N');</script> ";
            //Page.RegisterStartupScript("db_error_message", script);
            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "ApproverConfirm('" + ViewState["EOID"] + "','" + ViewState["stage"] + "','SAP Cost Center Coordinator','N');", true);
        }

        protected void lnkPreSAPBackU_Click(object sender, EventArgs e)
        {
            string script = null;
            string strFuncName = lblAppSAPCost.Text.Trim();
            string strPlantID = drpPlant.SelectedItem.Value;
            if (strPlantID == "--Select a Plant--")
            {
                strPlantID = "0";
            }
            //script = "<script>window.open('ChangeApprover.aspx?FuncName=" + strFuncName + "&OriginalApprover=" + lblSAPRO.Text.Trim() + "&EOID=" + ViewState["EOID"] + "&PlantID=" + strPlantID + "&From=BackUp','Approvers','height=200,width=400');</script>";
            //Page.RegisterStartupScript("clientscript", script);
            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "window.open('ChangeApprover.aspx?FuncName=" + strFuncName + "&OriginalApprover=" + lblSAPRO.Text.Trim() + "&EOID=" + ViewState["EOID"] + "&PlantID=" + strPlantID + "&From=BackUp','Approvers','height=200,width=400');", true);
        }

        protected void lnkPreSmartClearanceBackU_Click(object sender, EventArgs e)
        {
            string script = null;
            string strFuncName = lblAppSmartClearance.Text.Trim();
            string strPlantID = drpPlant.SelectedItem.Value;
            if (strPlantID == "--Select a Plant--")
            {
                strPlantID = "0";
            }
            //script = "<script>window.open('ChangeApprover.aspx?FuncName=" + strFuncName + "&OriginalApprover=" + lblSmartClearancePRO.Text.Trim() + "&EOID=" + ViewState["EOID"] + "&PlantID=" + strPlantID + "&From=BackUp','Approvers','height=200,width=400');</script>";
            //Page.RegisterStartupScript("clientscript", script);
            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "window.open('ChangeApprover.aspx?FuncName=" + strFuncName + "&OriginalApprover=" + lblSmartClearancePRO.Text.Trim() + "&EOID=" + ViewState["EOID"] + "&PlantID=" + strPlantID + "&From=BackUp','Approvers','height=200,width=400');", true);
        }

        protected void lnkTimingGateApproved_Click(object sender, EventArgs e)
        {
            int intResult;
            intResult = GET_EO_Lock_Status_Approve();
            if (intResult == 5)
            {
                return;
            }
            string script = null;
            //script = "<script>ApproverConfirm('" + ViewState["EOID"] + "','" + ViewState["stage"] + "','Timing Gate Exception','Y');</script> ";
            //Page.RegisterStartupScript("db_error_message", script);
            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "ApproverConfirm('" + ViewState["EOID"] + "','" + ViewState["stage"] + "','Timing Gate Exception','Y');", true);
        }

        protected void lnkTimingGateDeclined_Click(object sender, EventArgs e)
        {
            int intResult;
            intResult = GET_EO_Lock_Status_Approve();
            if (intResult == 5)
            {
                return;
            }

            string script = null;
            //script = "<script>ApproverConfirm('" + ViewState["EOID"] + "','" + ViewState["stage"] + "','Timing Gate Exception','N');</script> ";
            //Page.RegisterStartupScript("db_error_message", script);
            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "ApproverConfirm('" + ViewState["EOID"] + "','" + ViewState["stage"] + "','Timing Gate Exception','N');", true);
        }

        protected void lnkPreTimingGateUp_Click(object sender, EventArgs e)
        {
            string script = null;
            string strFuncName = lblAppTiminingGate.Text.Trim();
            string strPlantID = drpPlant.SelectedItem.Value;
            if (strPlantID == "--Select a Plant--")
            {
                strPlantID = "0";
            }
            //script = "<script>window.open('ChangeApprover.aspx?FuncID=0&PlantID=0&From=Pre','Approvers','height=200,width=400');</script>"
            //script = "<script>window.open('ChangeApprover.aspx?FuncName=" + strFuncName + "&OriginalApprover=" + lblTimingGateRO.Text.Trim() + "&EOID=" + ViewState["EOID"] + "&PlantID=" + strPlantID + "&From=BackUp','Approvers','height=200,width=400');</script>";
            //Page.RegisterStartupScript("clientscript", script);
            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "window.open('ChangeApprover.aspx?FuncName=" + strFuncName + "&OriginalApprover=" + lblTimingGateRO.Text.Trim() + "&EOID=" + ViewState["EOID"] + "&PlantID=" + strPlantID + "&From=BackUp','Approvers','height=200,width=400');", true);
        }

        protected void lnkStandardOfficeApproved_Click(object sender, EventArgs e)
        {
            int intResult;
            intResult = GET_EO_Lock_Status_Approve();
            if (intResult == 5)
            {
                return;
            }
            string script = null;
            //script = "<script>ApproverConfirm('" + ViewState["EOID"] + "','" + ViewState["stage"] + "','Standards Office','Y');</script> ";
            //Page.RegisterStartupScript("db_error_message", script);
            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "ApproverConfirm('" + ViewState["EOID"] + "','" + ViewState["stage"] + "','Standards Office','Y');", true);
        }

        protected void lnkStandardOfficeDeclined_Click(object sender, EventArgs e)
        {
            int intResult;
            intResult = GET_EO_Lock_Status_Approve();
            if (intResult == 5)
            {
                return;
            }

            string script = null;
            //script = "<script>ApproverConfirm('" + ViewState["EOID"] + "','" + ViewState["stage"] + "','Standards Office','N');</script> ";
            //Page.RegisterStartupScript("db_error_message", script);
            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "ApproverConfirm('" + ViewState["EOID"] + "','" + ViewState["stage"] + "','Standards Office','N');", true);
        }

        protected void lnkPreStandsOfficeUp_Click(object sender, EventArgs e)
        {
            string script = null;
            string strFuncName = lblAppStandsOffice.Text.Trim();
            string strPlantID = drpPlant.SelectedItem.Value;
            if (strPlantID == "--Select a Plant--")
            {
                strPlantID = "0";
            }
            //script = "<script>window.open('ChangeApprover.aspx?FuncName=" + strFuncName + "&OriginalApprover=" + lblStansOffRO.Text.Trim() + "&EOID=" + ViewState["EOID"] + "&PlantID=" + strPlantID + "&From=BackUp','Approvers','height=200,width=400');</script>";
            //Page.RegisterStartupScript("clientscript", script);
            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "window.open('ChangeApprover.aspx?FuncName=" + strFuncName + "&OriginalApprover=" + lblStansOffRO.Text.Trim() + "&EOID=" + ViewState["EOID"] + "&PlantID=" + strPlantID + "&From=BackUp','Approvers','height=200,width=400');", true);
        }

        protected void lnkAdditionalApprover1Approved_Click(object sender, EventArgs e)
        {
            int intResult;
            intResult = GET_EO_Lock_Status_Approve();
            if (intResult == 5)
            {
                return;
            }
            //string script = null;
            //script = "<script>ApproverConfirm('" + ViewState["EOID"] + "','" + ViewState["stage"] + "','Additional approver1','Y');</script> ";
            //Page.RegisterStartupScript("db_error_message", script);
            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "ApproverConfirm('" + ViewState["EOID"] + "','" + ViewState["stage"] + "','Additional approver1','Y');", true);
        }

        protected void lnkAdditionalApprover1Declined_Click(object sender, EventArgs e)
        {
            int intResult;
            intResult = GET_EO_Lock_Status_Approve();
            if (intResult == 5)
            {
                return;
            }

            string script = null;
            //script = "<script>ApproverConfirm('" + ViewState["EOID"] + "','" + ViewState["stage"] + "','Additional approver1','N');</script> ";
            //Page.RegisterStartupScript("db_error_message", script);
            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "ApproverConfirm('" + ViewState["EOID"] + "','" + ViewState["stage"] + "','Additional approver1','N');", true);
        }

        protected void lnkAdditionalApprover1Up_Click(object sender, EventArgs e)
        {
            string script = null;
            string strFuncName = "Additional approver1";
            //lblAdditionalApprover1a.Text.Trim()
            string strPlantID = drpPlant.SelectedItem.Value;
            if (strPlantID == "--Select a Plant--")
            {
                strPlantID = "0";
            }
            //script = "<script>window.open('ChangeApprover.aspx?FuncName=" + strFuncName + "&OriginalApprover=" + lblAdditionalApprover1RO.Text.Trim() + "&EOID=" + ViewState["EOID"] + "&PlantID=" + strPlantID + "&From=BackUp','Approvers','height=200,width=400');</script>";
            //Page.RegisterStartupScript("clientscript", script);
            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "window.open('ChangeApprover.aspx?FuncName=" + strFuncName + "&OriginalApprover=" + lblAdditionalApprover1RO.Text.Trim() + "&EOID=" + ViewState["EOID"] + "&PlantID=" + strPlantID + "&From=BackUp','Approvers','height=200,width=400');", true);
        }

        protected void lnkAdditionalApprover2Approved_Click(object sender, EventArgs e)
        {
            int intResult;
            intResult = GET_EO_Lock_Status_Approve();
            if (intResult == 5)
            {
                return;
            }
            //string script = null;
            //script = "<script>ApproverConfirm('" + ViewState["EOID"] + "','" + ViewState["stage"] + "','Additional approver2','Y');</script> ";
            //Page.RegisterStartupScript("db_error_message", script);
            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "ApproverConfirm('" + ViewState["EOID"] + "','" + ViewState["stage"] + "','Additional approver2','Y');", true);
        }

        protected void lnkAdditionalApprover2Declined_Click(object sender, EventArgs e)
        {
            int intResult;
            intResult = GET_EO_Lock_Status_Approve();
            if (intResult == 5)
            {
                return;
            }

            //string script = null;
            //script = "<script>ApproverConfirm('" + ViewState["EOID"] + "','" + ViewState["stage"] + "','Additional approver2','N');</script> ";
            //Page.RegisterStartupScript("db_error_message", script);
            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "ApproverConfirm('" + ViewState["EOID"] + "','" + ViewState["stage"] + "','Additional approver2','N');", true);
        }

        protected void lnkAdditionalApprover2Up_Click(object sender, EventArgs e)
        {
            string script = null;
            string strFuncName = "Additional approver2";
            //lblAdditionalApprover2a.Text.Trim
            string strPlantID = drpPlant.SelectedItem.Value;
            if (strPlantID == "--Select a Plant--")
            {
                strPlantID = "0";
            }
            //script = "<script>window.open('ChangeApprover.aspx?FuncName=" + strFuncName + "&OriginalApprover=" + lblAdditionalApprover1RO.Text.Trim() + "&EOID=" + ViewState["EOID"] + "&PlantID=" + strPlantID + "&From=BackUp','Approvers','height=200,width=400');</script>";
            //Page.RegisterStartupScript("clientscript", script);
            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "window.open('ChangeApprover.aspx?FuncName=" + strFuncName + "&OriginalApprover=" + lblAdditionalApprover1RO.Text.Trim() + "&EOID=" + ViewState["EOID"] + "&PlantID=" + strPlantID + "&From=BackUp','Approvers','height=200,width=400');", true);

        }

        protected void lnkAdditionalApprover3Approved_Click(object sender, EventArgs e)
        {
            int intResult;
            intResult = GET_EO_Lock_Status_Approve();
            if (intResult == 5)
            {
                return;
            }
            //string script = null;
            //script = "<script>ApproverConfirm('" + ViewState["EOID"] + "','" + ViewState["stage"] + "','Additional approver3','Y');</script> ";
            //Page.RegisterStartupScript("db_error_message", script);
            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "ApproverConfirm('" + ViewState["EOID"] + "','" + ViewState["stage"] + "','Additional approver3','Y');", true);
        }

        protected void lnkAdditionalApprover3Declined_Click(object sender, EventArgs e)
        {
            int intResult;
            intResult = GET_EO_Lock_Status_Approve();
            if (intResult == 5)
            {
                return;
            }

            //string script = null;
            //script = "<script>ApproverConfirm('" + ViewState["EOID"] + "','" + ViewState["stage"] + "','Additional approver3','N');</script> ";
            //Page.RegisterStartupScript("db_error_message", script);
            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "ApproverConfirm('" + ViewState["EOID"] + "','" + ViewState["stage"] + "','Additional approver3','N');", true);
        }

        protected void lnkAdditionalApprover3Up_Click(object sender, EventArgs e)
        {
            //string script = null;
            string strFuncName = "Additional approver3";
            //lblAdditionalApprover3a.Text.Trim()
            string strPlantID = drpPlant.SelectedItem.Value;
            if (strPlantID == "--Select a Plant--")
            {
                strPlantID = "0";
            }
            //script = "<script>window.open('ChangeApprover.aspx?FuncName=" + strFuncName + "&OriginalApprover=" + lblAdditionalApprover1RO.Text.Trim() + "&EOID=" + ViewState["EOID"] + "&PlantID=" + strPlantID + "&From=BackUp','Approvers','height=200,width=400');</script>";
            //Page.RegisterStartupScript("clientscript", script);
            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "window.open('ChangeApprover.aspx?FuncName=" + strFuncName + "&OriginalApprover=" + lblAdditionalApprover1RO.Text.Trim() + "&EOID=" + ViewState["EOID"] + "&PlantID=" + strPlantID + "&From=BackUp','Approvers','height=200,width=400');", true);
        }

        protected void lnkAdditionalApprover4Approved_Click(object sender, EventArgs e)
        {
            int intResult;
            intResult = GET_EO_Lock_Status_Approve();
            if (intResult == 5)
            {
                return;
            }
            string script = null;
            //script = "<script>ApproverConfirm('" + ViewState["EOID"] + "','" + ViewState["stage"] + "','Additional approver4','Y');</script> ";
            //Page.RegisterStartupScript("db_error_message", script);
            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "ApproverConfirm('" + ViewState["EOID"] + "','" + ViewState["stage"] + "','Additional approver4','Y');", true);
        }

        protected void lnkAdditionalApprover4Declined_Click(object sender, EventArgs e)
        {
            int intResult;
            intResult = GET_EO_Lock_Status_Approve();
            if (intResult == 5)
            {
                return;
            }

            string script = null;
            //script = "<script>ApproverConfirm('" + ViewState["EOID"] + "','" + ViewState["stage"] + "','Additional approver4','N');</script> ";
            //Page.RegisterStartupScript("db_error_message", script);
            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "ApproverConfirm('" + ViewState["EOID"] + "','" + ViewState["stage"] + "','Additional approver4','N');", true);
        }

        protected void lnkAdditionalApprover4Up_Click(object sender, EventArgs e)
        {
            string script = null;
            string strFuncName = "Additional approver4";
            //lblAdditionalApprover4a.Text.Trim
            string strPlantID = drpPlant.SelectedItem.Value;
            if (strPlantID == "--Select a Plant--")
            {
                strPlantID = "0";
            }
            //script = "<script>window.open('ChangeApprover.aspx?FuncName=" + strFuncName + "&OriginalApprover=" + lblAdditionalApprover1RO.Text.Trim() + "&EOID=" + ViewState["EOID"] + "&PlantID=" + strPlantID + "&From=BackUp','Approvers','height=200,width=400');</script>";
            //Page.RegisterStartupScript("clientscript", script);
            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "window.open('ChangeApprover.aspx?FuncName=" + strFuncName + "&OriginalApprover=" + lblAdditionalApprover1RO.Text.Trim() + "&EOID=" + ViewState["EOID"] + "&PlantID=" + strPlantID + "&From=BackUp','Approvers','height=200,width=400');", true);

        }

        protected void imgDelAttachFinalQA_Click(object sender, ImageClickEventArgs e)
        {
            try
            {
                int rowCount = 0;
                string str = null;
                str = "";
                for (rowCount = 0; rowCount <= lbFinalQAAttach.Items.Count - 1; rowCount++)
                {
                    try
                    {
                        if (lbFinalQAAttach.Items[rowCount].Selected == true)
                        {
                            //
                            if (string.IsNullOrEmpty(str))
                            {
                                str = lbFinalQAAttach.Items[rowCount].Value;
                            }
                            else
                            {
                                str = str + "," + lbFinalQAAttach.Items[rowCount].Value;
                            }
                            lbFinalQAAttach.Items.Remove(lbFinalQAAttach.SelectedItem);
                            arCostSheet.RemoveAt(lbFinalQAAttach.SelectedIndex);
                        }
                    }
                    catch (Exception ex)
                    {
                    }
                }
                if (!string.IsNullOrEmpty(str))
                {
                    script = "alert('Attachment will be deleted from the database after the EO is submitted')";
                    //Page.RegisterStartupScript("clientscript", script);
                    ScriptManager.RegisterStartupScript(this, typeof(Page), "script", script, true);
                }
                string eid = ViewState["EOID"].ToString();
                try
                {
                    int Eoid_Del = Convert.ToInt32(eid);
                    //intAttachResult = objClsEO.DeleteCommonAttachmentsFinal(str, Eoid_Del, "QA");
                    if (objEOBA.DeleteCommonAttachmentsFinal(str, Eoid_Del, "QA", ref paramOut))
                    {
                        intAttachResult = Convert.ToInt32(paramOut[0].Value);
                    }
                }
                catch (Exception ex)
                {
                }
            }
            catch (Exception ex)
            {
            }
        }

        protected void imgDelAttchFinalFormulaCard_Click(object sender, ImageClickEventArgs e)
        {
            SqlParameter[] paramOut = null;
            try
            {
                int rowCount = 0;
                string str = null;
                str = "";
                for (rowCount = 0; rowCount <= lbFormulaCardAttach.Items.Count - 1; rowCount++)
                {
                    if (lbFormulaCardAttach.Items[rowCount].Selected == true)
                    {
                        //
                        if (string.IsNullOrEmpty(str))
                        {
                            str = lbFormulaCardAttach.Items[rowCount].Value;
                        }
                        else
                        {
                            str = str + "," + lbFormulaCardAttach.Items[rowCount].Value;
                        }
                        lbFormulaCardAttach.Items.Remove(lbFormulaCardAttach.SelectedItem);
                        arFormulaCardInfo.RemoveAt(lbFormulaCardAttach.SelectedIndex);
                    }

                }

                if (!string.IsNullOrEmpty(str))
                {
                    script = "alert('Attachment will be deleted from the database after the EO is submitted')";
                    //Page.RegisterStartupScript("clientscript", script);
                    ScriptManager.RegisterStartupScript(this, typeof(Page), "script", script, true);
                }
                int Eoid_Del = Convert.ToInt32(ViewState["EOID"]);

                if (objEOBA.DeleteCommonAttachmentsFinal(str, Eoid_Del, "Formula", ref paramOut))
                {
                    intAttachResult = Convert.ToInt32(paramOut[0].Value);
                }
            }
            catch (Exception ex)
            {
            }
            finally
            {
                objEOBA = null;
                paramOut = null;
            }
        }

        protected void imgDelAttchFinalTestPlans_Click(object sender, ImageClickEventArgs e)
        {

            SqlParameter[] paramOut = null;
            try
            {
                int rowCount = 0;
                string str = null;
                str = "";
                for (rowCount = 0; rowCount <= lbTestPlansAttach.Items.Count - 1; rowCount++)
                {
                    if (lbTestPlansAttach.Items[rowCount].Selected == true)
                    {
                        if (string.IsNullOrEmpty(str))
                        {
                            str = lbTestPlansAttach.Items[rowCount].Value;
                        }
                        else
                        {
                            str = str + "," + lbTestPlansAttach.Items[rowCount].Value;
                        }
                        lbTestPlansAttach.Items.Remove(lbTestPlansAttach.SelectedItem);
                        arTestPlans.RemoveAt(lbTestPlansAttach.SelectedIndex);
                    }

                }
                if (!string.IsNullOrEmpty(str))
                {
                    script = "alert('Attachment will be deleted from the database after the EO is submitted')";
                    //Page.RegisterStartupScript("clientscript", script);
                    ScriptManager.RegisterStartupScript(this, typeof(Page), "script", script, true);
                }

                int Eoid_Del = Convert.ToInt32(ViewState["EOID"]);
                if (objEOBA.DeleteCommonAttachmentsFinal(str, Eoid_Del, "Test_Plans", ref paramOut))
                {
                    intAttachResult = Convert.ToInt32(paramOut[0].Value);
                }

            }
            catch (Exception ex)
            {
            }
            finally
            {
                objEOBA = null;
                paramOut = null;
            }
        }

        protected void imgDelAttchFinalLabSamples_Click(object sender, ImageClickEventArgs e)
        {

            SqlParameter[] paramOut = null;
            try
            {
                int rowCount = 0;
                string str = null;
                str = "";
                for (rowCount = 0; rowCount <= lbLabSampleAttach.Items.Count - 1; rowCount++)
                {

                    if (lbLabSampleAttach.Items[rowCount].Selected == true)
                    {
                        //
                        if (string.IsNullOrEmpty(str))
                        {
                            str = lbLabSampleAttach.Items[rowCount].Value;
                        }
                        else
                        {
                            str = str + "," + lbLabSampleAttach.Items[rowCount].Value;
                        }
                        lbLabSampleAttach.Items.Remove(lbLabSampleAttach.SelectedItem);
                        arLabSamples.RemoveAt(lbLabSampleAttach.SelectedIndex);
                    }

                }
                if (!string.IsNullOrEmpty(str))
                {
                    script = "alert('Attachment will be deleted from the database after the EO is submitted')";
                    //Page.RegisterStartupScript("clientscript", script);
                    ScriptManager.RegisterStartupScript(this, typeof(Page), "script", script, true);
                }

                int Eoid_Del = Convert.ToInt32(ViewState["EOID"]);

                if (objEOBA.DeleteCommonAttachmentsFinal(str, Eoid_Del, "Lab", ref paramOut))
                {
                    intAttachResult = Convert.ToInt32(paramOut[0].Value);
                }

            }
            catch (Exception ex)
            {
            }
            finally
            {
                objEOBA = null;
                paramOut = null;
            }

        }

        protected void imgDelAttchFinalFlowMatrix_Click(object sender, ImageClickEventArgs e)
        {

            SqlParameter[] paramOut = null;
            try
            {
                int rowCount = 0;
                string str = null;
                str = "";
                for (rowCount = 0; rowCount <= lbFlowMatrixAttach.Items.Count - 1; rowCount++)
                {
                    if (lbFlowMatrixAttach.Items[rowCount].Selected == true)
                    {
                        //
                        if (string.IsNullOrEmpty(str))
                        {
                            str = lbFlowMatrixAttach.Items[rowCount].Value;
                        }
                        else
                        {
                            str = str + "," + lbFlowMatrixAttach.Items[rowCount].Value;
                        }
                        lbFlowMatrixAttach.Items.Remove(lbFlowMatrixAttach.SelectedItem);
                        arProdTestFlowMatrix.RemoveAt(lbFlowMatrixAttach.SelectedIndex);
                    }

                }
                if (!string.IsNullOrEmpty(str))
                {
                    script = "alert('Attachment will be deleted from the database after the EO is submitted')";
                    //Page.RegisterStartupScript("clientscript", script);
                    ScriptManager.RegisterStartupScript(this, typeof(Page), "script", script, true);
                }
                string eid = ViewState["EOID"].ToString();

                int Eoid_Del = Convert.ToInt32(eid);
                if (objEOBA.DeleteCommonAttachmentsFinal(str, Eoid_Del, "Matrix", ref paramOut))
                {
                    intAttachResult = Convert.ToInt32(paramOut[0].Value);
                }

            }
            catch (Exception ex)
            {
            }
            finally
            {
                objEOBA = null;
                paramOut = null;
            }
        }

        protected void imgDelAttchFinalOtherSup_Click(object sender, ImageClickEventArgs e)
        {

            SqlParameter[] paramOut = null;
            try
            {
                int rowCount = 0;
                string str = null;
                str = "";
                for (rowCount = 0; rowCount <= lbSupDocAttach.Items.Count - 1; rowCount++)
                {
                    if (lbSupDocAttach.Items[rowCount].Selected == true)
                    {
                        //
                        if (string.IsNullOrEmpty(str))
                        {
                            str = lbSupDocAttach.Items[rowCount].Value;
                        }
                        else
                        {
                            str = str + "," + lbSupDocAttach.Items[rowCount].Value;
                        }
                        lbSupDocAttach.Items.Remove(lbSupDocAttach.SelectedItem);
                        arOtherSupp.RemoveAt(lbSupDocAttach.SelectedIndex);
                    }
                }
                if (!string.IsNullOrEmpty(str))
                {
                    script = "alert('Attachment will be deleted from the database after the EO is submitted')";
                    //Page.RegisterStartupScript("clientscript", script);
                    ScriptManager.RegisterStartupScript(this, typeof(Page), "script", script, true);
                }
                int Eoid_Del = Convert.ToInt32(ViewState["EOID"]);
                int intAttachResult;
                if (objEOBA.DeleteCommonAttachmentsFinal(str, Eoid_Del, "Others", ref paramOut))
                {
                    intAttachResult = Convert.ToInt32(paramOut[0].Value);
                }
            }
            catch (Exception ex)
            {
            }

            finally
            {
                objEOBA = null;
                paramOut = null;
            }
        }

        protected void imgDelAttchCOFinalCost_Click(object sender, ImageClickEventArgs e)
        {

            int rowCount = 0;
            string str = null;
            str = "";
            for (rowCount = 0; rowCount <= lbFinalCostAttach.Items.Count - 1; rowCount++)
            {
                if (lbFinalCostAttach.Items[rowCount].Selected == true)
                {
                    //
                    if (string.IsNullOrEmpty(str))
                    {
                        str = lbFinalCostAttach.Items[rowCount].Value;
                    }
                    else
                    {
                        str = str + "," + lbFinalCostAttach.Items[rowCount].Value;
                    }
                    lbFinalCostAttach.Items.Remove(lbFinalCostAttach.SelectedItem);
                    arActualCostSheet.RemoveAt(lbFinalCostAttach.SelectedIndex);
                }

            }
            if (!string.IsNullOrEmpty(str))
            {
                script = "alert('Attachment will be deleted from the database after the EO is submitted')";
                //Page.RegisterStartupScript("clientscript", script);
                ScriptManager.RegisterStartupScript(this, typeof(Page), "script", script, true);
            }

            SqlParameter[] paramOut = null;
            try
            {
                int Eoid_Del = Convert.ToInt32(ViewState["EOID"]);
                int intAttachResult;
                if (objEOBA.DeleteCommonAttachmentsCloseOut(str, Eoid_Del, "Actual", ref paramOut))
                {
                    intAttachResult = Convert.ToInt32(paramOut[0].Value);
                }
            }
            catch (Exception ex)
            {
            }
            finally
            {
                objEOBA = null;
                paramOut = null;
            }
        }

        protected void imgDelAttachFinalCostSheet_Click(object sender, ImageClickEventArgs e)
        {

            SqlParameter[] paramOut = null;
            try
            {
                int rowCount = 0;
                string str = null;
                str = "";
                for (rowCount = 0; rowCount <= lbCostSheetAttach.Items.Count - 1; rowCount++)
                {
                    if (lbCostSheetAttach.Items[rowCount].Selected == true)
                    {
                        //
                        if (string.IsNullOrEmpty(str))
                        {
                            str = lbCostSheetAttach.Items[rowCount].Value;
                        }
                        else
                        {
                            str = str + "," + lbCostSheetAttach.Items[rowCount].Value;
                        }
                        lbCostSheetAttach.Items.Remove(lbCostSheetAttach.SelectedItem);
                        arCostSheet.RemoveAt(lbCostSheetAttach.SelectedIndex);
                    }
                }
                if (!string.IsNullOrEmpty(str))
                {
                    script = "alert('Attachment will be deleted from the database after the EO is submitted')";
                    //Page.RegisterStartupScript("clientscript", script);
                    ScriptManager.RegisterStartupScript(this, typeof(Page), "script", script, true);
                }
                int Eoid_Del = Convert.ToInt32(ViewState["EOID"]);
                if (objEOBA.DeleteCommonAttachmentsFinal(str, Eoid_Del, "Cost", ref paramOut))
                {
                    intAttachResult = Convert.ToInt32(paramOut[0].Value);
                }
            }
            catch (Exception ex)
            {
            }
            finally
            {
                objEOBA = null;
                paramOut = null;
            }
        }

        protected void imgDeleteAttach_Click(object sender, ImageClickEventArgs e)
        {


            SqlParameter[] paramOut = null;
            try
            {
                int rowCount = 0;
                string str = null;
                str = "";
                for (rowCount = 0; rowCount <= lbAddItemsEO.Items.Count - 1; rowCount++)
                {
                    if (lbAddItemsEO.Items[rowCount].Selected == true)
                    {
                        if (string.IsNullOrEmpty(str))
                        {
                            str = lbAddItemsEO.Items[rowCount].Value;
                        }
                        else
                        {
                            str = str + "," + lbAddItemsEO.Items[rowCount].Value;
                        }
                        lbAddItemsEO.Items.Remove(lbAddItemsEO.SelectedItem);
                        hif.RemoveAt(lbAddItemsEO.SelectedIndex);
                    }

                }
                if (!string.IsNullOrEmpty(str))
                {
                    script = "alert('Attachment will be deleted from the database after the EO is submitted')";
                    //Page.RegisterStartupScript("clientscript", script);
                    ScriptManager.RegisterStartupScript(this, typeof(Page), "script", script, true);

                }
                int Eoid_Del = Convert.ToInt32(ViewState["EOID"]);

                if (objEOBA.DeleteCommonAttachments(str, Eoid_Del, "PDI", ref paramOut))
                {
                    int intAttachResult = Convert.ToInt32(paramOut[0].Value);
                }
            }
            catch (Exception ex)
            {
            }
        }

        protected void btnAddGCAS_Click(object sender, ImageClickEventArgs e)
        {
            string script = null;

            if (drpCategoryDB.SelectedIndex == 0 || drpCategoryDB.SelectedIndex == -1)
            {
                script = "alert('Please select Category.');document.getElementById('drpCategoryDB').focus();";
                //Page.RegisterStartupScript("clientscript", script);
                ScriptManager.RegisterStartupScript(this, typeof(Page), "script", script, true);

                return;
            }
            if (drpEOProjectsDB.SelectedIndex == 0 || drpEOProjectsDB.SelectedIndex == -1)
            {
                script = "alert('Please select Project.');document.getElementById('drpEOProjectsDB').focus();";
                //Page.RegisterStartupScript("clientscript", script);
                ScriptManager.RegisterStartupScript(this, typeof(Page), "script", script, true);

                return;
            }
            if (drpPlant.SelectedIndex == 0 || drpPlant.SelectedIndex == -1)
            {
                script = "alert('Please select Plant.');document.getElementById('drpPlant').focus();";
                //Page.RegisterStartupScript("clientscript", script);
                ScriptManager.RegisterStartupScript(this, typeof(Page), "script", script, true);

                return;
            }
            int intEventsId = 0;
            int intstatus = 0;
            for (intEventsId = 0; intEventsId <= lbEOEventsDB.Items.Count - 1; intEventsId++)
            {
                if (lbEOEventsDB.Items[intEventsId].Selected == true)
                {
                    intstatus = 1;
                }
            }
            if (!(intstatus == 1))
            {
                script = "alert('Please select Event(s).');document.getElementById('lbEOEventsDB').focus();";
                //Page.RegisterStartupScript("clientscript", script);
                ScriptManager.RegisterStartupScript(this, typeof(Page), "script", script, true);

                return;
            }
            int intEOID = 0;
            string strCurrentStage = "Preliminary";
            string strStageStatus = "Draft";
            string strresumeExit = "ForPopup";
            AllTabSave(strCurrentStage, strStageStatus, strresumeExit);
            // script = "ShowGCASWindow('" + ViewState["EOID"] + "'); ";
            //Page.RegisterStartupScript("clientscript", script);
            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "ShowGCASWindow('" + ViewState["EOID"] + "');", true);


        }

        protected void btnAddPSRA_Click(object sender, ImageClickEventArgs e)
        {
            string script = null;

            if (drpCategoryDB.SelectedIndex == 0 || drpCategoryDB.SelectedIndex == -1)
            {
                script = "alert('Please select Category.');document.getElementById('drpCategoryDB').focus();";
                //Page.RegisterStartupScript("clientscript", script);
                ScriptManager.RegisterStartupScript(this, typeof(Page), "script", script, true);

                return;
            }
            if (drpEOProjectsDB.SelectedIndex == 0 || drpEOProjectsDB.SelectedIndex == -1)
            {
                script = "alert('Please select Project.');document.getElementById('drpEOProjectsDB').focus();";
                //Page.RegisterStartupScript("clientscript", script);
                ScriptManager.RegisterStartupScript(this, typeof(Page), "script", script, true);

                return;
            }
            if (drpPlant.SelectedIndex == 0 || drpPlant.SelectedIndex == -1)
            {
                script = "alert('Please select Plant.');document.getElementById('drpPlant').focus();";
                //Page.RegisterStartupScript("clientscript", script);
                ScriptManager.RegisterStartupScript(this, typeof(Page), "script", script, true);

                return;
            }
            int intEventsId = 0;
            int intstatus = 0;
            for (intEventsId = 0; intEventsId <= lbEOEventsDB.Items.Count - 1; intEventsId++)
            {
                if (lbEOEventsDB.Items[intEventsId].Selected == true)
                {
                    intstatus = 1;
                }
            }
            if (!(intstatus == 1))
            {
                script = "alert('Please select Event(s).');document.getElementById('lbEOEventsDB').focus();";
                //Page.RegisterStartupScript("clientscript", script);
                ScriptManager.RegisterStartupScript(this, typeof(Page), "script", script, true);

                return;
            }
            int intEOID = 0;
            string strCurrentStage = "Preliminary";
            string strStageStatus = "Draft";
            string strresumeExit = "ForPopup";
            AllTabSave(strCurrentStage, strStageStatus, strresumeExit);
            script = "ShowPSRAWindow('" + ViewState["EOID"] + "'); ";
            //Page.RegisterStartupScript("clientscript", script);
            ScriptManager.RegisterStartupScript(this, typeof(Page), "script", script, true);

        }

        protected void imgPreRoute_Click1(object sender, ImageClickEventArgs e)
        {
            string strJavaScript = string.Empty;

            if (!(t11.Text.ToString().Trim() == ""))
            {
                if (!(drpCategoryDB.SelectedItem.Value == "--Select a Category--"))
                {
                }
                else
                {
                    strJavaScript = "document.getElementById('drpCategoryDB').focus();";
                    //ClientScript.RegisterStartupScript(GetType(), "clientscript", strJavaScript);
                    ScriptManager.RegisterStartupScript(this, typeof(Page), "script", strJavaScript, true);

                    return;

                }

                if (!(drpEOProjectsDB.SelectedItem.Value == "--Select a Project--"))
                {
                }
                else
                {
                    strJavaScript = "document.getElementById('drpEOProjectsDB').focus();";
                    //ClientScript.RegisterStartupScript(GetType(), "clientscript", strJavaScript);
                    ScriptManager.RegisterStartupScript(this, typeof(Page), "script", strJavaScript, true);

                    return;
                }

                if (!(drpPlant.SelectedItem.Value == "--Select a Project--"))
                {
                }
                else
                {
                    strJavaScript = "document.getElementById('drpPlant').focus();";
                    //ClientScript.RegisterStartupScript(GetType(), "clientscript", strJavaScript);
                    ScriptManager.RegisterStartupScript(this, typeof(Page), "script", strJavaScript, true);

                    return;
                }

                int intEvents;
                string EventID = string.Empty;
                for (intEvents = 0; intEvents < lbEOEventsDB.Items.Count - 1; intEvents++)
                {
                    if (lbEOEventsDB.Items[intEvents].Selected == true)
                    {
                        if (EventID == "")
                        {
                            EventID = lbEOEventsDB.Items[intEvents].Value;

                        }
                        else
                        {
                            EventID = EventID + "," + lbEOEventsDB.Items[intEvents].Value;
                        }

                    }
                }

                if (!(EventID == ""))
                {
                }
                else
                {
                    strJavaScript = "document.getElementById('lbEOEventsDB').focus();";
                    //ClientScript.RegisterStartupScript(GetType(), "clientscript", strJavaScript);
                    ScriptManager.RegisterStartupScript(this, typeof(Page), "script", strJavaScript, true);

                    return;
                }

                if ((rbRawMaterial.Items[0].Selected == true) || (rbRawMaterial.Items[1].Selected == true))
                {

                }
                else
                {
                    strJavaScript = "document.getElementById('rbRawMaterial').focus();";
                    //ClientScript.RegisterStartupScript(GetType(), "clientscript", strJavaScript);
                    ScriptManager.RegisterStartupScript(this, typeof(Page), "script", strJavaScript, true);

                    return;
                }


                if ((rbParentRolls.Items[0].Selected == true) || (rbParentRolls.Items[1].Selected == true))
                {

                }
                else
                {
                    strJavaScript = "document.getElementById('rbParentRolls').focus();";
                    //ClientScript.RegisterStartupScript(GetType(), "clientscript", strJavaScript);
                    ScriptManager.RegisterStartupScript(this, typeof(Page), "script", strJavaScript, true);

                    return;
                }

                if ((rbInterMaterials.Items[0].Selected == true) || (rbInterMaterials.Items[1].Selected == true))
                {

                }
                else
                {
                    strJavaScript = "document.getElementById('rbInterMaterials').focus();";
                    //ClientScript.RegisterStartupScript(GetType(), "clientscript", strJavaScript);
                    ScriptManager.RegisterStartupScript(this, typeof(Page), "script", strJavaScript, true);

                    return;
                }


                if (((ViewState["EOIDFlag"] != null) && (ViewState["EOIDFlag"].ToString() == "1")) || (Request.QueryString["EOID"] == null))
                {

                }
                else
                {
                    if ((rbRegulatedProduct.Items[0].Selected == true) || (rbRegulatedProduct.Items[1].Selected == true))
                    {

                    }
                    else
                    {
                        strJavaScript = "document.getElementById('rbRegulatedProduct').focus();";
                        //ClientScript.RegisterStartupScript(GetType(), "clientscript", strJavaScript);
                        ScriptManager.RegisterStartupScript(this, typeof(Page), "script", strJavaScript, true);

                        return;
                    }

                }


                if ((rbShipped.Items[0].Selected == true) || (rbShipped.Items[1].Selected == true))
                {

                }
                else
                {
                    strJavaScript = "document.getElementById('rbShipped').focus();";
                    //ClientScript.RegisterStartupScript(GetType(), "clientscript", strJavaScript);
                    ScriptManager.RegisterStartupScript(this, typeof(Page), "script", strJavaScript, true);

                    return;
                }


                //Added on 01/20/2010 
                //For MUREO PCRs
                //By: David

                if (((ViewState["EOIDFlag"] != null) && (ViewState["EOIDFlag"].ToString() == "1")) || (Request.QueryString["EOID"] == null))
                {
                    if ((chkMaterialsBrands.Items[0].Selected == false) && (chkMaterialsBrands.Items[1].Selected == false) && (chkMaterialsBrands.Items[2].Selected == false))
                    {
                        strJavaScript = "document.getElementById('chkMaterialsBrands').focus();";
                        //ClientScript.RegisterStartupScript(GetType(), "clientscript", strJavaScript);
                        ScriptManager.RegisterStartupScript(this, typeof(Page), "script", strJavaScript, true);

                        return;
                    }

                }
                else
                {


                }


                if ((rbTestProductedShipped.Items[0].Selected == true) || (rbTestProductedShipped.Items[1].Selected == true))
                {

                }
                else
                {
                    strJavaScript = "document.getElementById('rbTestProductedShipped').focus();";
                    //ClientScript.RegisterStartupScript(GetType(), "clientscript", strJavaScript);
                    ScriptManager.RegisterStartupScript(this, typeof(Page), "script", strJavaScript, true);

                    return;
                }

                if ((rbGCASNumber.Items[0].Selected == true) || (rbGCASNumber.Items[1].Selected == true))
                {

                }
                else
                {
                    strJavaScript = "document.getElementById('rbGCASNumber').focus();";
                    //ClientScript.RegisterStartupScript(GetType(), "clientscript", strJavaScript);
                    ScriptManager.RegisterStartupScript(this, typeof(Page), "script", strJavaScript, true);

                    return;
                }

                if ((rbChemical.Items[0].Selected == true) || (rbChemical.Items[1].Selected == true))
                {

                }
                else
                {
                    strJavaScript = "document.getElementById('rbChemical').focus();";
                    //ClientScript.RegisterStartupScript(GetType(), "clientscript", strJavaScript);
                    ScriptManager.RegisterStartupScript(this, typeof(Page), "script", strJavaScript, true);

                    return;
                }

                if ((rbNewRawMaterial.Items[0].Selected == true) || (rbNewRawMaterial.Items[1].Selected == true))
                {

                }
                else
                {
                    strJavaScript = "document.getElementById('rbNewRawMaterial').focus();";
                    //ClientScript.RegisterStartupScript(GetType(), "clientscript", strJavaScript);
                    ScriptManager.RegisterStartupScript(this, typeof(Page), "script", strJavaScript, true);

                    return;
                }

                if ((rbNewEquipment.Items[0].Selected == true) || (rbNewEquipment.Items[1].Selected == true))
                {

                }
                else
                {
                    strJavaScript = "document.getElementById('rbNewEquipment').focus();";
                    //ClientScript.RegisterStartupScript(GetType(), "clientscript", strJavaScript);
                    ScriptManager.RegisterStartupScript(this, typeof(Page), "script", strJavaScript, true);

                    return;
                }

                if ((rbNewJobTask.Items[0].Selected == true) || (rbNewJobTask.Items[1].Selected == true))
                {

                }
                else
                {
                    strJavaScript = "document.getElementById('rbNewJobTask').focus();";
                    //ClientScript.RegisterStartupScript(GetType(), "clientscript", strJavaScript);
                    ScriptManager.RegisterStartupScript(this, typeof(Page), "script", strJavaScript, true);

                    return;
                }



                //Added for MUREO PCRs:-

                if (((ViewState["EOIDFlag"] != null) && (ViewState["EOIDFlag"].ToString() == "1")) || (Request.QueryString["EOID"] == null))
                {
                    if ((rblProductConsumers.Items[0].Selected == true) || (rblProductConsumers.Items[1].Selected == true))
                    {

                    }
                    else
                    {
                        strJavaScript = "document.getElementById('rblProductConsumers').focus();";
                        //ClientScript.RegisterStartupScript(GetType(), "clientscript", strJavaScript);
                        ScriptManager.RegisterStartupScript(this, typeof(Page), "script", strJavaScript, true);
                        return;
                    }
                }
                else
                {


                }

                if (((ViewState["EOIDFlag"] != null) && (ViewState["EOIDFlag"].ToString() == "1")) || (Request.QueryString["EOID"] == null))
                {
                    if ((rblProductApproved.Items[0].Selected == true) || (rblProductApproved.Items[1].Selected == true))
                    {

                    }
                    else
                    {
                        strJavaScript = "document.getElementById('rblProductApproved').focus();";
                        //ClientScript.RegisterStartupScript(GetType(), "clientscript", strJavaScript);
                        ScriptManager.RegisterStartupScript(this, typeof(Page), "script", strJavaScript, true);

                        return;
                    }
                }
                else
                {


                }

                if (((ViewState["EOIDFlag"] != null) && (ViewState["EOIDFlag"].ToString() == "1")) || (Request.QueryString["EOID"] == null))
                {
                    if ((rblProductConsumers.Items[0].Selected == true) && (rblProductApproved.Items[1].Selected == true))
                    {

                        if ((rblRawMaterialsQ1.Items[0].Selected == true) || (rblRawMaterialsQ1.Items[1].Selected == true) || (rblRawMaterialsQ2.Items[0].Selected == true) || (rblRawMaterialsQ2.Items[1].Selected == true) || (rblRawMaterialsQ3.Items[0].Selected == true) || (rblRawMaterialsQ3.Items[1].Selected == true) || (rblRawMaterialsQ4.Items[0].Selected == true) || (rblRawMaterialsQ4.Items[1].Selected == true))
                        {

                        }
                        else
                        {
                            strJavaScript = "document.getElementById('rblRawMaterialsQ1').focus();";
                            //ClientScript.RegisterStartupScript(GetType(), "clientscript", strJavaScript);
                            ScriptManager.RegisterStartupScript(this, typeof(Page), "script", strJavaScript, true);

                            return;
                        }

                        if ((rblRawMaterialsQ1.Items[0].Selected == true) || (rblRawMaterialsQ1.Items[1].Selected == true))
                        {

                        }
                        else
                        {
                            strJavaScript = "document.getElementById('rblRawMaterialsQ1').focus();";
                            //ClientScript.RegisterStartupScript(GetType(), "clientscript", strJavaScript);
                            ScriptManager.RegisterStartupScript(this, typeof(Page), "script", strJavaScript, true);

                            return;
                        }

                        if ((rblRawMaterialsQ2.Items[0].Selected == true) || (rblRawMaterialsQ2.Items[1].Selected == true))
                        {

                        }
                        else
                        {
                            strJavaScript = "document.getElementById('rblRawMaterialsQ2').focus();";
                            //ClientScript.RegisterStartupScript(GetType(), "clientscript", strJavaScript);
                            ScriptManager.RegisterStartupScript(this, typeof(Page), "script", strJavaScript, true);

                            return;
                        }

                        if ((rblRawMaterialsQ3.Items[0].Selected == true) || (rblRawMaterialsQ3.Items[1].Selected == true))
                        {

                        }
                        else
                        {
                            strJavaScript = "document.getElementById('rblRawMaterialsQ3').focus();";
                            //ClientScript.RegisterStartupScript(GetType(), "clientscript", strJavaScript);
                            ScriptManager.RegisterStartupScript(this, typeof(Page), "script", strJavaScript, true);

                            return;
                        }

                        if ((rblRawMaterialsQ4.Items[0].Selected == true) || (rblRawMaterialsQ4.Items[1].Selected == true))
                        {

                        }
                        else
                        {
                            strJavaScript = "document.getElementById('rblRawMaterialsQ4').focus();";
                            //ClientScript.RegisterStartupScript(GetType(), "clientscript", strJavaScript);
                            ScriptManager.RegisterStartupScript(this, typeof(Page), "script", strJavaScript, true);

                            return;
                        }


                    }

                }

                if ((rbPalletPattern.Items[0].Selected == true) || (rbPalletPattern.Items[1].Selected == true))
                {

                }
                else
                {
                    strJavaScript = "document.getElementById('rbPalletPattern').focus();";
                    //ClientScript.RegisterStartupScript(GetType(), "clientscript", strJavaScript);
                    ScriptManager.RegisterStartupScript(this, typeof(Page), "script", strJavaScript, true);

                    return;
                }

                if ((rbBroke.Items[0].Selected == true) || (rbBroke.Items[1].Selected == true))
                {

                }
                else
                {
                    strJavaScript = "document.getElementById('rbBroke').focus();";
                    //ClientScript.RegisterStartupScript(GetType(), "clientscript", strJavaScript);
                    ScriptManager.RegisterStartupScript(this, typeof(Page), "script", strJavaScript, true);

                    return;
                }

                if ((rbPrintedBroke.Items[0].Selected == true) || (rbPrintedBroke.Items[1].Selected == true))
                {

                }
                else
                {
                    strJavaScript = "document.getElementById('rbPrintedBroke').focus();";
                    //ClientScript.RegisterStartupScript(GetType(), "clientscript", strJavaScript);
                    ScriptManager.RegisterStartupScript(this, typeof(Page), "script", strJavaScript, true);

                    return;
                }

                if ((drpPrelimApproval.SelectedIndex == 0) || (drpPrelimApproval.SelectedIndex == -1))
                {
                    strJavaScript = "alert('Please select Approval Group.');document.getElementById('drpPrelimApproval').focus();";
                    //ClientScript.RegisterStartupScript(GetType(), "clientscript", strJavaScript);
                    ScriptManager.RegisterStartupScript(this, typeof(Page), "script", strJavaScript, true);

                    return;

                }

                string strSelPSRA = string.Empty;
                int intSelPSRA;

                if (((ViewState["EOIDFlag"] != null) && (ViewState["EOIDFlag"].ToString() == "1") || (Request.QueryString["EOID"] == null)))
                {

                }
                else
                {
                    for (intSelPSRA = 0; intSelPSRA < lbPSRADB.Items.Count - 1; intSelPSRA++)
                    {
                        if (lbPSRADB.Items[intSelPSRA].Selected == true)
                        {
                            if (strSelPSRA == "")
                            {
                                strSelPSRA = lbPSRADB.Items[intSelPSRA].Value;

                            }
                            else
                            {
                                strSelPSRA = strSelPSRA + "," + lbPSRADB.Items[intSelPSRA].Value;
                            }

                        }
                        if (!(strSelPSRA == ""))
                        {
                        }
                        else
                        {
                            //strJavaScript = "document.getElementById('lbPSRADB').focus();";
                            ////ClientScript.RegisterStartupScript(GetType(), "clientscript", strJavaScript);
                            //ScriptManager.RegisterStartupScript(this, typeof(Page), "script", strJavaScript, true);

                            return;
                        }

                    }

                }

                if (!(txtBudgetOwner.Text.Trim() == ""))
                {

                }
                else
                {
                    //strJavaScript = "document.getElementById('txtBudgetOwner').focus();";
                    ////ClientScript.RegisterStartupScript(GetType(), "clientscript", strJavaScript);
                    //ScriptManager.RegisterStartupScript(this, typeof(Page), "script", strJavaScript, true);

                    return;
                }

                if (!(txtSiteContact.Text.Trim() == ""))
                {

                }
                else
                {
                    //strJavaScript = "document.getElementById('txtSiteContact').focus();";
                    ////ClientScript.RegisterStartupScript(GetType(), "clientscript", strJavaScript);
                    //ScriptManager.RegisterStartupScript(this, typeof(Page), "script", strJavaScript, true);

                    return;
                }

                if (!(txtSiteHSE.Text.Trim() == ""))
                {

                }
                else
                {
                    //strJavaScript = "document.getElementById('txtSiteHSE').focus();";
                    ////ClientScript.RegisterStartupScript(GetType(), "clientscript", strJavaScript);
                    //ScriptManager.RegisterStartupScript(this, typeof(Page), "script", strJavaScript, true);

                    return;
                }

                if (!(txtSitePlanning.Text.Trim() == ""))
                {

                }
                else
                {
                    //strJavaScript = "document.getElementById('txtSitePlanning').focus();";
                    ////ClientScript.RegisterStartupScript(GetType(), "clientscript", strJavaScript);
                    //ScriptManager.RegisterStartupScript(this, typeof(Page), "script", strJavaScript, true);

                    return;
                }

                if (!(txtQAPre.Text.Trim() == ""))
                {

                }
                else
                {
                    //strJavaScript = "document.getElementById('txtQAPre').focus();";
                    ////ClientScript.RegisterStartupScript(GetType(), "clientscript", strJavaScript);
                    //ScriptManager.RegisterStartupScript(this, typeof(Page), "script", strJavaScript, true);

                    return;
                }

                if (!(txtCentralQAPre.Text.Trim() == ""))
                {

                }
                else
                {
                    //strJavaScript = "document.getElementById('txtCentralQAPre').focus();";
                    ////ClientScript.RegisterStartupScript(GetType(), "clientscript", strJavaScript);
                    //ScriptManager.RegisterStartupScript(this, typeof(Page), "script", strJavaScript, true);

                    return;
                }

                if (!(txtCentralPlanning.Text.Trim() == ""))
                {

                }
                else
                {
                    //strJavaScript = "document.getElementById('txtCentralPlanning').focus();";
                    ////ClientScript.RegisterStartupScript(GetType(), "clientscript", strJavaScript);
                    //ScriptManager.RegisterStartupScript(this, typeof(Page), "script", strJavaScript, true);

                    return;
                }

                if (!(txtTimingGate.Text.Trim() == ""))
                {

                }
                else
                {
                    //strJavaScript = "document.getElementById('txtTimingGate').focus();";
                    ////ClientScript.RegisterStartupScript(GetType(), "clientscript", strJavaScript);
                    //ScriptManager.RegisterStartupScript(this, typeof(Page), "script", strJavaScript, true);

                    return;
                }

                if (!(txtStandardOffice.Text.Trim() == ""))
                {

                }
                else
                {
                    //strJavaScript = ("document.getElementById('txtStandardOffice').focus();");
                    ////ClientScript.RegisterStartupScript(GetType(), "clientscript", strJavaScript);
                    //ScriptManager.RegisterStartupScript(this, typeof(Page), "script", strJavaScript, true);

                    return;
                }

                //Added by David - MUREO PCR : 4 Additional Approvers - Date: 01/03/2012

                if (!(txtAdditionalApp1.Text.Trim() == ""))
                {

                }
                else
                {
                    //strJavaScript = "document.getElementById('txtAdditionalApp1').focus();";
                    ////ClientScript.RegisterStartupScript(GetType(), "clientscript", strJavaScript);
                    //ScriptManager.RegisterStartupScript(this, typeof(Page), "script", strJavaScript, true);

                    return;
                }

                if (!(txtAdditionalApp2.Text.Trim() == ""))
                {

                }
                else
                {
                    //strJavaScript = "document.getElementById('txtAdditionalApp2').focus();";
                    ////ClientScript.RegisterStartupScript(GetType(), "clientscript", strJavaScript);
                    //ScriptManager.RegisterStartupScript(this, typeof(Page), "script", strJavaScript, true);

                    return;
                }

                if (!(txtAdditionalApp3.Text.Trim() == ""))
                {

                }
                else
                {
                    //strJavaScript = "document.getElementById('txtAdditionalApp3').focus();";
                    ////ClientScript.RegisterStartupScript(GetType(), "clientscript", strJavaScript);
                    //ScriptManager.RegisterStartupScript(this, typeof(Page), "script", strJavaScript, true);

                    return;
                }

                if (!(txtAdditionalApp4.Text.Trim() == ""))
                {

                }
                else
                {
                    //strJavaScript = "document.getElementById('txtAdditionalApp4').focus();";
                    ////ClientScript.RegisterStartupScript(GetType(), "clientscript", strJavaScript);
                    //ScriptManager.RegisterStartupScript(this, typeof(Page), "script", strJavaScript, true);

                    return;
                }


                if (!(txtGBUHSE.Text.Trim() == ""))
                {

                }
                else
                {
                    //strJavaScript = "document.getElementById('txtGBUHSE').focus();";
                    ////ClientScript.RegisterStartupScript(GetType(), "clientscript", strJavaScript);
                    //ScriptManager.RegisterStartupScript(this, typeof(Page), "script", strJavaScript, true);

                    return;
                }

                if (!(txtSAPCost.Text.Trim() == ""))
                {

                }
                else
                {
                    //strJavaScript = "document.getElementById('txtSAPCost').focus();";
                    ////ClientScript.RegisterStartupScript(GetType(), "clientscript", strJavaScript);
                    //ScriptManager.RegisterStartupScript(this, typeof(Page), "script", strJavaScript, true);

                    return;
                }


                if (!(txtHidDateFocus.Text.Trim() == ""))
                {

                }
                else
                {
                    //strJavaScript = "document.getElementById('txtHidDateFocus').focus();";
                    ////ClientScript.RegisterStartupScript(GetType(), "clientscript", strJavaScript);
                    //ScriptManager.RegisterStartupScript(this, typeof(Page), "script", strJavaScript, true);

                    return;
                }

                if (!(txtStartDate.Text.Trim() == ""))
                {

                }
                else
                {
                    //strJavaScript = "document.getElementById('txtStartDate').focus();";
                    ////ClientScript.RegisterStartupScript(GetType(), "clientscript", strJavaScript);
                    //ScriptManager.RegisterStartupScript(this, typeof(Page), "script", strJavaScript, true);

                    return;
                }

                return;
            }

            string str = string.Empty;
            str = TextBox1.Text.ToString().Trim();
            ViewState["twoTabRoute"] = "N";
            string strCurrentStage = "Preliminary";
            string strStageStatus = "Draft";


            if (rbPrintedBroke.Items[0].Selected == true)
            {
                if ((!(rbInkCoverage.Items[0].Selected == true)) && (!(rbInkCoverage.Items[1].Selected == true)))
                {
                    strJavaScript = "alert('will any broke have an increase in the amount of ink coverage on the product?.Please select Yes/No.');document.getElementById('rbInkCoverage').focus();";
                    //ClientScript.RegisterStartupScript(GetType(), "clientscript", strJavaScript);
                    ScriptManager.RegisterStartupScript(this, typeof(Page), "script", strJavaScript, true);

                    return;
                }
            }

            if (!(rbPalletPattern.Items[0].Selected == true))
            {
                if (!(rbPalletPattern.Items[1].Selected == true))
                {
                    strJavaScript = "alert('Please select unique pallet pattern OR a sku.');document.getElementById('rbPalletPattern').focus();";
                    //ClientScript.RegisterStartupScript(GetType(), "clientscript", strJavaScript);
                    ScriptManager.RegisterStartupScript(this, typeof(Page), "script", strJavaScript, true);

                    return;
                }
            }

            if (rbPalletPattern.Items[0].Selected == true)
            {
                if (!(chkStackShipTesting.Items[0].Selected == true))
                {
                    if (!(chkStackShipTesting.Items[1].Selected == true))
                    {
                        strJavaScript = "alert('Please select Stack/Ship Testing.');document.getElementById('chkStackShipTesting').focus();";

                        //ClientScript.RegisterStartupScript(GetType(), "clientscript", strJavaScript);
                        ScriptManager.RegisterStartupScript(this, typeof(Page), "script", strJavaScript, true);

                        return;
                    }
                }
            }


            //if ((rbRawMaterial.Items[0].Selected == true) || (rbParentRolls.Items[0].Selected == true) || (rbInterMaterials.Items[0].Selected == true) || (rbRegulatedProduct.Items[0].Selected == true) || (rbShipped.Items[0].Selected == true) || (rbTestProductedShipped.Items[0].Selected == true) || (rbGCASNumber.Items[0].Selected == true))
            //{
            //    if (Session["GCAS"] == null || Session["GCAS"].ToString() != "No")
            //    {
            //        if (dgdGCASInfo.Items.Count == 0)
            //        {
            //            Session["GCAS"] = "";
            //            //strJavaScript = ("<script>window.open('YESNO.aspx','Approvers','height=200,width=400,top=100');</script>");
            //            //ClientScript.RegisterStartupScript(GetType(), "clientscript", strJavaScript);
            //            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "window.open('YESNO.aspx','Approvers','height=200,width=400,top=100');", true);
            //            return;
            //        }
            //    }
            //}

            if ((rbRawMaterial.Items[0].Selected == true) || (rbParentRolls.Items[0].Selected == true) || (rbInterMaterials.Items[0].Selected == true) || (rbRegulatedProduct.Items[0].Selected == true) || (rbShipped.Items[0].Selected == true) || (rbTestProductedShipped.Items[0].Selected == true) || (rbGCASNumber.Items[0].Selected == true))
            {
                if (hdnGCASValue.Value != "No")
                {
                    hdnGCASValue.Value = "";
                    if (dgdGCASInfo.Items.Count == 0)
                    {
                        //strJavaScript = ("<script>window.open('YESNO.aspx','Approvers','height=200,width=400,top=100');</script>");
                        //ClientScript.RegisterStartupScript(GetType(), "clientscript", strJavaScript);
                        ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "window.open('YESNO.aspx','Approvers','height=200,width=400,top=100');", true);
                        return;
                    }
                }
            }


            if ((ViewState["EOIDFlag"] != null) && (ViewState["EOIDFlag"].ToString() == "1") || (Request.QueryString["EOID"] == null))
            {

            }
            else
            {

                if ((rbChemical.Items[0].Selected == true) || (rbNewRawMaterial.Items[0].Selected == true) || (rbNewEquipment.Items[0].Selected == true) || (rbNewJobTask.Items[0].Selected == true))
                {

                    if (Session["PSRA"] == null || Session["PSRA"].ToString() == "No")
                    {
                        if (dgdPSRAInfo.Items.Count == 0)
                        {
                            Session["PSRA"] = "";
                            //strJavaScript = ("<script>window.open('YESNOPSRA.aspx','Approvers','height=200,width=400,top=100');</script>");
                            //ClientScript.RegisterStartupScript(GetType(), "clientscript", strJavaScript);
                            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "window.open('YESNOPSRA.aspx','Approvers','height=200,width=400,top=100');", true);

                            return;
                        }
                    }

                }

            }


            int intResult;

            intResult = GET_EO_Lock_Status_Approve();

            if (intResult == 5)
            {
                return;
            }

            string script11 = string.Empty;
            // txtBudgetOwner.Text = "Surendra Bolla-SU";
            //script11 = ("<script>window.open('FinalRouteConfirm.aspx?EOID=" + ViewState["EOID"] + "&Stage=Preliminary" + "&BO=" + txtBudgetOwner.Text.ToString().Trim() + "','Approvers','height=200,width=300');</script>");
            //ClientScript.RegisterStartupScript(GetType(), "clientscript", script11);

            //ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "window.open('FinalRouteConfirm.aspx?EOID=" + ViewState["EOID"] + "&Stage=Preliminary" + "&BO=" + txtBudgetOwner.Text.ToString().Trim() + "','Approvers','height=200,width=300');", true);

            string strresumeExit = "Exit";
            ViewState["Prelim"] = "Yes";

            AllTabSave(strCurrentStage, strStageStatus, strresumeExit);
            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "window.open('FinalRouteConfirm.aspx?EOID="
                       + ViewState["EOID"] + "&Stage=Preliminary" + "&BO=" + txtBudgetOwner.Text.Trim() + "','Approvers','height=200,width=300');", true);
            
        }

        protected void imgPreFinalRoute_Click1(object sender, ImageClickEventArgs e)
        {

            Page.SmartNavigation = true;
            if ((!(ViewState["EOID"] == null) && (ViewState["twoTabRoute"].ToString() == "N")))
            {
                string strstatus = "";

                SqlParameter[] paramOut = null;
                //string strstatus = objEOBA.GET_EO_Can_Route(ViewState["EOID"], lbCurrentStageDB.Text).ToString();
                if (objEOBA.GET_EO_Can_Route(Convert.ToInt32(Request.QueryString["EOID"]), lbCurrentStageDB.Text.ToString(), ref paramOut))
                {
                    strstatus = (paramOut[0].Value).ToString().Trim();

                }

                if (!((ViewState["stage"].ToString().ToUpper() == "Final".ToUpper()) && (ViewState["Status"].ToString().ToUpper() == "Draft".ToUpper())))
                {
                    string strCurrentStage;
                    if ((ViewState["stage"].ToString() == ""))
                    {
                        strCurrentStage = "Preliminary";
                    }
                    else
                    {
                        strCurrentStage = ViewState["stage"].ToString();
                    }
                    string strStageStatus;
                    if ((ViewState["Status"].ToString() == ""))
                    {
                        strStageStatus = "Draft";
                    }
                    else
                    {
                        strStageStatus = ViewState["Status"].ToString();
                    }
                    string strresumeExit = "Exit";
                    //Method not foundf
                    //FinalCloseOutTabSave(strCurrentStage, strStageStatus, strresumeExit);
                    // call Two tabs Saving
                }
                else
                {
                    if (!((Request.QueryString["From"].ToString() == "MailEdit") || (Request.QueryString["From"].ToString() == "ForEOEdit")))
                    {
                        if (((drpCategoryDB.SelectedIndex == 0) || (drpCategoryDB.SelectedIndex == -1)))
                        {
                            string script;
                            script = "alert('Please select Category.');document.getElementById('drpCategoryDB').focus();";
                            //ClientScript.RegisterStartupScript(GetType(), "clientscript", script);
                            ScriptManager.RegisterStartupScript(this, typeof(Page), "script", script, true);

                            return;
                        }
                        if (((drpEOProjectsDB.SelectedIndex == 0) || (drpEOProjectsDB.SelectedIndex == -1)))
                        {
                            string script;
                            script = "alert('Please select Project.');document.getElementById('drpEOProjectsDB').focus();";
                            //ClientScript.RegisterStartupScript(GetType(), "clientscript", script);
                            ScriptManager.RegisterStartupScript(this, typeof(Page), "script", script, true);

                            return;
                        }
                        if (((drpPlant.SelectedIndex == 0) || (drpPlant.SelectedIndex == -1)))
                        {
                            string script;
                            script = "alert('Please select Plant.');document.getElementById('drpPlant').focus();";
                            //ClientScript.RegisterStartupScript(GetType(), "clientscript", script);
                            ScriptManager.RegisterStartupScript(this, typeof(Page), "script", script, true);

                            return;
                        }
                        int intEventsId;
                        int intstatus = 0;
                        for (intEventsId = 0; (intEventsId <= (lbEOEventsDB.Items.Count - 1)); intEventsId++)
                        {
                            if ((lbEOEventsDB.Items[intEventsId].Selected == true))
                            {
                                intstatus = 1;
                            }
                        }
                        if (!(intstatus == 1))
                        {
                            string script;
                            script = "alert('Please select Event(s).');document.getElementById('lbEOEventsDB').focus();";
                            //ClientScript.RegisterStartupScript(GetType(), "clientscript", script);
                            ScriptManager.RegisterStartupScript(this, typeof(Page), "script", script, true);

                            return;
                        }
                    }
                    if (rbPrintBrokeFinal.Items[0].Selected)
                    {
                        if (!rbPrintedBrokeInk.Items[0].Selected)
                        {
                            if (!rbPrintedBrokeInk.Items[1].Selected)
                            {
                                string script;
                                script = "alert('will any broke have an increase in the amount of ink coverage on the product?.Please s" +
                                "elect Yes/No');document.getElementById('rbPrintedBrokeInk').focus();";
                                //ClientScript.RegisterStartupScript(GetType(), "clientscript", script);
                                ScriptManager.RegisterStartupScript(this, typeof(Page), "script", script, true);

                                return;
                            }
                        }
                    }

                    if (!rbUniqPallet.Items[0].Selected)
                    {
                        if (!rbUniqPallet.Items[1].Selected)
                        {
                            string script;
                            script = "alert('Please select unique pallet pattern OR a sku.');document.getElementById('rbUniqPallet).focus();";
                            ScriptManager.RegisterStartupScript(this, typeof(Page), "script", script, true);


                            return;
                        }
                    }

                    if (rbUniqPallet.Items[0].Selected)
                    {
                        if (!chkFinalStackShip.Items[0].Selected)
                        {
                            if (!chkFinalStackShip.Items[1].Selected)
                            {
                                string script;
                                script = "alert('Please select Stack/Ship Testing.');document.getElementById('chkFinalStackShip').focus();";
                                //ClientScript.RegisterStartupScript(GetType(), "clientscript", script);
                                ScriptManager.RegisterStartupScript(this, typeof(Page), "script", script, true);

                                return;
                            }
                        }
                    }
                    if (!rbBrokeDisposition.Items[0].Selected)
                    {
                        if (!rbBrokeDisposition.Items[1].Selected)
                        {
                            string script;
                            script = "alert('Please select Broke Disposition.');document.getElementById('rbBrokeDisposition').focus();";
                            //ClientScript.RegisterStartupScript(GetType(), "clientscript", script);
                            ScriptManager.RegisterStartupScript(this, typeof(Page), "script", script, true);

                            return;
                        }
                    }
                    if (!rbCostSheetDiff.Items[0].Selected)
                    {
                        if (!rbCostSheetDiff.Items[1].Selected)
                        {
                            string script;
                            script = "alert('total cost from the cost sheet attachment different from the Preliminary estimate?.');document.getElementById('rbCostSheetDiff').focus();";
                            //ClientScript.RegisterStartupScript(GetType(), "clientscript", script);
                            ScriptManager.RegisterStartupScript(this, typeof(Page), "script", script, true);

                            return;
                        }
                    }
                    if (((drpAppGrpFinal.SelectedIndex == 0) || (drpAppGrpFinal.SelectedIndex == -1)))
                    {
                        string script;
                        script = "alert('Please select Approval Group.');document.getElementById('drpAppGrpFinal').focus();";
                        //ClientScript.RegisterStartupScript(GetType(), "clientscript", script);
                        ScriptManager.RegisterStartupScript(this, typeof(Page), "script", script, true);

                        return;
                    }
                    if ((txtPSInitiative.Text == ""))
                    {
                        Page.SmartNavigation = false;
                        string script;
                        //script = "alert('Please select PS Initiative.');document.getElementById('txtPSInitiative').focus();";
                        script = "alert('Please select PS Initiative.');document.getElementById('txtPSInitiative').disabled = false;document.getElementById('txtPSInitiative').focus();document.getElementById('txtPSInitiative').disabled = true;";
                        //ClientScript.RegisterStartupScript(GetType(), "clientscript", script);
                        ScriptManager.RegisterStartupScript(this, typeof(Page), "script", script, true);

                        return;
                    }
                    if ((txtProductsResearch.Text == ""))
                    {
                        Page.SmartNavigation = false;
                        string script;
                        //script = "alert('Please select Product Research.');document.getElementById('txtProductsResearch').focus();";
                        script = "alert('Please select Product Research.');document.getElementById('txtProductsResearch').disabled = false;document.getElementById('txtProductsResearch').focus();document.getElementById('txtProductsResearch').disabled = true;";
                        //ClientScript.RegisterStartupScript(GetType(), "clientscript", script);
                        ScriptManager.RegisterStartupScript(this, typeof(Page), "script", script, true);

                        return;
                    }
                    if ((txtBudgetOwnerFinal.Text == ""))
                    {
                        Page.SmartNavigation = false;
                        string script;
                        //script = "alert('Please select Budget Owner.');document.getElementById('txtBudgetOwnerFinal').focus();";
                        script = "alert('Please select Budget Owner.');document.getElementById('txtBudgetOwnerFinal').disabled = false;document.getElementById('txtBudgetOwnerFinal').focus();document.getElementById('txtBudgetOwnerFinal').disabled = true;";
                        //ClientScript.RegisterStartupScript(GetType(), "clientscript", script);
                        ScriptManager.RegisterStartupScript(this, typeof(Page), "script", script, true);

                        return;
                    }
                    if ((txtSiteHSEFinal.Text == ""))
                    {
                        string script;
                        //script = "alert('Please select Site HS&E Resource.');document.getElementById('txtSiteHSEFinal').focus();";
                        script = "alert('Please select Site HS&E Resource.');document.getElementById('txtSiteHSEFinal').disabled = false;document.getElementById('txtSiteHSEFinal').focus();document.getElementById('txtSiteHSEFinal').disabled = true;";
                        //ClientScript.RegisterStartupScript(GetType(), "clientscript", script);
                        ScriptManager.RegisterStartupScript(this, typeof(Page), "script", script, true);

                        return;
                    }
                    if ((txtSitePlanFinal.Text == ""))
                    {
                        string script;
                        //script = "alert('Please select Site Planning.');document.getElementById('txtSitePlanFinal').focus();";
                        script = "alert('Please select Site Planning.');document.getElementById('txtSitePlanFinal').disabled = false;document.getElementById('txtSitePlanFinal').focus();document.getElementById('txtSitePlanFinal').disabled = true;";
                        //ClientScript.RegisterStartupScript(GetType(), "clientscript", script);
                        ScriptManager.RegisterStartupScript(this, typeof(Page), "script", script, true);

                        return;
                    }
                    if ((txtSAPCostCenter.Text == ""))
                    {
                        string script;
                        //script = "alert('Please select SAP Cost Center Coordinator.');document.getElementById('txtSAPCostCenter').focus();";
                        script = "alert('Please select SAP Cost Center Coordinator.');document.getElementById('txtSAPCostCenter').disabled = false;document.getElementById('txtSAPCostCenter').focus();document.getElementById('txtSAPCostCenter').disabled = true;";
                        //ClientScript.RegisterStartupScript(GetType(), "clientscript", script);
                        ScriptManager.RegisterStartupScript(this, typeof(Page), "script", script, true);

                        return;
                    }
                    // Added by David
                    // Date: 07/16/2010
                    if ((txtSMARTClearanceFinal.Text == ""))
                    {
                        string script;
                        //script = "alert('Please select SMART Clearance Number Coordinator.');document.getElementById('txtSMARTClearanceFinal').focus();";
                        script = "alert('Please select SMART Clearance Number Coordinator.');document.getElementById('txtSMARTClearanceFinal').disabled = false;document.getElementById('txtSMARTClearanceFinal').focus();document.getElementById('txtSMARTClearanceFinal').disabled = true;";
                        //ClientScript.RegisterStartupScript(GetType(), "clientscript", script);
                        ScriptManager.RegisterStartupScript(this, typeof(Page), "script", script, true);

                        return;
                    }
                    if ((txtSiteContactFinal.Text == ""))
                    {
                        string script;
                        //script = "alert('Please select Site Contact.');document.getElementById('txtSiteContactFinal').focus();";
                        script = "alert('Please select Site Contact.');document.getElementById('txtSiteContactFinal').disabled = false;document.getElementById('txtSiteContactFinal').focus();document.getElementById('txtSiteContactFinal').disabled = true;";
                        //ClientScript.RegisterStartupScript(GetType(), "clientscript", script);
                        ScriptManager.RegisterStartupScript(this, typeof(Page), "script", script, true);

                        return;
                    }
                    if ((txtSiteFinance.Text == ""))
                    {
                        string script;
                        //script = "alert('Please select Site Finance.');document.getElementById('txtSiteFinance').focus();";
                        script = "alert('Please select Site Finance.');document.getElementById('txtSiteFinance').disabled = false;document.getElementById('txtSiteFinance').focus();document.getElementById('txtSiteFinance').disabled = true;";
                        //ClientScript.RegisterStartupScript(GetType(), "clientscript", script);
                        ScriptManager.RegisterStartupScript(this, typeof(Page), "script", script, true);

                        return;
                    }
                    if ((txtSiteLeaderShip.Text == ""))
                    {
                        string script;
                        //script = "alert('Please select Site Leadership.');document.getElementById('txtSiteLeaderShip').focus();";
                        script = "alert('Please select Site Leadership.');document.getElementById('txtSiteLeaderShip').disabled = false;document.getElementById('txtSiteLeaderShip').focus();document.getElementById('txtSiteLeaderShip').disabled = true;";
                        //ClientScript.RegisterStartupScript(GetType(), "clientscript", script);
                        ScriptManager.RegisterStartupScript(this, typeof(Page), "script", script, true);

                        return;
                    }

                    if ((txtFinalTimingGate.Text == ""))
                    {
                        string script;
                        //script = "alert('Please select Timing Gate Exception.');document.getElementById('txtFinalTimingGate').focus();";
                        script = "alert('Please select Timing Gate Exception.');document.getElementById('txtFinalTimingGate').disabled = false;document.getElementById('txtFinalTimingGate').focus();document.getElementById('txtFinalTimingGate').disabled = true;";
                        //ClientScript.RegisterStartupScript(GetType(), "clientscript", script);
                        ScriptManager.RegisterStartupScript(this, typeof(Page), "script", script, true);

                        return;
                    }
                    if ((txtFinalQA.Text == ""))
                    {
                        string script;
                        //script = "alert('Please select QA.');document.getElementById('txtFinalQA').focus();";
                        script = "alert('Please select QA.');document.getElementById('txtFinalQA').disabled = false;document.getElementById('txtFinalQA').focus();document.getElementById('txtFinalQA').disabled = true;";
                        //ClientScript.RegisterStartupScript(GetType(), "clientscript", script);
                        ScriptManager.RegisterStartupScript(this, typeof(Page), "script", script, true);

                        return;
                    }
                    // Checking for Central QA - 05/19/05
                    if ((txtFinalCentralQA.Text == ""))
                    {
                        string script;
                        //script = "alert('Please select Central QA.');document.getElementById('txtFinalCentralQA').focus();";
                        script = "alert('Please select Central QA.');document.getElementById('txtFinalCentralQA').disabled = false;document.getElementById('txtFinalCentralQA').focus();document.getElementById('txtFinalCentralQA').disabled = true;";
                        //ClientScript.RegisterStartupScript(GetType(), "clientscript", script);
                        ScriptManager.RegisterStartupScript(this, typeof(Page), "script", script, true);

                        return;
                    }
                    if ((txtFinalStandardsOffice.Text == ""))
                    {
                        string script;
                        //script = "alert('Please select Standards Office.');document.getElementById('txtFinalStandardsOffice').focus();";
                        script = "alert('Please select Standards Office.');document.getElementById('txtFinalStandardsOffice').disabled = false;document.getElementById('txtFinalStandardsOffice').focus();document.getElementById('txtFinalStandardsOffice').disabled = true;";
                        //ClientScript.RegisterStartupScript(GetType(), "clientscript", script);
                        ScriptManager.RegisterStartupScript(this, typeof(Page), "script", script, true);

                        return;
                    }
                    if ((txtFinalStandardsOffice.Text == ""))
                    {
                        string script;
                        //script = "alert('Please select Standards Office.');document.getElementById('txtFinalStandardsOffice').focus();";
                        script = "alert('Please select Standards Office.');document.getElementById('txtFinalStandardsOffice').disabled = false;document.getElementById('txtFinalStandardsOffice').focus();document.getElementById('txtFinalStandardsOffice').disabled = true;";
                        //ClientScript.RegisterStartupScript(GetType(), "clientscript", script);
                        ScriptManager.RegisterStartupScript(this, typeof(Page), "script", script, true);

                        return;
                    }
                    // Added by David - MUREO PCR : 4 Additional Approvers - Date: 01/03/2012
                    if ((txtFinalAdditionalApprover1.Text == ""))
                    {
                        string script;
                        //script = "alert('Please select Additional Approver1.');document.getElementById('txtFinalAdditionalApprover1').focus();";
                        script = "alert('Please select Additional Approver1.');document.getElementById('txtFinalAdditionalApprover1').disabled = false;document.getElementById('txtFinalAdditionalApprover1').focus();document.getElementById('txtFinalAdditionalApprover1').disabled = true;";
                        //ClientScript.RegisterStartupScript(GetType(), "clientscript", script);
                        ScriptManager.RegisterStartupScript(this, typeof(Page), "script", script, true);

                        return;
                    }
                    if ((txtFinalAdditionalApprover2.Text == ""))
                    {
                        string script;
                        //script = "alert('Please select Additional Approver2.');document.getElementById('txtFinalAdditionalApprover2').focus();";
                        script = "alert('Please select Additional Approver2.');document.getElementById('txtFinalAdditionalApprover2').disabled = false;document.getElementById('txtFinalAdditionalApprover2').focus();document.getElementById('txtFinalAdditionalApprover2').disabled = true;";
                        //ClientScript.RegisterStartupScript(GetType(), "clientscript", script);
                        ScriptManager.RegisterStartupScript(this, typeof(Page), "script", script, true);

                        return;
                    }
                    if ((txtFinalAdditionalApprover3.Text == ""))
                    {
                        string script;
                        //script = "alert('Please select Additional Approver3.');document.getElementById('txtFinalAdditionalApprover3').focus();";
                        script = "alert('Please select Additional Approver3.');document.getElementById('txtFinalAdditionalApprover3').disabled = false;document.getElementById('txtFinalAdditionalApprover3').focus();document.getElementById('txtFinalAdditionalApprover3').disabled = true;";
                        //ClientScript.RegisterStartupScript(GetType(), "clientscript", script);
                        ScriptManager.RegisterStartupScript(this, typeof(Page), "script", script, true);

                        return;
                    }
                    if ((txtFinalAdditionalApprover4.Text == ""))
                    {
                        string script;
                        //script = "alert('Please select Additional Approver4.');document.getElementById('txtFinalAdditionalApprover4').focus();";
                        script = "alert('Please select Additional Approver4.');document.getElementById('txtFinalAdditionalApprover4').disabled = false;document.getElementById('txtFinalAdditionalApprover4').focus();document.getElementById('txtFinalAdditionalApprover4').disabled = true;";
                        //ClientScript.RegisterStartupScript(GetType(), "clientscript", script);
                        ScriptManager.RegisterStartupScript(this, typeof(Page), "script", script, true);

                        return;
                    }
                    if ((lbCostSheetAttach.Items.Count == 0))
                    {
                        string script;
                        script = "alert('Please attach Cost sheet(s).');document.getElementById('lbCostSheetAttach').focus();";
                        //ClientScript.RegisterStartupScript(GetType(), "clientscript", script);
                        ScriptManager.RegisterStartupScript(this, typeof(Page), "script", script, true);

                        return;
                    }
                    int intResult;
                    intResult = GET_EO_Lock_Status_Approve();
                    if ((intResult == 5))
                    {
                        return;
                    }

                    string strCurrentStage = "Final";
                    string strStageStatus = "Draft";
                    string strresumeExit = "Resume";
                    string script11;

                    //script11 = ("<script>window.open('FinalRouteConfirm.aspx?EOID="
                    //+ (ViewState["EOID"] + ("&Stage=Final" + ("&BO="
                    //+ (txtBudgetOwnerFinal.Text.Trim() + "','Approvers','height=200,width=300');</script>")))));
                    //Page.RegisterStartupScript("clientscript", script11);
                    ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "window.open('FinalRouteConfirm.aspx?EOID="
                                + ViewState["EOID"] + "&Stage=Final" + "&BO="
                                + txtBudgetOwnerFinal.Text.Trim() + "','Approvers','height=200,width=300');", true);
                    ViewState["Fin"] = "Yes";
                    FinalCloseOutTabSave(strCurrentStage, strStageStatus, strresumeExit);
                    // call Two tabs Saving
                }
            }
            else
            {
                // Chary
                if (((drpCategoryDB.SelectedIndex == 0) || (drpCategoryDB.SelectedIndex == -1)))
                {
                    string script;
                    script = "alert('Please select Category.');document.getElementById('drpCategoryDB').focus();";
                    //ClientScript.RegisterStartupScript(GetType(), "clientscript", script);
                    ScriptManager.RegisterStartupScript(this, typeof(Page), "script", script, true);

                    return;
                }
                if (((drpEOProjectsDB.SelectedIndex == 0) || (drpEOProjectsDB.SelectedIndex == -1)))
                {
                    string script;
                    script = "alert('Please select Project.');document.getElementById('drpEOProjectsDB').focus();";
                    //ClientScript.RegisterStartupScript(GetType(), "clientscript", script);
                    ScriptManager.RegisterStartupScript(this, typeof(Page), "script", script, true);

                    return;
                }
                if (((drpPlant.SelectedIndex == 0) || (drpPlant.SelectedIndex == -1)))
                {
                    string script;
                    script = "alert('Please select Plant.');document.getElementById('drpPlant').focus();";
                    //ClientScript.RegisterStartupScript(GetType(), "clientscript", script);
                    ScriptManager.RegisterStartupScript(this, typeof(Page), "script", script, true);

                    return;
                }
                int intEventsId;
                int intstatus = 0;
                for (intEventsId = 0; (intEventsId <= (lbEOEventsDB.Items.Count - 1)); intEventsId++)
                {
                    if ((lbEOEventsDB.Items[intEventsId].Selected == true))
                    {
                        intstatus = 1;
                    }
                }
                if (!(intstatus == 1))
                {
                    string script;
                    script = "alert('Please select Event(s).');document.getElementById('lbEOEventsDB').focus();";
                    //ClientScript.RegisterStartupScript(GetType(), "clientscript", script);
                    ScriptManager.RegisterStartupScript(this, typeof(Page), "script", script, true);

                    return;
                }
                if (!rbUniqPallet.Items[0].Selected)
                {
                    if (!rbUniqPallet.Items[1].Selected)
                    {
                        string script;
                        script = "alert('Please select unique pallet pattern OR a sku.');document.getElementById('rbUniqPallet').focus();";
                        //ClientScript.RegisterStartupScript(GetType(), "clientscript", script);
                        ScriptManager.RegisterStartupScript(this, typeof(Page), "script", script, true);

                        return;
                    }
                }

                if (rbUniqPallet.Items[0].Selected)
                {
                    if (!chkFinalStackShip.Items[0].Selected)
                    {
                        if (!chkFinalStackShip.Items[1].Selected)
                        {
                            string script;
                            script = "alert('Please select Stack/Ship Testing.');document.getElementById('chkFinalStackShip').focus();";
                            //ClientScript.RegisterStartupScript(GetType(), "clientscript", script);
                            ScriptManager.RegisterStartupScript(this, typeof(Page), "script", script, true);

                            return;
                        }
                    }
                }
                if (!rbBrokeDisposition.Items[0].Selected)
                {
                    if (!rbBrokeDisposition.Items[1].Selected)
                    {
                        string script;
                        script = "alert('Please select Broke Disposition.');document.getElementById('rbBrokeDisposition').focus();";
                        //ClientScript.RegisterStartupScript(GetType(), "clientscript", script);
                        ScriptManager.RegisterStartupScript(this, typeof(Page), "script", script, true);

                        return;
                    }
                }
                if (rbPrintBrokeFinal.Items[0].Selected)
                {
                    if (!rbPrintedBrokeInk.Items[0].Selected)
                    {
                        if (!rbPrintedBrokeInk.Items[1].Selected)
                        {
                            // Page.SmartNavigation = False
                            string script;
                            script = "alert('will any broke have an increase in the amount of ink coverage on the product?.Please select Yes/No');document.getElementById('rbPrintedBrokeInk').focus();";
                            //ClientScript.RegisterStartupScript(GetType(), "clientscript", script);
                            ScriptManager.RegisterStartupScript(this, typeof(Page), "script", script, true);

                            return;
                        }
                    }
                }
                if (!rbCostSheetDiff.Items[0].Selected)
                {
                    if (!rbCostSheetDiff.Items[1].Selected)
                    {
                        string script;
                        script = "alert('total cost from the cost sheet attachment different from the Preliminary estimate?.');document.getElementById('rbCostSheetDiff').focus();";
                        //ClientScript.RegisterStartupScript(GetType(), "clientscript", script);
                        ScriptManager.RegisterStartupScript(this, typeof(Page), "script", script, true);

                        return;
                    }
                    // Page.SmartNavigation = False
                }
                if (((drpAppGrpFinal.SelectedIndex == 0) || (drpAppGrpFinal.SelectedIndex == -1)))
                {
                    string script;
                    script = "alert('Please select Approval Group.');document.getElementById('drpAppGrpFinal').focus();";
                    //ClientScript.RegisterStartupScript(GetType(), "clientscript", script);
                    ScriptManager.RegisterStartupScript(this, typeof(Page), "script", script, true);

                    return;
                }
                if ((txtPSInitiative.Text == ""))
                {
                    Page.SmartNavigation = false;
                    string script;
                    //script = "alert('Please select PS Initiative.');document.getElementById('txtPSInitiative').focus();";
                    script = "alert('Please select PS Initiative.');document.getElementById('txtPSInitiative').disabled = false;document.getElementById('txtPSInitiative').focus();document.getElementById('txtPSInitiative').disabled = true;";
                    
                    //ClientScript.RegisterStartupScript(GetType(), "clientscript", script);
                    ScriptManager.RegisterStartupScript(this, typeof(Page), "script", script, true);

                    return;
                }
                if ((txtProductsResearch.Text == ""))
                {
                    Page.SmartNavigation = false;
                    string script;
                    //script = "alert('Please select Product Research.');document.getElementById('txtProductsResearch').focus();";
                    script = "alert('Please select Product Research.');document.getElementById('txtProductsResearch').disabled = false;document.getElementById('txtProductsResearch').focus();document.getElementById('txtProductsResearch').disabled = true;";
                    //ClientScript.RegisterStartupScript(GetType(), "clientscript", script);
                    ScriptManager.RegisterStartupScript(this, typeof(Page), "script", script, true);

                    return;
                }
                if ((txtBudgetOwnerFinal.Text == ""))
                {
                    Page.SmartNavigation = false;
                    string script;
                    //script = "alert('Please select Budget Owner.');document.getElementById('txtBudgetOwnerFinal').focus();";
                    script = "alert('Please select Budget Owner.');document.getElementById('txtBudgetOwnerFinal').disabled = false;document.getElementById('txtBudgetOwnerFinal').focus();document.getElementById('txtBudgetOwnerFinal').disabled = true;";
                    //ClientScript.RegisterStartupScript(GetType(), "clientscript", script);
                    ScriptManager.RegisterStartupScript(this, typeof(Page), "script", script, true);

                    return;
                }
                if ((txtSiteHSEFinal.Text == ""))
                {
                    string script;
                    //script = "alert('Please select Site HS&E Resource.');document.getElementById('txtSiteHSEFinal').focus();";
                    script = "alert('Please select Site HS&E Resource.');document.getElementById('txtSiteHSEFinal').disabled = false;document.getElementById('txtSiteHSEFinal').focus();document.getElementById('txtSiteHSEFinal').disabled = true;";
                    //ClientScript.RegisterStartupScript(GetType(), "clientscript", script);
                    ScriptManager.RegisterStartupScript(this, typeof(Page), "script", script, true);

                    return;
                }
                if ((txtSitePlanFinal.Text == ""))
                {
                    string script;
                    //script = "alert('Please select Site Planning.');document.getElementById('txtSitePlanFinal').focus();";
                    script = "alert('Please select Site Planning.');document.getElementById('txtSitePlanFinal').disabled = false;document.getElementById('txtSitePlanFinal').focus();document.getElementById('txtSitePlanFinal').disabled = true;";
                    //ClientScript.RegisterStartupScript(GetType(), "clientscript", script);
                    ScriptManager.RegisterStartupScript(this, typeof(Page), "script", script, true);

                    return;
                }
                if ((txtSAPCostCenter.Text == ""))
                {
                    string script;
                    //script = "alert('Please select SAP Cost Center Coordinator.');document.getElementById('txtSAPCostCenter').focus();";
                    script = "alert('Please select SAP Cost Center Coordinator.');document.getElementById('txtSAPCostCenter').disabled = false;document.getElementById('txtSAPCostCenter').focus();document.getElementById('txtSAPCostCenter').disabled = true;";
                    //ClientScript.RegisterStartupScript(GetType(), "clientscript", script);
                    ScriptManager.RegisterStartupScript(this, typeof(Page), "script", script, true);

                    return;
                }
                // Added by David
                // Date: 07/16/2010
                if ((txtSMARTClearanceFinal.Text == ""))
                {
                    string script;
                    //script = "alert('Please select SMART Clearance Number Coordinator.');document.getElementById('txtSMARTClearanceFinal').focus();";
                    script = "alert('Please select SMART Clearance Number Coordinator.');document.getElementById('txtSMARTClearanceFinal').disabled = false;document.getElementById('txtSMARTClearanceFinal').focus();document.getElementById('txtSMARTClearanceFinal').disabled = true;";
                    //ClientScript.RegisterStartupScript(GetType(), "clientscript", script);
                    ScriptManager.RegisterStartupScript(this, typeof(Page), "script", script, true);

                    return;
                }
                if ((txtSiteContactFinal.Text == ""))
                {
                    string script;
                    //script = "alert('Please select Site Contact.');document.getElementById('txtSiteContactFinal').focus();";
                    script = "alert('Please select Site Contact.');document.getElementById('txtSiteContactFinal').disabled = false;document.getElementById('txtSiteContactFinal').focus();document.getElementById('txtSiteContactFinal').disabled = true;";
                    //ClientScript.RegisterStartupScript(GetType(), "clientscript", script);
                    ScriptManager.RegisterStartupScript(this, typeof(Page), "script", script, true);

                    return;
                }
                if ((txtSiteFinance.Text == ""))
                {
                    string script;
                    //script = "alert('Please select Site Finance.');document.getElementById('txtSiteFinance').focus();";
                    script = "alert('Please select Site Finance.');document.getElementById('txtSiteFinance').disabled = false;document.getElementById('txtSiteFinance').focus();document.getElementById('txtSiteFinance').disabled = true;";
                    //ClientScript.RegisterStartupScript(GetType(), "clientscript", script);
                    ScriptManager.RegisterStartupScript(this, typeof(Page), "script", script, true);

                    return;
                }
                if ((txtSiteLeaderShip.Text == ""))
                {
                    string script;
                    //script = "alert('Please select Site Leadership.');document.getElementById('txtSiteLeaderShip').focus();";
                    script = "alert('Please select Site Leadership.');document.getElementById('txtSiteLeaderShip').disabled = false;document.getElementById('txtSiteLeaderShip').focus();document.getElementById('txtSiteLeaderShip').disabled = true;";
                    //ClientScript.RegisterStartupScript(GetType(), "clientscript", script);
                    ScriptManager.RegisterStartupScript(this, typeof(Page), "script", script, true);

                    return;
                }

                if ((txtFinalTimingGate.Text == ""))
                {
                    string script;
                    //script = "alert('Please select Timing Gate Exception.');document.getElementById('txtFinalTimingGate').focus();";
                    script = "alert('Please select Timing Gate Exception.');document.getElementById('txtFinalTimingGate').disabled = false;document.getElementById('txtFinalTimingGate').focus();document.getElementById('txtFinalTimingGate').disabled = true;";
                    //ClientScript.RegisterStartupScript(GetType(), "clientscript", script);
                    ScriptManager.RegisterStartupScript(this, typeof(Page), "script", script, true);

                    return;
                }
                if ((txtFinalQA.Text == ""))
                {
                    string script;
                    //script = "alert('Please select QA.');document.getElementById('txtFinalQA').focus();";
                    script = "alert('Please select QA.');document.getElementById('txtFinalQA').disabled = false;document.getElementById('txtFinalQA').focus();document.getElementById('txtFinalQA').disabled = true;";
                    //ClientScript.RegisterStartupScript(GetType(), "clientscript", script);
                    ScriptManager.RegisterStartupScript(this, typeof(Page), "script", script, true);

                    return;
                }
                // Checking for Central QA - 05/19/05
                if ((txtFinalCentralQA.Text == ""))
                {
                    string script;
                    //script = "alert('Please select Central QA.');document.getElementById('txtFinalCentralQA').focus();";
                    script = "alert('Please select Central QA.');document.getElementById('txtFinalCentralQA').disabled = false;document.getElementById('txtFinalCentralQA').focus();document.getElementById('txtFinalCentralQA').disabled = true;";
                    //ClientScript.RegisterStartupScript(GetType(), "clientscpipt", script);
                    ScriptManager.RegisterStartupScript(this, typeof(Page), "script", script, true);

                    return;
                }
                if ((txtFinalStandardsOffice.Text == ""))
                {
                    string script;
                    //script = "alert('Please select Standards Office.');document.getElementById('txtFinalStandardsOffice').focus();";
                    script = "alert('Please select Standards Office.');document.getElementById('txtFinalStandardsOffice').disabled = false;document.getElementById('txtFinalStandardsOffice').focus();document.getElementById('txtFinalStandardsOffice').disabled = true;";
                    //ClientScript.RegisterStartupScript(GetType(), "clientscript", script);
                    ScriptManager.RegisterStartupScript(this, typeof(Page), "script", script, true);

                    return;
                }
                if ((txtFinalStandardsOffice.Text == ""))
                {
                    string script;
                    script = "alert('Please select Standards Office.');document.getElementById('txtFinalStandardsOffice').focus();";
                    script = "alert('Please select Standards Office.');document.getElementById('txtFinalStandardsOffice').disabled = false;document.getElementById('txtFinalStandardsOffice').focus();document.getElementById('txtFinalStandardsOffice').disabled = true;";
                    //ClientScript.RegisterStartupScript(GetType(), "clientscript", script);
                    ScriptManager.RegisterStartupScript(this, typeof(Page), "script", script, true);

                    return;
                }
                // Added by David - MUREO PCR : 4 Additional Approvers - Date: 01/03/2012
                if ((txtFinalAdditionalApprover1.Text == ""))
                {
                    string script;
                    //script = "alert('Please select Additional Approver1.');document.getElementById('txtFinalAdditionalApprover1').focus();";
                    script = "alert('Please select Additional Approver1.');document.getElementById('txtFinalAdditionalApprover1').disabled = false;document.getElementById('txtFinalAdditionalApprover1').focus();document.getElementById('txtFinalAdditionalApprover1').disabled = true;";
                    //ClientScript.RegisterStartupScript(GetType(), "clientscript", script);
                    ScriptManager.RegisterStartupScript(this, typeof(Page), "script", script, true);

                    return;
                }
                if ((txtFinalAdditionalApprover2.Text == ""))
                {
                    string script;
                    //script = "alert('Please select Additional Approver2.');document.getElementById('txtFinalAdditionalApprover2').focus();";
                    script = "alert('Please select Additional Approver2.');document.getElementById('txtFinalAdditionalApprover2').disabled = false;document.getElementById('txtFinalAdditionalApprover2').focus();document.getElementById('txtFinalAdditionalApprover2').disabled = true;";
                    //ClientScript.RegisterStartupScript(GetType(), "clientscript", script);
                    ScriptManager.RegisterStartupScript(this, typeof(Page), "script", script, true);

                    return;
                }
                if ((txtFinalAdditionalApprover3.Text == ""))
                {
                    string script;
                    //script = "alert('Please select Additional Approver3.');document.getElementById('txtFinalAdditionalApprover3').focus();";
                    script = "alert('Please select Additional Approver3.');document.getElementById('txtFinalAdditionalApprover3').disabled = false;document.getElementById('txtFinalAdditionalApprover3').focus();document.getElementById('txtFinalAdditionalApprover3').disabled = true;";
                    //ClientScript.RegisterStartupScript(GetType(), "clientscript", script);
                    ScriptManager.RegisterStartupScript(this, typeof(Page), "script", script, true);

                    return;
                }
                if ((txtFinalAdditionalApprover4.Text == ""))
                {
                    string script;
                    //script = "alert('Please select Additional Approver4.');document.getElementById('txtFinalAdditionalApprover4').focus();";
                    script = "alert('Please select Additional Approver4.');document.getElementById('txtFinalAdditionalApprover4').disabled = false;document.getElementById('txtFinalAdditionalApprover4').focus();document.getElementById('txtFinalAdditionalApprover4').disabled = true;";
                    //ClientScript.RegisterStartupScript(GetType(), "clientscript", script);
                    ScriptManager.RegisterStartupScript(this, typeof(Page), "script", script, true);

                    return;
                }
                if ((lbCostSheetAttach.Items.Count == 0))
                {
                    // Page.SmartNavigation = true
                    string script;
                    script = "alert('Please attach Cost sheet(s).');document.getElementById('lbCostSheetAttach').focus();";
                    //ClientScript.RegisterStartupScript(GetType(), "clientscript", script);
                    ScriptManager.RegisterStartupScript(this, typeof(Page), "script", script, true);

                    return;
                }
                // Need to implement 2 tabs saving
                txtBudgetOwner.Text = "Approval Not Needed";
                txtGBUHSE.Text = "Approval Not Needed";
                txtSiteHSE.Text = "Approval Not Needed";
                txtSiteContact.Text = "Approval Not Needed";
                txtSitePlanning.Text = "Approval Not Needed";
                txtCentralPlanning.Text = "Approval Not Needed";
                txtSAPCost.Text = "Approval Not Needed";
                txtSmartClearance.Text = "Approval Not Needed";
                ViewState["SmartClearVal"] = "Approval Not Needed";
                txtTimingGate.Text = "Approval Not Needed";
                txtStandardOffice.Text = "Approval Not Needed";
                txtAdditionalApp1.Text = "Approval Not Needed";
                txtAdditionalApp2.Text = "Approval Not Needed";
                txtAdditionalApp3.Text = "Approval Not Needed";
                txtAdditionalApp4.Text = "Approval Not Needed";
                txtQAPre.Text = "Approval Not Needed";
                txtCentralQAPre.Text = "Approval Not Needed";
                int intResult;
                intResult = GET_EO_Lock_Status_Approve();
                if ((intResult == 5))
                {
                    return;
                }

                string strCurrentStage = "Final";
                string strStageStatus = "Draft";
                string strresumeExit = "FinalRouteExit";
                string script11;

                //script11 = ("window.open('FinalRouteConfirm.aspx?EOID="
                //          + (ViewState["EOID"] + ("&Stage=Final" + ("&BO=" + (txtBudgetOwnerFinal.Text.Trim() + "','Approvers','height=200,width=300');</script>")))));
                //ClientScript.RegisterStartupScript(GetType(), "clientscript", script11);
                ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "window.open('FinalRouteConfirm.aspx?EOID="
                           + ViewState["EOID"] + "&Stage=Final" + "&BO=" + txtBudgetOwnerFinal.Text.Trim() + "','Approvers','height=200,width=300');", true);

                //ViewState["Prelim"] = "Yes";
                ViewState["Fin"] = "Yes";
                AllTabSave(strCurrentStage, strStageStatus, strresumeExit);
            }


        }

        protected void btnTabPreliminary_Click(object sender, ImageClickEventArgs e)
        {
            ViewState["printstage"] = "Preliminary";
            lblStatusType.Text = "Draft";
            t11.Text = "";
            imgPreRoute.Visible = true;
            imgPreFinalRoute.Visible = false;
            imgCloseOutRoute.Visible = false;
            if (ViewState["PreClicked"] != null)
            {
                if (ViewState["PreClicked"].ToString() == "yes")
                {
                    imgPreRoute.Visible = false;
                }
            }
            lnkPreScreener.Visible = false;
            dgrPrescrenners.Visible = false;
            if (Request.QueryString["From"] == "ForEOEdit")
            {
                if ((ViewState["stage"].ToString().ToUpper() == "Preliminary".ToUpper() && ViewState["Status"].ToString().ToUpper() == "Draft".ToUpper()))
                {
                    imgPreRoute.Visible = true;
                    imgPreFinalRoute.Visible = false;
                    imgCloseOutRoute.Visible = false;
                    trProdRegulatedProductRAQ1.Visible = true;
                    trProdRegulatedProductRAQ2.Visible = true;
                    PSR1.Visible = false;
                    PSR2.Visible = false;
                    PSR3.Visible = false;
                    PSR4.Visible = false;
                    PSR5.Visible = false;
                    TRPSRAChanged.Visible = false;
                    TRPSRAChanged1.Visible = false;
                    Label49.Visible = false;
                }
                else
                {
                    imgPreRoute.Visible = false;
                    imgPreFinalRoute.Visible = false;
                    imgCloseOutRoute.Visible = false;
                }
                if ((ViewState["EOIDFlag"] != null) && (ViewState["EOIDFlag"].ToString() == "1"))
                {
                    TRPSRAChanged.Visible = true;
                    divPSRAAdded.Style.Add("display", "block");
                    divPSRARemoved.Style.Add("display", "none");
                    trMaterialsBrandsNewRow1.Visible = true;
                    divMaterialsBrandsNewRow2.Style.Add("display", "block");
                }
                else
                {
                    TRPSRAChanged.Visible = false;
                    divPSRAAdded.Style.Add("display", "none");
                    divPSRARemoved.Style.Add("display", "block");
                    PSandRAReadOnly.Visible = false;
                    TRPSRAChanged1.Visible = false;
                    trMaterialsBrandsNewRow1.Visible = false;
                    divMaterialsBrandsNewRow2.Style.Add("display", "none");
                }
            }
            else
            {
            }
            if ((Request.QueryString["From"] == "ForEOLock"))
            {
                btnTabPreliminary.ImageUrl = "../Images/preliminary-over.gif";
                btnTabFinal.ImageUrl = "../Images/final-nor.gif";
                btnTabCloseOut.ImageUrl = "../Images/close-out-nor.gif";
                imgPreRoute.Visible = false;
                imgPreFinalRoute.Visible = false;
                imgCloseOutRoute.Visible = false;
                if (ViewState["Status"] != null)
                {
                    lblStatusType.Text = ViewState["Status"].ToString();
                    lbStatusDB.Text = ViewState["Status"].ToString();
                }
                if (ViewState["stage"] != null)
                {
                    lbCurrentStageDB.Text = ViewState["stage"].ToString();
                }

                tblTop.Visible = false;

                if (ViewState["stage"] != null && ViewState["stage"].ToString().ToUpper() == "Closeout".ToUpper())
                {
                    if (ViewState["Status"].ToString().ToUpper() == "Approved".ToUpper())
                    {
                        lbStatusDB.Text = "Completed";
                    }
                }


                tblTopReadonly.Visible = true;
                FirstSectionPreliminary.Visible = false;
                TrGeneralPreliminaryRO.Visible = true;
                NewMaterialandBrands.Visible = false;
                NewMaterialandBrandsReadOnly.Visible = true;
                HSandSE.Visible = false;
                HSandSEReadOnly.Visible = true;
                PSandRA.Visible = false;
                PSandRAReadOnly.Visible = true;
                PlanningandBudgetInfo.Visible = false;
                PlanningandBudgetInfoReadOnly.Visible = true;
                ProductionandPackaging.Visible = false;
                ProductionandPackagingReadOnly.Visible = true;
                PackagingandDispositionPreliminary.Visible = false;
                PackagingandDispositionPreliminaryReadOnly.Visible = true;
                PreliminaryApprovals.Visible = false;
                PreliminaryApprovalsReadOnly.Visible = true;

                FinalPackagingandDisposition.Visible = false;
                FinalPackagingandDispositionReadOnly.Visible = false;
                FinalCostSheet.Visible = false;
                FinalCostSheetReadOnly.Visible = false;
                TrFinalQA.Visible = false;
                TrFinalQARO.Visible = false;
                FinalFormulaCardInformation.Visible = false;
                FinalFormulaCardInformationReadOnly.Visible = false;
                FinalTestPlans.Visible = false;
                FinalTestPlansReadOnly.Visible = false;
                LabSamplingPlans.Visible = false;
                LabSamplingPlansReadOnly.Visible = false;
                FinalProductTestFlowMatrix.Visible = false;
                FinalProductTestFlowMatrixReadonly.Visible = false;
                FinalOtherSupportingDoc.Visible = false;
                FinalOtherSupportingDocReadonly.Visible = false;
                FinalApprovals.Visible = false;
                FinalApprovalsReadOnly.Visible = false;

                //For PCRs
                trFinalMaterialsBrandsRadioBefore.Visible = false;
                trFinalMaterialsBrands.Visible = false;
                trFinalMaterialsBrandsRadioAfter.Visible = false;
                trFinalPSRA.Visible = false;
                trFinalMaterialsBrandshead.Visible = false;
                trFinalPSRAhead.Visible = false;

                NewMaterialandBrandsReadOnlyFinal.Visible = false;
                trProdRegulatedProductRAQ2Final.Visible = false;
                PSandRAReadOnlyFinal.Visible = false;

                //imgPreRoute.Visible = False
                CloseFirstSection.Visible = false;
                CloseActualCostSheet.Visible = false;
                CloseInitialLearningReport.Visible = false;
                CloseTestPlansUsed.Visible = false;
                CloseOutReport.Visible = false;
                CloseApprovals.Visible = false;
                CloseRevision.Visible = false;

                CloseFirstSectionReadonly.Visible = false;
                CloseActualCostSheetReadonly.Visible = false;
                CloseInitialLearningReportReadOnly.Visible = false;
                CloseTestPlansUsedReadonly.Visible = false;
                CloseoutReportRO.Visible = false;
                CloseApprovalsReadonly.Visible = false;

                //making visible false for mail-lock 14-01-08
                imgSaveResume.Visible = false;
                btnSave.Visible = false;
                btnExportPilotLine.Visible = false;
                imgPreRoute.Visible = false;
                imgPreFinalRoute.Visible = false;
                imgCloseOutRoute.Visible = false;
                if (ViewState["stage"].ToString().ToUpper() == "Preliminary".ToUpper() && ViewState["Status"].ToString().ToUpper() == "Draft".ToUpper())
                {
                    lblStageLevel.Text = "Preliminary";
                    lblStatusType.Text = "Draft";
                }
                else
                {
                    lblStageLevel.Text = "Preliminary";
                    lblStatusType.Text = "Routed";
                }
                return;
            }

            if ((Request.QueryString["From"] == "MailEdit" | Request.QueryString["From"] == "ForEOEdit") && ViewState["stage"].ToString().ToUpper() == "Preliminary".ToUpper() && (ViewState["Status"].ToString().ToUpper() == "Routed".ToUpper()))
            {
                btnTabPreliminary.ImageUrl = "../Images/preliminary-over.gif";
                btnTabFinal.ImageUrl = "../Images/final-nor.gif";
                btnTabCloseOut.ImageUrl = "../Images/close-out-nor.gif";
                btnExportPilotLine.Visible = false;
                trProdRegulatedProductRAQ1.Visible = true;
                trProdRegulatedProductRAQ2.Visible = true;
                PSR1.Visible = false;
                PSR2.Visible = false;
                PSR3.Visible = false;
                PSR4.Visible = false;
                PSR5.Visible = false;
                TRPSRAChanged.Visible = true;
                TRPSRAChanged1.Visible = true;
                if ((lblReadonlyPSR1.Text == "Yes" && lblReadonlyPSR2.Text == "No"))
                {
                }
                else
                {
                    TRPSRAChanged1.Visible = false;
                }
                Label49.Visible = false;
                if ((ViewState["EOIDFlag"] != null) && (ViewState["EOIDFlag"].ToString() == "1"))
                {
                    TRPSRAChanged.Visible = true;
                    divPSRAAdded.Style.Add("display", "block");
                    divPSRARemoved.Style.Add("display", "none");
                    trMaterialsBrandsNewRow1.Visible = true;
                    divMaterialsBrandsNewRow2.Style.Add("display", "block");
                }
                else
                {
                    TRPSRAChanged.Visible = false;
                    divPSRAAdded.Style.Add("display", "none");
                    divPSRARemoved.Style.Add("display", "block");
                    PSandRAReadOnly.Visible = false;
                    trMaterialsBrandsNewRow1.Visible = false;
                    divMaterialsBrandsNewRow2.Style.Add("display", "none");
                }
                lblStageLevel.Text = "Preliminary";
                lblStatusType.Text = "Routed";
                btnSave.Visible = false;
                imgSaveResume.Visible = false;
                imgPreRoute.Visible = false;
                tblTop.Visible = false;
                tblTopReadonly.Visible = true;
                FirstSectionPreliminary.Visible = false;
                TrGeneralPreliminaryRO.Visible = true;
                NewMaterialandBrands.Visible = false;
                NewMaterialandBrandsReadOnly.Visible = true;
                HSandSE.Visible = false;
                HSandSEReadOnly.Visible = true;
                PSandRA.Visible = false;
                PSandRAReadOnly.Visible = true;
                PlanningandBudgetInfo.Visible = false;
                PlanningandBudgetInfoReadOnly.Visible = true;
                ProductionandPackaging.Visible = false;
                ProductionandPackagingReadOnly.Visible = true;
                PackagingandDispositionPreliminary.Visible = false;
                PackagingandDispositionPreliminaryReadOnly.Visible = true;
                PreliminaryApprovals.Visible = false;
                PreliminaryApprovalsReadOnly.Visible = true;

                FinalPackagingandDisposition.Visible = false;
                FinalPackagingandDispositionReadOnly.Visible = false;
                FinalCostSheet.Visible = false;
                FinalCostSheetReadOnly.Visible = false;
                TrFinalQA.Visible = false;
                TrFinalQARO.Visible = false;
                FinalFormulaCardInformation.Visible = false;
                FinalFormulaCardInformationReadOnly.Visible = false;
                FinalTestPlans.Visible = false;
                FinalTestPlansReadOnly.Visible = false;
                LabSamplingPlans.Visible = false;
                LabSamplingPlansReadOnly.Visible = false;
                FinalProductTestFlowMatrix.Visible = false;
                FinalProductTestFlowMatrixReadonly.Visible = false;
                FinalOtherSupportingDoc.Visible = false;
                FinalOtherSupportingDocReadonly.Visible = false;
                FinalApprovals.Visible = false;
                FinalApprovalsReadOnly.Visible = false;


                //For PCRs
                trFinalMaterialsBrandsRadioBefore.Visible = false;
                trFinalMaterialsBrands.Visible = false;
                trFinalMaterialsBrandsRadioAfter.Visible = false;
                trFinalPSRA.Visible = false;
                trFinalMaterialsBrandshead.Visible = false;
                trFinalPSRAhead.Visible = false;

                NewMaterialandBrandsReadOnlyFinal.Visible = false;
                trProdRegulatedProductRAQ2Final.Visible = false;
                PSandRAReadOnlyFinal.Visible = false;

                //imgPreRoute.Visible = False
                CloseFirstSection.Visible = false;
                CloseActualCostSheet.Visible = false;
                CloseInitialLearningReport.Visible = false;
                CloseTestPlansUsed.Visible = false;
                CloseOutReport.Visible = false;
                CloseApprovals.Visible = false;
                CloseRevision.Visible = false;

            }
            else if ((Request.QueryString["From"] == "MailEdit" | Request.QueryString["From"] == "ForEOEdit") && ViewState["stage"].ToString().ToUpper() == "Final".ToUpper() && (ViewState["Status"].ToString().ToUpper() == "Draft".ToUpper() | ViewState["Status"].ToString().ToUpper() == "Routed".ToUpper()))
            {
                lblStageLevel.Text = "Preliminary";
                lblStatusType.Text = "Routed";
                btnExportPilotLine.Visible = false;
                btnSave.Visible = false;
                imgSaveResume.Visible = false;
                btnTabPreliminary.ImageUrl = "../Images/preliminary-over.gif";
                btnTabFinal.ImageUrl = "../Images/final-nor.gif";
                btnTabCloseOut.ImageUrl = "../Images/close-out-nor.gif";
                imgPreRoute.Visible = false;
                tblTop.Visible = false;
                tblTopReadonly.Visible = true;
                FirstSectionPreliminary.Visible = false;
                TrGeneralPreliminaryRO.Visible = true;
                NewMaterialandBrands.Visible = false;
                NewMaterialandBrandsReadOnly.Visible = true;
                HSandSE.Visible = false;
                HSandSEReadOnly.Visible = true;
                PSandRA.Visible = false;
                PSandRAReadOnly.Visible = true;
                PlanningandBudgetInfo.Visible = false;
                PlanningandBudgetInfoReadOnly.Visible = true;
                ProductionandPackaging.Visible = false;
                ProductionandPackagingReadOnly.Visible = true;
                PackagingandDispositionPreliminary.Visible = false;
                PackagingandDispositionPreliminaryReadOnly.Visible = true;
                PreliminaryApprovals.Visible = false;
                PreliminaryApprovalsReadOnly.Visible = true;

                FinalPackagingandDisposition.Visible = false;
                FinalPackagingandDispositionReadOnly.Visible = false;
                FinalCostSheet.Visible = false;
                FinalCostSheetReadOnly.Visible = false;
                TrFinalQA.Visible = false;
                TrFinalQARO.Visible = false;
                FinalFormulaCardInformation.Visible = false;
                FinalFormulaCardInformationReadOnly.Visible = false;
                FinalTestPlans.Visible = false;
                FinalTestPlansReadOnly.Visible = false;
                LabSamplingPlans.Visible = false;
                LabSamplingPlansReadOnly.Visible = false;
                FinalProductTestFlowMatrix.Visible = false;
                FinalProductTestFlowMatrixReadonly.Visible = false;
                FinalOtherSupportingDoc.Visible = false;
                FinalOtherSupportingDocReadonly.Visible = false;
                FinalApprovals.Visible = false;
                FinalApprovalsReadOnly.Visible = false;


                //For PCRs
                trFinalMaterialsBrandsRadioBefore.Visible = false;
                trFinalMaterialsBrands.Visible = false;
                trFinalMaterialsBrandsRadioAfter.Visible = false;
                trFinalPSRA.Visible = false;
                trFinalMaterialsBrandshead.Visible = false;
                trFinalPSRAhead.Visible = false;

                NewMaterialandBrandsReadOnlyFinal.Visible = false;
                trProdRegulatedProductRAQ2Final.Visible = false;
                PSandRAReadOnlyFinal.Visible = false;

                //Close Out Edit Fields
                CloseFirstSection.Visible = false;
                CloseActualCostSheet.Visible = false;
                CloseInitialLearningReport.Visible = false;
                CloseTestPlansUsed.Visible = false;
                CloseOutReport.Visible = false;
                CloseApprovals.Visible = false;
                CloseRevision.Visible = false;
                //Close Out Read only Fields
                CloseActualCostSheetReadonly.Visible = false;
                CloseInitialLearningReportReadOnly.Visible = false;
                CloseTestPlansUsedReadonly.Visible = false;
                CloseoutReportRO.Visible = false;
                CloseApprovalsReadonly.Visible = false;
            }
            else if ((Request.QueryString["From"] == "MailEdit" || Request.QueryString["From"] == "ForEOEdit") && ViewState["stage"].ToString().ToUpper() == "Closeout".ToUpper() && (ViewState["Status"].ToString().ToUpper() == "Routed".ToUpper() | ViewState["Status"].ToString().ToUpper() == "Draft".ToUpper() | ViewState["Status"].ToString().ToUpper() == "Approved".ToUpper()))
            {
                btnExportPilotLine.Visible = false;
                lblStageLevel.Text = "Preliminary";
                lblStatusType.Text = "Routed";
                btnSave.Visible = false;
                imgSaveResume.Visible = false;
                btnTabPreliminary.ImageUrl = "../Images/preliminary-over.gif";
                btnTabFinal.ImageUrl = "../Images/final-nor.gif";
                btnTabCloseOut.ImageUrl = "../Images/close-out-nor.gif";
                imgPreRoute.Visible = false;
                imgPreFinalRoute.Visible = false;
                imgCloseOutRoute.Visible = false;
                //tblTop.Visible = False
                tblTopReadonly.Visible = true;
                FirstSectionPreliminary.Visible = false;
                TrGeneralPreliminaryRO.Visible = true;
                NewMaterialandBrands.Visible = false;
                NewMaterialandBrandsReadOnly.Visible = true;
                HSandSE.Visible = false;
                HSandSEReadOnly.Visible = true;
                PSandRA.Visible = false;
                PSandRAReadOnly.Visible = true;
                PlanningandBudgetInfo.Visible = false;
                PlanningandBudgetInfoReadOnly.Visible = true;
                ProductionandPackaging.Visible = false;
                ProductionandPackagingReadOnly.Visible = true;
                PackagingandDispositionPreliminary.Visible = false;
                PackagingandDispositionPreliminaryReadOnly.Visible = true;
                PreliminaryApprovals.Visible = false;
                PreliminaryApprovalsReadOnly.Visible = true;
                PreliminaryRevision.Visible = true;

                FinalPackagingandDisposition.Visible = false;
                FinalPackagingandDispositionReadOnly.Visible = false;
                FinalCostSheet.Visible = false;
                FinalCostSheetReadOnly.Visible = false;
                TrFinalQA.Visible = false;
                TrFinalQARO.Visible = false;
                FinalFormulaCardInformation.Visible = false;
                FinalFormulaCardInformationReadOnly.Visible = false;
                FinalTestPlans.Visible = false;
                FinalTestPlansReadOnly.Visible = false;
                LabSamplingPlans.Visible = false;
                LabSamplingPlansReadOnly.Visible = false;
                FinalProductTestFlowMatrix.Visible = false;
                FinalProductTestFlowMatrixReadonly.Visible = false;
                FinalOtherSupportingDoc.Visible = false;
                FinalOtherSupportingDocReadonly.Visible = false;
                FinalApprovals.Visible = false;
                FinalApprovalsReadOnly.Visible = false;

                FinalPackagingandDisposition.Visible = false;
                FinalPackagingandDispositionReadOnly.Visible = false;
                FinalCostSheet.Visible = false;
                FinalCostSheetReadOnly.Visible = false;
                TrFinalQA.Visible = false;
                TrFinalQARO.Visible = false;
                FinalFormulaCardInformation.Visible = false;
                FinalFormulaCardInformationReadOnly.Visible = false;
                FinalTestPlans.Visible = false;
                FinalTestPlansReadOnly.Visible = false;
                LabSamplingPlans.Visible = false;
                LabSamplingPlansReadOnly.Visible = false;
                FinalProductTestFlowMatrix.Visible = false;
                FinalProductTestFlowMatrixReadonly.Visible = false;
                FinalOtherSupportingDoc.Visible = false;
                FinalOtherSupportingDocReadonly.Visible = false;
                FinalApprovals.Visible = false;
                FinalApprovalsReadOnly.Visible = false;


                //For PCRs
                trFinalMaterialsBrandsRadioBefore.Visible = false;
                trFinalMaterialsBrands.Visible = false;
                trFinalMaterialsBrandsRadioAfter.Visible = false;
                trFinalPSRA.Visible = false;
                trFinalMaterialsBrandshead.Visible = false;
                trFinalPSRAhead.Visible = false;

                NewMaterialandBrandsReadOnlyFinal.Visible = false;
                trProdRegulatedProductRAQ2Final.Visible = false;
                PSandRAReadOnlyFinal.Visible = false;

                //Close Out Edit Fields
                CloseFirstSection.Visible = false;
                CloseActualCostSheet.Visible = false;
                CloseInitialLearningReport.Visible = false;
                CloseTestPlansUsed.Visible = false;
                CloseOutReport.Visible = false;
                CloseApprovals.Visible = false;
                CloseRevision.Visible = false;
                //Close Out Read only Fields
                CloseActualCostSheetReadonly.Visible = false;
                CloseInitialLearningReportReadOnly.Visible = false;
                CloseTestPlansUsedReadonly.Visible = false;
                CloseoutReportRO.Visible = false;
                CloseApprovalsReadonly.Visible = false;
                CloseFirstSectionReadonly.Visible = false;

            }
            else
            {
                btnTabPreliminary.ImageUrl = "../Images/preliminary-over.gif";
                btnTabFinal.ImageUrl = "../Images/final-nor.gif";
                btnTabCloseOut.ImageUrl = "../Images/close-out-nor.gif";
                lblStageLevel.Text = "Preliminary";
                lblStatusType.Text = "Draft";
                lbCurrentStageDB.Text = "Preliminary";
                lbStatusDB.Text = "Draft";
                FirstSectionPreliminary.Visible = true;
                NewMaterialandBrands.Visible = true;
                HSandSE.Visible = true;
                PSandRA.Visible = true;
                PlanningandBudgetInfo.Visible = true;
                ProductionandPackaging.Visible = true;
                PackagingandDispositionPreliminary.Visible = true;
                PreliminaryApprovals.Visible = true;
                PreliminaryRevision.Visible = true;
                //Hiding final tab details
                FinalBudgetCenter.Visible = false;
                FinalPackagingandDisposition.Visible = false;
                FinalCostSheet.Visible = false;
                TrFinalQA.Visible = false;
                FinalFormulaCardInformation.Visible = false;
                FinalTestPlans.Visible = false;
                LabSamplingPlans.Visible = false;
                FinalProductTestFlowMatrix.Visible = false;
                FinalOtherSupportingDoc.Visible = false;
                FinalApprovals.Visible = false;

                //For PCR - Final Tab related fields
                trFinalMaterialsBrandsRadioBefore.Visible = false;
                trFinalMaterialsBrands.Visible = false;
                trFinalMaterialsBrandsRadioAfter.Visible = false;
                trFinalPSRA.Visible = false;
                trFinalMaterialsBrandshead.Visible = false;
                trFinalPSRAhead.Visible = false;

                CloseFirstSection.Visible = false;
                CloseActualCostSheet.Visible = false;
                CloseInitialLearningReport.Visible = false;
                CloseTestPlansUsed.Visible = false;
                CloseOutReport.Visible = false;
                CloseApprovals.Visible = false;
                CloseRevision.Visible = false;

                //for Readonly/Lock mode
                tblTopReadonly.Visible = false;
                TrGeneralPreliminaryRO.Visible = false;
                NewMaterialandBrandsReadOnly.Visible = false;
                PackagingandDispositionPreliminaryReadOnly.Visible = false;
                ProductionandPackagingReadOnly.Visible = false;
                PlanningandBudgetInfoReadOnly.Visible = false;
                PSandRAReadOnly.Visible = false;
                HSandSEReadOnly.Visible = false;
                //FinalRevisionReadonly.Visible = False
                PreliminaryApprovalsReadOnly.Visible = false;

                //Final Tab
                FinalBudgetCenterReadOnly.Visible = false;
                FinalPackagingandDispositionReadOnly.Visible = false;
                FinalCostSheetReadOnly.Visible = false;
                FinalFormulaCardInformationReadOnly.Visible = false;
                FinalTestPlansReadOnly.Visible = false;
                LabSamplingPlansReadOnly.Visible = false;
                FinalProductTestFlowMatrixReadonly.Visible = false;
                FinalOtherSupportingDocReadonly.Visible = false;
                FinalApprovalsReadOnly.Visible = false;
                CloseFirstSectionReadonly.Visible = false;


                //For PCRs
                NewMaterialandBrandsReadOnlyFinal.Visible = false;
                trProdRegulatedProductRAQ2Final.Visible = false;
                PSandRAReadOnlyFinal.Visible = false;

                //co tab
                CloseActualCostSheetReadonly.Visible = false;
                CloseInitialLearningReportReadOnly.Visible = false;
                CloseTestPlansUsedReadonly.Visible = false;
                CloseoutReportRO.Visible = false;
                CloseApprovalsReadonly.Visible = false;
                lnkbeforeFinTabRouApp.Visible = true;
            }
            preliminaryApprCheck();
            //The following code added by Murthy on 11 Nov 2008
            //'Start
            if (ViewState["stage"].ToString().ToUpper() == "Closeout".ToUpper())
            {
                lblStatusType.Text = "Approved";
            }
            else if ((ViewState["stage"].ToString().ToUpper() == "FINAL" && ViewState["IsTwoTabRouting"].ToString().ToUpper() == "N"))
            {
                lblStatusType.Text = "Approved";
            }
            else
            {
                lblStatusType.Text = ViewState["Status"].ToString();
            }
            //'End
        }

        protected void dgdPSRAInfo_ItemCommand(object source, DataGridCommandEventArgs e)
        {
            if (e.CommandName == "Del")
            {
                try
                {
                    deletePSRANo(dgdPSRAInfo.Items[e.Item.ItemIndex].Cells[8].Text);
                }
                catch (Exception ex)
                {
                }
            }
            else
            {
                string script = null;
                int intRowNumber = e.Item.ItemIndex;
                string intCTTrackNumber = null;
                intCTTrackNumber = dgdPSRAInfo.Items[intRowNumber].Cells[2].Text;
                string strSupName = null;
                strSupName = dgdPSRAInfo.Items[intRowNumber].Cells[3].Text;
                string strMatApplication = null;
                strMatApplication = dgdPSRAInfo.Items[intRowNumber].Cells[4].Text;
                string strMatUsageAmount = null;
                strMatUsageAmount = dgdPSRAInfo.Items[intRowNumber].Cells[5].Text;
                string strPSRALevel = null;
                strPSRALevel = dgdPSRAInfo.Items[intRowNumber].Cells[6].Text;
                string strPSRANo = null;
                strPSRANo = dgdPSRAInfo.Items[intRowNumber].Cells[8].Text;
                //script = "<script>window.open('PSRA.aspx?rownum=" + strPSRANo + "&CTnum=" + intCTTrackNumber + "&SupName=" + strSupName + "&MatApplication=" + strMatApplication + "&MatUsageAmount=" + strMatUsageAmount + "&PSRALevel=" + strPSRALevel + "',null,'height=290,width=450,status=yes,toolbar=no,menubar=no,location=no,top=230,left=270');</script>";
                //Page.RegisterStartupScript("clientscript", script);

                ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "window.open('PSRA.aspx?rownum=" + strPSRANo + "&CTnum=" + intCTTrackNumber + "&SupName=" + strSupName + "&MatApplication=" + strMatApplication + "&MatUsageAmount=" + strMatUsageAmount + "&PSRALevel=" + strPSRALevel + "',null,'height=290,width=450,status=yes,toolbar=no,menubar=no,location=no,top=230,left=270');", true);
                //showModalDialog
            }
        }

        protected void dgdGCASInfo_ItemCommand(object source, DataGridCommandEventArgs e)
        {
            if (e.CommandName == "Del")
            {
                try
                {
                    deleteGCSANo(dgdGCASInfo.Items[e.Item.ItemIndex].Cells[8].Text);
                }
                catch (Exception ex)
                {
                }
            }
            else
            {
                string script = null;
                int intRowNumber = e.Item.ItemIndex;
                long intGCASNumber = 0;
                intGCASNumber = Convert.ToInt64(dgdGCASInfo.Items[intRowNumber].Cells[2].Text);
                string strSite = null;
                strSite = dgdGCASInfo.Items[intRowNumber].Cells[3].Text;
                string strNewToSite = null;
                strNewToSite = dgdGCASInfo.Items[intRowNumber].Cells[4].Text;
                string strNewToCategory = null;
                strNewToCategory = dgdGCASInfo.Items[intRowNumber].Cells[5].Text;
                string strIntermediate = null;
                strIntermediate = dgdGCASInfo.Items[intRowNumber].Cells[6].Text;
                string strType = null;
                strType = dgdGCASInfo.Items[intRowNumber].Cells[7].Text;
                string GCASNo = null;
                GCASNo = dgdGCASInfo.Items[intRowNumber].Cells[8].Text;
                //script = "<script>window.open('GCASNumber.aspx?rownum=" + GCASNo + "&GCASNumber=" + intGCASNumber + "&site=" + strSite + "&NewToSite=" + strNewToSite + "&Category=" + strNewToCategory + "&Intermediate=" + strIntermediate + "&Type=" + strType + "',null,'height=550, width=600, left=280, top=120');</script>";
                //Page.RegisterStartupScript("clientscript", script);
                ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "window.open('GCASNumber.aspx?rownum=" + GCASNo + "&GCASNumber=" + intGCASNumber + "&site=" + strSite + "&NewToSite=" + strNewToSite + "&Category=" + strNewToCategory + "&Intermediate=" + strIntermediate + "&Type=" + strType + "',null,'height=550, width=600, left=280, top=120');", true);
            }
        }
        
        protected void lnkSiteFinaceCOChangeApp_Click(object sender, EventArgs e)
        {
            string script = null;
            string strFuncName = lblCOAppgrpSiteFinance.Text.Trim();
            string strPlantID = drpPlant.SelectedItem.Value;
            if (strPlantID == "--Select a Plant--")
            {
                strPlantID = "0";
            }
            //script = "<script>window.open('ChangeApprover.aspx?FuncName=" + strFuncName + "&PlantID=" + strPlantID + "&From=SiteFinaceCO','Approvers','height=200,width=400');</script>";
            //Page.RegisterStartupScript("clientscript", script);
            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "window.open('ChangeApprover.aspx?FuncName=" + strFuncName + "&PlantID=" + strPlantID + "&From=SiteFinaceCO','Approvers','height=200,width=400');", true);
        }

        protected void lnkSiteFinanceCOFYI_Click(object sender, EventArgs e)
        {
            txtCloseSiteFinance.Text = "Approval Not Needed";
        }

        protected void lnkBOCOChangeApp_Click(object sender, EventArgs e)
        {
            //  string script = null;
            string strFuncName = lblCOAppgrpBO.Text.Trim();
            string strPlantID = drpPlant.SelectedItem.Value;
            if (strPlantID == "--Select a Plant--")
            {
                strPlantID = "0";
            }
            //script = "<script>window.open('ChangeApprover.aspx?FuncName=" + strFuncName + "&PlantID=" + strPlantID + "&From=BOCO','Approvers','height=200,width=400');</script>";
            //Page.RegisterStartupScript("clientscript", script);
            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "window.open('ChangeApprover.aspx?FuncName=" + strFuncName + "&PlantID=" + strPlantID + "&From=BOCO','Approvers','height=200,width=400');", true);
        }

        protected void imgCloseOutRoute_Click1(object sender, ImageClickEventArgs e)
        {
            Page.SmartNavigation = true;

            SqlParameter[] paramOut = null;
            string strstatus = string.Empty;

            if ((ViewState["EOID"] != null))
            {
                if (objEOBA.GET_EO_Can_Route(Convert.ToInt32(ViewState["EOID"]), lbCurrentStageDB.Text, ref paramOut))
                {
                    strstatus = paramOut[0].Value.ToString();
                }
                if (!(ViewState["stage"].ToString().ToUpper() == "CloseOut".ToUpper() & ViewState["Status"].ToString().ToUpper() == "Draft".ToUpper()))
                {
                    string strCurrentStage = null;
                    if (string.IsNullOrEmpty(ViewState["stage"].ToString()))
                    {
                        strCurrentStage = "CloseOut";
                    }
                    else
                    {
                        strCurrentStage = ViewState["stage"].ToString();
                    }
                    string strStageStatus = null;
                    if (string.IsNullOrEmpty(ViewState["Status"].ToString()))
                    {
                        strStageStatus = "Draft";
                    }
                    else
                    {
                        strStageStatus = ViewState["Status"].ToString();
                    }

                    if (lbCOReport.Items.Count == 0)
                    {
                        script = "alert('Please attach Close Out Report(s).');document.getElementById('lbCOReport').focus();";
                        //Page.RegisterStartupScript("clientscript", script);
                        ScriptManager.RegisterStartupScript(this, typeof(Page), "script", script, true);

                        return;
                    }

                    if (lbFinalCostAttach.Items.Count == 0)
                    {
                        //script = "alert('Please Attach Final Cost Sheet(s).');document.getElementById('lbFinalCostAttach').focus();</script>"
                        script = "alert('Please Attach Cost Sheet(s).');document.getElementById('lbFinalCostAttach').focus();";
                        // Page.RegisterStartupScript("clientscript", script);
                        ScriptManager.RegisterStartupScript(this, typeof(Page), "script", script, true);
                        return;
                    }

                    if (drpCloseApprovalGroup.SelectedIndex == 0 | drpCloseApprovalGroup.SelectedIndex == -1)
                    {
                        script = "alert('Please select Approval Group.');document.getElementById('drpCloseApprovalGroup').focus();";
                        // Page.RegisterStartupScript("clientscript", script);
                        ScriptManager.RegisterStartupScript(this, typeof(Page), "script", script, true);

                        return;
                    }

                    //txtCloseSiteFinance
                    if (string.IsNullOrEmpty(txtCloseSiteFinance.Text))
                    {
                        script = "alert('Please select Site Finance.');document.getElementById('txtCloseSiteFinance').focus();";
                        //Page.RegisterStartupScript("clientscript", script);
                        ScriptManager.RegisterStartupScript(this, typeof(Page), "script", script, true);

                        return;
                    }

                    if (string.IsNullOrEmpty(txtCloseBudgetOwner.Text))
                    {
                        script = "alert('Please select Budget Owner.');document.getElementById('txtCloseBudgetOwner').focus();";
                        // Page.RegisterStartupScript("clientscript", script);
                        ScriptManager.RegisterStartupScript(this, typeof(Page), "script", script, true);

                        return;
                    }

                    int intResult;
                    intResult = GET_EO_Lock_Status_Approve();
                    if (intResult == 5)
                    {
                        return;
                    }

                    //Dim strCurrentStage As String = "Final"
                    //Dim strStageStatus As String = "Draft"
                    //Dim strresumeExit As String = "Resume"

                    string script11 = null;
                    //script11 = "<script>window.open('FinalRouteConfirm.aspx?EOID=" + ViewState["EOID"] + "&Stage=CloseOut" + "&BO=" + txtBudgetOwner.Text.Trim() + "','Approvers','height=200,width=300');</script> ";
                    //Page.RegisterStartupScript("clientscript", script11);
                    ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "window.open('FinalRouteConfirm.aspx?EOID=" + ViewState["EOID"] + "&Stage=CloseOut" + "&BO=" + txtBudgetOwner.Text.Trim() + "','Approvers','height=200,width=300');", true);
                    //FinalCloseOutTabSave(strCurrentStage, strStageStatus, strresumeExit) 'call Two tabs Saving

                    string strresumeExit = "Exit";
                    ViewState["Closeout"] = "Yes";
                    CloseOutTabSave(strCurrentStage, strStageStatus, strresumeExit);
                }
                else
                {
                    string strCurrentStage = null;
                    strCurrentStage = "CloseOut";
                    string strStageStatus = null;
                    strStageStatus = "Draft";
                    //AllTabSave(strCurrentStage, strStageStatus)
                    //Call only close out saving 
                    if (lbCOReport.Items.Count == 0)
                    {
                        string script = null;
                        script = "alert('Please attach Close Out Report(s).');document.getElementById('lbCOReport').focus();";
                        //Page.RegisterStartupScript("clientscript", script);
                        ScriptManager.RegisterStartupScript(this, typeof(Page), "script", script, true);

                        return;
                    }

                    if (lbFinalCostAttach.Items.Count == 0)
                    {
                        string script = null;
                        //script = "<script>alert('Please Attach Final Cost Sheet(s).');document.getElementById('lbFinalCostAttach').focus();</script> "
                        script = "alert('Please Attach Cost Sheet(s).');document.getElementById('lbFinalCostAttach').focus();";
                        // Page.RegisterStartupScript("clientscript", script);
                        ScriptManager.RegisterStartupScript(this, typeof(Page), "script", script, true);

                        return;
                    }

                    if (drpCloseApprovalGroup.SelectedIndex == 0 | drpCloseApprovalGroup.SelectedIndex == -1)
                    {
                        string script = null;
                        script = "alert('Please select Approval Group.');document.getElementById('drpCloseApprovalGroup').focus();";
                        //Page.RegisterStartupScript("clientscript", script);
                        ScriptManager.RegisterStartupScript(this, typeof(Page), "script", script, true);

                        return;
                    }

                    //txtCloseSiteFinance
                    if (string.IsNullOrEmpty(txtCloseSiteFinance.Text))
                    {
                        string script = null;
                        //script = "alert('Please select Site Finance.');document.getElementById('txtCloseSiteFinance').focus();";
                        script = "alert('Please select Site Finance.');document.getElementById('txtCloseSiteFinance').disabled = false;document.getElementById('txtCloseSiteFinance').focus();document.getElementById('txtCloseSiteFinance').disabled = true;";
                        //Page.RegisterStartupScript("clientscript", script);
                        ScriptManager.RegisterStartupScript(this, typeof(Page), "script", script, true);

                        return;
                    }

                    if (string.IsNullOrEmpty(txtCloseBudgetOwner.Text))
                    {
                        string script = null;
                        //script = "alert('Please select Budget Owner.');document.getElementById('txtCloseBudgetOwner').focus();";
                        script = "alert('Please select Budget Owner.');document.getElementById('txtCloseBudgetOwner').disabled = false;document.getElementById('txtCloseBudgetOwner').focus();document.getElementById('txtCloseBudgetOwner').disabled = true;";
                        //Page.RegisterStartupScript("clientscript", script);
                        ScriptManager.RegisterStartupScript(this, typeof(Page), "script", script, true);

                        return;
                    }

                    if (txtCloseSiteFinance.Text == "Approval Not Needed" & txtCloseBudgetOwner.Text == "Approval Not Needed")
                    {
                        string script = null;
                        script = "alert('This EO does not need to be routed. Please select Complete this EO to complete your EO.');";
                        //Page.RegisterStartupScript("clientscript", script);
                        ScriptManager.RegisterStartupScript(this, typeof(Page), "script", script, true);

                        return;
                    }

                    int intResult;
                    intResult = GET_EO_Lock_Status_Approve();
                    if (intResult == 5)
                    {
                        return;
                    }

                    string script11 = null;
                    //script11 = "<script>window.open('FinalRouteConfirm.aspx?EOID=" + ViewState["EOID"] + "&Stage=CloseOut','Approvers','height=200,width=300');</script> ";
                    //Page.RegisterStartupScript("clientscript", script11);
                    ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "window.open('FinalRouteConfirm.aspx?EOID=" + ViewState["EOID"] + "&Stage=CloseOut','Approvers','height=200,width=300');", true);
                    string strresumeExit = "Exit";
                    ViewState["Closeout"] = "Yes";
                    CloseOutTabSave(strCurrentStage, strStageStatus, strresumeExit);
                }
            }
        }

        protected void imgAddlbCOReport_Click1(object sender, ImageClickEventArgs e)
        {
            if ((Page.IsPostBack == true))
            {
                if (!string.IsNullOrEmpty(txtCOReport.Value))
                {
                    script = "alert('Attachment will be inserted into the database after the EO is submitted')";
                    // Page.RegisterStartupScript("clientscript", script);
                    ScriptManager.RegisterStartupScript(this, typeof(Page), "script", script, true);

                    arCloseOutReportCloseOut.Add(txtCOReport);
                    string strFullPostFileName = txtCOReport.PostedFile.FileName;
                    string strPostFileName = strFullPostFileName.Substring(strFullPostFileName.LastIndexOf("\\") + 1, (strFullPostFileName.Length - 1) - (strFullPostFileName.LastIndexOf("\\")));
                    lbCOReport.Items.Add(strPostFileName);
                }
            }
        }

        protected void imgDellbCOReport_Click1(object sender, ImageClickEventArgs e)
        {
            int rowCount = 0;
            string str = null;
            str = "";
            for (rowCount = 0; rowCount <= lbCOReport.Items.Count - 1; rowCount++)
            {
                try
                {
                    if (lbCOReport.Items[rowCount].Selected == true)
                    {
                        //
                        if (string.IsNullOrEmpty(str))
                        {
                            str = lbCOReport.Items[rowCount].Value;
                        }
                        else
                        {
                            str = str + "," + lbCOReport.Items[rowCount].Value;
                        }
                        lbCOReport.Items.Remove(lbCOReport.SelectedItem);
                        arCloseOutReportCloseOut.RemoveAt(lbCOReport.SelectedIndex);
                    }
                }
                catch (Exception ex)
                {
                }
            }
            if (!string.IsNullOrEmpty(str))
            {
                script = "alert('Attachment will be deleted from the database after the EO is submitted')";
                // Page.RegisterStartupScript("clientscript", script);
                ScriptManager.RegisterStartupScript(this, typeof(Page), "script", script, true);

            }
            string eid = ViewState["EOID"].ToString();

            SqlParameter[] paramOut = null;
            try
            {
                int Eoid_Del = Convert.ToInt32(eid);

                if (objEOBA.DeleteCommonAttachmentsCloseOut(str, Eoid_Del, "Report", ref paramOut))
                {
                    intAttachResult = Convert.ToInt32(paramOut[0].Value);
                }
            }
            catch (Exception ex)
            {
            }
            finally
            {
                objEOBA = null;
                paramOut = null;
            }
        }

        protected void imgAddAttchCOTestPlan_Click1(object sender, ImageClickEventArgs e)
        {
            if ((Page.IsPostBack == true))
            {
                if (!string.IsNullOrEmpty(txtTPAttach.Value))
                {
                    script = "alert('Attachment will be inserted into the database after the EO is submitted')";
                    //Page.RegisterStartupScript("clientscript", script);
                    ScriptManager.RegisterStartupScript(this, typeof(Page), "script", script, true);

                    arTestPlaneedused.Add(txtTPAttach);
                    string strFullPostFileName = txtTPAttach.PostedFile.FileName;
                    string strPostFileName = strFullPostFileName.Substring(strFullPostFileName.LastIndexOf("\\") + 1, (strFullPostFileName.Length - 1) - (strFullPostFileName.LastIndexOf("\\")));
                    lbTestPlanUsedAttach.Items.Add(strPostFileName);
                }
            }
        }

        protected void imgDelAttchCOTestPlan_Click1(object sender, ImageClickEventArgs e)
        {
            int rowCount = 0;
            string str = null;
            str = "";
            for (rowCount = 0; rowCount <= lbTestPlanUsedAttach.Items.Count - 1; rowCount++)
            {

                if (lbTestPlanUsedAttach.Items[rowCount].Selected == true)
                {
                    if (string.IsNullOrEmpty(str))
                    {
                        str = lbTestPlanUsedAttach.Items[rowCount].Value;
                    }
                    else
                    {
                        str = str + "," + lbTestPlanUsedAttach.Items[rowCount].Value;
                    }
                    lbTestPlanUsedAttach.Items.Remove(lbTestPlanUsedAttach.SelectedItem);
                    arTestPlaneedused.RemoveAt(lbTestPlanUsedAttach.SelectedIndex);
                }

            }
            if (!string.IsNullOrEmpty(str))
            {
                script = "alert('Attachment will be deleted from the database after the EO is submitted')";
                //Page.RegisterStartupScript("clientscript", script);
                ScriptManager.RegisterStartupScript(this, typeof(Page), "script", script, true);

            }

            SqlParameter[] paramOut = null;
            int intAttachResult;
            try
            {
                int Eoid_Del = Convert.ToInt32(ViewState["EOID"]);
                if (objEOBA.DeleteCommonAttachmentsCloseOut(str, Eoid_Del, "Plans_Used", ref paramOut))
                {
                    intAttachResult = Convert.ToInt32(paramOut[0].Value);
                }
            }
            catch (Exception ex)
            {
            }
            finally
            {
                objEOBA = null;
                paramOut = null;
            }
        }

        protected void imgAddILR_Click1(object sender, ImageClickEventArgs e)
        {
            if ((Page.IsPostBack == true))
            {
                if (!string.IsNullOrEmpty(txtILR.Value))
                {
                    script = "alert('Attachment will be inserted into the database after the EO is submitted')";
                    //Page.RegisterStartupScript("clientscript", script);
                    ScriptManager.RegisterStartupScript(this, typeof(Page), "script", script, true);

                    arIntialLearningCloseOut.Add(txtILR);
                    string strFullPostFileName = txtILR.PostedFile.FileName;
                    string strPostFileName = strFullPostFileName.Substring(strFullPostFileName.LastIndexOf("\\") + 1, (strFullPostFileName.Length - 1) - (strFullPostFileName.LastIndexOf("\\")));
                    lbILR.Items.Add(strPostFileName);
                }
            }
        }

        protected void imgDelILR_Click1(object sender, ImageClickEventArgs e)
        {
            int rowCount = 0;
            string str = null;
            str = "";
            for (rowCount = 0; rowCount <= lbILR.Items.Count - 1; rowCount++)
            {
                try
                {
                    if (lbILR.Items[rowCount].Selected == true)
                    {
                        //
                        if (string.IsNullOrEmpty(str))
                        {
                            str = lbILR.Items[rowCount].Value;
                        }
                        else
                        {
                            str = str + "," + lbILR.Items[rowCount].Value;
                        }
                        lbILR.Items.Remove(lbILR.SelectedItem);
                        arIntialLearningCloseOut.RemoveAt(lbILR.SelectedIndex);
                    }
                }
                catch (Exception ex)
                {
                }
            }
            if (!string.IsNullOrEmpty(str))
            {
                script = "alert('Attachment will be deleted from the database after the EO is submitted')";
                // Page.RegisterStartupScript("clientscript", script);
                ScriptManager.RegisterStartupScript(this, typeof(Page), "script", script, true);

            }
            string eid = ViewState["EOID"].ToString();

            SqlParameter[] paramOut = null;
            try
            {
                int Eoid_Del = Convert.ToInt32(eid);
                if (objEOBA.DeleteCommonAttachmentsCloseOut(str, Eoid_Del, "Learning", ref paramOut))
                {
                    intAttachResult = Convert.ToInt32(paramOut[0].Value);
                }
            }
            catch (Exception ex)
            {
            }
            finally
            {
                objEOBA = null;
                paramOut = null;
            }
        }

        protected void lnkCloseSiteFinanceApproved_Click1(object sender, EventArgs e)
        {
            int intResult;
            intResult = GET_EO_Lock_Status_Approve();
            if (intResult == 5)
            {
                return;
            }

            //string script = null;
            //script = "<script>ApproverConfirm('" + ViewState["EOID"] + "','" + ViewState["stage"] + "','Site Finance','Y');</script> ";
            //Page.RegisterStartupScript("db_error_message", script);
            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "ApproverConfirm('" + ViewState["EOID"] + "','" + ViewState["stage"] + "','Site Finance','Y');", true);
        }

        protected void lnkCloseBudgetApproved_Click1(object sender, EventArgs e)
        {
            int intResult;
            intResult = GET_EO_Lock_Status_Approve();
            if (intResult == 5)
            {
                return;
            }
            //string script = null;
            //script = "<script>ApproverConfirm('" + ViewState["EOID"] + "','" + ViewState["stage"] + "','Budget Center','Y');</script> ";
            //Page.RegisterStartupScript("db_error_message", script);
            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "ApproverConfirm('" + ViewState["EOID"] + "','" + ViewState["stage"] + "','Budget Center','Y');", true);
        }

        protected void lnkCloseSiteFinanceDeclined_Click1(object sender, EventArgs e)
        {
            int intResult;
            intResult = GET_EO_Lock_Status_Approve();
            if (intResult == 5)
            {
                return;
            }

            //string script = null;
            //script = "<script>ApproverConfirm('" + ViewState["EOID"] + "','" + ViewState["stage"] + "','Site Finance','N');</script> ";
            //Page.RegisterStartupScript("db_error_message", script);
            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "ApproverConfirm('" + ViewState["EOID"] + "','" + ViewState["stage"] + "','Site Finance','N');", true);

        }

        protected void lnkCloseBudgetDeclined_Click1(object sender, EventArgs e)
        {
            int intResult;
            intResult = GET_EO_Lock_Status_Approve();
            if (intResult == 5)
            {
                return;
            }
            //string script = null;
            //script = "<script>ApproverConfirm('" + ViewState["EOID"] + "','" + ViewState["stage"] + "','Budget Center','N');</script> ";
            //Page.RegisterStartupScript("db_error_message", script);
            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "ApproverConfirm('" + ViewState["EOID"] + "','" + ViewState["stage"] + "','Budget Center','N');", true);
        }

        protected void lnkCOSiteFinaBackUp_Click1(object sender, EventArgs e)
        {
            int intResult;
            intResult = GET_EO_Lock_Status_Approve();
            if (intResult == 5)
            {
                return;
            }

            //string script = null;
            string strFuncName = lblCOAppgrpSiteFinance.Text.Trim();
            string strPlantID = drpPlant.SelectedItem.Value;
            if (strPlantID == "--Select a Plant--")
            {
                strPlantID = "0";
            }
            //script = "<script>window.open('ChangeApprover.aspx?FuncName=" + strFuncName + "&OriginalApprover=" + lblSiteFinanceAppCO.Text.Trim() + "&EOID=" + ViewState["EOID"] + "&PlantID=" + strPlantID + "&From=BackUp','Approvers','height=200,width=400');</script>";
            //Page.RegisterStartupScript("clientscript", script);
            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "window.open('ChangeApprover.aspx?FuncName=" + strFuncName + "&OriginalApprover=" + lblSiteFinanceAppCO.Text.Trim() + "&EOID=" + ViewState["EOID"] + "&PlantID=" + strPlantID + "&From=BackUp','Approvers','height=200,width=400');", true);
        }

        protected void lnkCOBOBackUp_Click1(object sender, EventArgs e)
        {
            int intResult;
            intResult = GET_EO_Lock_Status_Approve();
            if (intResult == 5)
            {
                return;
            }
            string script = null;
            string strFuncName = lblCOAppgrpBO.Text.Trim();
            string strPlantID = drpPlant.SelectedItem.Value;
            if (strPlantID == "--Select a Plant--")
            {
                strPlantID = "0";
            }
            //script = "<script>window.open('ChangeApprover.aspx?FuncName=" + strFuncName + "&OriginalApprover=" + lblBOAppCO.Text.Trim() + "&EOID=" + ViewState["EOID"] + "&PlantID=" + strPlantID + "&From=BackUp','Approvers','height=200,width=400');</script>";
            //Page.RegisterStartupScript("clientscript", script);
            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "window.open('ChangeApprover.aspx?FuncName=" + strFuncName + "&OriginalApprover=" + lblBOAppCO.Text.Trim() + "&EOID=" + ViewState["EOID"] + "&PlantID=" + strPlantID + "&From=BackUp','Approvers','height=200,width=400');", true);
        }

        protected void lnkApproveCloseoutEO_Click1(object sender, EventArgs e)
        {
            if (string.IsNullOrEmpty(txtCloseSiteFinance.Text))
            {
                string script = null;
                script = "alert('Please select Site Finance.');document.getElementById('txtCloseSiteFinance').focus(); ";
                //Page.RegisterStartupScript("clientscript", script);
                ScriptManager.RegisterStartupScript(this, typeof(Page), "script", script, true);
                return;
            }

            if (!(txtCloseSiteFinance.Text == "Approval Not Needed"))
            {
                string script = null;
                script = "alert('You do not have to manually complete this EO. \\n\\n It will be completed when all approvals are in.');document.getElementById('txtCloseSiteFinance').focus();";
                //Page.RegisterStartupScript("clientscript", script);
                ScriptManager.RegisterStartupScript(this, typeof(Page), "script", script, true);
                return;
            }

            if (string.IsNullOrEmpty(txtCloseBudgetOwner.Text))
            {
                string script = null;
                script = "alert('Please select Budget Owner.');document.getElementById('txtCloseBudgetOwner').focus(); ";
                //Page.RegisterStartupScript("clientscript", script);
                ScriptManager.RegisterStartupScript(this, typeof(Page), "script", script, true);
                return;
            }

            if (!(txtCloseBudgetOwner.Text == "Approval Not Needed"))
            {
                string script = null;
                script = "alert('You do not have to manually complete this EO. \\n\\n It will be completed when all approvals are in.');document.getElementById('txtCloseBudgetOwner').focus();";
                // Page.RegisterStartupScript("clientscript", script);
                ScriptManager.RegisterStartupScript(this, typeof(Page), "script", script, true);
                return;
            }

            if (!string.IsNullOrEmpty(txtCloseSiteFinance.Text) & !string.IsNullOrEmpty(txtCloseBudgetOwner.Text))
            {
                if (drpCloseApprovalGroup.SelectedIndex == 0 | drpCloseApprovalGroup.SelectedIndex == -1)
                {
                    string script = null;
                    script = "alert('Please select Approval Group.');document.getElementById('drpCloseApprovalGroup').focus();";
                    //Page.RegisterStartupScript("clientscript", script);
                    ScriptManager.RegisterStartupScript(this, typeof(Page), "script", script, true);
                    return;
                }
            }

            if (lbCOReport.Items.Count == 0)
            {
                string script = null;
                script = "alert('Please attach Close Out Report(s).');document.getElementById('lbCOReport').focus();";
                //Page.RegisterStartupScript("clientscript", script);
                ScriptManager.RegisterStartupScript(this, typeof(Page), "script", script, true);
                return;
            }

            if (lbFinalCostAttach.Items.Count == 0)
            {
                string script = null;
                //script = "alert('Please Attach Final Cost Sheet(s).');document.getElementById('lbFinalCostAttach').focus();</script> "
                script = "alert('Please Attach Cost Sheet(s).');document.getElementById('lbFinalCostAttach').focus();";
                //Page.RegisterStartupScript("clientscript", script);
                ScriptManager.RegisterStartupScript(this, typeof(Page), "script", script, true);
                return;
            }

            string strCurrentStage = null;
            strCurrentStage = "CloseOut";
            string strStageStatus = null;
            strStageStatus = "Approved";
            //AllTabSave(strCurrentStage, strStageStatus)
            //Call only close out saving 
            string strresumeExit = "Exit";
            CloseOutTabSave(strCurrentStage, strStageStatus, strresumeExit);
        }

        protected void lnkCostSheetTemplate_Click(object sender, EventArgs e)
        {
            try
            {


                string pathnew = Server.MapPath("..\\Common\\Templates\\EO FY12-13 Cost Worksheet 5-25-12.xls");
                Response.AddHeader("Content-Disposition", "attachment;filename=EO FY12-13 Cost Worksheet 5-25-12.xls");
                Response.TransmitFile(pathnew);
                Response.End();




            }
            catch (Exception ex)
            {
            }
        }

        protected void lnkNewGCASNumber_Click(object sender, EventArgs e)
        {
            try
            {
                string strPath = Server.MapPath("..\\Common\\Templates\\New GCAS Process training.doc");
                Response.AddHeader("Content-Disposition", "attachment;filename=New GCAS Process training.doc");
                Response.TransmitFile(strPath);
                Response.End();
            }
            catch (Exception ex)
            {
            }
        }

        protected void lnkUMOF_Click(object sender, EventArgs e)
        {
            try
            {
                string strPath = Server.MapPath("..\\Common\\Templates\\UMOF Master Blank Form 03072006.xls");
                Response.AddHeader("Content-Disposition", "attachment;filename=UMOF Master Blank Form 03072006.xls");
                Response.TransmitFile(strPath);
                Response.End();

            }
            catch (Exception ex)
            {
            }
        }

        protected void lnkbeforeFinTabRouApp_Click1(object sender, EventArgs e)
        {
            if (!string.IsNullOrEmpty(t11.Text))
            {
                if (!(drpCategoryDB.SelectedItem.Value == "--Select a Category--"))
                {
                }
                else
                {
                    script = "document.getElementById('drpCategoryDB').focus();";
                    //Page.RegisterStartupScript("clientscript", script);
                    ScriptManager.RegisterStartupScript(this, typeof(Page), "script", script, true);
                    return;
                }

                if (!(drpBudgetCenterDB.SelectedItem.Value == "--Select a Budget Center--"))
                {
                }
                else
                {
                    script = "document.getElementById('drpBudgetCenterDB').focus();";
                    //Page.RegisterStartupScript("clientscript", script);
                    ScriptManager.RegisterStartupScript(this, typeof(Page), "script", script, true);
                    return;
                }

                if (!(drpEOProjectsDB.SelectedItem.Value == "--Select a Project--"))
                {
                }
                else
                {
                    script = "document.getElementById('drpEOProjectsDB').focus();";
                    //Page.RegisterStartupScript("clientscript", script);
                    ScriptManager.RegisterStartupScript(this, typeof(Page), "script", script, true);
                    return;
                }
                if (!(drpPlant.SelectedItem.Value == "--Select a Plant--"))
                {
                }
                else
                {
                    script = "document.getElementById('drpPlant').focus();";
                    //Page.RegisterStartupScript("clientscript", script);
                    ScriptManager.RegisterStartupScript(this, typeof(Page), "script", script, true);
                    return;
                }

                int intEvents = 0;
                string EventID = null;
                for (intEvents = 0; intEvents <= lbEOEventsDB.Items.Count - 1; intEvents++)
                {
                    if (lbEOEventsDB.Items[intEvents].Selected == true)
                    {
                        if (string.IsNullOrEmpty(EventID))
                        {
                            EventID = lbEOEventsDB.Items[intEvents].Value;
                            //lbEOEventsDB.SelectedItem.Value
                        }
                        else
                        {
                            EventID = EventID + "," + lbEOEventsDB.Items[intEvents].Value;
                            //lbEOEventsDB.SelectedItem.Value
                        }
                    }
                }

                if (!string.IsNullOrEmpty(EventID))
                {
                }
                else
                {
                    script = "document.getElementById('lbEOEventsDB').focus();";
                    //Page.RegisterStartupScript("clientscript", script);
                    ScriptManager.RegisterStartupScript(this, typeof(Page), "script", script, true);
                    return;
                }
                if (rbRawMaterial.Items[0].Selected | rbRawMaterial.Items[1].Selected)
                {

                }
                else
                {
                    script = "document.getElementById('rbRawMaterial').focus();";
                    // Page.RegisterStartupScript("clientscript", script);
                    ScriptManager.RegisterStartupScript(this, typeof(Page), "script", script, true);
                    return;
                }
                if (rbParentRolls.Items[0].Selected | rbParentRolls.Items[1].Selected)
                {

                }
                else
                {
                    script = "document.getElementById('rbParentRolls').focus();";
                    // Page.RegisterStartupScript("clientscript", script);
                    ScriptManager.RegisterStartupScript(this, typeof(Page), "script", script, true);
                    return;
                }
                if (rbInterMaterials.Items[0].Selected | rbInterMaterials.Items[1].Selected)
                {

                }
                else
                {
                    script = "document.getElementById('rbInterMaterials').focus();";
                    //Page.RegisterStartupScript("clientscript", script);
                    ScriptManager.RegisterStartupScript(this, typeof(Page), "script", script, true);
                    return;
                }
                if (rbRegulatedProduct.Items[0].Selected | rbRegulatedProduct.Items[1].Selected)
                {

                }
                else
                {
                    script = "document.getElementById('rbRegulatedProduct').focus();";
                    // Page.RegisterStartupScript("clientscript", script);
                    ScriptManager.RegisterStartupScript(this, typeof(Page), "script", script, true);
                    return;
                }
                //If rbGMPClassify.Items[0].Selected  Or rbGMPClassify.Items[1].Selected  Or rbGMPClassify.Items[2].Selected  Or rbGMPClassify.Items[3].Selected  Then
                //Else

                //    script = "<script>document.getElementById('rbGMPClassify').focus();</script> "
                //    Page.RegisterStartupScript("clientscript", script)
                //    Exit Sub
                //End If

                if (((ViewState["EOIDFlag"] != null) && (ViewState["EOIDFlag"].ToString() == "1")) | (Request.QueryString["EOID"] == null))
                {
                }
                else
                {
                    if (rbRegulatedProduct.Items[0].Selected | rbRegulatedProduct.Items[1].Selected)
                    {

                    }
                    else
                    {
                        Script = "document.getElementById('rbRegulatedProduct').focus();";
                        //Page.RegisterStartupScript("clientscript", Script);
                        ScriptManager.RegisterStartupScript(this, typeof(Page), "script", Script, true);
                        return;
                    }
                    //If rbGMPClassify.Items[0].Selected  Or rbGMPClassify.Items[1].Selected  Or rbGMPClassify.Items[2].Selected  Or rbGMPClassify.Items[3].Selected  Then
                    //Else

                    //   Script = "<script>document.getElementById('rbGMPClassify').focus();</script> "
                    //  Page.RegisterStartupScript("clientscript", Script)
                    // Exit Sub
                    //End If

                }

                if (rbShipped.Items[0].Selected | rbShipped.Items[1].Selected)
                {

                }
                else
                {
                    script = "document.getElementById('rbShipped').focus();";
                    //Page.RegisterStartupScript("clientscript", script);
                    ScriptManager.RegisterStartupScript(this, typeof(Page), "script", script, true);
                    return;
                }
                //Added on 01/20/2010 
                //For MUREO PCRs
                //By: David
                if (((ViewState["EOIDFlag"] != null) && (ViewState["EOIDFlag"].ToString() == "1")) | (Request.QueryString["EOID"] == null))
                {
                    if ((chkMaterialsBrands.Items[0].Selected == false) & (chkMaterialsBrands.Items[1].Selected == false) & (chkMaterialsBrands.Items[2].Selected == false))
                    {
                        Script = "document.getElementById('chkMaterialsBrands').focus();";
                        //Page.RegisterStartupScript("clientscript", Script);
                        ScriptManager.RegisterStartupScript(this, typeof(Page), "script", Script, true);
                        return;

                    }
                    else
                    {
                    }
                }

                if (rbTestProductedShipped.Items[0].Selected | rbTestProductedShipped.Items[1].Selected)
                {

                }
                else
                {
                    script = "document.getElementById('rbTestProductedShipped').focus();";
                    // Page.RegisterStartupScript("clientscript", script);
                    ScriptManager.RegisterStartupScript(this, typeof(Page), "script", script, true);
                    return;
                }




                if (rbGCASNumber.Items[0].Selected | rbGCASNumber.Items[1].Selected)
                {

                }
                else
                {
                    script = "document.getElementById('rbGCASNumber').focus();";
                    //Page.RegisterStartupScript("clientscript", script);
                    ScriptManager.RegisterStartupScript(this, typeof(Page), "script", script, true);
                    return;
                }
                if (rbChemical.Items[0].Selected | rbChemical.Items[1].Selected)
                {

                }
                else
                {
                    script = "document.getElementById('rbChemical').focus();";
                    //Page.RegisterStartupScript("clientscript", script);
                    ScriptManager.RegisterStartupScript(this, typeof(Page), "script", script, true);
                    return;
                }
                if (rbNewRawMaterial.Items[0].Selected | rbNewRawMaterial.Items[1].Selected)
                {

                }
                else
                {
                    script = "document.getElementById('rbNewRawMaterial').focus();";
                    // Page.RegisterStartupScript("clientscript", script);
                    ScriptManager.RegisterStartupScript(this, typeof(Page), "script", script, true);
                    return;
                }
                if (rbNewEquipment.Items[0].Selected | rbNewEquipment.Items[1].Selected)
                {

                }
                else
                {
                    script = "document.getElementById('rbNewEquipment').focus();";
                    // Page.RegisterStartupScript("clientscript", script);
                    ScriptManager.RegisterStartupScript(this, typeof(Page), "script", script, true);
                    return;
                }
                if (rbNewJobTask.Items[0].Selected | rbNewJobTask.Items[1].Selected)
                {

                }
                else
                {
                    script = "document.getElementById('rbNewJobTask').focus();";
                    //Page.RegisterStartupScript("clientscript", script);
                    ScriptManager.RegisterStartupScript(this, typeof(Page), "script", script, true);
                    return;
                }

                //Added for MUREO PCRs:-
                if (((ViewState["EOIDFlag"] != null) && (ViewState["EOIDFlag"].ToString() == "1")) | (Request.QueryString["EOID"] == null))
                {

                    if (rblProductConsumers.Items[0].Selected | rblProductConsumers.Items[1].Selected)
                    {

                    }
                    else
                    {
                        Script = "document.getElementById('rblProductConsumers').focus();";
                        //Page.RegisterStartupScript("clientscript", Script);
                        ScriptManager.RegisterStartupScript(this, typeof(Page), "script", Script, true);
                        return;
                    }

                }


                if (((ViewState["EOIDFlag"] != null) && (ViewState["EOIDFlag"].ToString() == "1")) | (Request.QueryString["EOID"] == null))
                {

                    if (rblProductApproved.Items[0].Selected | rblProductApproved.Items[1].Selected)
                    {

                    }
                    else
                    {
                        Script = "document.getElementById('rblProductApproved').focus();";
                        //Page.RegisterStartupScript("clientscript", Script);
                        ScriptManager.RegisterStartupScript(this, typeof(Page), "script", Script, true);
                        return;
                    }

                }


                if (((ViewState["EOIDFlag"] != null) && (ViewState["EOIDFlag"].ToString() == "1")) | (Request.QueryString["EOID"] == null))
                {

                    if (rblProductConsumers.Items[0].Selected & rblProductApproved.Items[1].Selected)
                    {

                        if (((rblRawMaterialsQ1.Items[0].Selected) | (rblRawMaterialsQ1.Items[1].Selected) | (rblRawMaterialsQ2.Items[0].Selected) | (rblRawMaterialsQ2.Items[1].Selected) | (rblRawMaterialsQ3.Items[0].Selected) | (rblRawMaterialsQ3.Items[1].Selected) | (rblRawMaterialsQ4.Items[0].Selected) | (rblRawMaterialsQ4.Items[1].Selected)))
                        {
                        }
                        else
                        {
                            Script = "document.getElementById('rblRawMaterialsQ1').focus();";
                            //Page.RegisterStartupScript("clientscript", Script);
                            ScriptManager.RegisterStartupScript(this, typeof(Page), "script", Script, true);
                            return;
                        }


                        if (((rblRawMaterialsQ1.Items[0].Selected) | (rblRawMaterialsQ1.Items[1].Selected)))
                        {
                        }
                        else
                        {
                            Script = "document.getElementById('rblRawMaterialsQ1').focus();";
                            //Page.RegisterStartupScript("clientscript", Script);
                            ScriptManager.RegisterStartupScript(this, typeof(Page), "script", Script, true);
                            return;
                        }


                        if (((rblRawMaterialsQ2.Items[0].Selected) | (rblRawMaterialsQ2.Items[1].Selected)))
                        {
                        }
                        else
                        {
                            Script = "document.getElementById('rblRawMaterialsQ2').focus();";
                            //Page.RegisterStartupScript("clientscript", Script);
                            ScriptManager.RegisterStartupScript(this, typeof(Page), "script", Script, true);
                            return;
                        }


                        if (((rblRawMaterialsQ3.Items[0].Selected) | (rblRawMaterialsQ3.Items[1].Selected)))
                        {
                        }
                        else
                        {
                            Script = "document.getElementById('rblRawMaterialsQ3').focus();";
                            // Page.RegisterStartupScript("clientscript", Script);
                            ScriptManager.RegisterStartupScript(this, typeof(Page), "script", Script, true);
                            return;
                        }


                        if (((rblRawMaterialsQ4.Items[0].Selected) | (rblRawMaterialsQ4.Items[1].Selected)))
                        {
                        }
                        else
                        {
                            Script = "document.getElementById('rblRawMaterialsQ4').focus();";
                            // Page.RegisterStartupScript("clientscript", Script);
                            ScriptManager.RegisterStartupScript(this, typeof(Page), "script", Script, true);
                            return;
                        }

                    }
                }

                if (rbPalletPattern.Items[0].Selected | rbPalletPattern.Items[1].Selected)
                {

                }
                else
                {
                    script = "document.getElementById('rbPalletPattern').focus();";
                    //Page.RegisterStartupScript("clientscript", script);
                    ScriptManager.RegisterStartupScript(this, typeof(Page), "script", script, true);
                    return;
                }
                if (rbBroke.Items[0].Selected | rbBroke.Items[1].Selected)
                {

                }
                else
                {
                    script = "document.getElementById('rbBroke').focus();";
                    //Page.RegisterStartupScript("clientscript", script);
                    ScriptManager.RegisterStartupScript(this, typeof(Page), "script", script, true);
                    return;
                }
                if (rbPrintedBroke.Items[0].Selected | rbPrintedBroke.Items[1].Selected)
                {

                }
                else
                {
                    script = "document.getElementById('rbPrintedBroke').focus();";
                    // Page.RegisterStartupScript("clientscript", script);
                    ScriptManager.RegisterStartupScript(this, typeof(Page), "script", script, true);
                    return;
                }
                if (rbPrintedBroke.Items[0].Selected | rbPrintedBroke.Items[1].Selected)
                {

                }
                else
                {
                    script = "document.getElementById('rbPrintedBroke').focus();";
                    // Page.RegisterStartupScript("clientscript", script);
                    ScriptManager.RegisterStartupScript(this, typeof(Page), "script", script, true);
                    return;
                }


                string strSelPSRA = null;
                int intSelPSRA = 0;

                if (((ViewState["EOIDFlag"] != null) && (ViewState["EOIDFlag"].ToString() == "1")) | (Request.QueryString["EOID"] == null))
                {
                }
                else
                {
                    for (intSelPSRA = 0; intSelPSRA <= lbPSRADB.Items.Count - 1; intSelPSRA++)
                    {
                        if (lbPSRADB.Items[intSelPSRA].Selected == true)
                        {
                            if (string.IsNullOrEmpty(strSelPSRA))
                            {
                                strSelPSRA = lbPSRADB.Items[intSelPSRA].Text;
                            }
                            else
                            {
                                strSelPSRA = strSelPSRA + "," + lbPSRADB.Items[intSelPSRA].Text;
                            }
                        }
                    }

                    if (!string.IsNullOrEmpty(strSelPSRA))
                    {
                    }
                    else
                    {
                        Script = "document.getElementById('lbPSRADB').focus();";
                        //Page.RegisterStartupScript("clientscript", Script);
                        ScriptManager.RegisterStartupScript(this, typeof(Page), "script", Script, true);
                        return;
                    }
                }

                if (!string.IsNullOrEmpty(txtStartDate.Text))
                {
                }
                else
                {
                    script = "document.getElementById('txtStartDate').focus();";
                    //Page.RegisterStartupScript("clientscript", script);
                    ScriptManager.RegisterStartupScript(this, typeof(Page), "script", script, true);
                    return;
                }
                return;

            }

            lnkPreScreener.Visible = true;
            dgrPrescrenners.Visible = true;
            txtEstimatedAmount.Text = lbTotalCost.Text;
            txtFinal.Text = txtFormulaCardNumber.Text;

            if (rbRawMaterial.Items[0].Selected || rbParentRolls.Items[0].Selected || rbInterMaterials.Items[0].Selected || rbRegulatedProduct.Items[0].Selected || rbShipped.Items[0].Selected || rbTestProductedShipped.Items[0].Selected || rbGCASNumber.Items[0].Selected)
            {
                if (Session["GCAS"] != null && (Session["GCAS"].ToString() != "No"))
                {
                    if (dgdGCASInfo.Items.Count == 0)
                    {
                        //string script1 = null;
                        Session["GCAS"] = "";
                        //script1 = "<script>window.open('YESNO.aspx','Approvers','height=200,width=400,top=100');</script>";
                        //Page.RegisterStartupScript("clientscript", script1);
                        ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "window.open('YESNO.aspx','Approvers','height=200,width=400,top=100');", true);
                        return;
                    }
                }
            }

            if (rbChemical.Items[0].Selected || rbNewRawMaterial.Items[0].Selected || rbNewEquipment.Items[0].Selected || rbNewJobTask.Items[0].Selected)
            {
                if (Session["PSRA"] != null && (Session["PSRA"].ToString() != "No"))
                {

                    if (dgdPSRAInfo.Items.Count == 0)
                    {
                        //string script1 = null;
                        Session["PSRA"] = "";
                        //script1 = "<script>window.open('YESNOPSRA.aspx','Approvers','height=200,width=400,top=100');</script>";
                        //Page.RegisterStartupScript("clientscript", script1);                        
                        ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "window.open('YESNOPSRA.aspx','Approvers','height=200,width=400,top=100');", true);
                        return;
                    }
                }
            }

            if (rbPrintedBroke.Items[0].Selected)
            {
                if (!(rbInkCoverage.Items[0].Selected) & !(rbInkCoverage.Items[1].Selected))
                {
                    // Page.SmartNavigation = False
                    string script1 = null;
                    script1 = "alert('will any broke have an increase in the amount of ink coverage on the product?.Please select Yes/No');document.getElementById('rbInkCoverage').focus();";
                    //Page.RegisterStartupScript("clientscript", script1);
                    ScriptManager.RegisterStartupScript(this, typeof(Page), "script", script1, true);
                    return;
                }
            }

            if (!rbPalletPattern.Items[0].Selected)
            {
                if (!rbPalletPattern.Items[1].Selected)
                {
                    string script = null;
                    script = "alert('Please select unique pallet pattern OR a sku.');document.getElementById('rbPalletPattern').focus();";
                    //Page.RegisterStartupScript("clientscript", script);
                    ScriptManager.RegisterStartupScript(this, typeof(Page), "script", script, true);
                    return;
                }
            }

            if (rbPalletPattern.Items[0].Selected)
            {
                if (!chkStackShipTesting.Items[0].Selected)
                {
                    if (!chkStackShipTesting.Items[1].Selected)
                    {
                        string script = null;
                        script = "alert('Please select Stack/Ship Testing.');document.getElementById('chkStackShipTesting').focus();";
                        // Page.RegisterStartupScript("clientscript", script);
                        ScriptManager.RegisterStartupScript(this, typeof(Page), "script", script, true);

                        return;
                    }
                }
            }

            //If rbRegulatedProduct.Items[0].Selected  Then
            //If rbGMPClassify.Items[3].Selected  Then
            //Dim script1 As String
            //script1 = "<script>alert('Make sure you select the appropriate GMP Classification below.');document.getElementById('rbGMPClassify').focus();</script> "
            //Page.RegisterStartupScript("clientscript", script1)
            //Exit Sub
            //End If
            //End If
            lnkPreScreener.Visible = true;
            dgrPrescrenners.Visible = true;
            btnTabPreliminary.ImageUrl = "../Images/preliminary-nor.gif";
            btnTabFinal.ImageUrl = "../Images/final-over.gif";
            btnTabCloseOut.ImageUrl = "../Images/close-out-nor.gif";
            //lblStageLevel.Text = "Final Stage"
            lblStatusType.Text = "Draft";
            lbCurrentStageDB.Text = "Final";
            lbStatusDB.Text = "Draft";

            //2tab one jagan thing
            //objClsEO.TwoTabRoute = "Y"

            ViewState["twoTabRoute"] = "Y";

            //hiding Preliminary tab items when final tab is clicked.
            tblTop.Visible = true;
            //tblTopReadonly.Visible = true
            FirstSectionPreliminary.Visible = false;
            NewMaterialandBrands.Visible = false;
            HSandSE.Visible = false;
            PSandRA.Visible = false;
            PlanningandBudgetInfo.Visible = false;
            ProductionandPackaging.Visible = false;
            PackagingandDispositionPreliminary.Visible = false;
            PreliminaryApprovals.Visible = false;
            PreliminaryRevision.Visible = true;
            //imgPreRoute.Visible = False
            //imgPreFinalRoute.Visible = true
            //imgCloseOutRoute.Visible = False
            //showing Final tab items
            FinalBudgetCenter.Visible = true;
            FinalPackagingandDisposition.Visible = true;
            test();
            FinalCostSheet.Visible = true;
            TrFinalQA.Visible = true;
            FinalFormulaCardInformation.Visible = true;
            FinalTestPlans.Visible = true;
            LabSamplingPlans.Visible = true;
            FinalProductTestFlowMatrix.Visible = true;
            FinalOtherSupportingDoc.Visible = true;
            FinalApprovals.Visible = true;
            // FinalRevision.Visible = true


            //For PCRs- Final Tab items
            trFinalMaterialsBrandshead.Visible = true;
            trFinalPSRAhead.Visible = true;
            trFinalMaterialsBrandsRadioBefore.Visible = true;
            trFinalMaterialsBrands.Visible = true;
            trFinalMaterialsBrandsRadioAfter.Visible = true;
            trFinalPSRA.Visible = true;



            //Hiding CloseOut Tab items when final tab is clicked.
            CloseFirstSection.Visible = false;
            CloseActualCostSheet.Visible = false;
            CloseInitialLearningReport.Visible = false;
            CloseTestPlansUsed.Visible = false;
            CloseOutReport.Visible = false;
            CloseApprovals.Visible = false;
            CloseRevision.Visible = false;

            //for Readonly/Lock mode
            tblTopReadonly.Visible = false;
            TrGeneralPreliminaryRO.Visible = false;
            NewMaterialandBrandsReadOnly.Visible = false;
            PackagingandDispositionPreliminaryReadOnly.Visible = false;
            ProductionandPackagingReadOnly.Visible = false;
            PlanningandBudgetInfoReadOnly.Visible = false;
            PSandRAReadOnly.Visible = false;
            HSandSEReadOnly.Visible = false;
            //FinalRevisionReadonly.Visible = False
            PreliminaryApprovalsReadOnly.Visible = false;

            //Final Tab
            FinalBudgetCenterReadOnly.Visible = false;
            FinalPackagingandDispositionReadOnly.Visible = false;
            FinalCostSheetReadOnly.Visible = false;
            FinalFormulaCardInformationReadOnly.Visible = false;
            FinalTestPlansReadOnly.Visible = false;
            LabSamplingPlansReadOnly.Visible = false;
            FinalProductTestFlowMatrixReadonly.Visible = false;
            FinalOtherSupportingDocReadonly.Visible = false;
            FinalApprovalsReadOnly.Visible = false;
            CloseFirstSectionReadonly.Visible = false;

            NewMaterialandBrandsReadOnlyFinal.Visible = false;
            trProdRegulatedProductRAQ2Final.Visible = false;
            PSandRAReadOnlyFinal.Visible = false;

            //co tab
            CloseActualCostSheetReadonly.Visible = false;
            CloseInitialLearningReportReadOnly.Visible = false;
            CloseTestPlansUsedReadonly.Visible = false;
            CloseoutReportRO.Visible = false;
            CloseApprovalsReadonly.Visible = false;
            PreliminaryRevision.Visible = true;

            imgPreRoute.Visible = false;
            imgPreFinalRoute.Visible = true;
            lnkbeforeFinTabRouApp.Visible = false;

            //Changing imagebutton name for 2 tab routing
            imgPreFinalRoute.ImageUrl = "../Images/Route-Prelim-and-Final.gif";
        }

        protected void btnPrintStage_Click1(object sender, ImageClickEventArgs e)
        {
            string strstage = null;
            if ((ViewState["EOID"] != null))
            {
                if (ViewState["printstage"].ToString() == "Preliminary")
                {
                    strstage = "1";
                }
                else if (ViewState["printstage"].ToString() == "Final")
                {
                    strstage = "2";
                }
                else
                {
                    strstage = "3";
                }
                string strEOID = null;
                strEOID = ViewState["EOID"].ToString();
                string o = "100";
                //script = "<script>window.open('../Common/ViewEO.aspx?view=" + strstage + "&mode=print&EO_ID=" + strEOID + "','PrintWindow');</script>";
                //Page.RegisterStartupScript("clientscript", script);

                ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "window.open('../Common/ViewEO.aspx?view=" + strstage + "&mode=print&EO_ID=" + strEOID + "','PrintWindow');", true);
            }
            else
            {
                //Page.RegisterStartupScript("clientscript", "<script>alert('Please save the document for printing.');</script>");
                ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "alert('Please save the document for printing.');", true);
            }
        }

        protected void btnSaveandExit_Click1(object sender, ImageClickEventArgs e)
        {
            if (!(ViewState["EOID"] == null))
            {

                if (objEOBA.SET_EO_Lock_Release_User(Convert.ToInt32(ViewState["EOID"]), objSecurity.UserName))
                { }
            }
            Response.Redirect("Home.aspx");
        }

        protected void dgdMigratedEventInfo_ItemCommand(object source, DataGridCommandEventArgs e)
        {
            if (e.CommandName == "EventName_Link")
            {
                string script = null;
                if ((lblCurStage.Text.ToUpper() == "Closeout".ToUpper()) && ((lblstatus.Text.ToUpper() == "Approved".ToUpper()) || (lblstatus.Text.ToUpper() == "Completed".ToUpper())))
                {
                    //script = "<script>alert('Event cannot be updated after EO is completed.');</script>";
                    //Page.RegisterStartupScript("clientscript", script);
                    ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "alert('Event cannot be updated after EO is completed');", true);
                    return;
                }
                int intEventID = Convert.ToInt32(dgdMigratedEventInfo.DataKeys[e.Item.ItemIndex]);
                string s = Request.Url.ToString();
                s = s.Replace("&", "_");
                //script = "<script>window.open('EditMigrateEvent.aspx?EventID=" + intEventID + "','Approvers','height=700,width=800,status=yes,scrollbars=yes,toolbar=no,menubar=no,location=no,top=100');</script>";
                //Page.RegisterStartupScript("clientscript", script);

                ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "window.open('EditMigrateEvent.aspx?EventID=" + intEventID + "','Approvers','height=700,width=800,status=yes,scrollbars=yes,toolbar=no,menubar=no,location=no,top=100');", true);
            }
        }

        protected void lnkRecal_Click1(object sender, EventArgs e)
        {

        }

        protected void dgdGCASInfo_ItemDataBound(object sender, DataGridItemEventArgs e)
        {
            if (e.Item.ItemType == ListItemType.Item | e.Item.ItemType == ListItemType.AlternatingItem)
            {
                //Dim s As String = dgdGCASInfo.Items[e.Item.ItemIndex].Cells(2).Text

                //dgdGCASInfo.Items[e.Item.ItemIndex].Cells(6).Visible = False
                LinkButton imgbDelete = (LinkButton)e.Item.FindControl("lnkDel");
                imgbDelete.Attributes.Add("OnClick", "javascript:return confirmDelete();");
            }
            switch (e.Item.ItemType)
            {
                case ListItemType.Header:
                    e.Item.Cells[8].Visible = false;
                    break;
                case ListItemType.AlternatingItem:
                    e.Item.Cells[8].Visible = false;
                    break;
                case ListItemType.Item:
                    e.Item.Cells[8].Visible = false;
                    break;
            }
        }

        protected void lnkCloseOutPreviousCommnets_Click(object sender, EventArgs e)
        {
            string EOID = "";
            if (ViewState["EOID"] != null)
            {
                EOID = ViewState["EOID"].ToString();
            }
            //script = "<script>window.open('CloseOutPreviousCommnets.aspx?EOID=" + EOID + "','Approvers','scrollbars=yes,height=200,width=400');</script>";
            //Page.RegisterStartupScript("clientscript", script);

            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "window.open('CloseOutPreviousCommnets.aspx?EOID=" + EOID + "','Approvers','scrollbars=yes,height=200,width=400');", true);
        }

        protected void lnkCloseOutPreviousCommnetsRO_Click(object sender, EventArgs e)
        {
            string EOID = "";
            if (ViewState["EOID"] != null)
            {
                EOID = ViewState["EOID"].ToString();
            }
            //script = "<script>window.open('CloseOutPreviousCommnets.aspx?EOID=" + EOID + "','Approvers','scrollbars=yes,height=200,width=400');</script>";
            //Page.RegisterStartupScript("clientscript", script);

            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "window.open('CloseOutPreviousCommnets.aspx?EOID=" + EOID + "','Approvers','scrollbars=yes,height=200,width=400');", true);
        }

        protected void drpPrelimApproval_SelectedIndexChanged(object sender, EventArgs e)
        {
            DataSet ds = new DataSet();
            if (drpPrelimApproval.SelectedItem.Value == "--Select Approver Group--")
            {
                //txtBudgetOwner.Text = ""
                txtGBUHSE.Text = "";
                txtSiteHSE.Text = "";
                txtSiteContact.Text = "";
                txtSitePlanning.Text = "";
                txtQAPre.Text = "";
                //Added for Central QA
                txtCentralQAPre.Text = "";
                txtCentralPlanning.Text = "";
                txtTimingGate.Text = "";
                txtStandardOffice.Text = "";
                txtAdditionalApp1.Text = "";
                txtAdditionalApp2.Text = "";
                txtAdditionalApp3.Text = "";
                txtAdditionalApp4.Text = "";
                return;
            }
            else
            {
                //jagan add code Start

                try
                {
                    drpAppGrpFinal.SelectedValue = drpPrelimApproval.SelectedItem.Value;
                    FillAppGrpFinal();
                }
                catch (Exception ex)
                {
                }

                try
                {
                    drpCloseApprovalGroup.SelectedValue = drpPrelimApproval.SelectedItem.Value;
                    CloseApprovalGroupData();
                }
                catch (Exception ex)
                {
                }
                //jagan add code End

                if (objEOBA.GET_EO_Approval_Groups_Details(Convert.ToInt32(drpPrelimApproval.SelectedItem.Value), ref ds))
                { }
                txtGBUHSE.Text = "";
                txtSiteHSE.Text = "";
                txtSiteContact.Text = "";
                txtSitePlanning.Text = "";
                txtQAPre.Text = "";
                //Added for Central QA
                txtCentralQAPre.Text = "";
                txtCentralPlanning.Text = "";
                txtTimingGate.Text = "";
                txtStandardOffice.Text = "";
                txtAdditionalApp1.Text = "";
                txtAdditionalApp2.Text = "";
                txtAdditionalApp3.Text = "";
                txtAdditionalApp4.Text = "";
            }
            int intGrp = 0;
            for (intGrp = 0; intGrp <= ds.Tables[0].Rows.Count - 1; intGrp++)
            {
                if (ds.Tables[0].Rows[intGrp][2].ToString() == "Budget Center")
                {
                    txtBudgetOwner.Text = ds.Tables[0].Rows[intGrp][3].ToString();
                }
                else if (ds.Tables[0].Rows[intGrp][2].ToString() == "GBU HS&E Resource")
                {
                    txtGBUHSE.Text = ds.Tables[0].Rows[intGrp][3].ToString();
                }
                else if (ds.Tables[0].Rows[intGrp][2].ToString() == "Site HS&E Resource")
                {
                    txtSiteHSE.Text = ds.Tables[0].Rows[intGrp][3].ToString();
                }
                else if (ds.Tables[0].Rows[intGrp][2].ToString() == "Site Contact")
                {
                    txtSiteContact.Text = ds.Tables[0].Rows[intGrp][3].ToString();
                }
                else if (ds.Tables[0].Rows[intGrp][2].ToString() == "Site Planning")
                {
                    txtSitePlanning.Text = ds.Tables[0].Rows[intGrp][3].ToString();
                }
                else if (ds.Tables[0].Rows[intGrp][2].ToString() == "QA")
                {
                    txtQAPre.Text = ds.Tables[0].Rows[intGrp][3].ToString();
                }
                else if (ds.Tables[0].Rows[intGrp][2].ToString() == "Central QA")
                {
                    txtCentralQAPre.Text = ds.Tables[0].Rows[intGrp][3].ToString();
                }
                else if (ds.Tables[0].Rows[intGrp][2].ToString() == "Central Planning")
                {
                    txtCentralPlanning.Text = ds.Tables[0].Rows[intGrp][3].ToString();
                }
                else if (ds.Tables[0].Rows[intGrp][2].ToString() == "SAP Cost Center Coordinator")
                {
                    //txtSAPCost.Text = ds.Tables[0).Rows(intGrp).Item(3).ToString
                }
                else if (ds.Tables[0].Rows[intGrp][2].ToString() == "Timing Gate Exception")
                {
                    txtTimingGate.Text = ds.Tables[0].Rows[intGrp][3].ToString();
                }
                else if (ds.Tables[0].Rows[intGrp][2].ToString() == "Standards Office")
                {
                    txtStandardOffice.Text = ds.Tables[0].Rows[intGrp][3].ToString();


                }
                else if (ds.Tables[0].Rows[intGrp][2].ToString() == "Additional approver #1")
                {
                    txtAdditionalApp1.Text = ds.Tables[0].Rows[intGrp][3].ToString();


                }
                else if (ds.Tables[0].Rows[intGrp][2].ToString() == "Additional approver #2")
                {
                    txtAdditionalApp2.Text = ds.Tables[0].Rows[intGrp][3].ToString();


                }
                else if (ds.Tables[0].Rows[intGrp][2].ToString() == "Additional approver #3")
                {
                    txtAdditionalApp3.Text = ds.Tables[0].Rows[intGrp][3].ToString();


                }
                else if (ds.Tables[0].Rows[intGrp][2].ToString() == "Additional approver #4")
                {
                    txtAdditionalApp4.Text = ds.Tables[0].Rows[intGrp][3].ToString();


                }
                else if (ds.Tables[0].Rows[intGrp][2].ToString() == "SMART Clearance")
                {
                    txtSmartClearance.Text = ds.Tables[0].Rows[intGrp][3].ToString();
                    ViewState["SmartClearVal"] = txtSmartClearance.Text.ToString().Trim();
                }
            }

            if (string.IsNullOrEmpty(txtAdditionalApp1.Text))
            {
                txtAdditionalApp1.Text = "Approval Not Needed";
            }

            if (string.IsNullOrEmpty(txtAdditionalApp2.Text))
            {
                txtAdditionalApp2.Text = "Approval Not Needed";
            }

            if (string.IsNullOrEmpty(txtAdditionalApp3.Text))
            {
                txtAdditionalApp3.Text = "Approval Not Needed";
            }

            if (string.IsNullOrEmpty(txtAdditionalApp4.Text))
            {
                txtAdditionalApp4.Text = "Approval Not Needed";
            }
        }

        protected void lnkHome_Click(object sender, EventArgs e)
        {
            try
            {
                if (!(ViewState["EOID"] == null))
                {

                    if (objEOBA.SET_EO_Lock_Release_User(Convert.ToInt32(ViewState["EOID"]), objSecurity.UserName))
                    { }
                }
                //Response.Redirect("Home.aspx");
                ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "window.location='Home.aspx';", true);
            }
            catch (Exception ex)
            {

            }
        }

        protected void lbFaq_Click(object sender, EventArgs e)
        {
            string strPath = "..\\Common\\Templates\\MUREO_Faq.doc";
            Response.AddHeader("Content-Disposition", "attachment;filename=MUREO_Faq.doc");
            Response.TransmitFile(strPath);
            Response.End();
        }

        protected void lnkAdmin_Click(object sender, EventArgs e)
        {
            try
            {
                if (!(ViewState["EOID"] == null))
                {

                    if (objEOBA.SET_EO_Lock_Release_User(Convert.ToInt32(ViewState["EOID"]), objSecurity.UserName))
                    { }
                }
                //Response.Redirect("./Administration/Home.aspx");
                ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "window.location='../Administration/Home.aspx';", true);
            }
            catch (Exception ex)
            {

            }
        }

        protected void rbCostSheetDiff_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (rbCostSheetDiff.SelectedItem.Text == "Yes")
            {
                txtCostSheetDiff.Enabled = true;
            }
            else
            {
                txtCostSheetDiff.Enabled = false;
            }
        }

        protected void drpBudgetCenterDB_SelectedIndexChanged(object sender, EventArgs e)
        {
            DataSet ds = null;
            if (drpBudgetCenterDB.SelectedValue != "--Select a Budget Center--")
            {
                try
                {
                    int intBrandCount = 0;
                    if (objEOBA.GetBudgetCenterDetailsDA(Convert.ToInt32(drpBudgetCenterDB.SelectedValue), ref ds))
                    {
                        // ds = BudgetCtrBO.GetBudgetCenterDetailsBO(drpBudgetCenterDB.SelectedValue);
                        if (!(ds.Tables[0].Rows.Count == 0))
                        {
                            if (ds.Tables[0].Rows[0]["SAP_Cost_Center_Coordinator"] != System.DBNull.Value)
                            {
                                txtSAPCost.Text = ds.Tables[0].Rows[0]["SAP_Cost_Center_Coordinator"].ToString();
                                txtSAPCostCenter.Text = ds.Tables[0].Rows[0]["SAP_Cost_Center_Coordinator"].ToString();
                            }
                            else
                            {
                                txtSAPCost.Text = string.Empty;
                                txtSAPCostCenter.Text = string.Empty;
                            }
                            try
                            {
                                if ((!object.ReferenceEquals(ds.Tables[0].Rows[0]["SMART_Clearance"], System.DBNull.Value)))
                                {
                                    txtSmartClearance.Text = ds.Tables[0].Rows[0]["SMART_Clearance"].ToString();
                                    ViewState["SmartClearVal"] = txtSmartClearance.Text.ToString().Trim();
                                    txtSMARTClearanceFinal.Text = ds.Tables[0].Rows[0]["SMART_Clearance"].ToString();
                                }
                                else
                                {
                                    txtSmartClearance.Text = string.Empty;
                                    ViewState["SmartClearVal"] = "";
                                    txtSMARTClearanceFinal.Text = string.Empty;
                                }
                            }
                            catch (Exception)
                            {

                            }


                            if (drpCategoryDB.SelectedItem.Text == "Bath Tissue")
                            {
                                txtBudgetOwner.Text = ds.Tables[0].Rows[0]["Bath_Approver_Name"].ToString();
                                txtBudgetOwnerFinal.Text = ds.Tables[0].Rows[0]["Bath_Approver_Name"].ToString();
                                txtCloseBudgetOwner.Text = ds.Tables[0].Rows[0]["Bath_Approver_Name"].ToString();
                            }
                            else if (drpCategoryDB.SelectedItem.Text == "Paper Towels")
                            {
                                txtBudgetOwner.Text = ds.Tables[0].Rows[0]["Towel_Approver_Name"].ToString();
                                txtBudgetOwnerFinal.Text = ds.Tables[0].Rows[0]["Towel_Approver_Name"].ToString();
                                txtCloseBudgetOwner.Text = ds.Tables[0].Rows[0]["Towel_Approver_Name"].ToString();
                            }
                            else if (drpCategoryDB.SelectedItem.Text == "Facial Tissue")
                            {
                                txtBudgetOwner.Text = ds.Tables[0].Rows[0]["Tissue_Approver_Name"].ToString();
                                txtBudgetOwnerFinal.Text = ds.Tables[0].Rows[0]["Tissue_Approver_Name"].ToString();
                                txtCloseBudgetOwner.Text = ds.Tables[0].Rows[0]["Tissue_Approver_Name"].ToString();
                            }
                            else
                            {
                                txtBudgetOwner.Text = ds.Tables[0].Rows[0]["Default_approver_Name"].ToString();
                                txtBudgetOwnerFinal.Text = ds.Tables[0].Rows[0]["Default_approver_Name"].ToString();
                                txtCloseBudgetOwner.Text = ds.Tables[0].Rows[0]["Default_approver_Name"].ToString();
                            }

                        }
                        else
                        {
                            txtBudgetOwner.Text = "";
                            txtBudgetOwnerFinal.Text = "";
                            txtCloseBudgetOwner.Text = "";
                        }
                    }
                }
                catch (Exception ex)
                {
                }
            }
            else
            {
                txtBudgetOwner.Text = "";
                txtBudgetOwnerFinal.Text = "";
                txtCloseBudgetOwner.Text = "";
                txtSAPCost.Text = "";
                txtSAPCostCenter.Text = "";
                txtSmartClearance.Text = "";
                ViewState["SmartClearVal"] = "";
                txtSMARTClearanceFinal.Text = "";
            }

            if (drpBudgetCenterDB.SelectedItem.Text == "Other")
            {
                txtOtherBudgetCenter.Enabled = true;
            }
            else
            {
                txtOtherBudgetCenter.Enabled = false;
            }
        }



        protected void btnFYI_Click(object sender, ImageClickEventArgs e)
        {
            string script = null;
            int intEOID = Convert.ToInt32(ViewState["EOID"]);
            //script = "<script>window.showModalDialog('FYI.aspx?From=EO&EOID=" + intEOID + "&oName=" + lblOriginator.Text + "',null,'dialogHeight:210px;dialogWidth:520px');</script>";
            //Page.RegisterStartupScript("clientscript", script);

            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "window.open('FYI.aspx?From=EO&EOID=" + intEOID + "&oName=" + lblOriginator.Text + "',null,'location=0,status=0,scrollbars=0,toolbar=0,menubar=0,resizable=0,width=500,height=180');", true);
        }

        protected void dgrdAttachment_ItemCommand(object source, DataGridCommandEventArgs e)
        {
            if (e.CommandName == "Final_Click")
            {
                try
                {
                    Label lblEoConAppID = (Label)e.Item.FindControl("lblFileName");
                    int intAttachmentId = Convert.ToInt32(lblEoConAppID.Text);
                    string EoiDString = ViewState["EOID"].ToString();
                    int eoiD = Convert.ToInt32(EoiDString);
                    DataSet dsAttachments = new DataSet();

                    if (objEOBA.GetAttachmentsInfo(intAttachmentId, eoiD, "PDI", ref dsAttachments))
                    {

                        Response.Clear();
                        if (!(dsAttachments.Tables[0].Rows.Count == 0))
                        {
                            if ((!object.ReferenceEquals(dsAttachments.Tables[0].Rows[0]["Attachment_Type"], DBNull.Value)))
                            {
                                Response.ContentType = dsAttachments.Tables[0].Rows[0]["Attachment_Type"].ToString();
                            }
                        }
                        else
                        {
                        }

                        byte[] content = null;
                        content = (byte[])dsAttachments.Tables[0].Rows[0]["Attachment_Content"];
                        string len = null;
                        len = Convert.ToString(content.Length);
                        byte[] bytArray = (byte[])dsAttachments.Tables[0].Rows[0]["Attachment_Content"];
                        byte[] bytTempArray = null;
                        if ((bytArray.Length < 2 | bytArray.Length == 2))
                        {
                            bytTempArray = new byte[bytArray.Length + 3];
                            Array.Copy(bytArray, bytTempArray, bytArray.Length);
                        }
                        else
                        {
                            bytTempArray = new byte[bytArray.Length - 1];
                            Array.Copy(bytArray, bytTempArray, bytArray.Length - 2);
                        }

                        Response.ClearContent();
                        Response.ClearHeaders();
                        Response.AddHeader("Content-Disposition", "attachment; filename=" + Convert.ToString(dsAttachments.Tables[0].Rows[0]["Attachment_File_Name"]));
                        if ((!object.ReferenceEquals(dsAttachments.Tables[0].Rows[0]["Attachment_Type"], DBNull.Value)))
                        {
                            if (((Convert.ToString(dsAttachments.Tables[0].Rows[0]["Attachment_Type"]) == "application/vnd.openxmlformats-officedocument.wordprocessingml.document") | (Convert.ToString(dsAttachments.Tables[0].Rows[0]["Attachment_Type"]) == "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet") | (Convert.ToString(dsAttachments.Tables[0].Rows[0]["Attachment_Type"]) == "application/vnd.openxmlformats-officedocument.pres")))
                            {
                                Response.AddHeader("Content-Length", bytTempArray.Length.ToString());
                                Response.BinaryWrite(bytTempArray);
                            }
                            else
                            {
                                Response.AddHeader("Content-Length", content.Length.ToString());
                                Response.BinaryWrite(content);
                            }
                        }
                        else
                        {
                            Response.AddHeader("Content-Length", content.Length.ToString());
                            Response.BinaryWrite(content);
                        }

                        Response.End();
                        Response.Flush();

                    }
                }
                catch (Exception ex)
                {
                }
            }
        }

        protected void dgrdAttachment_ReadOnly_ItemCommand1(object source, DataGridCommandEventArgs e)
        {
            if (e.CommandName == "Final_Click")
            {
                try
                {
                    Label lblEoConAppID = (Label)e.Item.FindControl("lblFileNameRO");
                    int intAttachmentId = Convert.ToInt32(lblEoConAppID.Text);
                    string EoiDString = ViewState["EOID"].ToString();
                    int eoiD = Convert.ToInt32(EoiDString);
                    DataSet dsAttachments = new DataSet();

                    if (objEOBA.GetAttachmentsInfo(intAttachmentId, eoiD, "PDI", ref dsAttachments))
                    {
                        Response.Clear();
                        if (!(dsAttachments.Tables[0].Rows.Count == 0))
                        {
                            if ((!object.ReferenceEquals(dsAttachments.Tables[0].Rows[0]["Attachment_Type"], DBNull.Value)))
                            {
                                Response.ContentType = dsAttachments.Tables[0].Rows[0]["Attachment_Type"].ToString();
                            }
                        }
                        else
                        {
                        }

                        byte[] content = null;
                        content = (byte[])dsAttachments.Tables[0].Rows[0]["Attachment_Content"];
                        string len = null;
                        len = Convert.ToString(content.Length);


                        byte[] bytArray = (byte[])dsAttachments.Tables[0].Rows[0]["Attachment_Content"];
                        byte[] bytTempArray = null;


                        if ((bytArray.Length < 2 | bytArray.Length == 2))
                        {
                            bytTempArray = new byte[bytArray.Length + 3];
                            Array.Copy(bytArray, bytTempArray, bytArray.Length);
                        }
                        else
                        {
                            bytTempArray = new byte[bytArray.Length - 1];
                            Array.Copy(bytArray, bytTempArray, bytArray.Length - 2);
                        }
                        Response.ClearContent();
                        Response.ClearHeaders();
                        Response.AddHeader("Content-Disposition", "attachment; filename=" + Convert.ToString(dsAttachments.Tables[0].Rows[0]["Attachment_File_Name"]));
                        if ((!object.ReferenceEquals(dsAttachments.Tables[0].Rows[0]["Attachment_Type"], DBNull.Value)))
                        {
                            if (((Convert.ToString(dsAttachments.Tables[0].Rows[0]["Attachment_Type"]) == "application/vnd.openxmlformats-officedocument.wordprocessingml.document") | (Convert.ToString(dsAttachments.Tables[0].Rows[0]["Attachment_Type"]) == "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet") | (Convert.ToString(dsAttachments.Tables[0].Rows[0]["Attachment_Type"]) == "application/vnd.openxmlformats-officedocument.pres")))
                            {
                                Response.AddHeader("Content-Length", bytTempArray.Length.ToString());
                                Response.BinaryWrite(bytTempArray);
                            }
                            else
                            {
                                Response.AddHeader("Content-Length", content.Length.ToString());
                                Response.BinaryWrite(content);
                            }
                        }
                        else
                        {
                            Response.AddHeader("Content-Length", content.Length.ToString());
                            Response.BinaryWrite(content);
                        }
                        Response.Flush();
                    }

                }
                catch (Exception ex)
                {
                }
            }
        }

        protected void dgrdCostSheetFinal_ItemCommand(object source, DataGridCommandEventArgs e)
        {
            if (e.CommandName == "Final_Click")
            {
                try
                {
                    Label lblEoConAppID = (Label)e.Item.FindControl("lblFileNameCostSheetFinal");
                    int intAttachmentId = Convert.ToInt32(lblEoConAppID.Text);
                    string EoiDString = ViewState["EOID"].ToString();
                    int eoiD = Convert.ToInt32(EoiDString);
                    DataSet dsAttachments = new DataSet();

                    if (objEOBA.GetAttachmentsInfoFinal(intAttachmentId, eoiD, "Cost", ref dsAttachments))
                    {
                        Response.Clear();
                        if (!(dsAttachments.Tables[0].Rows.Count == 0))
                        {
                            if ((!object.ReferenceEquals(dsAttachments.Tables[0].Rows[0]["Attachment_Type"], DBNull.Value)))
                            {
                                Response.ContentType = dsAttachments.Tables[0].Rows[0]["Attachment_Type"].ToString();

                            }
                        }
                        else
                        {
                        }

                        byte[] content = null;
                        content = (byte[])dsAttachments.Tables[0].Rows[0]["Attachment_Content"];
                        string len = null;
                        len = Convert.ToString(content.Length);


                        byte[] bytArray = (byte[])dsAttachments.Tables[0].Rows[0]["Attachment_Content"];
                        byte[] bytTempArray = null;


                        if ((bytArray.Length < 2 | bytArray.Length == 2))
                        {
                            bytTempArray = new byte[bytArray.Length + 3];
                            Array.Copy(bytArray, bytTempArray, bytArray.Length);
                        }
                        else
                        {
                            bytTempArray = new byte[bytArray.Length - 1];
                            Array.Copy(bytArray, bytTempArray, bytArray.Length - 2);
                        }


                        Response.ClearContent();
                        Response.ClearHeaders();
                        Response.AddHeader("Content-Disposition", "attachment; filename=" + Convert.ToString(dsAttachments.Tables[0].Rows[0]["Attachment_File_Name"]));


                        if ((!object.ReferenceEquals(dsAttachments.Tables[0].Rows[0]["Attachment_Type"], DBNull.Value)))
                        {
                            if (((Convert.ToString(dsAttachments.Tables[0].Rows[0]["Attachment_Type"]) == "application/vnd.openxmlformats-officedocument.wordprocessingml.document") | (Convert.ToString(dsAttachments.Tables[0].Rows[0]["Attachment_Type"]) == "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet") | (Convert.ToString(dsAttachments.Tables[0].Rows[0]["Attachment_Type"]) == "application/vnd.openxmlformats-officedocument.pres")))
                            {
                                Response.AddHeader("Content-Length", bytTempArray.Length.ToString());
                                Response.BinaryWrite(bytTempArray);
                            }
                            else
                            {
                                Response.AddHeader("Content-Length", content.Length.ToString());
                                Response.BinaryWrite(content);
                            }
                        }
                        else
                        {
                            Response.AddHeader("Content-Length", content.Length.ToString());
                            Response.BinaryWrite(content);
                        }
                        Response.Flush();
                    }
                }
                catch (Exception ex)
                {
                    string s = null;
                    s = ex.Message;
                }

            }
        }

        protected void dgrdCostSheetFinal_ReadOnly_ItemCommand(object source, DataGridCommandEventArgs e)
        {
            if (e.CommandName == "Final_Click")
            {
                try
                {
                    Label lblEoConAppID = (Label)e.Item.FindControl("lblFileNameCostSheetFinalRO");
                    int intAttachmentId = Convert.ToInt32(lblEoConAppID.Text);
                    string EoiDString = ViewState["EOID"].ToString();
                    int eoiD = Convert.ToInt32(EoiDString);
                    DataSet dsAttachments = new DataSet();

                    if (objEOBA.GetAttachmentsInfoFinal(intAttachmentId, eoiD, "Cost", ref dsAttachments))
                    {

                        Response.Clear();

                        if (!(dsAttachments.Tables[0].Rows.Count == 0))
                        {
                            if ((!object.ReferenceEquals(dsAttachments.Tables[0].Rows[0]["Attachment_Type"], DBNull.Value)))
                            {
                                Response.ContentType = dsAttachments.Tables[0].Rows[0]["Attachment_Type"].ToString();
                            }
                        }
                        else
                        {
                        }

                        byte[] content = null;
                        content = (byte[])dsAttachments.Tables[0].Rows[0]["Attachment_Content"];
                        string len = null;
                        len = Convert.ToString(content.Length);


                        byte[] bytArray = (byte[])dsAttachments.Tables[0].Rows[0]["Attachment_Content"];
                        byte[] bytTempArray = null;


                        if ((bytArray.Length < 2 | bytArray.Length == 2))
                        {
                            bytTempArray = new byte[bytArray.Length + 3];
                            Array.Copy(bytArray, bytTempArray, bytArray.Length);
                        }
                        else
                        {
                            bytTempArray = new byte[bytArray.Length - 1];
                            Array.Copy(bytArray, bytTempArray, bytArray.Length - 2);
                        }


                        Response.ClearContent();
                        Response.ClearHeaders();
                        Response.AddHeader("Content-Disposition", "attachment; filename=" + Convert.ToString(dsAttachments.Tables[0].Rows[0]["Attachment_File_Name"]));


                        if ((!object.ReferenceEquals(dsAttachments.Tables[0].Rows[0]["Attachment_Type"], DBNull.Value)))
                        {
                            if (((Convert.ToString(dsAttachments.Tables[0].Rows[0]["Attachment_Type"]) == "application/vnd.openxmlformats-officedocument.wordprocessingml.document") | (Convert.ToString(dsAttachments.Tables[0].Rows[0]["Attachment_Type"]) == "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet") | (Convert.ToString(dsAttachments.Tables[0].Rows[0]["Attachment_Type"]) == "application/vnd.openxmlformats-officedocument.pres")))
                            {
                                Response.AddHeader("Content-Length", bytTempArray.Length.ToString());
                                Response.BinaryWrite(bytTempArray);
                            }
                            else
                            {
                                Response.AddHeader("Content-Length", content.Length.ToString());
                                Response.BinaryWrite(content);
                            }
                        }
                        else
                        {
                            Response.AddHeader("Content-Length", content.Length.ToString());
                            Response.BinaryWrite(content);
                        }


                        Response.Flush();
                    }
                }
                catch (Exception ex)
                {
                    string s = null;
                    s = ex.Message;
                }
            }
        }

        protected void dgrdQAFinalTabAttachment_ItemCommand(object source, DataGridCommandEventArgs e)
        {
            if (e.CommandName == "Final_Click")
            {
                try
                {
                    Label lblEoConAppID = (Label)e.Item.FindControl("lblFileNameQA");
                    int intAttachmentId = Convert.ToInt32(lblEoConAppID.Text);
                    string EoiDString = ViewState["EOID"].ToString();
                    int eoiD = Convert.ToInt32(EoiDString);
                    DataSet dsAttachments = new DataSet();

                    if (objEOBA.GetAttachmentsInfoFinal(intAttachmentId, eoiD, "QA", ref dsAttachments))
                    {
                        Response.Clear();
                        if (!(dsAttachments.Tables[0].Rows.Count == 0))
                        {
                            if ((!object.ReferenceEquals(dsAttachments.Tables[0].Rows[0]["Attachment_Type"], DBNull.Value)))
                            {
                                Response.ContentType = dsAttachments.Tables[0].Rows[0]["Attachment_Type"].ToString();
                            }
                        }
                        else
                        {
                        }

                        byte[] content = null;
                        content = (byte[])dsAttachments.Tables[0].Rows[0]["Attachment_Content"];
                        string len = null;
                        len = Convert.ToString(content.Length);

                        byte[] bytArray = (byte[])dsAttachments.Tables[0].Rows[0]["Attachment_Content"];
                        byte[] bytTempArray = null;

                        if ((bytArray.Length < 2 | bytArray.Length == 2))
                        {
                            bytTempArray = new byte[bytArray.Length + 3];
                            Array.Copy(bytArray, bytTempArray, bytArray.Length);
                        }
                        else
                        {
                            bytTempArray = new byte[bytArray.Length - 1];
                            Array.Copy(bytArray, bytTempArray, bytArray.Length - 2);
                        }


                        Response.ClearContent();
                        Response.ClearHeaders();
                        Response.AddHeader("Content-Disposition", "attachment; filename=" + Convert.ToString(dsAttachments.Tables[0].Rows[0]["Attachment_File_Name"]));


                        if ((!object.ReferenceEquals(dsAttachments.Tables[0].Rows[0]["Attachment_Type"], DBNull.Value)))
                        {
                            if (((Convert.ToString(dsAttachments.Tables[0].Rows[0]["Attachment_Type"]) == "application/vnd.openxmlformats-officedocument.wordprocessingml.document") | (Convert.ToString(dsAttachments.Tables[0].Rows[0]["Attachment_Type"]) == "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet") | (Convert.ToString(dsAttachments.Tables[0].Rows[0]["Attachment_Type"]) == "application/vnd.openxmlformats-officedocument.pres")))
                            {
                                Response.AddHeader("Content-Length", bytTempArray.Length.ToString());
                                Response.BinaryWrite(bytTempArray);
                            }
                            else
                            {
                                Response.AddHeader("Content-Length", content.Length.ToString());
                                Response.BinaryWrite(content);
                            }
                        }
                        else
                        {
                            Response.AddHeader("Content-Length", content.Length.ToString());
                            Response.BinaryWrite(content);
                        }


                        Response.Flush();
                    }

                }
                catch (Exception ex)
                {
                }
            }
        }

        protected void dgrdQAFinalTabAttachment_Readonly_ItemCommand(object source, DataGridCommandEventArgs e)
        {
            if (e.CommandName == "Final_Click")
            {
                try
                {
                    Label lblEoConAppID = (Label)e.Item.FindControl("lblFileNameQARO");
                    int intAttachmentId = Convert.ToInt32(lblEoConAppID.Text);
                    string EoiDString = ViewState["EOID"].ToString();
                    int eoiD = Convert.ToInt32(EoiDString);
                    DataSet dsAttachments = new DataSet();




                    if (objEOBA.GetAttachmentsInfoFinal(intAttachmentId, eoiD, "QA", ref dsAttachments))
                    {
                        Response.Clear();
                        if (!(dsAttachments.Tables[0].Rows.Count == 0))
                        {
                            if ((!object.ReferenceEquals(dsAttachments.Tables[0].Rows[0]["Attachment_Type"], DBNull.Value)))
                            {
                                Response.ContentType = dsAttachments.Tables[0].Rows[0]["Attachment_Type"].ToString();
                            }
                        }
                        else
                        {
                        }

                        byte[] content = null;
                        content = (byte[])dsAttachments.Tables[0].Rows[0]["Attachment_Content"];
                        string len = null;
                        len = Convert.ToString(content.Length);
                        byte[] bytArray = (byte[])dsAttachments.Tables[0].Rows[0]["Attachment_Content"];
                        byte[] bytTempArray = null;
                        if ((bytArray.Length < 2 | bytArray.Length == 2))
                        {
                            bytTempArray = new byte[bytArray.Length + 3];
                            Array.Copy(bytArray, bytTempArray, bytArray.Length);
                        }
                        else
                        {
                            bytTempArray = new byte[bytArray.Length - 1];
                            Array.Copy(bytArray, bytTempArray, bytArray.Length - 2);
                        }

                        Response.ClearContent();
                        Response.ClearHeaders();
                        Response.AddHeader("Content-Disposition", "attachment; filename=" + Convert.ToString(dsAttachments.Tables[0].Rows[0]["Attachment_File_Name"]));

                        if ((!object.ReferenceEquals(dsAttachments.Tables[0].Rows[0]["Attachment_Type"], DBNull.Value)))
                        {
                            if (((Convert.ToString(dsAttachments.Tables[0].Rows[0]["Attachment_Type"]) == "application/vnd.openxmlformats-officedocument.wordprocessingml.document") | (Convert.ToString(dsAttachments.Tables[0].Rows[0]["Attachment_Type"]) == "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet") | (Convert.ToString(dsAttachments.Tables[0].Rows[0]["Attachment_Type"]) == "application/vnd.openxmlformats-officedocument.pres")))
                            {
                                Response.AddHeader("Content-Length", bytTempArray.Length.ToString());
                                Response.BinaryWrite(bytTempArray);
                            }
                            else
                            {
                                Response.AddHeader("Content-Length", content.Length.ToString());
                                Response.BinaryWrite(content);
                            }
                        }
                        else
                        {
                            Response.AddHeader("Content-Length", content.Length.ToString());
                            Response.BinaryWrite(content);
                        }


                        Response.Flush();
                    }
                }
                catch (Exception ex)
                {
                }
            }
        }

        protected void dgrdFormulaCard_ItemCommand(object source, DataGridCommandEventArgs e)
        {
            if (e.CommandName == "Final_Click")
            {
                try
                {
                    Label lblEoConAppID = (Label)e.Item.FindControl("lblFileNameFormulaCard");
                    int intAttachmentId = Convert.ToInt32(lblEoConAppID.Text);
                    string EoiDString = ViewState["EOID"].ToString();
                    int eoiD = Convert.ToInt32(EoiDString);
                    DataSet dsAttachments = new DataSet();

                    if (objEOBA.GetAttachmentsInfoFinal(intAttachmentId, eoiD, "Formula", ref dsAttachments))
                    {
                        Response.Clear();
                        if (!(dsAttachments.Tables[0].Rows.Count == 0))
                        {
                            if ((!object.ReferenceEquals(dsAttachments.Tables[0].Rows[0]["Attachment_Type"], DBNull.Value)))
                            {
                                Response.ContentType = dsAttachments.Tables[0].Rows[0]["Attachment_Type"].ToString();
                            }
                        }
                        else
                        {
                        }

                        byte[] content = null;
                        content = (byte[])dsAttachments.Tables[0].Rows[0]["Attachment_Content"];
                        string len = null;
                        len = Convert.ToString(content.Length);


                        byte[] bytArray = (byte[])dsAttachments.Tables[0].Rows[0]["Attachment_Content"];
                        byte[] bytTempArray = null;


                        if ((bytArray.Length < 2 | bytArray.Length == 2))
                        {
                            bytTempArray = new byte[bytArray.Length + 3];
                            Array.Copy(bytArray, bytTempArray, bytArray.Length);
                        }
                        else
                        {
                            bytTempArray = new byte[bytArray.Length - 1];
                            Array.Copy(bytArray, bytTempArray, bytArray.Length - 2);
                        }


                        Response.ClearContent();
                        Response.ClearHeaders();
                        Response.AddHeader("Content-Disposition", "attachment; filename=" + Convert.ToString(dsAttachments.Tables[0].Rows[0]["Attachment_File_Name"]));


                        if ((!object.ReferenceEquals(dsAttachments.Tables[0].Rows[0]["Attachment_Type"], DBNull.Value)))
                        {
                            if (((Convert.ToString(dsAttachments.Tables[0].Rows[0]["Attachment_Type"]) == "application/vnd.openxmlformats-officedocument.wordprocessingml.document") | (Convert.ToString(dsAttachments.Tables[0].Rows[0]["Attachment_Type"]) == "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet") | (Convert.ToString(dsAttachments.Tables[0].Rows[0]["Attachment_Type"]) == "application/vnd.openxmlformats-officedocument.pres")))
                            {
                                Response.AddHeader("Content-Length", bytTempArray.Length.ToString());
                                Response.BinaryWrite(bytTempArray);
                            }
                            else
                            {
                                Response.AddHeader("Content-Length", content.Length.ToString());
                                Response.BinaryWrite(content);
                            }
                        }
                        else
                        {
                            Response.AddHeader("Content-Length", content.Length.ToString());
                            Response.BinaryWrite(content);
                        }
                        Response.Flush();
                    }
                }
                catch (Exception ex)
                {
                }
            }
        }

        protected void dgrdFormulaCard_Readonly_ItemCommand(object source, DataGridCommandEventArgs e)
        {
            if (e.CommandName == "Final_Click")
            {
                try
                {
                    Label lblEoConAppID = (Label)e.Item.FindControl("lblFileNameFormulaCardRO");
                    int intAttachmentId = Convert.ToInt32(lblEoConAppID.Text);
                    string EoiDString = ViewState["EOID"].ToString();
                    int eoiD = Convert.ToInt32(EoiDString);
                    DataSet dsAttachments = new DataSet();

                    if (objEOBA.GetAttachmentsInfoFinal(intAttachmentId, eoiD, "Formula", ref dsAttachments))
                    {
                        Response.Clear();

                        if (!(dsAttachments.Tables[0].Rows.Count == 0))
                        {
                            if ((!object.ReferenceEquals(dsAttachments.Tables[0].Rows[0]["Attachment_Type"], DBNull.Value)))
                            {
                                Response.ContentType = dsAttachments.Tables[0].Rows[0]["Attachment_Type"].ToString();
                            }
                        }
                        else
                        {
                        }

                        byte[] content = null;
                        content = (byte[])dsAttachments.Tables[0].Rows[0]["Attachment_Content"];
                        string len = null;
                        len = Convert.ToString(content.Length);


                        byte[] bytArray = (byte[])dsAttachments.Tables[0].Rows[0]["Attachment_Content"];
                        byte[] bytTempArray = null;


                        if ((bytArray.Length < 2 | bytArray.Length == 2))
                        {
                            bytTempArray = new byte[bytArray.Length + 3];
                            Array.Copy(bytArray, bytTempArray, bytArray.Length);
                        }
                        else
                        {
                            bytTempArray = new byte[bytArray.Length - 1];
                            Array.Copy(bytArray, bytTempArray, bytArray.Length - 2);
                        }


                        Response.ClearContent();
                        Response.ClearHeaders();
                        Response.AddHeader("Content-Disposition", "attachment; filename=" + Convert.ToString(dsAttachments.Tables[0].Rows[0]["Attachment_File_Name"]));


                        if ((!object.ReferenceEquals(dsAttachments.Tables[0].Rows[0]["Attachment_Type"], DBNull.Value)))
                        {
                            if (((Convert.ToString(dsAttachments.Tables[0].Rows[0]["Attachment_Type"]) == "application/vnd.openxmlformats-officedocument.wordprocessingml.document") | (Convert.ToString(dsAttachments.Tables[0].Rows[0]["Attachment_Type"]) == "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet") | (Convert.ToString(dsAttachments.Tables[0].Rows[0]["Attachment_Type"]) == "application/vnd.openxmlformats-officedocument.pres")))
                            {
                                Response.AddHeader("Content-Length", bytTempArray.Length.ToString());
                                Response.BinaryWrite(bytTempArray);
                            }
                            else
                            {
                                Response.AddHeader("Content-Length", content.Length.ToString());
                                Response.BinaryWrite(content);
                            }
                        }
                        else
                        {
                            Response.AddHeader("Content-Length", content.Length.ToString());
                            Response.BinaryWrite(content);
                        }
                        Response.Flush();
                    }
                }
                catch (Exception ex)
                {
                }
            }
        }

        protected void dgrdTestPlansFinal_ItemCommand1(object source, DataGridCommandEventArgs e)
        {
            if (e.CommandName == "Final_Click")
            {
                try
                {
                    Label lblEoConAppID = (Label)e.Item.FindControl("lblFileNameTestPlansFinal");
                    int intAttachmentId = Convert.ToInt32(lblEoConAppID.Text);
                    string EoiDString = ViewState["EOID"].ToString();
                    int eoiD = Convert.ToInt32(EoiDString);
                    DataSet dsAttachments = new DataSet();

                    if (objEOBA.GetAttachmentsInfoFinal(intAttachmentId, eoiD, "Test_Plans", ref dsAttachments))
                    {
                        Response.Clear();
                        if (!(dsAttachments.Tables[0].Rows.Count == 0))
                        {
                            if ((!object.ReferenceEquals(dsAttachments.Tables[0].Rows[0]["Attachment_Type"], DBNull.Value)))
                            {
                                Response.ContentType = dsAttachments.Tables[0].Rows[0]["Attachment_Type"].ToString();
                            }
                        }
                        else
                        {
                        }

                        byte[] content = null;
                        content = (byte[])dsAttachments.Tables[0].Rows[0]["Attachment_Content"];
                        string len = null;
                        len = Convert.ToString(content.Length);


                        byte[] bytArray = (byte[])dsAttachments.Tables[0].Rows[0]["Attachment_Content"];
                        byte[] bytTempArray = null;


                        if ((bytArray.Length < 2 | bytArray.Length == 2))
                        {
                            bytTempArray = new byte[bytArray.Length + 3];
                            Array.Copy(bytArray, bytTempArray, bytArray.Length);
                        }
                        else
                        {
                            bytTempArray = new byte[bytArray.Length - 1];
                            Array.Copy(bytArray, bytTempArray, bytArray.Length - 2);
                        }


                        Response.ClearContent();
                        Response.ClearHeaders();
                        Response.AddHeader("Content-Disposition", "attachment; filename=" + Convert.ToString(dsAttachments.Tables[0].Rows[0]["Attachment_File_Name"]));


                        if ((!object.ReferenceEquals(dsAttachments.Tables[0].Rows[0]["Attachment_Type"], DBNull.Value)))
                        {
                            if (((Convert.ToString(dsAttachments.Tables[0].Rows[0]["Attachment_Type"]) == "application/vnd.openxmlformats-officedocument.wordprocessingml.document") | (Convert.ToString(dsAttachments.Tables[0].Rows[0]["Attachment_Type"]) == "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet") | (Convert.ToString(dsAttachments.Tables[0].Rows[0]["Attachment_Type"]) == "application/vnd.openxmlformats-officedocument.pres")))
                            {
                                Response.AddHeader("Content-Length", bytTempArray.Length.ToString());
                                Response.BinaryWrite(bytTempArray);
                            }
                            else
                            {
                                Response.AddHeader("Content-Length", content.Length.ToString());
                                Response.BinaryWrite(content);
                            }
                        }
                        else
                        {
                            Response.AddHeader("Content-Length", content.Length.ToString());
                            Response.BinaryWrite(content);
                        }
                        Response.Flush();
                    }

                }
                catch (Exception ex)
                {
                }
            }
        }

        protected void dgrdTestPlansFinal_Readonly_ItemCommand1(object source, DataGridCommandEventArgs e)
        {
            if (e.CommandName == "Final_Click")
            {
                try
                {
                    Label lblEoConAppID = (Label)e.Item.FindControl("lblFileNameTestPlansFinalRO");
                    int intAttachmentId = Convert.ToInt32(lblEoConAppID.Text);
                    string EoiDString = ViewState["EOID"].ToString();
                    int eoiD = Convert.ToInt32(EoiDString);
                    DataSet dsAttachments = new DataSet();

                    if (objEOBA.GetAttachmentsInfoFinal(intAttachmentId, eoiD, "Test_Plans", ref dsAttachments))
                    {
                        Response.Clear();
                        if (!(dsAttachments.Tables[0].Rows.Count == 0))
                        {
                            if ((!object.ReferenceEquals(dsAttachments.Tables[0].Rows[0]["Attachment_Type"], DBNull.Value)))
                                Response.ContentType = dsAttachments.Tables[0].Rows[0]["Attachment_Type"].ToString();
                        }
                        byte[] content = null;
                        content = (byte[])dsAttachments.Tables[0].Rows[0]["Attachment_Content"];
                        string len = null;
                        len = Convert.ToString(content.Length);


                        byte[] bytArray = (byte[])dsAttachments.Tables[0].Rows[0]["Attachment_Content"];
                        byte[] bytTempArray = null;


                        if ((bytArray.Length < 2 | bytArray.Length == 2))
                        {
                            bytTempArray = new byte[bytArray.Length + 3];
                            Array.Copy(bytArray, bytTempArray, bytArray.Length);
                        }
                        else
                        {
                            bytTempArray = new byte[bytArray.Length - 1];
                            Array.Copy(bytArray, bytTempArray, bytArray.Length - 2);
                        }


                        Response.ClearContent();
                        Response.ClearHeaders();
                        Response.AddHeader("Content-Disposition", "attachment; filename=" + Convert.ToString(dsAttachments.Tables[0].Rows[0]["Attachment_File_Name"]));


                        if ((!object.ReferenceEquals(dsAttachments.Tables[0].Rows[0]["Attachment_Type"], DBNull.Value)))
                        {
                            if (((Convert.ToString(dsAttachments.Tables[0].Rows[0]["Attachment_Type"]) == "application/vnd.openxmlformats-officedocument.wordprocessingml.document") | (Convert.ToString(dsAttachments.Tables[0].Rows[0]["Attachment_Type"]) == "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet") | (Convert.ToString(dsAttachments.Tables[0].Rows[0]["Attachment_Type"]) == "application/vnd.openxmlformats-officedocument.pres")))
                            {
                                Response.AddHeader("Content-Length", bytTempArray.Length.ToString());
                                Response.BinaryWrite(bytTempArray);
                            }
                            else
                            {
                                Response.AddHeader("Content-Length", content.Length.ToString());
                                Response.BinaryWrite(content);
                            }
                        }
                        else
                        {
                            Response.AddHeader("Content-Length", content.Length.ToString());
                            Response.BinaryWrite(content);
                        }
                        Response.Flush();
                    }
                }
                catch (Exception ex)
                {
                }
            }
        }

        protected void dgrdLabSamp_ItemCommand1(object source, DataGridCommandEventArgs e)
        {
            if (e.CommandName == "Final_Click")
            {
                try
                {
                    Label lblEoConAppID = (Label)e.Item.FindControl("lblFileNameLabSamp");
                    int intAttachmentId = Convert.ToInt32(lblEoConAppID.Text);
                    string EoiDString = ViewState["EOID"].ToString();
                    int eoiD = Convert.ToInt32(EoiDString);
                    DataSet dsAttachments = new DataSet();

                    if (objEOBA.GetAttachmentsInfoFinal(intAttachmentId, eoiD, "Lab", ref dsAttachments))
                    {
                        Response.Clear();
                        if (!(dsAttachments.Tables[0].Rows.Count == 0))
                        {
                            if ((!object.ReferenceEquals(dsAttachments.Tables[0].Rows[0]["Attachment_Type"], DBNull.Value)))
                            {
                                Response.ContentType = dsAttachments.Tables[0].Rows[0]["Attachment_Type"].ToString();
                            }
                        }
                        else
                        {
                        }

                        byte[] content = null;
                        content = (byte[])dsAttachments.Tables[0].Rows[0]["Attachment_Content"];
                        string len = null;
                        len = Convert.ToString(content.Length);


                        byte[] bytArray = (byte[])dsAttachments.Tables[0].Rows[0]["Attachment_Content"];
                        byte[] bytTempArray = null;


                        if ((bytArray.Length < 2 | bytArray.Length == 2))
                        {
                            bytTempArray = new byte[bytArray.Length + 3];
                            Array.Copy(bytArray, bytTempArray, bytArray.Length);
                        }
                        else
                        {
                            bytTempArray = new byte[bytArray.Length - 1];
                            Array.Copy(bytArray, bytTempArray, bytArray.Length - 2);
                        }


                        Response.ClearContent();
                        Response.ClearHeaders();
                        Response.AddHeader("Content-Disposition", "attachment; filename=" + Convert.ToString(dsAttachments.Tables[0].Rows[0]["Attachment_File_Name"]));


                        if ((!object.ReferenceEquals(dsAttachments.Tables[0].Rows[0]["Attachment_Type"], DBNull.Value)))
                        {
                            if (((Convert.ToString(dsAttachments.Tables[0].Rows[0]["Attachment_Type"]) == "application/vnd.openxmlformats-officedocument.wordprocessingml.document") | (Convert.ToString(dsAttachments.Tables[0].Rows[0]["Attachment_Type"]) == "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet") | (Convert.ToString(dsAttachments.Tables[0].Rows[0]["Attachment_Type"]) == "application/vnd.openxmlformats-officedocument.pres")))
                            {
                                Response.AddHeader("Content-Length", bytTempArray.Length.ToString());
                                Response.BinaryWrite(bytTempArray);
                            }
                            else
                            {
                                Response.AddHeader("Content-Length", content.Length.ToString());
                                Response.BinaryWrite(content);
                            }
                        }
                        else
                        {
                            Response.AddHeader("Content-Length", content.Length.ToString());
                            Response.BinaryWrite(content);
                        }
                        Response.Flush();
                    }
                }
                catch (Exception ex)
                {
                }
            }

        }

        protected void dgrdLabSamp_Readonly_ItemCommand1(object source, DataGridCommandEventArgs e)
        {
            if (e.CommandName == "Final_Click")
            {
                try
                {
                    Label lblEoConAppID = (Label)e.Item.FindControl("lblFileNameLabSampRO");
                    int intAttachmentId = Convert.ToInt32(lblEoConAppID.Text);
                    string EoiDString = ViewState["EOID"].ToString();
                    int eoiD = Convert.ToInt32(EoiDString);
                    DataSet dsAttachments = new DataSet();

                    if (objEOBA.GetAttachmentsInfoFinal(intAttachmentId, eoiD, "Lab", ref dsAttachments))
                    {
                        Response.Clear();
                        if (!(dsAttachments.Tables[0].Rows.Count == 0))
                        {
                            if ((!object.ReferenceEquals(dsAttachments.Tables[0].Rows[0]["Attachment_Type"], DBNull.Value)))
                                Response.ContentType = dsAttachments.Tables[0].Rows[0]["Attachment_Type"].ToString();
                        }

                        byte[] content = null;
                        content = (byte[])dsAttachments.Tables[0].Rows[0]["Attachment_Content"];
                        string len = null;
                        len = Convert.ToString(content.Length);


                        byte[] bytArray = (byte[])dsAttachments.Tables[0].Rows[0]["Attachment_Content"];
                        byte[] bytTempArray = null;


                        if ((bytArray.Length < 2 | bytArray.Length == 2))
                        {
                            bytTempArray = new byte[bytArray.Length + 3];
                            Array.Copy(bytArray, bytTempArray, bytArray.Length);
                        }
                        else
                        {
                            bytTempArray = new byte[bytArray.Length - 1];
                            Array.Copy(bytArray, bytTempArray, bytArray.Length - 2);
                        }


                        Response.ClearContent();
                        Response.ClearHeaders();
                        Response.AddHeader("Content-Disposition", "attachment; filename=" + Convert.ToString(dsAttachments.Tables[0].Rows[0]["Attachment_File_Name"]));


                        if ((!object.ReferenceEquals(dsAttachments.Tables[0].Rows[0]["Attachment_Type"], DBNull.Value)))
                        {
                            if (((Convert.ToString(dsAttachments.Tables[0].Rows[0]["Attachment_Type"]) == "application/vnd.openxmlformats-officedocument.wordprocessingml.document") | (Convert.ToString(dsAttachments.Tables[0].Rows[0]["Attachment_Type"]) == "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet") | (Convert.ToString(dsAttachments.Tables[0].Rows[0]["Attachment_Type"]) == "application/vnd.openxmlformats-officedocument.pres")))
                            {
                                Response.AddHeader("Content-Length", bytTempArray.Length.ToString());
                                Response.BinaryWrite(bytTempArray);
                            }
                            else
                            {
                                Response.AddHeader("Content-Length", content.Length.ToString());
                                Response.BinaryWrite(content);
                            }
                        }
                        else
                        {
                            Response.AddHeader("Content-Length", content.Length.ToString());
                            Response.BinaryWrite(content);
                        }
                        Response.Flush();
                    }

                }
                catch (Exception ex)
                {
                }
            }
        }

        protected void dgrdTestMatrix_ItemCommand1(object source, DataGridCommandEventArgs e)
        {
            if (e.CommandName == "Final_Click")
            {
                try
                {
                    Label lblEoConAppID = (Label)e.Item.FindControl("lblFileNameTestMatrix");
                    int intAttachmentId = Convert.ToInt32(lblEoConAppID.Text);
                    string EoiDString = ViewState["EOID"].ToString();
                    int eoiD = Convert.ToInt32(EoiDString);
                    DataSet dsAttachments = new DataSet();

                    if (objEOBA.GetAttachmentsInfoFinal(intAttachmentId, eoiD, "Matrix", ref dsAttachments))
                    {
                        Response.Clear();
                        if (!(dsAttachments.Tables[0].Rows.Count == 0))
                        {
                            if ((!object.ReferenceEquals(dsAttachments.Tables[0].Rows[0]["Attachment_Type"], DBNull.Value)))
                            {
                                Response.ContentType = dsAttachments.Tables[0].Rows[0]["Attachment_Type"].ToString();
                            }
                        }
                        else
                        {
                        }

                        byte[] content = null;
                        content = (byte[])dsAttachments.Tables[0].Rows[0]["Attachment_Content"];
                        string len = null;
                        len = Convert.ToString(content.Length);


                        byte[] bytArray = (byte[])dsAttachments.Tables[0].Rows[0]["Attachment_Content"];
                        byte[] bytTempArray = null;


                        if ((bytArray.Length < 2 | bytArray.Length == 2))
                        {
                            bytTempArray = new byte[bytArray.Length + 3];
                            Array.Copy(bytArray, bytTempArray, bytArray.Length);
                        }
                        else
                        {
                            bytTempArray = new byte[bytArray.Length - 1];
                            Array.Copy(bytArray, bytTempArray, bytArray.Length - 2);
                        }


                        Response.ClearContent();
                        Response.ClearHeaders();
                        Response.AddHeader("Content-Disposition", "attachment; filename=" + Convert.ToString(dsAttachments.Tables[0].Rows[0]["Attachment_File_Name"]));


                        if ((!object.ReferenceEquals(dsAttachments.Tables[0].Rows[0]["Attachment_Type"], DBNull.Value)))
                        {
                            if (((Convert.ToString(dsAttachments.Tables[0].Rows[0]["Attachment_Type"]) == "application/vnd.openxmlformats-officedocument.wordprocessingml.document") | (Convert.ToString(dsAttachments.Tables[0].Rows[0]["Attachment_Type"]) == "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet") | (Convert.ToString(dsAttachments.Tables[0].Rows[0]["Attachment_Type"]) == "application/vnd.openxmlformats-officedocument.pres")))
                            {
                                Response.AddHeader("Content-Length", bytTempArray.Length.ToString());
                                Response.BinaryWrite(bytTempArray);
                            }
                            else
                            {
                                Response.AddHeader("Content-Length", content.Length.ToString());
                                Response.BinaryWrite(content);
                            }
                        }
                        else
                        {
                            Response.AddHeader("Content-Length", content.Length.ToString());
                            Response.BinaryWrite(content);
                        }
                        Response.Flush();
                    }
                }
                catch (Exception ex)
                {
                }
            }
        }

        protected void dgrdTestMatrix_Readonly_ItemCommand1(object source, DataGridCommandEventArgs e)
        {
            if (e.CommandName == "Final_Click")
            {
                try
                {
                    Label lblEoConAppID = (Label)e.Item.FindControl("lblFileNameTestMatrixRO");
                    int intAttachmentId = Convert.ToInt32(lblEoConAppID.Text);
                    string EoiDString = ViewState["EOID"].ToString();
                    int eoiD = Convert.ToInt32(EoiDString);
                    DataSet dsAttachments = new DataSet();

                    if (objEOBA.GetAttachmentsInfoFinal(intAttachmentId, eoiD, "Matrix", ref dsAttachments))
                    {
                        Response.Clear();

                        if (!(dsAttachments.Tables[0].Rows.Count == 0))
                        {
                            if ((!object.ReferenceEquals(dsAttachments.Tables[0].Rows[0]["Attachment_Type"], DBNull.Value)))
                            {
                                Response.ContentType = dsAttachments.Tables[0].Rows[0]["Attachment_Type"].ToString();
                            }
                        }
                        else
                        {
                        }

                        byte[] content = null;
                        content = (byte[])dsAttachments.Tables[0].Rows[0]["Attachment_Content"];
                        string len = null;
                        len = Convert.ToString(content.Length);


                        byte[] bytArray = (byte[])dsAttachments.Tables[0].Rows[0]["Attachment_Content"];
                        byte[] bytTempArray = null;


                        if ((bytArray.Length < 2 | bytArray.Length == 2))
                        {
                            bytTempArray = new byte[bytArray.Length + 3];
                            Array.Copy(bytArray, bytTempArray, bytArray.Length);
                        }
                        else
                        {
                            bytTempArray = new byte[bytArray.Length - 1];
                            Array.Copy(bytArray, bytTempArray, bytArray.Length - 2);
                        }


                        Response.ClearContent();
                        Response.ClearHeaders();
                        Response.AddHeader("Content-Disposition", "attachment; filename=" + Convert.ToString(dsAttachments.Tables[0].Rows[0]["Attachment_File_Name"]));


                        if ((!object.ReferenceEquals(dsAttachments.Tables[0].Rows[0]["Attachment_Type"], DBNull.Value)))
                        {
                            if (((Convert.ToString(dsAttachments.Tables[0].Rows[0]["Attachment_Type"]) == "application/vnd.openxmlformats-officedocument.wordprocessingml.document") | (Convert.ToString(dsAttachments.Tables[0].Rows[0]["Attachment_Type"]) == "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet") | (Convert.ToString(dsAttachments.Tables[0].Rows[0]["Attachment_Type"]) == "application/vnd.openxmlformats-officedocument.pres")))
                            {
                                Response.AddHeader("Content-Length", bytTempArray.Length.ToString());
                                Response.BinaryWrite(bytTempArray);
                            }
                            else
                            {
                                Response.AddHeader("Content-Length", content.Length.ToString());
                                Response.BinaryWrite(content);
                            }
                        }
                        else
                        {
                            Response.AddHeader("Content-Length", content.Length.ToString());
                            Response.BinaryWrite(content);
                        }

                        Response.Flush();
                    }
                }
                catch (Exception ex)
                {
                }
            }
        }

        protected void dgrdOtherDocFinal_ItemCommand1(object source, DataGridCommandEventArgs e)
        {
            if (e.CommandName == "Final_Click")
            {
                try
                {
                    Label lblEoConAppID = (Label)e.Item.FindControl("lblFileNameOtherDocFinal");
                    int intAttachmentId = Convert.ToInt32(lblEoConAppID.Text);
                    string EoiDString = ViewState["EOID"].ToString();
                    int eoiD = Convert.ToInt32(EoiDString);
                    DataSet dsAttachments = new DataSet();

                    if (objEOBA.GetAttachmentsInfoFinal(intAttachmentId, eoiD, "Others", ref dsAttachments))
                    {
                        Response.Clear();
                        if (!(dsAttachments.Tables[0].Rows.Count == 0))
                        {
                            if ((!object.ReferenceEquals(dsAttachments.Tables[0].Rows[0]["Attachment_Type"], DBNull.Value)))
                            {
                                Response.ContentType = dsAttachments.Tables[0].Rows[0]["Attachment_Type"].ToString();
                            }
                        }
                        else
                        {
                        }

                        byte[] content = null;
                        content = (byte[])dsAttachments.Tables[0].Rows[0]["Attachment_Content"];
                        string len = null;
                        len = Convert.ToString(content.Length);


                        byte[] bytArray = (byte[])dsAttachments.Tables[0].Rows[0]["Attachment_Content"];
                        byte[] bytTempArray = null;


                        if ((bytArray.Length < 2 | bytArray.Length == 2))
                        {
                            bytTempArray = new byte[bytArray.Length + 3];
                            Array.Copy(bytArray, bytTempArray, bytArray.Length);
                        }
                        else
                        {
                            bytTempArray = new byte[bytArray.Length - 1];
                            Array.Copy(bytArray, bytTempArray, bytArray.Length - 2);
                        }


                        Response.ClearContent();
                        Response.ClearHeaders();
                        Response.AddHeader("Content-Disposition", "attachment; filename=" + Convert.ToString(dsAttachments.Tables[0].Rows[0]["Attachment_File_Name"]));


                        if ((!object.ReferenceEquals(dsAttachments.Tables[0].Rows[0]["Attachment_Type"], DBNull.Value)))
                        {
                            if (((Convert.ToString(dsAttachments.Tables[0].Rows[0]["Attachment_Type"]) == "application/vnd.openxmlformats-officedocument.wordprocessingml.document") | (Convert.ToString(dsAttachments.Tables[0].Rows[0]["Attachment_Type"]) == "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet") | (Convert.ToString(dsAttachments.Tables[0].Rows[0]["Attachment_Type"]) == "application/vnd.openxmlformats-officedocument.pres")))
                            {
                                Response.AddHeader("Content-Length", bytTempArray.Length.ToString());
                                Response.BinaryWrite(bytTempArray);
                            }
                            else
                            {
                                Response.AddHeader("Content-Length", content.Length.ToString());
                                Response.BinaryWrite(content);
                            }
                        }
                        else
                        {
                            Response.AddHeader("Content-Length", content.Length.ToString());
                            Response.BinaryWrite(content);
                        }


                        Response.Flush();
                    }

                }
                catch (Exception ex)
                {
                }
            }
        }

        protected void dgrdOtherDocFinal_Readonly_ItemCommand1(object source, DataGridCommandEventArgs e)
        {
            if (e.CommandName == "Final_Click")
            {
                try
                {
                    Label lblEoConAppID = (Label)e.Item.FindControl("lblFileNameOtherDocFinalRO");
                    int intAttachmentId = Convert.ToInt32(lblEoConAppID.Text);
                    string EoiDString = ViewState["EOID"].ToString();
                    int eoiD = Convert.ToInt32(EoiDString);
                    DataSet dsAttachments = new DataSet();

                    if (objEOBA.GetAttachmentsInfoFinal(intAttachmentId, eoiD, "Others", ref dsAttachments))
                    {
                        Response.Clear();

                        if (!(dsAttachments.Tables[0].Rows.Count == 0))
                        {
                            if ((!object.ReferenceEquals(dsAttachments.Tables[0].Rows[0]["Attachment_Type"], DBNull.Value)))
                            {
                                Response.ContentType = dsAttachments.Tables[0].Rows[0]["Attachment_Type"].ToString();

                            }
                        }
                        else
                        {
                        }

                        byte[] content = null;
                        content = (byte[])dsAttachments.Tables[0].Rows[0]["Attachment_Content"];
                        string len = null;
                        len = Convert.ToString(content.Length);


                        byte[] bytArray = (byte[])dsAttachments.Tables[0].Rows[0]["Attachment_Content"];
                        byte[] bytTempArray = null;


                        if ((bytArray.Length < 2 | bytArray.Length == 2))
                        {
                            bytTempArray = new byte[bytArray.Length + 3];
                            Array.Copy(bytArray, bytTempArray, bytArray.Length);
                        }
                        else
                        {
                            bytTempArray = new byte[bytArray.Length - 1];
                            Array.Copy(bytArray, bytTempArray, bytArray.Length - 2);
                        }


                        Response.ClearContent();
                        Response.ClearHeaders();
                        Response.AddHeader("Content-Disposition", "attachment; filename=" + Convert.ToString(dsAttachments.Tables[0].Rows[0]["Attachment_File_Name"]));


                        if ((!object.ReferenceEquals(dsAttachments.Tables[0].Rows[0]["Attachment_Type"], DBNull.Value)))
                        {
                            if (((Convert.ToString(dsAttachments.Tables[0].Rows[0]["Attachment_Type"]) == "application/vnd.openxmlformats-officedocument.wordprocessingml.document") | (Convert.ToString(dsAttachments.Tables[0].Rows[0]["Attachment_Type"]) == "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet") | (Convert.ToString(dsAttachments.Tables[0].Rows[0]["Attachment_Type"]) == "application/vnd.openxmlformats-officedocument.pres")))
                            {
                                Response.AddHeader("Content-Length", bytTempArray.Length.ToString());
                                Response.BinaryWrite(bytTempArray);
                            }
                            else
                            {
                                Response.AddHeader("Content-Length", content.Length.ToString());
                                Response.BinaryWrite(content);
                            }
                        }
                        else
                        {
                            Response.AddHeader("Content-Length", content.Length.ToString());
                            Response.BinaryWrite(content);
                        }


                        Response.Flush();

                    }
                }
                catch (Exception ex)
                {
                }
            }
        }

        protected void dgrdActualCostCloseOut_ItemCommand1(object source, DataGridCommandEventArgs e)
        {
            try
            {
                if (e.CommandName == "Final_Click")
                {
                    try
                    {
                        Label lblEoConAppID = (Label)e.Item.FindControl("lblFileNameActualCostCloseOut");
                        int intAttachmentId = Convert.ToInt32(lblEoConAppID.Text);
                        string EoiDString = ViewState["EOID"].ToString();
                        int eoiD = Convert.ToInt32(EoiDString);
                        DataSet dsAttachments = new DataSet();

                        if (objEOBA.GetAttachmentsInfoCO(intAttachmentId, eoiD, "Actual", ref dsAttachments))
                        {
                            Response.Clear();
                            if (!(dsAttachments.Tables[0].Rows.Count == 0))
                            {
                                if ((!object.ReferenceEquals(dsAttachments.Tables[0].Rows[0]["Attachment_Type"], DBNull.Value)))
                                {
                                    Response.ContentType = dsAttachments.Tables[0].Rows[0]["Attachment_Type"].ToString();
                                }
                            }
                            else
                            {
                            }
                            byte[] content = null;
                            content = (byte[])dsAttachments.Tables[0].Rows[0]["Attachment_Content"];
                            string len = null;
                            len = Convert.ToString(content.Length);
                            byte[] bytArray = (byte[])dsAttachments.Tables[0].Rows[0]["Attachment_Content"];
                            byte[] bytTempArray = null;
                            if ((bytArray.Length < 2 | bytArray.Length == 2))
                            {
                                bytTempArray = new byte[bytArray.Length + 3];
                                Array.Copy(bytArray, bytTempArray, bytArray.Length);
                            }
                            else
                            {
                                bytTempArray = new byte[bytArray.Length - 1];
                                Array.Copy(bytArray, bytTempArray, bytArray.Length - 2);
                            }
                            Response.ClearContent();
                            Response.ClearHeaders();
                            Response.AddHeader("Content-Disposition", "attachment; filename=" + Convert.ToString(dsAttachments.Tables[0].Rows[0]["Attachment_File_Name"]));
                            if ((!object.ReferenceEquals(dsAttachments.Tables[0].Rows[0]["Attachment_Type"], DBNull.Value)))
                            {
                                if (((Convert.ToString(dsAttachments.Tables[0].Rows[0]["Attachment_Type"]) == "application/vnd.openxmlformats-officedocument.wordprocessingml.document") | (Convert.ToString(dsAttachments.Tables[0].Rows[0]["Attachment_Type"]) == "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet") | (Convert.ToString(dsAttachments.Tables[0].Rows[0]["Attachment_Type"]) == "application/vnd.openxmlformats-officedocument.pres")))
                                {
                                    Response.AddHeader("Content-Length", bytTempArray.Length.ToString());
                                    Response.BinaryWrite(bytTempArray);
                                }
                                else
                                {
                                    Response.AddHeader("Content-Length", content.Length.ToString());
                                    Response.BinaryWrite(content);
                                }
                            }
                            else
                            {
                                Response.AddHeader("Content-Length", content.Length.ToString());
                                Response.BinaryWrite(content);
                            }
                            Response.Flush();
                        }
                    }
                    catch (Exception ex)
                    {
                    }
                }
            }
            catch (Exception ex)
            {
            }
        }

        protected void dgrdActualCostCloseOut_Readonly_ItemCommand1(object source, DataGridCommandEventArgs e)
        {
            try
            {
                if (e.CommandName == "Final_Click")
                {
                    try
                    {
                        Label lblEoConAppID = (Label)e.Item.FindControl("lblFileNameActualCostCloseOutRO");
                        int intAttachmentId = Convert.ToInt32(lblEoConAppID.Text);
                        string EoiDString = ViewState["EOID"].ToString();
                        int eoiD = Convert.ToInt32(EoiDString);
                        DataSet dsAttachments = new DataSet();

                        if (objEOBA.GetAttachmentsInfoCO(intAttachmentId, eoiD, "Actual", ref dsAttachments))
                        {
                            Response.Clear();

                            if (!(dsAttachments.Tables[0].Rows.Count == 0))
                            {
                                if ((!object.ReferenceEquals(dsAttachments.Tables[0].Rows[0]["Attachment_Type"], DBNull.Value)))
                                {
                                    Response.ContentType = dsAttachments.Tables[0].Rows[0]["Attachment_Type"].ToString();
                                }
                            }
                            else
                            {
                            }

                            byte[] content = null;
                            content = (byte[])dsAttachments.Tables[0].Rows[0]["Attachment_Content"];
                            string len = null;
                            len = Convert.ToString(content.Length);


                            byte[] bytArray = (byte[])dsAttachments.Tables[0].Rows[0]["Attachment_Content"];
                            byte[] bytTempArray = null;


                            if ((bytArray.Length < 2 | bytArray.Length == 2))
                            {
                                bytTempArray = new byte[bytArray.Length + 3];
                                Array.Copy(bytArray, bytTempArray, bytArray.Length);
                            }
                            else
                            {
                                bytTempArray = new byte[bytArray.Length - 1];
                                Array.Copy(bytArray, bytTempArray, bytArray.Length - 2);
                            }


                            Response.ClearContent();
                            Response.ClearHeaders();
                            Response.AddHeader("Content-Disposition", "attachment; filename=" + Convert.ToString(dsAttachments.Tables[0].Rows[0]["Attachment_File_Name"]));


                            if ((!object.ReferenceEquals(dsAttachments.Tables[0].Rows[0]["Attachment_Type"], DBNull.Value)))
                            {
                                if (((Convert.ToString(dsAttachments.Tables[0].Rows[0]["Attachment_Type"]) == "application/vnd.openxmlformats-officedocument.wordprocessingml.document") | (Convert.ToString(dsAttachments.Tables[0].Rows[0]["Attachment_Type"]) == "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet") | (Convert.ToString(dsAttachments.Tables[0].Rows[0]["Attachment_Type"]) == "application/vnd.openxmlformats-officedocument.pres")))
                                {
                                    Response.AddHeader("Content-Length", bytTempArray.Length.ToString());
                                    Response.BinaryWrite(bytTempArray);
                                }
                                else
                                {
                                    Response.AddHeader("Content-Length", content.Length.ToString());
                                    Response.BinaryWrite(content);
                                }
                            }
                            else
                            {
                                Response.AddHeader("Content-Length", content.Length.ToString());
                                Response.BinaryWrite(content);
                            }


                            Response.Flush();
                        }
                    }
                    catch (Exception ex)
                    {
                    }
                }
            }
            catch (Exception ex)
            {
            }
        }

        protected void dgrdILR_ItemCommand1(object source, DataGridCommandEventArgs e)
        {
            if (e.CommandName == "Final_Click")
            {
                try
                {
                    Label lblEoConAppID = (Label)e.Item.FindControl("lblFileNameILR");
                    int intAttachmentId = Convert.ToInt32(lblEoConAppID.Text);
                    string EoiDString = ViewState["EOID"].ToString();
                    int eoiD = Convert.ToInt32(EoiDString);
                    DataSet dsAttachments = new DataSet();

                    if (objEOBA.GetAttachmentsInfoCO(intAttachmentId, eoiD, "Learning", ref dsAttachments))
                    {

                        Response.Clear();
                        if (!(dsAttachments.Tables[0].Rows.Count == 0))
                        {
                            if ((!object.ReferenceEquals(dsAttachments.Tables[0].Rows[0]["Attachment_Type"], DBNull.Value)))
                            {
                                Response.ContentType = dsAttachments.Tables[0].Rows[0]["Attachment_Type"].ToString();
                            }
                        }
                        else
                        {
                        }

                        byte[] content = null;
                        content = (byte[])dsAttachments.Tables[0].Rows[0]["Attachment_Content"];
                        string len = null;
                        len = Convert.ToString(content.Length);
                        byte[] bytArray = (byte[])dsAttachments.Tables[0].Rows[0]["Attachment_Content"];
                        byte[] bytTempArray = null;
                        if ((bytArray.Length < 2 | bytArray.Length == 2))
                        {
                            bytTempArray = new byte[bytArray.Length + 3];
                            Array.Copy(bytArray, bytTempArray, bytArray.Length);
                        }
                        else
                        {
                            bytTempArray = new byte[bytArray.Length - 1];
                            Array.Copy(bytArray, bytTempArray, bytArray.Length - 2);
                        }
                        Response.ClearContent();
                        Response.ClearHeaders();
                        Response.AddHeader("Content-Disposition", "attachment; filename=" + Convert.ToString(dsAttachments.Tables[0].Rows[0]["Attachment_File_Name"]));
                        if ((!object.ReferenceEquals(dsAttachments.Tables[0].Rows[0]["Attachment_Type"], DBNull.Value)))
                        {
                            if (((Convert.ToString(dsAttachments.Tables[0].Rows[0]["Attachment_Type"]) == "application/vnd.openxmlformats-officedocument.wordprocessingml.document") | (Convert.ToString(dsAttachments.Tables[0].Rows[0]["Attachment_Type"]) == "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet") | (Convert.ToString(dsAttachments.Tables[0].Rows[0]["Attachment_Type"]) == "application/vnd.openxmlformats-officedocument.pres")))
                            {
                                Response.AddHeader("Content-Length", bytTempArray.Length.ToString());
                                Response.BinaryWrite(bytTempArray);
                            }
                            else
                            {
                                Response.AddHeader("Content-Length", content.Length.ToString());
                                Response.BinaryWrite(content);
                            }
                        }
                        else
                        {
                            Response.AddHeader("Content-Length", content.Length.ToString());
                            Response.BinaryWrite(content);
                        }
                        Response.Flush();
                    }
                }
                catch (Exception ex)
                {
                }
            }
        }

        protected void dgrdILR_Readonly_ItemCommand1(object source, DataGridCommandEventArgs e)
        {
            if (e.CommandName == "Final_Click")
            {
                try
                {
                    Label lblEoConAppID = (Label)e.Item.FindControl("lblFileNameILRRO");
                    int intAttachmentId = Convert.ToInt32(lblEoConAppID.Text);
                    string EoiDString = ViewState["EOID"].ToString();
                    int eoiD = Convert.ToInt32(EoiDString);
                    DataSet dsAttachments = new DataSet();

                    if (objEOBA.GetAttachmentsInfoCO(intAttachmentId, eoiD, "Learning", ref dsAttachments))
                    {
                        Response.Clear();
                        if (!(dsAttachments.Tables[0].Rows.Count == 0))
                        {
                            if ((!object.ReferenceEquals(dsAttachments.Tables[0].Rows[0]["Attachment_Type"], DBNull.Value)))
                            {
                                Response.ContentType = dsAttachments.Tables[0].Rows[0]["Attachment_Type"].ToString();

                            }
                        }
                        else
                        {
                        }

                        byte[] content = null;
                        content = (byte[])dsAttachments.Tables[0].Rows[0]["Attachment_Content"];
                        string len = null;
                        len = Convert.ToString(content.Length);


                        byte[] bytArray = (byte[])dsAttachments.Tables[0].Rows[0]["Attachment_Content"];
                        byte[] bytTempArray = null;


                        if ((bytArray.Length < 2 | bytArray.Length == 2))
                        {
                            bytTempArray = new byte[bytArray.Length + 3];
                            Array.Copy(bytArray, bytTempArray, bytArray.Length);
                        }
                        else
                        {
                            bytTempArray = new byte[bytArray.Length - 1];
                            Array.Copy(bytArray, bytTempArray, bytArray.Length - 2);
                        }


                        Response.ClearContent();
                        Response.ClearHeaders();
                        Response.AddHeader("Content-Disposition", "attachment; filename=" + Convert.ToString(dsAttachments.Tables[0].Rows[0]["Attachment_File_Name"]));


                        if ((!object.ReferenceEquals(dsAttachments.Tables[0].Rows[0]["Attachment_Type"], DBNull.Value)))
                        {
                            if (((Convert.ToString(dsAttachments.Tables[0].Rows[0]["Attachment_Type"]) == "application/vnd.openxmlformats-officedocument.wordprocessingml.document") | (Convert.ToString(dsAttachments.Tables[0].Rows[0]["Attachment_Type"]) == "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet") | (Convert.ToString(dsAttachments.Tables[0].Rows[0]["Attachment_Type"]) == "application/vnd.openxmlformats-officedocument.pres")))
                            {
                                Response.AddHeader("Content-Length", bytTempArray.Length.ToString());
                                Response.BinaryWrite(bytTempArray);
                            }
                            else
                            {
                                Response.AddHeader("Content-Length", content.Length.ToString());
                                Response.BinaryWrite(content);
                            }
                        }
                        else
                        {
                            Response.AddHeader("Content-Length", content.Length.ToString());
                            Response.BinaryWrite(content);
                        }


                        Response.Flush();
                    }

                }
                catch (Exception ex)
                {
                }
            }
        }

        protected void dgrdTestPlansCloseOut_ItemCommand1(object source, DataGridCommandEventArgs e)
        {
            if (e.CommandName == "Final_Click")
            {
                try
                {
                    Label lblEoConAppID = (Label)e.Item.FindControl("lblFileNameTestPlansCloseOut");
                    int intAttachmentId = Convert.ToInt32(lblEoConAppID.Text);
                    string EoiDString = ViewState["EOID"].ToString();
                    int eoiD = Convert.ToInt32(EoiDString);
                    DataSet dsAttachments = new DataSet();

                    if (objEOBA.GetAttachmentsInfoCO(intAttachmentId, eoiD, "Plans_Used", ref dsAttachments))
                    {

                        Response.Clear();
                        if (!(dsAttachments.Tables[0].Rows.Count == 0))
                        {
                            if ((!object.ReferenceEquals(dsAttachments.Tables[0].Rows[0]["Attachment_Type"], DBNull.Value)))
                            {
                                Response.ContentType = dsAttachments.Tables[0].Rows[0]["Attachment_Type"].ToString();
                            }
                        }
                        else
                        {
                        }

                        byte[] content = null;
                        content = (byte[])dsAttachments.Tables[0].Rows[0]["Attachment_Content"];
                        string len = null;
                        len = Convert.ToString(content.Length);


                        byte[] bytArray = (byte[])dsAttachments.Tables[0].Rows[0]["Attachment_Content"];
                        byte[] bytTempArray = null;


                        if ((bytArray.Length < 2 | bytArray.Length == 2))
                        {
                            bytTempArray = new byte[bytArray.Length + 3];
                            Array.Copy(bytArray, bytTempArray, bytArray.Length);
                        }
                        else
                        {
                            bytTempArray = new byte[bytArray.Length - 1];
                            Array.Copy(bytArray, bytTempArray, bytArray.Length - 2);
                        }


                        Response.ClearContent();
                        Response.ClearHeaders();
                        Response.AddHeader("Content-Disposition", "attachment; filename=" + Convert.ToString(dsAttachments.Tables[0].Rows[0]["Attachment_File_Name"]));


                        if ((!object.ReferenceEquals(dsAttachments.Tables[0].Rows[0]["Attachment_Type"], DBNull.Value)))
                        {
                            if (((Convert.ToString(dsAttachments.Tables[0].Rows[0]["Attachment_Type"]) == "application/vnd.openxmlformats-officedocument.wordprocessingml.document") | (Convert.ToString(dsAttachments.Tables[0].Rows[0]["Attachment_Type"]) == "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet") | (Convert.ToString(dsAttachments.Tables[0].Rows[0]["Attachment_Type"]) == "application/vnd.openxmlformats-officedocument.pres")))
                            {
                                Response.AddHeader("Content-Length", bytTempArray.Length.ToString());
                                Response.BinaryWrite(bytTempArray);
                            }
                            else
                            {
                                Response.AddHeader("Content-Length", content.Length.ToString());
                                Response.BinaryWrite(content);
                            }
                        }
                        else
                        {
                            Response.AddHeader("Content-Length", content.Length.ToString());
                            Response.BinaryWrite(content);
                        }
                        Response.Flush();
                    }
                }
                catch (Exception ex)
                {
                }

            }
        }

        protected void dgrdTestPlansCloseOut_Readonly_ItemCommand1(object source, DataGridCommandEventArgs e)
        {
            if (e.CommandName == "Final_Click")
            {
                try
                {
                    Label lblEoConAppID = (Label)e.Item.FindControl("lblFileNameTestPlansCloseOutRO");
                    int intAttachmentId = Convert.ToInt32(lblEoConAppID.Text);
                    string EoiDString = ViewState["EOID"].ToString();
                    int eoiD = Convert.ToInt32(EoiDString);
                    DataSet dsAttachments = new DataSet();


                    if (objEOBA.GetAttachmentsInfoCO(intAttachmentId, eoiD, "Plans_Used", ref dsAttachments))
                    {
                        Response.Clear();
                        if (!(dsAttachments.Tables[0].Rows.Count == 0))
                        {
                            if ((!object.ReferenceEquals(dsAttachments.Tables[0].Rows[0]["Attachment_Type"], DBNull.Value)))
                            {
                                Response.ContentType = dsAttachments.Tables[0].Rows[0]["Attachment_Type"].ToString();
                            }
                        }

                        byte[] content = null;
                        content = (byte[])dsAttachments.Tables[0].Rows[0]["Attachment_Content"];
                        string len = null;
                        len = Convert.ToString(content.Length);
                        byte[] bytArray = (byte[])dsAttachments.Tables[0].Rows[0]["Attachment_Content"];
                        byte[] bytTempArray = null;
                        if ((bytArray.Length < 2 || bytArray.Length == 2))
                        {
                            bytTempArray = new byte[bytArray.Length + 3];
                            Array.Copy(bytArray, bytTempArray, bytArray.Length);
                        }
                        else
                        {
                            bytTempArray = new byte[bytArray.Length - 1];
                            Array.Copy(bytArray, bytTempArray, bytArray.Length - 2);
                        }
                        Response.ClearContent();
                        Response.ClearHeaders();
                        Response.AddHeader("Content-Disposition", "attachment; filename=" + Convert.ToString(dsAttachments.Tables[0].Rows[0]["Attachment_File_Name"]));

                        if ((!object.ReferenceEquals(dsAttachments.Tables[0].Rows[0]["Attachment_Type"], DBNull.Value)))
                        {
                            if (((Convert.ToString(dsAttachments.Tables[0].Rows[0]["Attachment_Type"]) == "application/vnd.openxmlformats-officedocument.wordprocessingml.document") | (Convert.ToString(dsAttachments.Tables[0].Rows[0]["Attachment_Type"]) == "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet") | (Convert.ToString(dsAttachments.Tables[0].Rows[0]["Attachment_Type"]) == "application/vnd.openxmlformats-officedocument.pres")))
                            {
                                Response.AddHeader("Content-Length", bytTempArray.Length.ToString());
                                Response.BinaryWrite(bytTempArray);
                            }
                            else
                            {
                                Response.AddHeader("Content-Length", content.Length.ToString());
                                Response.BinaryWrite(content);
                            }
                        }
                        else
                        {
                            Response.AddHeader("Content-Length", content.Length.ToString());
                            Response.BinaryWrite(content);
                        }


                        Response.Flush();
                    }
                }
                catch (Exception ex)
                {
                }

            }
        }

        protected void dgrdCOReport_ItemCommand1(object source, DataGridCommandEventArgs e)
        {
            if (e.CommandName == "Final_Click")
            {
                try
                {
                    Label lblEoConAppID = (Label)e.Item.FindControl("lblFileNameCOReport");
                    int intAttachmentId = Convert.ToInt32(lblEoConAppID.Text);
                    string EoiDString = ViewState["EOID"].ToString();
                    int eoiD = Convert.ToInt32(EoiDString);
                    DataSet dsAttachments = new DataSet();

                    if (objEOBA.GetAttachmentsInfoCO(intAttachmentId, eoiD, "Report", ref dsAttachments))
                    {
                        Response.Clear();

                        if (!(dsAttachments.Tables[0].Rows.Count == 0))
                        {
                            if ((!object.ReferenceEquals(dsAttachments.Tables[0].Rows[0]["Attachment_Type"], DBNull.Value)))
                            {
                                Response.ContentType = dsAttachments.Tables[0].Rows[0]["Attachment_Type"].ToString();
                            }
                        }
                        else
                        {
                        }

                        byte[] content = null;
                        content = (byte[])dsAttachments.Tables[0].Rows[0]["Attachment_Content"];
                        string len = null;
                        len = Convert.ToString(content.Length);


                        byte[] bytArray = (byte[])dsAttachments.Tables[0].Rows[0]["Attachment_Content"];
                        byte[] bytTempArray = null;


                        if ((bytArray.Length < 2 | bytArray.Length == 2))
                        {
                            bytTempArray = new byte[bytArray.Length + 3];
                            Array.Copy(bytArray, bytTempArray, bytArray.Length);
                        }
                        else
                        {
                            bytTempArray = new byte[bytArray.Length - 1];
                            Array.Copy(bytArray, bytTempArray, bytArray.Length - 2);
                        }


                        Response.ClearContent();
                        Response.ClearHeaders();
                        Response.AddHeader("Content-Disposition", "attachment; filename=" + Convert.ToString(dsAttachments.Tables[0].Rows[0]["Attachment_File_Name"]));


                        if ((!object.ReferenceEquals(dsAttachments.Tables[0].Rows[0]["Attachment_Type"], DBNull.Value)))
                        {
                            if (((Convert.ToString(dsAttachments.Tables[0].Rows[0]["Attachment_Type"]) == "application/vnd.openxmlformats-officedocument.wordprocessingml.document") | (Convert.ToString(dsAttachments.Tables[0].Rows[0]["Attachment_Type"]) == "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet") | (Convert.ToString(dsAttachments.Tables[0].Rows[0]["Attachment_Type"]) == "application/vnd.openxmlformats-officedocument.pres")))
                            {
                                Response.AddHeader("Content-Length", bytTempArray.Length.ToString());
                                Response.BinaryWrite(bytTempArray);
                            }
                            else
                            {
                                Response.AddHeader("Content-Length", content.Length.ToString());
                                Response.BinaryWrite(content);
                            }
                        }
                        else
                        {
                            Response.AddHeader("Content-Length", content.Length.ToString());
                            Response.BinaryWrite(content);
                        }


                        Response.Flush();
                    }
                }
                catch (Exception ex)
                {
                }

            }
        }

        protected void dgrdCOReport_Readonly_ItemCommand1(object source, DataGridCommandEventArgs e)
        {
            if (e.CommandName == "Final_Click")
            {
                try
                {
                    Label lblEoConAppID = (Label)e.Item.FindControl("lblFileNameCOReportRO");
                    int intAttachmentId = Convert.ToInt32(lblEoConAppID.Text);
                    string EoiDString = ViewState["EOID"].ToString();
                    int eoiD = Convert.ToInt32(EoiDString);
                    DataSet dsAttachments = new DataSet();


                    if (objEOBA.GetAttachmentsInfoCO(intAttachmentId, eoiD, "Report", ref dsAttachments))
                    {

                        Response.Clear();

                        if (!(dsAttachments.Tables[0].Rows.Count == 0))
                        {
                            if ((!object.ReferenceEquals(dsAttachments.Tables[0].Rows[0]["Attachment_Type"], DBNull.Value)))
                            {
                                Response.ContentType = dsAttachments.Tables[0].Rows[0]["Attachment_Type"].ToString();
                            }
                        }
                        else
                        {
                        }

                        byte[] content = null;
                        content = (byte[])dsAttachments.Tables[0].Rows[0]["Attachment_Content"];
                        string len = null;
                        len = Convert.ToString(content.Length);


                        byte[] bytArray = (byte[])dsAttachments.Tables[0].Rows[0]["Attachment_Content"];
                        byte[] bytTempArray = null;


                        if ((bytArray.Length < 2 | bytArray.Length == 2))
                        {
                            bytTempArray = new byte[bytArray.Length + 3];
                            Array.Copy(bytArray, bytTempArray, bytArray.Length);
                        }
                        else
                        {
                            bytTempArray = new byte[bytArray.Length - 1];
                            Array.Copy(bytArray, bytTempArray, bytArray.Length - 2);
                        }


                        Response.ClearContent();
                        Response.ClearHeaders();
                        Response.AddHeader("Content-Disposition", "attachment; filename=" + Convert.ToString(dsAttachments.Tables[0].Rows[0]["Attachment_File_Name"]));


                        if ((!object.ReferenceEquals(dsAttachments.Tables[0].Rows[0]["Attachment_Type"], DBNull.Value)))
                        {
                            if (((Convert.ToString(dsAttachments.Tables[0].Rows[0]["Attachment_Type"]) == "application/vnd.openxmlformats-officedocument.wordprocessingml.document") | (Convert.ToString(dsAttachments.Tables[0].Rows[0]["Attachment_Type"]) == "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet") | (Convert.ToString(dsAttachments.Tables[0].Rows[0]["Attachment_Type"]) == "application/vnd.openxmlformats-officedocument.pres")))
                            {
                                Response.AddHeader("Content-Length", bytTempArray.Length.ToString());
                                Response.BinaryWrite(bytTempArray);
                            }
                            else
                            {
                                Response.AddHeader("Content-Length", content.Length.ToString());
                                Response.BinaryWrite(content);
                            }
                        }
                        else
                        {
                            Response.AddHeader("Content-Length", content.Length.ToString());
                            Response.BinaryWrite(content);
                        }


                        Response.Flush();

                    }
                }
                catch (Exception ex)
                {
                }

            }
        }

        protected void lnkCostSheetCloseOut_Click(object sender, EventArgs e)
        {

            try
            {
                string strPath = Server.MapPath("..\\Common\\Templates\\EO FY12-13 Cost Worksheet 5-25-12.xls");
                Response.AddHeader("Content-Disposition", "attachment;filename=EO FY12-13 Cost Worksheet 5-25-12.xls");
                Response.TransmitFile(strPath);
                Response.End();
            }
            catch (Exception ex)
            {
            }
        }

        protected void lnkFormulaCardTemplate_Click1(object sender, EventArgs e)
        {
            try
            {
                string strPath = Server.MapPath("..\\Common\\Templates\\FC Exception Template r030722.xls");
                Response.AddHeader("Content-Disposition", "attachment;filename=FC Exception Template r030722.xls");
                Response.TransmitFile(strPath);
                Response.End();
            }
            catch (Exception ex)
            {
            }
        }

        protected void rbRawMaterial_SelectedIndexChanged(object sender, EventArgs e)
        {
            DataSet dsDCOOrdinator = null;
            try
            {
                if (!(drpCategoryDB.SelectedItem.Value == "--Select a Category--"))
                {
                    if (rbRawMaterial.Items[0].Selected)
                    {
                        //dsDCOOrdinator = objClsEO.GET_EO_Data_Coordinator_By_Category(drpCategoryDB.SelectedItem.Value);
                        if (objEOBA.GET_EO_Data_Coordinator_By_Category(drpCategoryDB.SelectedItem.Value, ref dsDCOOrdinator))
                        {
                            if ((dsDCOOrdinator != null))
                            {
                                if (!(dsDCOOrdinator.Tables.Count == 0))
                                {
                                    if (!(dsDCOOrdinator.Tables[0].Rows.Count == 0))
                                    {
                                        //Dim s As String = dsDCOOrdinator.Tables[0).Rows(0).Item(3)
                                        //script = "<script>alert('Make sure you list the GCAS numbers below. \\n\\n NOTE: If these codes are not already established in CSS, please complete a CSS request. \\n\\n If you need assistance, please contact  " + dsDCOOrdinator.Tables[0].Rows[0]["Data_Coordinator_Name"] + "(" + dsDCOOrdinator.Tables[0].Rows[0]["Phone_Number"] + ")" + "');</script>";
                                        //Page.RegisterStartupScript("clientscript", script);

                                        ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "alert('Make sure you list the GCAS numbers below. \\n\\n NOTE: If these codes are not already established in CSS, please complete a CSS request. \\n\\n If you need assistance, please contact  " + dsDCOOrdinator.Tables[0].Rows[0]["Data_Coordinator_Name"] + "(" + dsDCOOrdinator.Tables[0].Rows[0]["Phone_Number"] + ")" + "');", true);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
            }
            finally
            {
                objEOBA = null;
                dsDCOOrdinator = null;
            }
        }

        protected void rbParentRolls_SelectedIndexChanged(object sender, EventArgs e)
        {
            DataSet dsDCOOrdinator = null;
            try
            {
                if (!(drpCategoryDB.SelectedItem.Value == "--Select a Category--"))
                {
                    if (rbParentRolls.Items[0].Selected)
                    {

                        // dsDCOOrdinator = objClsEO.GET_EO_Data_Coordinator_By_Category(drpCategoryDB.SelectedItem.Value);
                        if (objEOBA.GET_EO_Data_Coordinator_By_Category(drpCategoryDB.SelectedItem.Value, ref dsDCOOrdinator))
                        {
                            if ((dsDCOOrdinator != null))
                            {
                                if (!(dsDCOOrdinator.Tables.Count == 0))
                                {
                                    if (!(dsDCOOrdinator.Tables[0].Rows.Count == 0))
                                    {
                                        //Dim s As String = dsDCOOrdinator.Tables[0).Rows(0).Item(3)
                                        //script = "<script>alert('Make sure you list the GCAS numbers below. \\n\\n NOTE: If these codes are not already established in CSS, please complete a CSS request. \\n\\n If you need assistance, please contact  " + dsDCOOrdinator.Tables[0].Rows[0]["Data_Coordinator_Name"] + "(" + dsDCOOrdinator.Tables[0].Rows[0]["Phone_Number"] + ")" + "');</script>";
                                        //Page.RegisterStartupScript("clientscript", script);

                                        ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "alert('Make sure you list the GCAS numbers below. \\n\\n NOTE: If these codes are not already established in CSS, please complete a CSS request. \\n\\n If you need assistance, please contact  " + dsDCOOrdinator.Tables[0].Rows[0]["Data_Coordinator_Name"] + "(" + dsDCOOrdinator.Tables[0].Rows[0]["Phone_Number"] + ")" + "');", true);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
            }
            finally
            {
                dsDCOOrdinator = null;
                objEOBA = null;
            }
        }

        protected void rbInterMaterials_SelectedIndexChanged(object sender, EventArgs e)
        {
            DataSet dsDCOOrdinator = null;
            try
            {
                if (!(drpCategoryDB.SelectedItem.Value == "--Select a Category--"))
                {
                    if (rbInterMaterials.Items[0].Selected)
                    {

                        //dsDCOOrdinator = objClsEO.GET_EO_Data_Coordinator_By_Category(drpCategoryDB.SelectedItem.Value);
                        if (objEOBA.GET_EO_Data_Coordinator_By_Category(drpCategoryDB.SelectedItem.Value, ref dsDCOOrdinator))
                        {
                            if ((dsDCOOrdinator != null))
                            {
                                if (!(dsDCOOrdinator.Tables.Count == 0))
                                {
                                    if (!(dsDCOOrdinator.Tables[0].Rows.Count == 0))
                                    {
                                        //script = "<script>alert('Make sure you list the GCAS numbers below. \\n\\n NOTE: If these codes are not already established in CSS, please complete a CSS request. \\n\\n If you need assistance, please contact  " + dsDCOOrdinator.Tables[0].Rows[0]["Data_Coordinator_Name"] + "(" + dsDCOOrdinator.Tables[0].Rows[0]["Phone_Number"] + ")" + "');</script>";
                                        //Page.RegisterStartupScript("clientscript", script);

                                        ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "alert('Make sure you list the GCAS numbers below. \\n\\n NOTE: If these codes are not already established in CSS, please complete a CSS request. \\n\\n If you need assistance, please contact  " + dsDCOOrdinator.Tables[0].Rows[0]["Data_Coordinator_Name"] + "(" + dsDCOOrdinator.Tables[0].Rows[0]["Phone_Number"] + ")" + "');", true);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
            }
            finally
            {
                dsDCOOrdinator = null;
                objEOBA = null;
            }
        }

        protected void lnkTestPlanTemplate2_Click(object sender, EventArgs e)
        {
            try
            {
                string strPath = Server.MapPath("..\\Common\\Templates\\EO Test Plan template 030703.doc");
                Response.AddHeader("Content-Disposition", "attachment;filename=EO Test Plan template 030703.doc");
                Response.TransmitFile(strPath);
                Response.End();
            }
            catch (Exception ex)
            {
            }
        }

        protected void lnkCloseTestPlanTemplate2_Click(object sender, EventArgs e)
        {
            try
            {
                string strPath = Server.MapPath("..\\Common\\Templates\\EO Test Plan template 030703.doc");
                Response.AddHeader("Content-Disposition", "attachment;filename=EO Test Plan template 030703.doc");
                Response.TransmitFile(strPath);
                Response.End();
            }
            catch (Exception ex)
            {
            }
        }

        protected void lnkConGrp_Click(object sender, EventArgs e)
        {
            DataSet dsConcGroup = new DataSet();
            int EoId = 0;

            if (objEOBA.GET_EO_Preliminary(Convert.ToInt32(ViewState["EOID"]), ref dsConcGroup))
            {

                if (dsConcGroup.Tables[14].Rows.Count == 0)
                {
                }
                else
                {
                    dgrConcurenceGrp.Visible = true;
                    dgrConcurenceGrp.DataSource = dsConcGroup.Tables[14];
                    dgrConcurenceGrp.DataBind();
                    if (dgrConcurenceGrp.Items.Count == 0)
                    {
                    }
                    else
                    {
                        dgrConcurenceGrp.Visible = true;
                        int dlRowCount = 0;
                        for (dlRowCount = 0; dlRowCount <= dgrConcurenceGrp.Items.Count - 1; dlRowCount++)
                        {
                            if (object.ReferenceEquals(dsConcGroup.Tables[14].Rows[dlRowCount]["Is_Responded"], System.DBNull.Value))
                            {
                                dgrConcurenceGrp.Items[dlRowCount].FindControl("lnkDeclined").Visible = true;
                                dgrConcurenceGrp.Items[dlRowCount].FindControl("lnkApproval").Visible = true;
                            }
                            else if (dsConcGroup.Tables[14].Rows[dlRowCount]["Is_Responded"].ToString() == "No Response")
                            {
                                if (objSecurity.UserName.ToUpper() == txtCooriginator.Text.ToUpper() || objSecurity.UserName.ToUpper() == lblOriginator.Text.ToUpper())
                                {
                                    if (objSecurity.UserName == dsConcGroup.Tables[14].Rows[dlRowCount]["Approver_Name"])
                                    {
                                        //    If UCase(objSecurity.UserName) = UCase("srinivasachary.n") Then
                                        dgrConcurenceGrp.Items[dlRowCount].FindControl("lnkDeclined").Visible = true;
                                        dgrConcurenceGrp.Items[dlRowCount].FindControl("lnkApproval").Visible = true;
                                        dgrConcurenceGrp.Items[dlRowCount].FindControl("lnkBackUp").Visible = true;
                                    }
                                    else
                                    {
                                        dgrConcurenceGrp.Items[dlRowCount].FindControl("lnkBackUp").Visible = true;
                                        dgrConcurenceGrp.Items[dlRowCount].FindControl("lnkDeclined").Visible = false;
                                        dgrConcurenceGrp.Items[dlRowCount].FindControl("lnkApproval").Visible = false;
                                    }
                                }
                                else if (objSecurity.UserName == dsConcGroup.Tables[14].Rows[dlRowCount]["Approver_Name"])
                                {
                                    dgrConcurenceGrp.Items[dlRowCount].FindControl("lnkDeclined").Visible = true;
                                    dgrConcurenceGrp.Items[dlRowCount].FindControl("lnkApproval").Visible = true;
                                    dgrConcurenceGrp.Items[dlRowCount].FindControl("lnkBackUp").Visible = false;
                                }
                                else
                                {
                                    dgrConcurenceGrp.Items[dlRowCount].FindControl("lnkDeclined").Visible = false;
                                    dgrConcurenceGrp.Items[dlRowCount].FindControl("lnkApproval").Visible = false;
                                    dgrConcurenceGrp.Items[dlRowCount].FindControl("lnkBackUp").Visible = false;
                                }

                            }
                            else if (dsConcGroup.Tables[14].Rows[dlRowCount]["Is_Responded"].ToString() == "Approved")
                            {
                                dgrConcurenceGrp.Items[dlRowCount].FindControl("lnkDeclined").Visible = false;
                                dgrConcurenceGrp.Items[dlRowCount].FindControl("lnkApproval").Visible = false;
                                dgrConcurenceGrp.Items[dlRowCount].FindControl("lnkBackUp").Visible = false;
                                //lnkDeclined.Visible = true
                            }
                            else if (dsConcGroup.Tables[14].Rows[dlRowCount]["Is_Responded"].ToString() == "Declined")
                            {
                                dgrConcurenceGrp.Items[dlRowCount].FindControl("lnkApproval").Visible = false;
                                dgrConcurenceGrp.Items[dlRowCount].FindControl("lnkDeclined").Visible = false;
                                dgrConcurenceGrp.Items[dlRowCount].FindControl("lnkBackUp").Visible = false;
                            }
                        }
                    }
                }
            }
        }

        protected void dgrConcurenceGrp_ItemCommand(object source, DataGridCommandEventArgs e)
        {
            if (e.CommandName == "Approval_Link")
            {
                Label lblApprName = (Label)e.Item.FindControl("lnkapprName");
                Label lblEoConAppID = (Label)e.Item.FindControl("lblConAppID");
                Label lblConGrpID = (Label)e.Item.FindControl("lblConAppGrpID");
                //string script = null;
                //script = "<script>concurenceConfirm('" + lblEoConAppID.Text + "','" + ViewState["EOID"] + "','Approved','" + lblConGrpID.Text + "','" + lblApprName.Text + "');</script> ";
                //Page.RegisterStartupScript("db_error_message", script);

                ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "concurenceConfirm('" + lblEoConAppID.Text + "','" + ViewState["EOID"] + "','Approved','" + lblConGrpID.Text + "','" + lblApprName.Text + "');", true);
            }
            if (e.CommandName == "Declined_Link")
            {
                LinkButton lnkApproval = (LinkButton)e.Item.FindControl("lnkApproval");
                LinkButton lnkDeclined = (LinkButton)e.Item.FindControl("lnkDeclined");
                Label lblApprName = (Label)e.Item.FindControl("lnkapprName");
                Label lblEoConAppID = (Label)e.Item.FindControl("lblConDecAppID");
                Label lblConGrpID = (Label)e.Item.FindControl("lblConDecGrpID");
                //string script = null;
                //script = "<script>concurenceConfirm('" + lblEoConAppID.Text + "','" + ViewState["EOID"] + "','Declined','" + lblConGrpID.Text + "','" + lblApprName.Text + "');</script> ";
                //Page.RegisterStartupScript("db_error_message", script);

                ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "concurenceConfirm('" + lblEoConAppID.Text + "','" + ViewState["EOID"] + "','Declined','" + lblConGrpID.Text + "','" + lblApprName.Text + "');", true);
            }
            //if (e.CommandName == "Backup_Link")
            //{
            //    //'code
            //    Label lblEoConAppID = (Label)e.Item.FindControl("lblConAppID");
            //    Label lblConGrpID = (Label)e.Item.FindControl("lblBakConGrpID");
            //    Label lblOriginalApprName = (Label)e.Item.FindControl("lblapprName");
            //    string BackUpApprover = hdnApprover.Text;
            //    string origApprover = lblOriginalApprName.Text;
            //    string BkUpApprover = BackUpApprover;
            //    int conAppID = Convert.ToInt32(lblEoConAppID.Text);

            //    if (!string.IsNullOrEmpty(BackUpApprover))
            //    {
            //        objEOBA.AddBackUpApprover(conAppID, BackUpApprover);
            //        //BusinessObject.MUREO.BusinessObject.SendConcurrence objAddSiteTestConcurrence = new BusinessObject.MUREO.BusinessObject.SendConcurrence();
            //        //objAddSiteTestConcurrence.AddBackUpApprover;
            //    }
            //    else
            //    {
            //        return;
            //    }

            //    try
            //    {
            //        int i = 0;

            //        i = origApprover.IndexOf(" ");
            //        origApprover = origApprover.Substring(i);
            //        origApprover = origApprover.Replace("-", ".");
            //        origApprover = origApprover.Replace(" ", "");
            //        i = BkUpApprover.IndexOf(" ");
            //        BkUpApprover = BkUpApprover.Substring(i);
            //        BkUpApprover = BkUpApprover.Replace("-", ".");
            //        BkUpApprover = BkUpApprover.Replace(" ", "");


            //    }
            //    catch (Exception ex)
            //    {
            //        string str = ex.Message;
            //    }

            //    string strMailFrom = objSecurity.UserName;
            //    int intPosOriginator = 0;
            //    try
            //    {
            //        if (!string.IsNullOrEmpty(strMailFrom.Trim()))
            //        {
            //            intPosOriginator = strMailFrom.IndexOf(" ");
            //            strMailFrom = strMailFrom.Substring(intPosOriginator);
            //            strMailFrom = strMailFrom.Replace("-", ".");
            //        }
            //    }
            //    catch (Exception ex)
            //    {
            //    }

            //    clsSendMail objSendMail = new clsSendMail();
            //    bool IsMailSend = false;
            //    string SendersList = null;
            //    try
            //    {
            //        SendersList = BkUpApprover + "@pg.com";
            //        objSendMail.SendTo = SendersList;
            //        mandataroinfoforEmail();
            //        string strURL = null;
            //        strURL = "http://" + ViewState["servername"] + "/Common/NewEO.aspx?From=MailEdit&EOID=" + ViewState["EOID"];
            //        string strLockURL = null;
            //        strLockURL = "http://" + ViewState["servername"] + "/Common/NewEO.aspx?From=ForEOLock&EOID=" + ViewState["EOID"];
            //        objSendMail.MailSubject = "Please Review this EO Document-EO Title: " + txtTitle.Text;
            //        objSendMail.SendFrom = strMailFrom + "@pg.com";
            //        objSendMail.MailBody = "Dear Concurrer," + "<br>" + "<br>" + "This message was originally sent to " + lblOriginalApprName.Text + " who is out of the office." + "<br>" + "<br>" + "You are listed as the back-up approver for this EO." + "<br>" + "<br>" + "Please follow the link to see this EO." + "<br>" + "<br><a href='" + strLockURL + "'>" + strLockURL + "</a><br>" + "<br>" + "Note :Use this link to open the EO in Edit Mode." + "<br>" + "<br><a href='" + strURL + "'>" + strURL + "</a><br>" + "<br>" + "EO Number is " + ViewState["EONum"] + "<br>" + "EO Title is " + ViewState["EOTitle"] + "<br>" + "EO Location is " + ViewState["PlantName"] + "<br><br>" + "Thank you," + "<br>" + objSecurity.UserName;
            //        string IsMailSendex = string.Empty;
            //        IsMailSend = clsSendMail.fnSendMail(objSendMail);
            //    }
            //    catch (Exception ex)
            //    {
            //        string str = ex.Message;
            //    }

            //    try
            //    {
            //        mandataroinfoforEmail();
            //        string strURL = null;
            //        strURL = "http://" + ViewState["servername"] + "/Common/NewEO.aspx?From=ForEOLock&EOID=" + ViewState["EOID"];
            //        objSendMail.SendTo = origApprover + "@pg.com";
            //        objSendMail.MailSubject = "Please Review this EO Document-EO Title: " + ViewState["EOTitle"];
            //        objSendMail.SendFrom = strMailFrom + "@pg.com";
            //        objSendMail.MailBody = "Dear Original Approver," + "<br>" + "<br>" + "You were originally listed as an appover for this EO.In your absence,this has been sent to " + hdnApprover.Text + " for your back up." + "<br>" + "<br>" + "No further action is needed on your part." + "<br>" + "<br>" + "NOTE: Use this link to open in Read Only Mode." + "<br>" + "<br><a href='" + strURL + "'>" + strURL + "</a><br>" + "<br><br>" + "EO Number is " + ViewState["EONum"] + "<br>" + "EO Title is " + ViewState["EOTitle"] + "<br>" + "EO Location is " + ViewState["PlantName"] + "<br><br>" + "Thank you," + "<br>" + objSecurity.UserName;
            //        string IsMailSendex = string.Empty;
            //        IsMailSend = clsSendMail.fnSendMail(objSendMail);
            //    }
            //    catch (Exception ex)
            //    {
            //        string str = ex.Message;
            //    }

            //    string script = null;
            //    int intEoID = 0;
            //    intEoID = Convert.ToInt32(ViewState["EOID"]);
            //    string UserName = objSecurity.UserName;
            //    DataSet ds = null;
            //    ds = new DataSet();
            //    if (objEOBA.GET_EO_Preliminary(Convert.ToInt32(ViewState["EOID"]), ref ds))
            //    {

            //        if (!(ds.Tables[14].Rows.Count == 0))
            //        {
            //            dgrConcurenceGrp.Visible = true;
            //            dgrConcurenceGrp.DataSource = ds.Tables[14];
            //            dgrConcurenceGrp.DataBind();

            //            int dlRowCount = 0;
            //            if (dgrConcurenceGrp.Items.Count == 0)
            //            {
            //            }
            //            else
            //            {
            //                dgrConcurenceGrp.Visible = true;
            //                for (dlRowCount = 0; dlRowCount <= dgrConcurenceGrp.Items.Count - 1; dlRowCount++)
            //                {
            //                    if (object.ReferenceEquals(ds.Tables[14].Rows[dlRowCount]["Is_Responded"], System.DBNull.Value))
            //                    {
            //                        dgrConcurenceGrp.Items[dlRowCount].FindControl("lnkDeclined").Visible = true;
            //                        dgrConcurenceGrp.Items[dlRowCount].FindControl("lnkApproval").Visible = true;
            //                    }
            //                    else if (ds.Tables[14].Rows[dlRowCount]["Is_Responded"].ToString() == "No Response")
            //                    {
            //                        if (objSecurity.UserName.ToUpper() == txtCooriginator.Text.ToUpper() | objSecurity.UserName.ToUpper() == lblOriginator.Text.ToUpper())
            //                        {
            //                            if (objSecurity.UserName.ToUpper() == ds.Tables[14].Rows[dlRowCount]["Approver_Name"].ToString().ToUpper())
            //                            {
            //                                //    If UCase(objSecurity.UserName) = UCase("srinivasachary.n") Then
            //                                dgrConcurenceGrp.Items[dlRowCount].FindControl("lnkDeclined").Visible = true;
            //                                dgrConcurenceGrp.Items[dlRowCount].FindControl("lnkApproval").Visible = true;
            //                                dgrConcurenceGrp.Items[dlRowCount].FindControl("lnkBackUp").Visible = true;
            //                            }
            //                            else
            //                            {
            //                                dgrConcurenceGrp.Items[dlRowCount].FindControl("lnkBackUp").Visible = true;
            //                                dgrConcurenceGrp.Items[dlRowCount].FindControl("lnkDeclined").Visible = false;
            //                                dgrConcurenceGrp.Items[dlRowCount].FindControl("lnkApproval").Visible = false;
            //                            }
            //                        }
            //                        else if (objSecurity.UserName.ToUpper() == ds.Tables[14].Rows[dlRowCount]["Approver_Name"].ToString().ToUpper())
            //                        {
            //                            dgrConcurenceGrp.Items[dlRowCount].FindControl("lnkDeclined").Visible = true;
            //                            dgrConcurenceGrp.Items[dlRowCount].FindControl("lnkApproval").Visible = true;
            //                            dgrConcurenceGrp.Items[dlRowCount].FindControl("lnkBackUp").Visible = false;
            //                        }
            //                        else
            //                        {
            //                            dgrConcurenceGrp.Items[dlRowCount].FindControl("lnkDeclined").Visible = false;
            //                            dgrConcurenceGrp.Items[dlRowCount].FindControl("lnkApproval").Visible = false;
            //                            dgrConcurenceGrp.Items[dlRowCount].FindControl("lnkBackUp").Visible = false;
            //                        }

            //                    }
            //                    else if (ds.Tables[14].Rows[dlRowCount]["Is_Responded"].ToString() == "Approved")
            //                    {
            //                        dgrConcurenceGrp.Items[dlRowCount].FindControl("lnkDeclined").Visible = false;
            //                        dgrConcurenceGrp.Items[dlRowCount].FindControl("lnkApproval").Visible = false;
            //                        dgrConcurenceGrp.Items[dlRowCount].FindControl("lnkBackUp").Visible = false;
            //                        //lnkDeclined.Visible = true
            //                    }
            //                    else if (ds.Tables[14].Rows[dlRowCount]["Is_Responded"].ToString() == "Declined")
            //                    {
            //                        dgrConcurenceGrp.Items[dlRowCount].FindControl("lnkApproval").Visible = false;
            //                        dgrConcurenceGrp.Items[dlRowCount].FindControl("lnkDeclined").Visible = false;
            //                        dgrConcurenceGrp.Items[dlRowCount].FindControl("lnkBackUp").Visible = false;
            //                    }
            //                }
            //            }
            //        }
            //    }
            //}
        }
        protected void btnApp_Click(object sender, EventArgs e)
        {

            //'code
            //Label lblEoConAppID = (Label)e.Item.FindControl("lblConAppID");
            //Label lblConGrpID = (Label)e.Item.FindControl("lblBakConGrpID");
            //Label lblOriginalApprName = (Label)e.Item.FindControl("lblapprName");
            //string BackUpApprover = hdnApprover.Text;
            string origApprover = hdnOrigAppr.Value;
            string BkUpApprover = hdnApprover.Text;
            int conAppID = Convert.ToInt32(hdnConAppID.Value);
            //string BkUpApprover = hdnApprover.Text;

            if (!string.IsNullOrEmpty(hdnApprover.Text))
            {
                objEOBA.AddBackUpApprover(conAppID, hdnApprover.Text);
                //BusinessObject.MUREO.BusinessObject.SendConcurrence objAddSiteTestConcurrence = new BusinessObject.MUREO.BusinessObject.SendConcurrence();
                //objAddSiteTestConcurrence.AddBackUpApprover;
            }
            else
            {
                return;
            }

            try
            {
                int i = 0;

                i = origApprover.IndexOf(" ");
                origApprover = origApprover.Substring(i);
                origApprover = origApprover.Replace("-", ".");
                origApprover = origApprover.Replace(" ", "");
                i = BkUpApprover.IndexOf(" ");
                BkUpApprover = BkUpApprover.Substring(i);
                BkUpApprover = BkUpApprover.Replace("-", ".");
                BkUpApprover = BkUpApprover.Replace(" ", "");


            }
            catch (Exception ex)
            {
                string str = ex.Message;
            }

            string strMailFrom = objSecurity.UserName;
            int intPosOriginator = 0;
            try
            {
                if (!string.IsNullOrEmpty(strMailFrom.Trim()))
                {
                    intPosOriginator = strMailFrom.IndexOf(" ");
                    strMailFrom = strMailFrom.Substring(intPosOriginator);
                    strMailFrom = strMailFrom.Replace("-", ".");
                }
            }
            catch (Exception ex)
            {
            }

            clsSendMail objSendMail = new clsSendMail();
            bool IsMailSend = false;
            string SendersList = null;
            try
            {
                SendersList = BkUpApprover + "@pg.com";
                objSendMail.SendTo = SendersList;
                mandataroinfoforEmail();
                string strURL = null;
                strURL = "http://" + ViewState["servername"] + "/Common/NewEO.aspx?From=MailEdit&EOID=" + ViewState["EOID"];
                string strLockURL = null;
                strLockURL = "http://" + ViewState["servername"] + "/Common/NewEO.aspx?From=ForEOLock&EOID=" + ViewState["EOID"];
                objSendMail.MailSubject = "Please Review this EO Document-EO Title: " + txtTitle.Text;
                objSendMail.SendFrom = strMailFrom + "@pg.com";
                objSendMail.MailBody = "Dear Concurrer," + "<br>" + "<br>" + "This message was originally sent to " + hdnOrigAppr.Value + " who is out of the office." + "<br>" + "<br>" + "You are listed as the back-up approver for this EO." + "<br>" + "<br>" + "Please follow the link to see this EO." + "<br>" + "<br><a href='" + strLockURL + "'>" + strLockURL + "</a><br>" + "<br>" + "Note :Use this link to open the EO in Edit Mode." + "<br>" + "<br><a href='" + strURL + "'>" + strURL + "</a><br>" + "<br>" + "EO Number is " + ViewState["EONum"] + "<br>" + "EO Title is " + ViewState["EOTitle"] + "<br>" + "EO Location is " + ViewState["PlantName"] + "<br><br>" + "Thank you," + "<br>" + objSecurity.UserName;
                string IsMailSendex = string.Empty;
                IsMailSend = clsSendMail.fnSendMail(objSendMail);
            }
            catch (Exception ex)
            {
                string str = ex.Message;
            }

            try
            {
                mandataroinfoforEmail();
                string strURL = null;
                strURL = "http://" + ViewState["servername"] + "/Common/NewEO.aspx?From=ForEOLock&EOID=" + ViewState["EOID"];
                objSendMail.SendTo = origApprover + "@pg.com";
                objSendMail.MailSubject = "Please Review this EO Document-EO Title: " + ViewState["EOTitle"];
                objSendMail.SendFrom = strMailFrom + "@pg.com";
                objSendMail.MailBody = "Dear Original Approver," + "<br>" + "<br>" + "You were originally listed as an appover for this EO.In your absence,this has been sent to " + hdnApprover.Text + " for your back up." + "<br>" + "<br>" + "No further action is needed on your part." + "<br>" + "<br>" + "NOTE: Use this link to open in Read Only Mode." + "<br>" + "<br><a href='" + strURL + "'>" + strURL + "</a><br>" + "<br><br>" + "EO Number is " + ViewState["EONum"] + "<br>" + "EO Title is " + ViewState["EOTitle"] + "<br>" + "EO Location is " + ViewState["PlantName"] + "<br><br>" + "Thank you," + "<br>" + objSecurity.UserName;
                string IsMailSendex = string.Empty;
                IsMailSend = clsSendMail.fnSendMail(objSendMail);
            }
            catch (Exception ex)
            {
                string str = ex.Message;
            }

            string script1 = string.Empty;
            int intEoID = 0;
            intEoID = Convert.ToInt32(ViewState["EOID"]);
            string url = HttpContext.Current.Request.Url.AbsoluteUri;

            script1 = "window.location.href = '" + url + "';";
            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), script1, true);

            //Response.Redirect(url);

            //string UserName = objSecurity.UserName;
            //DataSet ds = null;
            //ds = new DataSet();
            //if (objEOBA.GET_EO_Preliminary(Convert.ToInt32(ViewState["EOID"]), ref ds))
            //{

            //    if (!(ds.Tables[14].Rows.Count == 0))
            //    {
            //        dgrConcurenceGrp.Visible = true;
            //        dgrConcurenceGrp.DataSource = ds.Tables[14];
            //        dgrConcurenceGrp.DataBind();

            //        int dlRowCount = 0;
            //        if (dgrConcurenceGrp.Items.Count == 0)
            //        {
            //        }
            //        else
            //        {
            //            dgrConcurenceGrp.Visible = true;
            //            for (dlRowCount = 0; dlRowCount <= dgrConcurenceGrp.Items.Count - 1; dlRowCount++)
            //            {
            //                if (object.ReferenceEquals(ds.Tables[14].Rows[dlRowCount]["Is_Responded"], System.DBNull.Value))
            //                {
            //                    dgrConcurenceGrp.Items[dlRowCount].FindControl("lnkDeclined").Visible = true;
            //                    dgrConcurenceGrp.Items[dlRowCount].FindControl("lnkApproval").Visible = true;
            //                }
            //                else if (ds.Tables[14].Rows[dlRowCount]["Is_Responded"].ToString() == "No Response")
            //                {
            //                    if (objSecurity.UserName.ToUpper() == txtCooriginator.Text.ToUpper() | objSecurity.UserName.ToUpper() == lblOriginator.Text.ToUpper())
            //                    {
            //                        if (objSecurity.UserName.ToUpper() == ds.Tables[14].Rows[dlRowCount]["Approver_Name"].ToString().ToUpper())
            //                        {
            //                            //    If UCase(objSecurity.UserName) = UCase("srinivasachary.n") Then
            //                            dgrConcurenceGrp.Items[dlRowCount].FindControl("lnkDeclined").Visible = true;
            //                            dgrConcurenceGrp.Items[dlRowCount].FindControl("lnkApproval").Visible = true;
            //                            dgrConcurenceGrp.Items[dlRowCount].FindControl("lnkBackUp").Visible = true;
            //                        }
            //                        else
            //                        {
            //                            dgrConcurenceGrp.Items[dlRowCount].FindControl("lnkBackUp").Visible = true;
            //                            dgrConcurenceGrp.Items[dlRowCount].FindControl("lnkDeclined").Visible = false;
            //                            dgrConcurenceGrp.Items[dlRowCount].FindControl("lnkApproval").Visible = false;
            //                        }
            //                    }
            //                    else if (objSecurity.UserName.ToUpper() == ds.Tables[14].Rows[dlRowCount]["Approver_Name"].ToString().ToUpper())
            //                    {
            //                        dgrConcurenceGrp.Items[dlRowCount].FindControl("lnkDeclined").Visible = true;
            //                        dgrConcurenceGrp.Items[dlRowCount].FindControl("lnkApproval").Visible = true;
            //                        dgrConcurenceGrp.Items[dlRowCount].FindControl("lnkBackUp").Visible = false;
            //                    }
            //                    else
            //                    {
            //                        dgrConcurenceGrp.Items[dlRowCount].FindControl("lnkDeclined").Visible = false;
            //                        dgrConcurenceGrp.Items[dlRowCount].FindControl("lnkApproval").Visible = false;
            //                        dgrConcurenceGrp.Items[dlRowCount].FindControl("lnkBackUp").Visible = false;
            //                    }

            //                }
            //                else if (ds.Tables[14].Rows[dlRowCount]["Is_Responded"].ToString() == "Approved")
            //                {
            //                    dgrConcurenceGrp.Items[dlRowCount].FindControl("lnkDeclined").Visible = false;
            //                    dgrConcurenceGrp.Items[dlRowCount].FindControl("lnkApproval").Visible = false;
            //                    dgrConcurenceGrp.Items[dlRowCount].FindControl("lnkBackUp").Visible = false;
            //                    //lnkDeclined.Visible = true
            //                }
            //                else if (ds.Tables[14].Rows[dlRowCount]["Is_Responded"].ToString() == "Declined")
            //                {
            //                    dgrConcurenceGrp.Items[dlRowCount].FindControl("lnkApproval").Visible = false;
            //                    dgrConcurenceGrp.Items[dlRowCount].FindControl("lnkDeclined").Visible = false;
            //                    dgrConcurenceGrp.Items[dlRowCount].FindControl("lnkBackUp").Visible = false;
            //                }
            //            }
            //        }
            //    }
            //}
        }

        protected void btnAppPreScreen_Click(object sender, EventArgs e)
        {
            //string origApprover = hdnPreOrigAppr.Value;
            //string BkUpApprover = hdnPreApprover.Text;
            //int conAppID = Convert.ToInt32(hdnPreAppID.Value);
            ////string BkUpApprover = hdnApprover.Text;

            //if (!string.IsNullOrEmpty(hdnPreApprover.Text))
            //{
            //    objEOBA.AddBackUpApprover(conAppID, hdnPreApprover.Text);
            //    //BusinessObject.MUREO.BusinessObject.SendConcurrence objAddSiteTestConcurrence = new BusinessObject.MUREO.BusinessObject.SendConcurrence();
            //    //objAddSiteTestConcurrence.AddBackUpApprover;
            //}
            //else
            //{
            //    return;
            //}

            //try
            //{
            //    int i = 0;

            //    i = origApprover.IndexOf(" ");
            //    origApprover = origApprover.Substring(i);
            //    origApprover = origApprover.Replace("-", ".");
            //    origApprover = origApprover.Replace(" ", "");
            //    i = BkUpApprover.IndexOf(" ");
            //    BkUpApprover = BkUpApprover.Substring(i);
            //    BkUpApprover = BkUpApprover.Replace("-", ".");
            //    BkUpApprover = BkUpApprover.Replace(" ", "");


            //}
            //catch (Exception ex)
            //{
            //    string str = ex.Message;
            //}

            //string strMailFrom = objSecurity.UserName;
            //int intPosOriginator = 0;
            //try
            //{
            //    if (!string.IsNullOrEmpty(strMailFrom.Trim()))
            //    {
            //        intPosOriginator = strMailFrom.IndexOf(" ");
            //        strMailFrom = strMailFrom.Substring(intPosOriginator);
            //        strMailFrom = strMailFrom.Replace("-", ".");
            //    }
            //}
            //catch (Exception ex)
            //{
            //}

            string url = HttpContext.Current.Request.Url.AbsoluteUri;
            string script1 = string.Empty;
            script1 = "window.location.href = '" + url + "';";
            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), script1, true);
        }
        protected void dgrConcurenceGrp_ItemDataBound(object sender, DataGridItemEventArgs e)
        {
            if (e.Item.ItemType == ListItemType.Item | e.Item.ItemType == ListItemType.AlternatingItem)
            {
                Label lblOrigAppr = (Label)e.Item.FindControl("lblapprName");
                Label lblConAppID = (Label)e.Item.FindControl("lblConAppID");
                LinkButton lnkBakUp = (LinkButton)e.Item.FindControl("lnkBackUp");
                lnkBakUp.Attributes.Add("onclick", "javascript:return AddBooksingUserForBakUp(this);");
                lnkBakUp.Attributes.Add("hdnApprClientID", hdnApprover.ClientID);
                //lnkBakUp.Attributes.Add("hdnConAppID", hdnConAppID.ClientID);
                //lnkBakUp.Attributes.Add("hdnOrigAppr", hdnOrigAppr.ClientID);
                lnkBakUp.Attributes.Add("lblConAppID", lblConAppID.Text);
                lnkBakUp.Attributes.Add("lblOrigAppr", lblOrigAppr.Text);
                lnkBakUp.Attributes.Add("btnApp", btnApp.ClientID);

                //Script = "<script>document.getElementById('t11').value = window.showModalDialog('ShowUser.aspx?from=CheckingUser');</script>"
                //Page.RegisterStartupScript("clientscript", Script)
            }
        }

        protected void lnkPreScreener_Click(object sender, EventArgs e)
        {
            DataSet dsPreGroup = new DataSet();
            int EoId = 0;
            if (objEOBA.getPreGroupUsers(Convert.ToInt32(ViewState["EOID"]), ref dsPreGroup))
            {

                if ((dsPreGroup != null))
                {
                    if (dsPreGroup.Tables[0].Rows.Count == 0)
                    {
                    }
                    else
                    {
                        dgrPrescrenners.Visible = true;
                        dgrPrescrenners.DataSource = dsPreGroup;
                        dgrPrescrenners.DataBind();
                        if (dgrPrescrenners.Items.Count == 0)
                        {
                        }
                        else
                        {
                            int dlRowCountp = 0;
                            dgrPrescrenners.Visible = true;
                            for (dlRowCountp = 0; dlRowCountp <= dgrPrescrenners.Items.Count - 1; dlRowCountp++)
                            {
                                if (object.ReferenceEquals(dsPreGroup.Tables[0].Rows[dlRowCountp]["Is_Responded"], System.DBNull.Value))
                                {
                                    dgrPrescrenners.Items[dlRowCountp].FindControl("lnkpreDeclined").Visible = true;
                                    dgrPrescrenners.Items[dlRowCountp].FindControl("lnkpreApproval").Visible = true;
                                }
                                else if (dsPreGroup.Tables[0].Rows[dlRowCountp]["Is_Responded"].ToString() == "No Response")
                                {
                                    if (objSecurity.UserName.ToUpper() == dsPreGroup.Tables[0].Rows[dlRowCountp]["Approver_Name"].ToString().ToUpper())
                                    {
                                        dgrPrescrenners.Items[dlRowCountp].FindControl("lnkpreDeclined").Visible = true;
                                        dgrPrescrenners.Items[dlRowCountp].FindControl("lnkpreApproval").Visible = true;
                                    }
                                    else
                                    {
                                        dgrPrescrenners.Items[dlRowCountp].FindControl("lnkpreDeclined").Visible = false;
                                        dgrPrescrenners.Items[dlRowCountp].FindControl("lnkpreApproval").Visible = false;
                                    }

                                }
                                else if (dsPreGroup.Tables[0].Rows[dlRowCountp]["Is_Responded"].ToString() == "Approved")
                                {
                                    dgrPrescrenners.Items[dlRowCountp].FindControl("lnkpreDeclined").Visible = false;
                                    dgrPrescrenners.Items[dlRowCountp].FindControl("lnkpreApproval").Visible = false;
                                    //lnkDeclined.Visible = true
                                }
                                else if (dsPreGroup.Tables[0].Rows[dlRowCountp]["Is_Responded"].ToString() == "Declined")
                                {
                                    dgrPrescrenners.Items[dlRowCountp].FindControl("lnkpreApproval").Visible = false;
                                    dgrPrescrenners.Items[dlRowCountp].FindControl("lnkpreDeclined").Visible = false;
                                }
                            }
                        }
                    }
                }
            }
        }

        protected void dgrPrescrenners_ItemCommand(object source, DataGridCommandEventArgs e)
        {
            if (e.CommandName == "Approval_Link")
            {
                //Label lblApprName = (Label)e.Item.FindControl("lnkPreapprName");
                //Label lblEoConAppID = (Label)e.Item.FindControl("lblPreConAppID");
                ////string script = null;
                ////script = "<script>preScreenConfirm('" + lblEoConAppID.Text + "','" + ViewState["EOID"] + "','Approved');</script> ";
                ////Page.RegisterStartupScript("db_error_message", script);

                //ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "preScreenConfirm('" + lblEoConAppID.Text + "','" + ViewState["EOID"] + "','Approved');", true);


                Label lblApprName = (Label)e.Item.FindControl("lnkPreapprName");
                Label lblEoConAppID = (Label)e.Item.FindControl("lblPreConAppID");
                Label lblConGrpID = (Label)e.Item.FindControl("lblPreConAppID");
                //string script = null;
                //script = "<script>concurenceConfirm('" + lblEoConAppID.Text + "','" + ViewState["EOID"] + "','Approved','" + lblConGrpID.Text + "','" + lblApprName.Text + "');</script> ";
                //Page.RegisterStartupScript("db_error_message", script);

                ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "preScreenConfirm('" + lblEoConAppID.Text + "','" + ViewState["EOID"] + "','Approved','" + lblConGrpID.Text + "','" + lblApprName.Text + "');", true);

            }
            if (e.CommandName == "Declined_Link")
            {
                Label lblApprName = (Label)e.Item.FindControl("lnkPreapprName");
                Label lblEoConAppID = (Label)e.Item.FindControl("lblPreConAppID");
                //string script = null;
                //script = "<script>preScreenConfirm('" + lblEoConAppID.Text + "','" + ViewState["EOID"] + "','Declined');</script> ";
                //Page.RegisterStartupScript("db_error_message", script);

                ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "preScreenConfirm('" + lblEoConAppID.Text + "','" + ViewState["EOID"] + "','Declined');", true);
            }
        }

        protected void lnkBOCOFYI_Click(object sender, EventArgs e)
        {
            txtCloseBudgetOwner.Text = "Approval Not Needed";
        }

        protected void lnkAdditionalApp4Final_Click1(object sender, EventArgs e)
        {
            //string script = null;
            string strFuncName = "Additional approver4";
            //lblFinalAdditionalApprover3.Text.Trim
            string strPlantID = drpPlant.SelectedItem.Value;
            if (strPlantID == "--Select a Plant--")
            {
                strPlantID = "0";
            }
            //script = "<script>window.open('ChangeApprover.aspx?FuncName=" + strFuncName + "&PlantID=" + strPlantID + "&From=AdditionalApprover3Final','Approvers','height=200,width=400');</script>";
            //Page.RegisterStartupScript("clientscript", script);

            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "window.open('ChangeApprover.aspx?FuncName=" + strFuncName + "&PlantID=" + strPlantID + "&From=AdditionalApprover4Final','Approvers','height=200,width=400');", true);
        }

        protected void lnkAdditionalApp3Final_Click1(object sender, EventArgs e)
        {
            //string script = null;
            string strFuncName = "Additional approver3";
            //lblFinalAdditionalApprover3.Text.Trim
            string strPlantID = drpPlant.SelectedItem.Value;
            if (strPlantID == "--Select a Plant--")
            {
                strPlantID = "0";
            }
            //script = "<script>window.open('ChangeApprover.aspx?FuncName=" + strFuncName + "&PlantID=" + strPlantID + "&From=AdditionalApprover3Final','Approvers','height=200,width=400');</script>";
            //Page.RegisterStartupScript("clientscript", script);

            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "window.open('ChangeApprover.aspx?FuncName=" + strFuncName + "&PlantID=" + strPlantID + "&From=AdditionalApprover3Final','Approvers','height=200,width=400');", true);
        }

        protected void lnkAdditionalApp2Final_Click1(object sender, EventArgs e)
        {
            //string script = null;
            string strFuncName = "Additional approver2";
            //lblFinalAdditionalApprover2.Text.Trim()
            string strPlantID = drpPlant.SelectedItem.Value;
            if (strPlantID == "--Select a Plant--")
            {
                strPlantID = "0";
            }
            //script = "<script>window.open('ChangeApprover.aspx?FuncName=" + strFuncName + "&PlantID=" + strPlantID + "&From=AdditionalApprover2Final','Approvers','height=200,width=400');</script>";
            //Page.RegisterStartupScript("clientscript", script);
            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "window.open('ChangeApprover.aspx?FuncName=" + strFuncName + "&PlantID=" + strPlantID + "&From=AdditionalApprover2Final','Approvers','height=200,width=400');", true);
        }

        protected void lnkAdditionalApp1Final_Click1(object sender, EventArgs e)
        {
            //string script = null;
            string strFuncName = "Additional approver1";
            //lblFinalAdditionalApprover1.Text.Trim()
            string strPlantID = drpPlant.SelectedItem.Value;
            if (strPlantID == "--Select a Plant--")
            {
                strPlantID = "0";
            }
            //script = "<script>window.open('ChangeApprover.aspx?FuncName=" + strFuncName + "&PlantID=" + strPlantID + "&From=AdditionalApprover1Final','Approvers','height=200,width=400');</script>";
            //Page.RegisterStartupScript("clientscript", script);

            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "window.open('ChangeApprover.aspx?FuncName=" + strFuncName + "&PlantID=" + strPlantID + "&From=AdditionalApprover1Final','Approvers','height=200,width=400');", true);
        }

        protected void btnConApp_Click(object sender, EventArgs e)
        {
            string url = HttpContext.Current.Request.Url.AbsoluteUri;
            string script1 = string.Empty;
            script1 = "window.location.href = '" + url + "';";
            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), script1, true);
        }

        protected void lnkStanOfficeFinalChangeApp_Click(object sender, EventArgs e)
        {
            //string script = null;
            string strFuncName = lblFinalAppgrpStandsOffice.Text.Trim();
            string strPlantID = drpPlant.SelectedItem.Value;
            if (strPlantID == "--Select a Plant--")
            {
                strPlantID = "0";
            }
            //script = "<script>window.open('ChangeApprover.aspx?FuncName=" + strFuncName + "&PlantID=" + strPlantID + "&From=StanOfficeFinal','Approvers','height=200,width=400');</script>";
            //Page.RegisterStartupScript("clientscript", script);

            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "window.open('ChangeApprover.aspx?FuncName=" + strFuncName + "&PlantID=" + strPlantID + "&From=StanOfficeFinal','Approvers','height=200,width=400');", true);
        }

        protected void lnkQAFinalChangeApp_Click(object sender, EventArgs e)
        {
            string strFuncName = lblFinalAppgrpQA.Text.Trim();
            string strPlantID = drpPlant.SelectedItem.Value;
            if (strPlantID == "--Select a Plant--")
            {
                strPlantID = "0";
            }
            //script = "<script>window.open('ChangeApprover.aspx?FuncName=" + strFuncName + "&PlantID=" + strPlantID + "&From=QAFinal','Approvers','height=200,width=400');</script>";
            //Page.RegisterStartupScript("clientscript", script);

            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "window.open('ChangeApprover.aspx?FuncName=" + strFuncName + "&PlantID=" + strPlantID + "&From=QAFinal','Approvers','height=200,width=400');", true);
        }

        protected void lnkCentralQAFinalChangeApp_Click(object sender, EventArgs e)
        {
            string strFuncName = lblFinalAppgrpCentralQA.Text.Trim();
            string strPlantID = drpPlant.SelectedItem.Value;
            if (strPlantID == "--Select a Plant--")
            {
                strPlantID = "0";
            }
            //script = "<script>window.open('ChangeApprover.aspx?FuncName=" + strFuncName + "&PlantID=" + strPlantID + "&From=FinalCentralQA','Approvers','height=200,width=400');</script>";
            //Page.RegisterStartupScript("clientscript", script);

            ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "window.open('ChangeApprover.aspx?FuncName=" + strFuncName + "&PlantID=" + strPlantID + "&From=FinalCentralQA','Approvers','height=200,width=400');", true);
        }

    }
}